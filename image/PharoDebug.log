THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Gofer class>>smalltalkhubUser:project:
14 October 2013 6:40:04.459 pm

VM: Mac OS - intel - 1084 - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20623]

Gofer class(Object)>>doesNotUnderstand: #smalltalkhubUser:project:
	Receiver: Gofer
	Arguments and temporary variables: 
		aMessage: 	smalltalkhubUser: 'jeanbaptistearnaud' project: 'Rasp'
		exception: 	MessageNotUnderstood: Gofer class>>smalltalkhubUser:project:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addPackage:->Gofer>>#addPackage: #allResolved->...etc...
		format: 	140
		layout: 	nil
		instanceVariables: 	#('references' 'repositories' 'errorBlock' 'packageCacheRepo...etc...
		organization: 	a ClassOrganizer
		subclasses: 	{MetacelloGofer}
		name: 	#Gofer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Gofer-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(717225984)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ (Gofer smalltalkhubUser: 'jeanbaptistearnaud' project: 'Ras...etc...
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(717225984)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
printString := [result printString]
				on: Error
				do: [...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(717225984)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
printString := [result printString]
				on: Error
				do: [...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(717225984)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			printString := [result printString]
						on: Error
						do: ['<error in printString: try ''Inspect it'' to debug>'].
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(222298112)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(176.0@132.0) corner: (616.0@299.0)
		owner: 	a SystemWindow(697827328)
		submorphs: 	an Array(a TransformMorph(670564352))
		fullBounds: 	(176@132) corner: (616@299)
		color: 	Color white
		extension: 	a MorphExtension (695992320) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(247463936)
		scroller: 	a TransformMorph(670564352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1039663104)
		textMorph: 	a TextMorphForEditView(717225984)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 89)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(717225984)
	Arguments and temporary variables: 
		editBlock: 	[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(670564352)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (749993984) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(Gofer smalltalkhubUser: ''jeanbaptistearnaud'' project: ''Ra...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(222298112)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(222298112)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(176.0@132.0) corner: (616.0@299.0)
		owner: 	a SystemWindow(697827328)
		submorphs: 	an Array(a TransformMorph(670564352))
		fullBounds: 	(176@132) corner: (616@299)
		color: 	Color white
		extension: 	a MorphExtension (695992320) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(247463936)
		scroller: 	a TransformMorph(670564352)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1039663104)
		textMorph: 	a TextMorphForEditView(717225984)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 89)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph printIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(222298112)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(222298112)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	242
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(222298112)
		secondArg: 	a PluggableTextMorph(222298112)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	242
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(222298112)
		secondArg: 	a PluggableTextMorph(222298112)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	242
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [:morph | morph printIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(222298112)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(222298112)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#printIt on Cmd + P do [:morph | morph printIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#sendersOfIt on Cmd + N do [:morph | morph sendersOfIt]
 #implementorsOfIt on Cmd + ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	10
		each: 	#printIt on Cmd + P do [:morph | morph printIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#sendersOfIt on Cmd + N do [:morph | morph sendersOfIt]
 nil #i...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(222298112)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(222298112)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a PluggableTextMorph(222298112)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorph) aKMCategoryTarge...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorph) aKMCategor...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a PluggableTextMorph(222298112)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(222298112)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(717225984)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(717225984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(670564352)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (749993984) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(Gofer smalltalkhubUser: ''jeanbaptistearnaud'' project: ''Ra...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(222298112)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(717225984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(670564352)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (749993984) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(Gofer smalltalkhubUser: ''jeanbaptistearnaud'' project: ''Ra...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(222298112)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(717225984)
	Receiver's instance variables: 
		timeStamp: 	82162
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(372@9.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(717225984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(670564352)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (749993984) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(Gofer smalltalkhubUser: ''jeanbaptistearnaud'' project: ''Ra...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(222298112)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(717225984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(670564352)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (749993984) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(Gofer smalltalkhubUser: ''jeanbaptistearnaud'' project: ''Ra...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(222298112)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(717225984)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(552@142) corner: (568@158)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(552@142) corner: (568@158)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(717225984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(552@142) mouseOver nil nil]
		targetOffset: 	(376.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 78612 552 142 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(697827328) a Nauti...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(697827328) a Nauti...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(717225984)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(552@142) corner: (568@158)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(552@142) corner: (568@158)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(717225984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(552@142) mouseOver nil nil]
		targetOffset: 	(376.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 78612 552 142 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(717225984)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(552@142) corner: (568@158)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(552@142) corner: (568@158)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(717225984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(552@142) mouseOver nil nil]
		targetOffset: 	(376.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 78612 552 142 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(552@142) corner: (568@158)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(552@142) corner: (568@158)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(717225984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(552@142) mouseOver nil nil]
		targetOffset: 	(376.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 78612 552 142 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Gofer class(Object)>>doesNotUnderstand: #smalltalkhubUser:project:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			printString := [result printString]
						on: Error
						do: ['<error in printString: try ''Inspect it'' to debug>'].
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[:morph | morph printIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Could not access http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/: ZnHttpUnsuccessful: 404 Not Found
14 October 2013 6:40:18.82 pm

VM: Mac OS - intel - 1084 - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20623]

MCSmalltalkhubRepository(Object)>>error:
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/)
	Arguments and temporary variables: 
		aString: 	'Could not access http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/m...etc...
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		cacheFileNames: 	true
		location: 	nil
		user: 	''
		password: 	''
		readerCache: 	nil
		owner: 	'jeanbaptistearnaud'
		project: 	'Rasp'


[:exception | self error: 'Could not access ' , self location , ': ' , exception printString] in MCSmalltalkhubRepository>>loadAllFileNames
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/)
	Arguments and temporary variables: 
		client: 	a ZnClient
		exception: 	ZnHttpUnsuccessful: 404 Not Found
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		cacheFileNames: 	true
		location: 	nil
		user: 	''
		password: 	''
		readerCache: 	nil
		owner: 	'jeanbaptistearnaud'
		project: 	'Rasp'


BlockClosure>>cull:
	Receiver: [:exception | self error: 'Could not access ' , self location , ': ' , exception printStri...etc...
	Arguments and temporary variables: 
		anArg: 	ZnHttpUnsuccessful: 404 Not Found
	Receiver's instance variables: 
		outerContext: 	MCSmalltalkhubRepository>>loadAllFileNames
		startpc: 	94
		numArgs: 	1


[self exceptionHandlerBlock cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ZnHttpUnsuccessful: 404 Not Found
		val: 	nil
	Receiver's instance variables: 
		sender: 	[[self executeWithRetriesRemaining: self numberOfRetries]
		on: Error
	...etc...
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[self executeWithRetriesRemaining: self numberOfRetries]


BlockClosure>>ensure:
	Receiver: [self exceptionHandlerBlock cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self exceptionHandlerIsActive: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	99
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ZnHttpUnsuccessful: 404 Not Found
		val: 	nil
	Receiver's instance variables: 
		sender: 	[[self executeWithRetriesRemaining: self numberOfRetries]
		on: Error
	...etc...
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[self executeWithRetriesRemaining: self numberOfRetries]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ZnHttpUnsuccessful: 404 Not Found
		val: 	nil
	Receiver's instance variables: 
		sender: 	ZnClient>>executeWithRetriesRemaining:
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[self executeWithRedirectsRemaining: self maxNumberOfRedirects]


ZnHttpUnsuccessful(Exception)>>signal
	Receiver: ZnHttpUnsuccessful: 404 Not Found
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'404 Not Found'
		tag: 	nil
		signaler: 	a ZnClient
		signalContext: 	ZnHttpUnsuccessful(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		response: 	a ZnResponse(404 Not Found text/plain )


ZnClient>>handleResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		redirectCount: 	3
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[self executeWithRedirectsRemaining: self maxNumberOfRedirects] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		retryCount: 	2
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


BlockClosure>>on:do:
	Receiver: [self executeWithRedirectsRemaining: self maxNumberOfRedirects]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[:exception | retryCount > 0
		ifTrue: [self handleRetry: except...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	69
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		retryCount: 	2
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[self executeWithRetriesRemaining: self numberOfRetries] in [[self executeWithRetriesRemaining: self numberOfRetries]
		on: Error
		do: self ifFailBlock] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


BlockClosure>>on:do:
	Receiver: [self executeWithRetriesRemaining: self numberOfRetries]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:exception | self error: 'Could not access ' , self location , ...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	[[self executeWithRetriesRemaining: self numberOfRetries]
		on: E...etc...
		startpc: 	46
		numArgs: 	0


[[self executeWithRetriesRemaining: self numberOfRetries]
		on: Error
		do: self ifFailBlock] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[^ block value] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		block: 	[[self executeWithRetriesRemaining: self numberOfRetries]
		on: Error
		...etc...
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[p psValueAt: index put: anObject.
	aBlock value] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		anObject: 	30
		aBlock: 	[^ block value]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	1


BlockClosure>>ensure:
	Receiver: [p psValueAt: index put: anObject.
	aBlock value]
	Arguments and temporary variables: 
		aBlock: 	[p psValueAt: index put: oldValue]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		anObject: 	30
		aBlock: 	[^ block value]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	1


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		anObject: 	30
		aBlock: 	[^ block value]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	972029952
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		block: 	[[self executeWithRetriesRemaining: self numberOfRetries]
		on: Error
		...etc...
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[result := self executeWithTimeout] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		initialMilliseconds: 	96518
		result: 	nil
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[^ block value] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		block: 	[result := self executeWithTimeout]
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[p psValueAt: index put: anObject.
	aBlock value] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		anObject: 	true
		aBlock: 	[^ block value]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


BlockClosure>>ensure:
	Receiver: [p psValueAt: index put: anObject.
	aBlock value]
	Arguments and temporary variables: 
		aBlock: 	[p psValueAt: index put: oldValue]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		anObject: 	true
		aBlock: 	[^ block value]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		anObject: 	true
		aBlock: 	[^ block value]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		block: 	[result := self executeWithTimeout]
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		initialMilliseconds: 	96518
		result: 	nil
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>get
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /mc/jeanbaptistearnaud/Rasp/main/?format=raw)
		response: 	a ZnResponse(404 Not Found text/plain )
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


MCSmalltalkhubRepository>>loadAllFileNames
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/)
	Arguments and temporary variables: 
		client: 	a ZnClient
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		cacheFileNames: 	true
		location: 	nil
		user: 	''
		password: 	''
		readerCache: 	nil
		owner: 	'jeanbaptistearnaud'
		project: 	'Rasp'


MCSmalltalkhubRepository(MCFileBasedRepository)>>allFileNames
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		cacheFileNames: 	true
		location: 	nil
		user: 	''
		password: 	''
		readerCache: 	nil
		owner: 	'jeanbaptistearnaud'
		project: 	'Rasp'


MCSmalltalkhubRepository(MCFileBasedRepository)>>readableFileNames
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/)
	Arguments and temporary variables: 
		all: 	nil
		cached: 	nil
		new: 	nil
		emptyFilenamelength: 	9
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		cacheFileNames: 	true
		location: 	nil
		user: 	''
		password: 	''
		readerCache: 	nil
		owner: 	'jeanbaptistearnaud'
		project: 	'Rasp'


MCSmalltalkhubRepository(MCFileBasedRepository)>>allVersionNames
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		cacheFileNames: 	true
		location: 	nil
		user: 	''
		password: 	''
		readerCache: 	nil
		owner: 	'jeanbaptistearnaud'
		project: 	'Rasp'


[self allVersionNames] in MCSmalltalkhubRepository(MCFileBasedRepository)>>goferReferences
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/)
	Arguments and temporary variables: 
		versionNames: 	nil
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		cacheFileNames: 	true
		location: 	nil
		user: 	''
		password: 	''
		readerCache: 	nil
		owner: 	'jeanbaptistearnaud'
		project: 	'Rasp'


BlockClosure>>on:do:
	Receiver: [self allVersionNames]
	Arguments and temporary variables: 
		exception: 	MCRepositoryError
		handlerAction: 	[:error | ^ GoferRepositoryError signal: error messageText repos...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	MCSmalltalkhubRepository(MCFileBasedRepository)>>goferReferences
		startpc: 	53
		numArgs: 	0


MCSmalltalkhubRepository(MCFileBasedRepository)>>goferReferences
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/jeanbaptistearnaud/Rasp/main/)
	Arguments and temporary variables: 
		versionNames: 	nil
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		cacheFileNames: 	true
		location: 	nil
		user: 	''
		password: 	''
		readerCache: 	nil
		owner: 	'jeanbaptistearnaud'
		project: 	'Rasp'



--- The full stack ---
MCSmalltalkhubRepository(Object)>>error:
[:exception | self error: 'Could not access ' , self location , ': ' , exception printString] in MCSmalltalkhubRepository>>loadAllFileNames
BlockClosure>>cull:
[self exceptionHandlerBlock cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ZnHttpUnsuccessful(Exception)>>signal
ZnClient>>handleResponse
ZnClient>>executeWithRedirectsRemaining:
[self executeWithRedirectsRemaining: self maxNumberOfRedirects] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[self executeWithRetriesRemaining: self numberOfRetries] in [[self executeWithRetriesRemaining: self numberOfRetries]
		on: Error
		do: self ifFailBlock] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[[self executeWithRetriesRemaining: self numberOfRetries]
		on: Error
		do: self ifFailBlock] in ZnClient>>executeWithTimeout
[^ block value] in ZnClient>>withTimeoutDo:
[p psValueAt: index put: anObject.
	aBlock value] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[result := self executeWithTimeout] in ZnClient>>execute
[^ block value] in ZnClient>>withProgressDo:
[p psValueAt: index put: anObject.
	aBlock value] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>get
MCSmalltalkhubRepository>>loadAllFileNames
MCSmalltalkhubRepository(MCFileBasedRepository)>>allFileNames
MCSmalltalkhubRepository(MCFileBasedRepository)>>readableFileNames
MCSmalltalkhubRepository(MCFileBasedRepository)>>allVersionNames
[self allVersionNames] in MCSmalltalkhubRepository(MCFileBasedRepository)>>goferReferences
BlockClosure>>on:do:
MCSmalltalkhubRepository(MCFileBasedRepository)>>goferReferences
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aRepository goferReferences asSortedCollection asArray] in Gofer>>basicReferencesIn:
BlockClosure>>on:do:
Gofer>>basicReferencesIn:
[self basicReferencesIn: aRepository] in Gofer>>allResolvedIn:
[self at: key put: aBlock value] in Dictionary>>at:ifAbsentPut:
Dictionary>>at:ifAbsent:
Dictionary>>at:ifAbsentPut:
Gofer>>allResolvedIn:
[:repository | resolved
		addAll: (self allResolvedIn: repository)] in Gofer>>allResolved
Array(SequenceableCollection)>>do:
Gofer>>allResolved
GoferPackageReference(GoferReference)>>resolveAllWith:
GoferPackageReference(GoferReference)>>resolveWith:
[:each | each resolveWith: self] in Gofer>>resolved
Array(SequenceableCollection)>>collect:
Gofer>>resolved
GoferLoad>>initializeOn:
GoferLoad class(GoferOperation class)>>on:
[:repos | repos notEmpty
		ifTrue: [repos first
				cacheAllFileNamesDuring: [recursion value: repos allButFirst]]
		ifFalse: [operation := anOperationClass on: self copy.
			aBlock isNil
				ifFalse: [aBlock value: operation].
			operation execute]] in Gofer>>execute:do:
[recursion value: repos allButFirst] in [:repos | repos notEmpty
		ifTrue: [repos first
				cacheAllFileNamesDuring: [recursion value: repos allButFirst]]
		ifFalse: [operation := anOperationClass on: self copy.
			aBlock isNil
				ifFalse: [aBlock value: operation].
			operation execute]] in Gofer>>execute:do:
BlockClosure>>ensure:
MCSmalltalkhubRepository(MCFileBasedRepository)>>cacheAllFileNamesDuring:
[:repos | repos notEmpty
		ifTrue: [repos first
				cacheAllFileNamesDuring: [recursion value: repos allButFirst]]
		ifFalse: [operation := anOperationClass on: self copy.
			aBlock isNil
				ifFalse: [aBlock value: operation].
			operation execute]] in Gofer>>execute:do:
Gofer>>execute:do:
Gofer>>execute:
Gofer>>load
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			printString := [result printString]
						on: Error
						do: ['<error in printString: try ''Inspect it'' to debug>'].
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[:morph | morph printIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

