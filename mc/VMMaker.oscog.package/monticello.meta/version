(name 'VMMaker.oscog-EstebanLorenzano.2024' message 'rename temp var to avoid conflict with global while generating sources. ' id '7870434f-e14e-4873-b8b9-5f639ef5d66d' date '5 December 2016' time '9:57:01.004046 am' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.2023' message 'RegisterAllocatingCogit:Fix a slip in reconcileForwardsWith:; if a constant is merged with something other than the same constant then the resulting stack entry cannot be constant.  This fixes the bug compiling the or: in UnixFileDirectory>>#setPathName:.Refactor mergeWithFixupIfRequired: & mergeCurrentSimStackWith: to pass fixup so that mergeCurrentSimStackWith: can update isReceiverResultRegSelf correctly.  This fixes the bug accessing array for the second send of #size in WeakSet>>scanFor:.' id 'ee0a00bb-160d-4efe-a960-f81681c4012a' date '3 December 2016' time '10:48:57.324652 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2022' message 'RegisterAllocatingCogit:Abstract away voiding the optStatus into voidReceiverOptStatus so that RegisterAllocatingCogit can override to clear the liveRegister on simSelf.Add voidReceiverResultRegContainsSelf that scans the stack for occurrences of simSelf in a register on stack and to either flush (StackToRegisterMappingCogit) or void liveRegister (RegisterAllocatingCogit).  Except that I suspect RegisterAllocatingCogit may have to flush in certain curcumstances too.Add asserts to check that optStatus and simSelf are in sync w.r.t. ReceiverResultReg.Fix a bad slip in existsInstVarRefBeforeSendOrReturn.Nuke an obsolete NewspeakV3 bytecode.Very close to working properly.  System no longer crashes in JIT or assert failure but runs, albeit looping on an MNU.' id '0f8040b3-62e2-4f22-af99-5ba2cfb4974f' date '2 December 2016' time '5:01:48.877113 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2021' message 'RegisterAllocatingCogit:Rename moveSimStackConstantsToRegisters to moveVolatileSimStackEntriesToRegisters sicne we also have to capture inst var refs (anything not relative to FPReg).Fix slip in reconcileForwardsWith:.ensureNonMergeFixupAt: shoudl only set the mergeSimStack of the fixup if it doesn''t yet have one.When merging we have tio make sure that simSelf''s liveRegister is up-to-date, not just optStatus.  Oh how nice it would be to only have simSelf and be able to nuke optStatus. [the issue is having two defs for a simStackEntry in StackToRegisterMappingCogit, one with liveRegister, needed for simSelf, one not, for normal entries].Get fixups to remember the bytecode pc that set them, and print the bcpc(s).  Add printing simSelf to traceSimStack.Execution now gets to Process>>popTo: during SmalltalkImage>installLowSpaceWatcher, 187 methods compiled and executed.' id '79a1fe01-f27f-4839-b390-3b952042f672' date '2 December 2016' time '12:52:57.838901 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2020' message 'RegisterAllocatingCogit:Give sensible names to the three reconciliation methods in CogRegisterAllocatingSimStackEntry.  Be sure to use registerOrNone, not just liveRegister.Refactor mergeCurrentSimStackWith: for clarity.Have restoreSimStackAtMergePoint: maintain optStatus.Execution gets as far as a stack imbalance in a send from Dictionary>noCheckNoGrowFillFrom: during EventSensor startUp:.' id 'f53bedb4-3a2d-42ed-bf04-56ed996e7aa0' date '2 December 2016' time '8:59:35.572375 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2019' message 'Improve debugging of stack imbalances on primitive invocation by restoring the stack pointer after calling failUnbalancedPrimitive.' id '364ea882-9181-4ed0-8495-3044fac4318b' date '1 December 2016' time '12:20:35.048344 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2018' message 'RegisterAllocatingCogit:Reimplement mergeCurrentSimStackWith: to use a better algorithm.  Implement all but the register sort/swap code.Esteban, amen!' id '2ca1b9f3-8f95-4dc0-9111-acfd6f7fe95f' date '1 December 2016' time '10:47:33.781504 am' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.2017' message 'my fix didn''t work. roolling back and adding a check to fix the loading problem. I think Eliot will want to fix correctly this...2017. We are in the future now. I would like to quote some historical event like "for the first time in history, humanity joins to stop greed, nonsense and stupidity, and thanks to that world hunger is something of past, wars are over and global warming has stop. We will survive.". It doesn''t feels like we are going that way 9nont even for 3017), but you never know... dreaming is a powerful force.' id 'c281aa9a-56c7-44fb-8887-032c11bbcc11' date '1 December 2016' time '3:28:51.876249 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-cb.2016' message 'Added a setting so that subclasses of cogit can choose to refuse early openPIC promotion.This leads to much, much, *much* better type information on PICs in the Sista VM. No changes in the normal VM.' id '00547c08-bf88-4160-9dd8-baf1f367a96e' date '1 December 2016' time '10:33:24.307114 am' author 'cb' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.2015' message 'move initializationOptions to initializeMiscConstants ' id '7319d8a3-1168-489a-9013-b9e166bec9d1' date '1 December 2016' time '9:41:00.444693 am' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.2014' message 'RegisterAllocatingCogit:Avoid ssStorePop:toPreferredReg: stomping on already-allocated registers.' id '39577b51-2ad7-4e7c-9a31-06dab999241b' date '30 November 2016' time '12:05:15.199066 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2013' message 'RegisterAllocatingCogit:Fix slips in allocateRegForStackEntryAt:notConflictingWith: and CogRegisterAllocatingSimStackEntry>>registerMaskOrNone.Improve Spur genGetClassObjectOf:into:scratchReg:instRegIsReceiver: to avoid reg-reg copies.Fix reconcileRegisterStateForJoinAfterSpecialSelectorSendwhich must traverse entire stack.  Hence extend reconcilePoppingWith: to deal with spilled target entries.' id '03cb6548-31c9-4a99-9fc6-38fc19a63a24' date '30 November 2016' time '11:36:10.308574 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2012' message 'RegisterAllocatingCogit:Implement a register allocating version of inlined #==.Use simStackAt:at:.Now that fixups are being counted correctlty, stop overcounting.' id '7a19d382-772d-494d-a55b-6325747b36a7' date '30 November 2016' time '9:04:29.941011 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2011' message 'RegisterAllocatingCogit:Fix captureUnspilledSpillsForSpecialSelectorSend: to update liveRegs and nuke a bogus assert.' id 'b27de175-8a0d-4fd3-986a-2ac3d678a7bf' date '29 November 2016' time '1:01:17.478514 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2010' message 'RegisterAllocatingCogit:Count fixups for backward branches.Implement saving the stack at a backward branch and reloading register state before taking the backward jump.  Reverse the sense of  reconcileWith: and rename it to reconcilePoppingWith: to match the backwards jump reconciliation code.Extend CogRASSBytecodeFixup with the state of the optStatus for self and fix reInitialize.' id '5ead15e2-0452-433f-83d9-c14d1804fe5a' date '29 November 2016' time '12:45:23.316587 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2009' message 'RegisterAllocatingCogit:Fix liveRegisters to scan entire stack, not just from spillBase.Add intelligence to genStorePop:TemporaryVariable: to avoid writing through a register.' id 'c9c58171-fdba-44a6-82ad-292292746622' date '29 November 2016' time '8:55:28.07135 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2008' message 'Merge with VMMaker.oscog-nice.2003.  Use SysV ifTrue: ... not cppIf:ifTrue:... as we are now going to generate two Cogits for X64.  Refactor the CogInLineLiteralsX64Compiler/CogOutOfLineLiteralsX64Compiler overrides for RISCTempReg vs ExtraReg6 to avoid testing SysV.RegisterAllocatingCogit:Change StackToRegisterMappingCogit>>allocateRegForStackEntryAt:notConflictingWith: et al to use registerOrNone to allow RegisterAllocatingCogit to allocate the live reg since it overrides registerOrNone.  Add registerMaskOrNone to complement.Refactor maybeCountFixup to maybeCountFixup: and count extra fixups for jumps following inlined special selectors.Avoid assigning temp vars to ReceiverResultReg et al by introducing registerMaskUndesirableForTempVars.Add special selector comparison and special selector class handling.  Improve the code in CogObjectRepresentationForSpur>>genGetClassObjectOf:into:scratchReg:instRegIsReceiver: to avoid spilling instReg.Have ensureNonMergeFixupAt: set the merge sim stack for the fixup.Avoid allocating a liveRegister for SSRegister types in popToReg: and storeToReg: by not setting liveRegister and copyLiveRegisterToCopiesOf: if type is SSRegister.Execution currently blows up in the block in send:toClassesNamedIn:with: trying to start-up Delay (a regression from earlier today).' id 'dbe9f47c-6639-4cbd-8ad6-733af9601f76' date '28 November 2016' time '6:39:13.224577 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2007' message 'RegisterAllocatingCogit:Better naming of observeLiveRegisterIn: => copyLiveRegisterToCopiesOf:.' id 'f3e0c6b2-48c4-48aa-91ad-929070431f5d' date '26 November 2016' time '11:11:40.930373 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2006' message 'RegisterAllocatingCogit:methodOrBlockNumTemps must not be reset to the actual value ignoring the initial pushNils.  Doing so wrecks spilling.scanMethod must add an extra fixup for conditional branches since, if preceded by a special selector send, there may be two fixups created, one for each target, the target of the jump and the fall-through after the non-inlined send (see e.g. the two ensureFixupAt: sends in genBinaryInlineComparison:opFalse:destReg:).This gets execution as far as the send of #<= in the loop in Interval>>#collect: which ends up passing nil as the second argument.  It maybe time to tackle inlining of special selector comparisons.' id 'cad39d34-1c14-416f-aeae-5b9fc776a3fc' date '25 November 2016' time '7:19:10.023637 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2005' message 'RegisterAllocatingCogit & SistaCogitRefactor StackToRegisterMappingCogit>>compileBlockBodies to eliminate SistaCogit>>compileBlockBodies (now stale because it was missing the literalsManager save/resetForBlockCompile sends)).Refactor simStack printing to allow CogRASSBytecodeFixup>>printStateOn: to print its simStack on an arbitrary stream.The only change in semantics:I *think* RegisterAllocatingCogit>>ensureFixupAt: needs to set the mergeSimStack of a fixup if the fixup needsFixup and doesn''t have a mergeSimStack.' id '27cfed36-5d69-48ea-87c2-ed2b87686075' date '25 November 2016' time '6:03:49.367116 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2004' message 'RegisterAllocatingCogit:Compile readStream>>#next correctly, i.e. compile the inlined + in "^collection at: (position := position + 1)" in the context of colleciton on the stack.  Also keep receiverResultRegLive.Alas these changes cause IdentityDictionary>scanFor: to blow up again, sending \\ to the key.' id '2611a673-7341-4feb-b642-20dd06d9ae87' date '25 November 2016' time '12:27:17.318388 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.2003' message 'Made #~~ a special selector instead of #blockCopy:.If the bytecode compiler compiles #~~ using the special selector bytecode, then the pointer comparison with #~~ is inlined as it is with #==.This leads #~~ to have the same performance as #==. It also means #~~ is not a primitive call, as #==. I believe this is important for system consistency. To integrate that in the Squeak / Pharo image, one needs to add #~~ instead of #blockCopy: in the special selector array and add Object>>#~~ as primitive 169 if not already the case.I compiled both Sista and non Sista VMs with Spur and ensure everything is correct. I "guess" the V3 and Newspeak VMs are correct too.' id '9951550e-3f78-457d-a373-2485d63d5abd' date '24 November 2016' time '1:44:37.073343 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.2002' message 'RegisterAllocatingCogitGet the 64-bit system as far as the second \\ send in IdentityDictionary>>#scanFor:.Set a simStackEntry''s liveRegister in popToReg: and storeToReg: in addition to in genStorePop:TemporaryVariable:.  When setting liveRegister: in this way, look through the simStack for any and all copies of the entry having its liveRegister set, and set their liveRegister to match.When ensuring that ensureReceiverResultRegContainsSelf, nuke any liveRegister in non-self stack entries that is equal ReceiverResultReg. Make inlined genSpecialSelectorArithmetic keep register values live around the uncommon send by cloning the simStack after generating inline code and reconciling the register state after the send.liveRegister must be taken into account when asking for a simStackEntry''s registerMask to arrange that flushing/spilling occurs.Print the optStatus as well as the simStack when tracing the simStack.' id '326c4e54-4578-420d-948e-e5e58a1fa993' date '23 November 2016' time '5:45:22.404678 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.2001' message 'RegisterAllocatingCogitGet the 64-bit system as far as the isInMemory send in SmalltalkImage>>#send:toClassesNamedIn:with:.Main change is to not merge following a return (there is no mergeSimStack at a fixup).Fix several asserts checking the spill state of the stack.Reorder the compilationTrace flags and add tracing of compilation in cog:selector: and cogFullBlockMethod:numCopied:.Improve printing of constasnts in the sim stack entry classes.' id '2c3cb42e-09ea-444f-b1b4-84bfa0cdd9d9' date '21 November 2016' time '5:22:12.864973 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.2000' message 'Now that the surface functions take int pointer, we''d better pass int pointer rather than sqInt pointer. Hence declare some BitBlt variable appropriately.Rather than coercing to unsigned, just declare unsigned in absoluteSquared8Dot24:Note that this could be simply replaced by an unsigned 64bit multiplication then shift nowadays, if someone is willing to measure time spent.Do to signed32BitValueOf: what has been done to signed32BitIntegerFor:only invoke noInlineSigned32BitValueGutsOf: for the case of LargeInteger deciphering.When the oop is a 31bits SmallInteger, don''t bother entering such function - just inline' id '7fa7f632-9ec2-4121-a764-e6ca3280a679' date '21 November 2016' time '10:33:51.689082 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1999' message 'Fix in-image compilation regression due to VMMaker.oscog-eem.1996' id '942568a1-1696-4d2a-afe7-2ad4f5a699a5' date '20 November 2016' time '5:18:04.316584 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1998' message 'Oops; there are two places the zero divide can bite.' id '018f25bb-f837-4268-8b96-ce86d1e3f237' date '20 November 2016' time '4:23:06.154699 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1997' message 'The new FilePlugin code must protect against zero-divide when given empty arrays.' id '6d4a1cc8-5117-438d-b6ab-6ef315dd0210' date '20 November 2016' time '4:20:26.447594 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1996' message 'Simulation:Add support for 64-bit simulation using DoubleWordArray as the memroy class.Rewrite the byte and short accessors to use arithmetic rather than caseOf:.Move write-protect and convertToArray memory access into the Objectmemory classes out of StackInterpreter.Provide a cCoerceSimple:to: to allow the LargeIntegersPlugin to simulate.Provide memory tests for short and byte access in the object memory simulators.' id '5494face-981d-4da2-bb0a-d10df419ec65' date '19 November 2016' time '10:00:32.110085 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1995' message 'Fix the FilePlugin for Spur 32-bit and 16-bit integer arrays.' id '39c0e7ea-03ef-453e-b7d1-5570ab78dede' date '19 November 2016' time '9:55:59.802779 am' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1994' message 'Fix an unused value warning in Balloon/BezierI think that the intention was to use 2nd derivative to decide direction when 1st derivative is null.Fix a typo in tempolines comment.Fix primitiveBeCursor - generated code could dereference a null pointer offsetObj due to misplaced block end.Also a null pointer cursorObj could be dereferenced if 2 arguments or more were passed to the primitive.' id 'f00dbc12-d05a-4c73-b825-6281ee7ec54f' date '18 November 2016' time '4:21:24.158309 am' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1993' message 'Fix primitiveIntegerAt in Spur 64-bits by always using signed32BitIntegerFor: to obtain the result object.  Refactor signed32BitIntegerFor: into an inlineable part that cvhecks for isIntegerValue: and a non-inlined part (noInlineSigned32BitIntegerGutsFor:) that constructs a LargeInteger object.Fix a simulation inlitialization slip.' id 'b98dd9d4-1e93-4aa8-bd46-5ac460a44262' date '17 November 2016' time '11:46:08.385148 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1992' message 'Fix integerValueOf: & integerObjectOf: in plugins for 64-bits.  Since the CCodeGenerator generates the shifts directly it must use a #define for the number of tag bits to shift by since in 64-bit Spur we use three tag bits, not one.Simulator:Revert changes to SpurNBitMemoryManager>>integerValueOf: which use bitShift: for simulation.Fix coercions for usqIntptr_t (*)(void).' id '6feb3008-c996-4d53-b572-55c31a5b58dc' date '14 November 2016' time '3:20:23.186309 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1991' message 'Fix accesss to DoubleByte integer arrays: fetchShort16:ofObject: is signed and we want an unsigned short.Note: most memory access should be unsigned and extension to sqInt is also unecessary: we have improving slang type inference now. Non counting the divergence with VM simulator which provides mostly unsigned memory access! But for now, do the minimal change that could possibly work, not the right one.' id '370028ef-d566-4f45-be6a-39fb21bde0a4' date '14 November 2016' time '11:38:31.514998 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1990' message 'Fix passing 64bits args thru LLP64 FFI.' id 'c6fc0dfe-e6b3-4eff-bd4c-ed591f81125e' date '13 November 2016' time '4:43:50.332281 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1989' message 'Fix prototype of various SurfaceFn again to match those of platforms/Corss/plugins/SurfacePlugin/SurfacePlugin.hThese should be matching the prototypes:fn_getSurfaceFormatfn_lockSurfacefn_unlockSurfacefn_showSurface' id '7e63fa13-3564-4b1b-8c0b-31378a87bc74' date '13 November 2016' time '1:53:23.184058 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1988' message 'Fix inlining problem of shortPrintContext: - a side effect was eliminated on stack flavour.Fix prototype of unlockSurfaceFn after recent platforms source file revision.Also, the surfceID returned by primitiveCreateManualSurface is an int, so fits in signed32BitIntegerFor:.Avoid passing a sqInt to Serial and Midi external functions when they expect a pointer.Explicit a few conversions 64->32 bits to avoid compiler warnings in LargeIntegers.' id '01ed55f2-205d-441f-b4f6-4a8607b3327d' date '13 November 2016' time '10:26:14.021969 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1987' message 'Fix two forgotten C Compiler warnings about taking abs value of an unsigned integer.Of course, we want to take absolute value of signed difference.' id '78e735bd-f947-48ff-b768-22887642e0ef' date '9 November 2016' time '11:35:44.410941 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1986' message 'Like already the case for the #positive32BitIntegerFor: and #signed32BitIntegerFor: , #positive32BitValueOf: and #signed32BitValueOf: can be simplified with separate 32/64 bits branches.Indeed, we know that any 32bits signed/unsigned int will fit into a SmallInteger when hasSixtyFourBitImmediates,.No need to perform any superfluous testing...The previous implementation produces a lot of dead code in 64bits VM and prevents inlining unecessarily.' id 'e06214fe-0e06-4c33-9132-03ffe9351cbb' date '8 November 2016' time '9:59:38.206628 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1985' message 'Fix generation of signed32BitIntegerFor: for 64 bits VM.signed32BitIntegerFor: must work for any 32bit int, but current version will overflow if this int is large, for example -16r80000000.Indeed, not only constants must be extended to sqInt, but any expression whose type is shorter.Also, use unsigned usqInt, rather than signed sqInt, because it''s well defined behavior (sign extension will occur during the conversion).' id '7c12723c-9f09-4d4e-832b-f01fd783899b' date '8 November 2016' time '12:43:20.98015 am' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1984' message 'Minor correction to VMMaker.oscog-nice.1977 to note that Sista counters are always 32-bits, having two 16-bit halves for the reached and taken counts.' id '3e33772d-bcef-4224-8a19-5dad15afb8c6' date '7 November 2016' time '8:34:15.049799 am' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1983' message 'X64 Win64 FFI requires setsp/getspIt also uses PLATFORM_API_USES_CALLEE_POPS_CONVENTION' id '49213785-7d35-4e20-837b-ecc45a85000f' date '6 November 2016' time '10:24:48.088401 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1982' message 'Replace remaining long/unsigned long with sqIntptr_t/usqIntptr_t.Replace asLong/asUnsignedLong senders with asIntegerPtr/asUnsignedIntegerPtr.This should be essentially for those int containing a target machine pointer/address.For some printf cCode (used for debugging), the %ld does not work in LLP64.We use the standard C way for compatible 32 & 64bits code:use PRI_format_Type macros as the format (mainly PRIxSQPTR).This way, VMMaker is now LLP64 friendly.For other conventions (ILP32 and LP64), this does not change anything since sqIntptr_t is equivalent to long.' id 'ed988fdd-7019-41f8-9051-e08afa837953' date '6 November 2016' time '9:19:35.492542 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1981' message 'reportMinimumUnusedHeadroom with %lld format. That''s superfluous in 32 bits, but does not hurt, and it works correctly in LLP64 contrarily to %ld. The alternative of using PRIdSQPTR macro would be overkill here.Review usage of long/unsigned long type hints that should better be replaced with sqInt/usqInt because the intention is to handle a oop, not a target machine address.Same with senders of asUnsignedLong, some should be replaced with asUnsignedInteger (that is a cast to usqInt), typically after longAt: because longAt: returns an oop (a sqInt).Let #''sqIntptr_t'' #''usqIntptr_t'' types be "isFunctional" to allow inlining in C code generator.' id 'b8675b17-30ec-479d-977d-bc2c6c9aa941' date '6 November 2016' time '2:27:26.75858 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1980' message 'Fix shifting in ffiCreateIntegralResultOop:ofAtomicType:in: like already applied in primitiveFFIIntegerAt/PutProperly count the parameters passed by register for X64 Win64: there are only 4 of them, either floating point or integer or any mix, but not 4 floating point and 4 integers.Fix passing structure by value in X64 Win64: size must be a power of 2, and it''s not possible to pass a 16bytes structure into two registers.' id 'eeec5e65-ce2b-4698-930d-209077139d02' date '6 November 2016' time '9:39:52.658038 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1979' message 'Introduce sqIntptr_t and usqIntptr_t in VMMaker (image side) for LLP64 compatibility - but do not yet use them.These are integers long enough to hold a target machine pointer (BytesPerWord).These should later replace most usage of #long and #''unsigned long''.They are already defined in sqMemoryAccess.h.Add enough machinery for generating and simulating these types, inferring size, converting signedness etc....Introduce asUnsignedIntegerPtr which will convert to (cast to) a usqIntptr_t.same for asIntegerPtr -> sqIntptr_t.They should replace most usage of asUnsignedLong and asLong in the future.Unless we don''t want a machine word, but an oop, in which case we should use asUnsignedInteger (-> usqInt) or asInteger (-> sqInt) (typically to turn a longAt: into an unsignedLongAt: - because longAt: answers a sqInt not a long!)Restore the size of sqInt/usqInt as BytePerOop.BytesPerOop matches BytesPerWord for Spur currently, but the CCodeGenerator should be Spur-agnostic if possible.Move sqInt/usqInt check ahead in simulated sizeof: because most variables are of this type.' id '2abf6236-cd7c-42c2-bf82-515ac9ada054' date '4 November 2016' time '9:58:00.806651 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1978' message 'Also fix primitiveFFIIntegerAt and merge LLP64 fixes' id 'a908e3dd-8968-4dde-b1f1-049c6c1f6c66' date '4 November 2016' time '9:23:16.81952 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1977' message 'Fix bounds check for unsigned store in primitiveFFIIntegerAtPut.  Must use an unsigned long long comparison.' id 'e12daf50-ab4d-4d62-9c65-18cd20e5c0fe' date '4 November 2016' time '12:11:15.657943 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1976' message 'Fix generation of the V3 VM in a principled way; add BytecodeSetHasExtensions rather than presuming from MULTIPLEBYTECODESETS.' id '21cb3e48-ac24-420a-9d0d-75f4b84ce1c9' date '3 November 2016' time '1:45:02.586113 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1975' message 'Fix the root cause of the bugs wrngly fixed in VMMaker.oscog-eem.1971 & VMMaker.oscog-eem.1972.  Eliminate the extBFirstZero variable and its effects on assembling a signed extB.  This restores the Newspeak and no-access-control Cadence Newspeak VMs.' id '76250913-236f-47e0-832c-27b05d488807' date '2 November 2016' time '3:33:29.882633 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1974' message 'Eliminate C compiler warning about taking absolute value of positive integer: correctly store the value in a signed integer, then take the absolute value, in #rewriteCPICJumpAt:target: and #findEmptySegNearestInSizeTo:Fix a typo in #flushICacheFrom:to:.Use #sqLong type in is32BitSignedImmediate: because it''s guaranteed to be 64bits long. #long can be 32bits for LLP64 compilers.Another 64bits fix for MacMenuBarPlugin.' id '44b312d1-3d6d-4737-93a3-9f0f452ab11f' date '1 November 2016' time '10:17:53.440947 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1973' message 'Fix bug https://github.com/OpenSmalltalk/opensmalltalk-vm/issues/23ioGetClockLogSizeUsecsIdxMsecsIdx prototype is not 64bits compatibleThe problem is in primitiveClockLogAddresses for which type inference for #runInNOut result into an int.But ioGetClockLogSizeUsecsIdxMsecsIdx expect a pointer on a sqInt, not a pointer on an int as first parameter.Workaround by explicitely decalring #runInNOut as sqInt.The fix is in oscogLLP64 branch (http://smalltalkhub.com/mc/nice/NiceVMExperiments/main) since VMMaker.oscogLLP64-nice.1915, Time: 29 July 2016, 12:36:23.284336 am' id 'b8f53d80-3c51-4659-b944-1466fda618d4' date '1 November 2016' time '8:26:56.788065 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1972' message 'Redo fixing extB sign extension in NewsqueakV4 & SistaV1 extPushIntegerBytecode & extUnconditionalJump in interpreter and Cogit using bitShift: 8 instead of << 8.  Slang seems to generate the correct code with bitAShift:, but not with <<.' id '0e6a54ad-d62f-4b69-9f0d-7b66f8350984' date '31 October 2016' time '2:42:12.362675 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1971' message 'Fix extB sign extension in NewsqueakV4 & SistaV1 extPushIntegerBytecode & extUnconditionalJump in interpreter and Cogit.' id '95bf1ecb-84f4-46b0-bc15-6c66984430b4' date '28 October 2016' time '7:28:08.893162 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1970' message 'Genuflect to Slang in that last fix.' id '13eb69a8-2a8a-4c6c-86c1-fc4e4dc27c67' date '28 October 2016' time '3:56:26.052511 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1969' message 'Work around inlining bug for positiveMachineIntegerFor:, which we would prefer is never inlined.' id '3c083018-276e-4aae-9714-958e2720a038' date '28 October 2016' time '3:33:59.993333 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1968' message 'Fix initialization of Spur''s newSpace.  The old code was convoluted and wrong.Reduce the default number of stack pages in Spur to 50 to reflect GC tuning work at Cadence.Add vmParameter 19 to answer the value of the scavengeThreshold, which is the effective size of eden.In 1968 the Prague and Paris Spring protests took place.' id '57140cb2-3dcf-4e1d-86e1-7d7a520d0f88' date '28 October 2016' time '12:25:20.785371 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1967' message 'Comment some performance observations.' id '9f0a3c51-6202-4efe-89c6-0b12f3bf7148' date '26 October 2016' time '5:27:37.808708 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1966' message 'Fix squeak.cog.v3 compilation by generating generateObjectRepresentationTrampolines unconditionally.' id '3736eae8-d213-46c0-837f-6b9af9abeb51' date '26 October 2016' time '11:43:24.396606 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1965' message 'Oops.  Put the x64 implementation of literalBeforeInlineCacheTagAt: in the right place.' id 'e173d891-126a-4db1-a8ba-fdfa64bfc28c' date '26 October 2016' time '12:04:22.700073 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1964' message 'Fix compilation of the 64-bit Sista Cogit.  Some routines were missing from CogObjectRepresentationFor64BitSpur.' id '7196fa4c-4f03-44af-8ba1-1ffb8df3d847' date '26 October 2016' time '11:51:24.007682 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1963' message 'Fix 16-bit JIT at:[put:] access in Spur.  Old implementations forgot to scale index by 2.Add windowColorToUse to the simulators to not break the Squeak WIndows menu, and use it when opening simulator windows.' id '9b26e84f-4428-4c48-9b11-23806055c18f' date '26 October 2016' time '11:07:22.181804 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1962' message 'Fix subscripting in the interpreter for 64 & 16-bit indexable word arrays.Fix primitiveVMProfileSamplesInto for 64-bit sample buffers.Fix a return type clash for Spur64BitMemoryManager>>floatObjectOf:.' id 'acd846c2-7b7a-418a-9bf7-dc40c88aadff' date '25 October 2016' time '5:15:43.777031 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1961' message 'Implement Gerardo Santana''s fix to the linux VMProfiler for OpenBSD in the right place.' id 'e0793c3c-8f65-4263-9c21-811c44976606' date '18 October 2016' time '3:34:37.516235 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1960' message 'Fix off-by-one error in the offset of the byte containing the "is full block method" flag in a CogBlockMethod.' id 'fb5e58cd-1533-4f86-9184-84ef7efba782' date '13 October 2016' time '3:24:35.154823 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1959' message 'Fix primitiveConstantFill for Spur 16-bit and 64-bit indexable objects.  Ensure that on Spur bytes beyond the last byte are zero.Fix compilation of the Cogits by exporting the full block entry offsets correctly.In 1959 the Cuban revolution occurs, the Confédération Mondiale des Activités Subaquatiques is founded by, amongst others, Jacques-Yves Cousteau, and I am born ;-).' id '2784931a-d7ba-431a-be8c-ec79b1e55684' date '12 October 2016' time '7:38:49.6578 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1958' message 'Fix VMProfileMacSupportPlugin for 64-bits.In 1958 the European Economic Community (EEC) is founded, a peace symbol is designed and completed by Gerald Holtom, commissioned by the Campaign for Nuclear Disarmament, in protest against the Atomic Weapons Research Establishment, and The Beatles, at the time known as The Quarrymen, pay 17 shillings and 6 pence to have their first recording session where they record Buddy Holly''s "That''ll Be the Day" and "In Spite of All the Danger", a song written by Paul McCartney and George Harrison.' id '94323b3a-9f16-49d5-b76c-4e8aa1311a66' date '11 October 2016' time '4:31:17.738356 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1957' message 'Add "print context..." to the Stack VM simulator''s utilities menu.In 1957 Wham-O Company produces the first Frisbee,  IBM sells the first compiler for the Fortran scientific programming language, and the Soviet Union launches Sputnik 1, the first artificial satellite to orbit the earth.' id 'e8c3b526-d0ba-4dc0-ac59-da495553cf21' date '6 October 2016' time '12:14:39.49206 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1956' message 'Fix a bogus assert fail in checkIsStillMarriedContext:currentFP:In the Cogit, eliminate stale dependent values in the instructions used for generating trampolines as part of each zeroOpcodeIndex.  Split out the basic zeroing into zeroOpcodeIndexForNewOpcodes.Get non-Lowcode cogitFOO.c files to compile by marking the relevant routines as <option: #LowcodeVM>Fix some asserts by typing inlineCacheValueForSelector:in:at:.  Although this looks like a regression in the inliner; inlineCacheValueForSelector:in:at: should be completely inlined but isn''t.  Was it ever?In 1956 the hard disk drive is invented by an IBM team led by Reynold B. Johnson, the submarine transatlantic telephone cable opens, and the Suez Crisis occurs.' id 'b3575eed-1a33-4094-9847-124892efeac2' date '1 October 2016' time '4:41:38.186285 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1955' message 'fetch of sourceHandle may fail, provocking an crash on Pharo. Adding a simple guard to prevent it (as suggested by Peter Uhnak)' id 'cb359d33-3a8c-4649-a89e-448090843137' date '29 September 2016' time '2:20:59.672732 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-cb.1954' message 'Fixed a bug in the SistaCogit mustBeboolean handling which confused the mcpc to bcpc mapping, forbidding counters to trip correctly.' id '34c89fe5-922b-4d01-b2cc-14bd416b3673' date '29 September 2016' time '12:09:23.749488 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1953' message 'Make MULTIPLEBYTECODESETS a generation-time-only option.For the generation-time-only options (PharoVM NewspeakVM SistaVM LowcodeVM MULTIPLEBYTECODESETS) make sure these are tested via ifTrue: et al, not via cppIf:ifTrue: et al, so they are included or eliminated completely at generation time.Make sure the 64-bit Squeak Spur VMs mirror the 32-bit ones in including the SqueakV3PlusClosures & SistaV1 bytecode sets.' id '1f1e4603-f82c-48df-915b-7bf0d38e3b60' date '27 September 2016' time '11:49:39.85675 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1952' message 'Revise CogIA32Compiler>>dispatchConcretize to cimpile in Squeak V3 (pull out processor specific opcodes into their own routine). Fix slip in CogSimStackNativeEntry class>>instVarNamesAndTypesForTranslationDo:Make VMProfileMacSupportPlugin support 64-biuts (at least for collecting modules).' id '79e61495-26b7-4fcd-9020-f792178fd68e' date '26 September 2016' time '7:14:52.614044 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rsf.1951' message 'Integration of Lowcode.Lowcode is an extended bytecode set that is encoded using the inline primitive facility from the SistaV1 bytecode set.Building a VM with Lowcode requires the following VMMaker options:	SistaVM true	LowcodeVM true	MULTIPLEBYTECODESETS true	bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1HybridIWST Slides:http://www.slideshare.net/esug/lowcode-extending-smalltalk-with-c-types-to-improve-performanceIn addition to these huge changes in the VM, Lowcode has some dependencies in some C headers with the inline FFI callout glue, and additional sqMemoryAccess.h macros. I will send a patch for inclusion into the OpenSmalltalk VM C sources.' id 'c714858a-7f63-47bd-a9ec-4bc1350eead2' date '8 September 2016' time '6:52:41.871669 pm' author 'rsf' ancestors ((name 'VMMaker.oscog-rsf.1915' message 'The massive commit with the integration of Lowcode.Lowcode is an extended bytecode set that adds C like low-level operations such as direct memory access, unchecked 32-bits and 64-bits integer, single precision and double precision floating point arithmetics.Lowcode instructions are stack based, but unlike normal Smalltalk instructions they can operate in two different stacks: the normal object oriented and garbage collected smalltalk stack, and native stack for primitive data types that is not inspected by the garbage collector.The specification of the Lowcode instructions is the XML file present at: https://github.com/ronsaldo/lowcode-specs/blob/master/specs/lowcode.xml . This XML file is used for documenting the instruction set, and for helping in generate their implementation by generating automatically code for the StackInterpreter and the StackToRegisterMappingCogit. Code for fetching arguments from the stack and pushing results is generated automatically for the StackInterpreter. In a similar way, code for register allocation is also generated for the StackToRegisterMappingCogit. This boiler plate code generation allows concentrating in implementing the instructions themselves.The tools for generating the instructions from the implementation is avaiable at: http://smalltalkhub.com/#!/~ronsaldo/Lowcode . The ConfigurationOfLowcode script will load by default the Lowcode-OpalCompiler that extends Smalltalk with native data types in addition tothe code generation tools. Later I will add some groups to the ConfigurationOfLowcode script.Activating Lowcode requires the following VM options:		SistaVM true		LowcodeVM true		MULTIPLEBYTECODESETS true		bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1HybridThe SistaVM is required to enable the inline primitive feature support. Perhaps it should be made optional.In addition to the changes into the VMMaker, some changes into the sqMemoryAccess.h are required. Since the StackInterpreter cannot manipulate the C stack directly, it performs this manipulation using a concept similar to the FFI/Alien callout mechanism for being able to call C functions and keeping the same interface as JIT compiler. This mechanism uses a shadow stack for pushing parameters, a callout state structure with shadow registers for sending/receiving data from any function and trampoline function written in assembly. These extra support are placed in sqLowcodeFFI.h and family.If the LowcodeVM variable is false(the default), these modifications and extra files are not required for building a working PharoVM using the Cogit or the StackInterpreter. They were tested with the latest Pharo 6 image.' id '10b55ef9-701f-447d-b43b-c132dbb85dcd' date '10 August 2016' time '3:24:06.128727 pm' author 'rsf' ancestors ((name 'VMMaker.oscog-eem.1914' message 'Fix bad performance regression with open PICs and fix slip in generated perform primitive.  The regression, when the open PIC compilation code was refactored to eliminate duplication of the probe generation, was to misorder the probes, so that when a new method was entered into the cache at a clashing line, which zeros the two entries following the first, the open PIC would search for the last entry, hence always missing.The perform code had two copies of the second probe and no third probe.Improve method cache locality in Spur, which uses class indices and tag patterns as class tags.  Shift up the class tag by 2 bits so that the least significant two bits are included in the hash.Remember to nil out the last uncoggable method variables on code compaction, become, GCJIT blocks more agressively in the value primitive; always try and JIT (unless noted in lastUncoggableInterpretedBlockMethod) if reached from the machine code primitive.Make sure retryPrimitiveOnFailure is option: #SpurObjectMemory.Improve method cache printing to include hex hashes and totals of printed items.Change traceFlags so that traceFlag 2 prints only interpreted sends, and trace flags 258 print both interpreted and machine code sends.Correct, but not fix, ceTraceStoreOf:into: for Spur (use isImmediate:, but not fixed cuz stores may not be into ReceiverResultReg any more).Simulator:Set simulator window colour in a more direct way.' id 'aebe2acd-39a2-49da-a2b8-c1ba08392137' date '4 August 2016' time '2:38:32.219752 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1913' message 'Merge VMMaker.oscog-cb.1912, VMMaker.oscog-nice.1911Use same FileDirectory tricks as Cog* for Stack* generationThis way we can generate sources on windows (with recent trunk corrections for pathFromURI:).Don''t put a trailing / to ''../''. in VMMaker initialization.Indeed, some FileDirectory hacks work only for ''..''For example, (FileDirectory on: ''..'') is ok, (FileDirectory on: ''../'') is not.Correct the prototype of genDoubleFailIfZeroArgRcvr:arg:It''s used as a function taking int, not #sqIntSee #genDoubleArithmetic:preOpCheck: and #genDoubleArithmetic:preOpCheck:boxed: for 64bits' id 'b2051db4-f948-b54c-bf20-a2c68d613703' date '28 July 2016' time '11:45:27.814464 pm' author 'nice' ancestors ((name 'VMMaker.oscog-cb.1912' message 'Fixed a register spill for remote inst var access. Improved error code returns' id '43b9cbdf-2d05-4102-82c8-65b20fba0017' date '28 July 2016' time '11:10:23.800381 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1911' message 'Changed 2 entries in the SistaV1 bytecode specification to match release specifications.added comments for #genJumpIf:to: and added minor details.1911: George V is crowned King of the United Kingdom.' id '4263d9c0-d087-48d7-b3ff-22bb8a22ee60' date '27 July 2016' time '11:37:11.377401 am' author 'cb' ancestors ((name 'VMMaker.oscog-topa.1910' message 'MSVC has a problem with the macro-expansion trickery involving asseert (vis ||), GIV and macro indirections. Using the getter (And the translated code from that) works fine, tho.' id 'd582738f-7126-49ca-9679-36e6995e6f2d' date '25 July 2016' time '5:44:48.328562 pm' author 'topa' ancestors ((name 'VMMaker.oscog-topa.1909' message 'When using intel inlining syntax, use correct one' id '18fd079c-a2e2-4f98-a712-8ed9b052650c' date '25 July 2016' time '3:56:37.270712 pm' author 'topa' ancestors ((name 'VMMaker.oscog-cb.1908' message 'fixed minor bug in noMustBeBoolean flag and added a comment.' id 'e6026e8d-6049-4d45-bc26-ed2d9efda4e9' date '25 July 2016' time '2:04:51.652914 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1907' message 'Fixed twoPath compilation both with and without immutability. I changed the test from "isInstVarStore" to "is1ByteInstVarStore" because other instVarStore may happen on context objects, requiring a frame. The compilation of Context>>setSender:receiver:method:closure:startpc: requires a frame for example. Without immutability, the two path is done for methods with multiple inst var stores and branch on the receiver''s age. With immutability, all setters are compiled with two paths and branch on the receiver mutability and age. That''s very funny because now the VM with immutability is clearly faster on binary tree than the VM before the two paths compilation (obviously we backported that to the non-immutability VM, so the VM without immutability is still faster). Added extB 3rd bit flag to mark if the store requires the immutability check or not in multiple store instructions (LitVar, instVar, RemoteInstVar). Fixed a zip (flag was inverted for no store check).Recategorized heap store code generation to "bytecode-store" and all the ext tests to "testing". That can be reverted if one is not happy about that. Now that immutability is rock stable, I made two generic store methods, one for stores into maybe context objects, one for stores into non context objects. Both methods require multiple parameters such as "requireImmutabilityCheck" and "requireStoreCheck". The generic methods test for the IMMUTABILITY flag to know if they need to generate the test or not in addition to the parameter. Every heap store calls one of these two methods, so there''s no code duplication. Fixed some methods to return error codes instead of 0.Tried to improve multiple comments. When merging methods, I tried to keep all the comments from all methods. The simulator works fine, the VM compiles to C, but for some reason I can''t compile from C to executable right now: ""_ioScreenScaleFactor", referenced from: _primitiveScreenScaleFactor in gcc3x-cointerp.o" so I''m only 99% sure this is working just fine.' id '3597b83b-6797-4bfa-b629-5b36c88d9297' date '25 July 2016' time '1:53:25.249279 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1906' message '- Fixed inlined multiply primitive.- added accessor in the facade for in-image compilation- disabled jitting of full block temporarily (to have the VM stable).' id '0fb76baf-8640-46ea-a1b0-0612ef56d02d' date '21 July 2016' time '10:54:27.397258 am' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1905' message 'Fix declaration of tenuringProportion in SpurGenerationScavenger: it is expected to be a double (between 0.0 and 1.0), not a sqInt.Fix an incorrect usage of mem:cp:y: (swapping of sourcePointer and byteSize arguments). This method is not in use yet.' id 'dc89d7c4-734c-4c22-b366-3de1c3dbbf42' date '20 July 2016' time '5:37:48.684832 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1904' message 'Remove Undefined Behavior that prevents correct SmallFloat handlingThe following symptoms were experienced with Squeak stack spur 64 bits VM and gcc 4.9.2 with -O2 optimization (mvm -f).2.0 = 3.0 -> true.2.0 * 3.0 -> 4.0.For solving that it''s necessary to remove undefined behavior related to left shifting a signed integer.Instead of generating something like:    ((sqLong) rcvr) << argIt''s better to generate it like this:    (sqLong)(((usqLong) rcvr) ) << arg)This way we preserve signedness and Behavior is well defined.Since the formulation is rather heavy, I''ve also added tricks to avoid some casts if variable is long enough and unsigned already. If we later switch longAt and some others as unsigned as already dicussed here, the generated C might almost be readable.I''ve also replaced pointer aliasing used to get/set SmallFloat value, like:    doubleResult = (double *)( & rawBitsInteger )[0];by memcpy:    memcpy( &doubleResult  , &rawBitsInteger , sizeof(doubleResult) );Why is memcpy less evil than pointer aliasing?With pointer aliasing any other write into a long integer could modify doubleResult.This completely defeat optimization - the holy grail of C people, they can''t bother that FORTRAN compilers are faster than theirs ;).With this greatly biased wisdom, they declared this construct as undefined behavior, giving priority to optimization rather than backward compatibility or programmers'' intentions...memcpy is less evil because it''s localized (one shot).memcpy is heavily optimized (no function call generated, just about the same instructions as pointer aliasing), so there''s no reason to not abide the standard.' id 'ac13f54a-6f44-4700-8e32-6615076821b8' date '19 July 2016' time '11:57:01.639243 pm' author 'nice' ancestors ((name 'VMMaker.oscog-lpc.1903' message 'BitBltSimulation>>primitivePixelValueAtX:y: needs to be modified to allow the optimization mentioned in VMMaker.oscog-eem.1888''s message. This modification is similar to those in that same commit.' id '338f00b4-6135-4904-97da-0528241e2a62' date '15 July 2016' time '11:24:50.786748 am' author 'lpc' ancestors ((name 'VMMaker.oscog-eem.1902' message 'Add support for inline unchecked pointer basicNew, inline prim #1011.Fix slips in isUnannotatableConstant: and ssTopNeedsStoreCheck to include/exclude immediates respectively.In-image compilation:Update facade support to allow compilation of inline prim #1011.Simulation:Fix slip in StackInterpreter class>>initializeWithOptions: which breaks StackInterpreter launch.Add support for recording and replaying sends to check for divergence between different runs.  See CogVMSimulator>>collectSends & CogVMSimulator>>expectSends: & the ExpectedSends class var.In 1902 Walter Sutton (in the United States) and Theodor Boveri (in Germany) independently develop the Boveri-Sutton chromosome theory, explaining the mechanism underlying the laws of Mendelian inheritance by identifying chromosomes as the carriers of genetic material, Bertrand Russell writes to Gottlob Frege informing him of the problem in naive set theory that will become known as Russell''s paradox, and William Bayliss and Ernest Starling make the first discovery of a hormone, secretin.' id 'd5860bb5-b41c-4337-90d4-c2abc979248d' date '12 July 2016' time '2:10:27.739315 pm' author 'eem' ancestors ((name 'VMMaker.oscog-topa.1901' message 'Do not use primitive 104, the named one is sufficient (akin to primitiveScreenDepth).In 1901, Russell showed that Cantor''s set theory leads to a contradiction, and the first Nobel Prizes were awarded: Wilhelm Röntgen (Pyhsics), Jacobus van ''t Hoff (Chemistry), and Emil von Behring (Medicine)' id '90d28152-bb23-4c83-858d-2ec0e42599a7' date '11 July 2016' time '6:42:05.916036 pm' author 'topa' ancestors ((name 'VMMaker.oscog-topa.1900' message 'Add Primitive ScreenScaleFactor as primitive 104. - 104 was numbered primitiveDrawLoop but that has been a named primitve for more than 10 years now. - Requires platform support as of git commit 5dc6440In 1900, Hilbert stated his list of 23 problems, quantum physics was conceived, Fessenden made the first audio radio transmission, Villard discovered gamma rays, and Louis'' Lunch served the first hamburger.' id 'b90b9fe5-71c9-49f4-948b-4ebfbb63dcb6' date '11 July 2016' time '10:30:07.188629 am' author 'topa' ancestors ((name 'VMMaker.oscog-eem.1899' message 'Fix initialization of the primitivesClass so it has initializationOptions set also.In 1899 Guglielmo Marconi successfully transmits a radio signal across the English Channel,  David Hilbert creates the modern concept of geometry with the publication of his book Grundlagen der Geometrie, released on this date at Göttingen, and the highest ever recorded individual cricket score, 628 not out, is made by A. E. J. Collins.' id '65cf7e79-dadd-453b-ba5b-222dd189a551' date '7 July 2016' time '11:03:44.100812 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1898' message 'Fix bad bug with adoptInstance: for contexts (e.g. .| i | Array adoptInstance: (i := thisContext sender sender shallowCopy). i!).  Slots beyond stack pointer must be nilled.  Further fix bug in externalInstVar:ofContext: for pc access.  Add sufficient assert machinery to allow stack pointer to be determined in external regime (framePointer valid).Add intAt: support for 64-bit simulation (cf VMMaker.oscog-cb.1895).In January of 1898 novelist Émile Zola''s open letter to the President of the French Republic on the Dreyfus affair, J''accuse !, is published on the front page of the Paris daily newspaper L''Aurore, accusing the government of wrongfully imprisoning Alfred Dreyfus and of antisemitism. In February of that year the electric car belonging to Henry Lindfield of Brighton runs away on a hill in Purley, London, England, and hits a tree; thus he becomes the world''s first fatality from an automobile accident on the public highway, and the USS Maine explodes and sinks in Havana harbor, Cuba, for reasons never fully established, killing 266 men. This event helps lead the United States to declare war on Spain.' id 'a6270890-9a29-4d14-812f-82aa55a2dc6d' date '5 July 2016' time '4:23:24.383818 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1897' message 'Fix genJumpIsSmallIntegerValue:scratch: for all memory managers and hence fix SmallInteger minVal // -1.' id 'c3215ac9-9da7-4d9d-9f40-a6ef2eaaa861' date '4 July 2016' time '4:21:58.850141 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1896' message 'Fixed a damn bug where the interpreter was misaccessing inst var of remote object.Philippine Revolution !' id 'ad6238e2-33a7-43d2-8149-4e35127069e2' date '4 July 2016' time '4:51:14.471195 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1895' message 'Added #intAt: in simulated memory manager to be able to correctly simulate #primitiveIntegerAt' id '886cccd3-a34a-41c7-ae1d-8b5056f37db7' date '1 July 2016' time '10:17:42.807326 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1894' message 'Accesses on remote instance variables can''t be done on forwarders: to happen, the method with the inst var access needs to be inlined hence there''s either a guard ensuring the object is not a forwarder or the type of the object is known (immutable literal, inlined object allocation such as Array, FullBlockClosure, immediate rcvr, etc.)' id 'b3c32cc0-576b-4a14-9572-b5323dfa774f' date '30 June 2016' time '2:02:37.049787 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1893' message 'Fix a couple of cases that should use mositiveMachineIntegerValue: and nuke an unnecessary stackObjectValue:. In 1893: Riots of Mons during the Belgian general strike of 1893, The day after, Belgian parliament approved Universal suffrage. The Independent Labour Party of the United Kingdom has its first meeting. The United States overthrows the Kingdom of Hawaii: Lorrin A. Thurston and the Citizen''s Committee of Public Safety in Hawaii with the intervention of the United States Marine Corps overthrow the government of Queen Liliuokalani.' id 'ed498bfa-0631-4cf2-8bfb-c49e20505d40' date '29 June 2016' time '5:35:30.7422 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1892' message 'Fix assert failure in primitiveVoidVMStateForMethod.  The instructrionPointer must be pushed after the frame is married.In 1892 the Liverpool Football Club is founded by John Houlding, the owner of Anfield. Houlding decides to form his own team after Everton leaves Anfield in an argument over rent.' id '51671a87-df9b-49c2-8972-b9fe8eb0cf5f' date '29 June 2016' time '4:59:05.109418 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1891' message 'Simplify parameter validation in several plugins, especially the FloatArrayPlugin.  stackObjectValue: checks for an object, failing if it accesses an immediate.  But so do isWords:, isBytes: et al.  There is no need to check twice.  Further, the "interpreterProxy success: expr. ... interpreterProxy failed ifTrue: [^nil]" form contauns more calls then the "expr ifFalse: [^interpreterProxy primtiveFail]" form and so is slower.Trying the Travis infrastructure to test this for the first time.  Gulp.  But I''d love others to eyeball this change (and use the style in future).' id '496e6e75-7d9c-4299-8e65-e951b54de254' date '29 June 2016' time '12:33:32.521203 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1890' message 'Fix regression in Sista introsduced in VMMaker.oscog-eem.1877.  The Sista scanMethod:  should set useTwoPaths only for methods that would be frameless were it not for a store (which needs a frame if immutable).  The regression was to set useTwoPaths in frameful methods containing a store; a stupid slip by your''s truly.In 1890 Dutch artist Vincent van Gogh moves to Auvers-sur-Oise on the edge of Paris in the care of Dr Paul Gachet where he will produce around seventy paintings in as many days, and commit suicide soon thereafter, the Picture of Dorian Gray by Oscar Wilde is published by Philadelphia-based Lippincott''s Monthly Magazine, and the United States Census Bureau begins using Herman Hollerith''s tabulating machine to tabulate census returns using punched card input, a landmark in the history of computing hardware. Hollerith''s company eventually becomes IBM.' id '63b22b9f-29ab-46d5-b533-05c17aa78dc6' date '26 June 2016' time '6:03:06.041002 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1889' message 'Fix a bug in Spur become validation, a regression from supporting copyHash properly.  The check for there being available memroy for copies of all arguments should only occur in the two-way case, not in the one-way copyHash case.  Refactor Clément''s checker into ifOopInvalidForBecome:errorCodeInto: and use it to check all checked arguments.This fixes Bert''s (ByteString new: 20000000) writeStream nextPut: (Character value: 128169) case.In 1889  Herman Hollerith receives a patent for his electric tabulating machine in the United States, Vincent van Gogh paints The Starry Night at Saint-Rémy-de-Provence, and the Eiffel Tower is inaugurated and opens on May 6. At 300 m, its height exceeds the previous tallest structure in the world by 130 m.' id '24dcf481-d07a-4e68-a4bf-7d6d8ce2ae4f' date '20 June 2016' time '1:33:14.0061 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1888' message 'Integrate changes proposed by Laura Perez Cerrato"Working on JPEGReadWriter2 I noticed that both reading and writing primitives include a sanity check that ensures that the source/destination Smalltalk bitmap has the exact size in bytes needed, instead of checking that its size is at least that needed. Some BitBlt primitives perform the same check, thus not allowing operations with forms with associated bitmaps with a size greater than needed. When performing operations with images, and specially when such images are large in size, actually processing the images takes a small fraction of the time it takes to perform the whole operation, while allocating and deallocating correctly sized bitmaps takes much longer. If one would wish to process a series of similarly sized images (with a definite maximum size), it would be desirable to allocate a bitmap big enough to hold any of them only once and then reuse it, thus avoiding the aforementioned cost. Checking that source and destination bitmaps are big enough instead of checking that their size is exactly that which is expected would allow that optimization.A brief exploration of BitBlt and JPEGReadWriter2''s code, accompanied with some experimenting of what would happen if such sanity checks were modified as proposed, has lead me to thinking that these changes would be benefitial. I haven''t observed any undesirable side effects (meaning, nothing seems to have blown up :))....."In 1888 in London, Annie Besant organizes the  matchgirls strike of 1888, Handel''s Israel in Egypt is recorded onto wax cylinder at The Crystal Palace, the earliest known recording of classical music, and the Oaths Act permits the oath of allegiance taken to the Sovereign by Members of Parliament to be affirmed rather than sworn to God, thus confirming the ability of atheists to sit in the House of Commons.' id '26b2e5b1-5819-45e5-9340-559278c9712c' date '15 June 2016' time '9:34:25.090332 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1887' message 'Integrate Laura''s greyscale JPEG support code, eliminating one cCode:inSmalltalk.  Too lazy to eliminate the other. Requires http://squeakvm.org/svn/squeak/trunk/platforms/Cross/plugins r3742.' id '39e48685-63a6-498b-b4c5-8e7aa0c162dd' date '9 June 2016' time '5:05:44.192116 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1886' message 'Slang:Fix type inferrence for the 64-bit VM and some other cases after the bug fix in VMMaker.oscog-eem.1883 uncovers bugs in existing code.Collapse returnTypeForSend:in: & returnTypeOrNilForSend:in: onto returnTypeForSend:in:ifNil:.If a method ends with an explicit return of an expression then default its type to #sqInt, only defaulting to #void if the class defines it as the default return type and there is no explicit return of an expression (other thna ^self). Replace transformVoidReturns with transformReturns to handle both void returns (^expr => expr. ^self) and self returns in methods defaulted to sqInt (^self => ^0).Eliminate some translation time warnings for plugins.If possible, put a CurrentReadOnlySourceFiles cacheDuring: around parsing of methods to TMethods toi save cycles.Simulator:Add a mechanism to limit the number of open files for debugging in the FilePluginSimulator.In 1886, Robert Louis Stevenson''s novella Strange Case of Dr Jekyll and Mr Hyde is published, Karl Benz patents the first successful gasoline-driven automobile, the Benz Patent-Motorwagen (built in 1885), Wilhelm Steinitz becomes first recognized World Chess Champion, American pharmacist Dr. John Pemberton invents a carbonated beverage that will be named Coca-Cola, and Heinrich Hertz at the University of Karlsruhe verifies the existence of electromagnetic waves.' id 'd413db9f-37cc-4c5d-bfc6-87b11203ee96' date '8 June 2016' time '11:00:38.901828 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1885' message 'Oops.  Need to nuke the old method on StackInterpreter.' id '3c9ce24b-d7c4-4160-ac59-56aed18461a1' date '7 June 2016' time '3:18:23.229051 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1884' message 'Fix multiple bytecode set selection in the Spur 64-bit VM, which must use signedIntFromLong64 to test for a negative header.In 1884 the Fabian Society is founded in London, Georges-Pierre Seurat paints Bathers at Asnières, and the eight-hour workday is first proclaimed by the Federation of Organized Trades and Labor Unions in the United States. This date, called May Day or Labour Day, becomes a holiday recognized in almost every industrialized country.' id '9ed14e3a-5903-474d-92c1-ecd78e7cb932' date '7 June 2016' time '3:06:08.369636 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1883' message 'Slang:Fix a bad bug in type inferrence as exemplified by primitiveTimesTwoPower and its arg temporary.  A variable cannot be typed in the current pass if it is first assigned the result of an as-yet-to-be-typed send.  If it is assigned the result of a subsequent send then the first assignment will be ignored, possibly leading to a badly inferred type.  For example in primitiveTimesTwoPower arg is assigned a few times:	arg := self stackTop....	arg := objectMemory integerValueOf: arg....	arg := twiceMaxExponent negated...	arg := twiceMaxExponentand the type of twiceMaxExponent is #int.  If arg''s type is inferred from twiceMaxExponent because stackTop & integerValueOf: are as yet untyped, then it will be inferred to be #int.  Whereas it should be defined as #sqInt from both stackTop & integerValueOf:, since merging #int & #sqInt yields #sqInt.Eliminate a stale var:type:.In 1883  the Adventures of Pinocchio by Carlo Collodi is first published complete in book form in Italy, Robert Louis Stevenson''s children''s pirate adventure novel Treasure Island is first published in book format, in London, and .oxygen is liquefied for the very first time.' id 'a87f979f-7e5b-44d1-804d-fc8403bde06d' date '6 June 2016' time '7:21:31.312947 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1882' message 'ceCheckAndMaybeRetryPrimitive: must be marked <api>In 1882 the "Elektromote", the world''s first trolleybus started in Berlin.' id '103fa521-565d-4a73-8a04-b2d3276217c8' date '6 June 2016' time '6:06:00.077553 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1881' message 'On Spur, handle external primitive failures answering PrimErrNoMemory by doing a scavenge and retrying and then on subsequent PrimErrNoMemory failure a full GC and then retrying.  Rename maybeRetryFailureDueToForwarding to maybeRetryPrimitiveOnFailure.In the Cogit, change the retry mechanism so that the primitive call is made in the run-time, instead of the run-time answering whether the primitive should be retried and returning to machine code that then retries.In the simulator, go through the contortions to map[ back whatever primitiveFunctionPointer is to that which dispatchFunctionPointer: accepts.Discussion:First, this mechanism applies only to external (plugin) primitives.  Spur''s core primtives are written in the expectation that image-level primitive failure code will deal with the failure and retry.  This corresponds to the VisualWorks style and allows the image to implement GC policy (e.g. to favour reclamation over growth).  So with the current Spur code, heavily influenced by the author''s experience with VisualWorks, it would be inapproprate to retry corte primitives on being out-of-memory.  The pathology is that attempts at very large allocations which will inevitably fail will cause a GC in the VM, very possibly followed by a GC from the image level primitive failure code.  Whereas leaving it to the image, the image code may be intellkigent enough to spot an allocation too large to ever succeed and avoid the GC altogether.I''m not sure if I like this auto-retry or not.  Perhaps it is a good idea and the image-level primitive failure code should be changed; there would certainly be fewer image-level methods.  But that means fewer hooks for the image to implement GC policy.  retryPrimitiveOnFailure which manages the retry isn''t exactly simple (mapping back the primitiveFunctionPointer to something dispatchFunctionPointer: can manage isn''t simple either, but that''s simulation only, and so its complications carry much less weight).' id 'c51b1764-ddf8-49fc-92bd-d587b3d65101' date '6 June 2016' time '12:55:12.14917 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1880' message 'Minor cleanups prior to checking in primitive retry on allocation failure.In 1880 the first electric streetlight is installed in Wabash, Indiana.' id '1d6ad311-63fd-456b-bc35-aaaf1d9f1829' date '6 June 2016' time '12:38:04.937574 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1879' message 'Follow-up to VMMaker.oscog-eem.1878:	Check for allocation failure in the LargeIntegersPlugin and fail primitives when space runs out.' id '46459a03-d9ee-4422-9c65-f863b50b7992' date '1 June 2016' time '6:05:04.876264 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1878' message 'Check for allocation failure in the LargeIntegersPlugin and fail primitives when space runs out.This is clearly unsatisfactory;. the ciode fails to slow Smalltalk code.  We''d like to run the GC but Spur''s style is not to GC in primitives.  If we change the plugin to do GC in primtiives we lose the speed advantage of the no-GC style of code.  One approach might be to estimate the memory needed as early as possible, and run a GC if not enough memory is available for the result, recomputing base pointers if GC is run.  This would avoid the awful remapOop:in: style whioch is pessimistic; it puts things in a stack and takes them back out whether a GC is needed or not.  We shoudl use an optimistic algorithm; especially for something as performance sensitive as large integer arithmetic.' id '71f5bdb3-74c3-4a8c-bbb9-c78c327e4823' date '1 June 2016' time '5:56:53.625028 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1877' message 'Cogit:revise Clément''s two-path code for immutability to allow it to be used for frameless setters containing more than one inst var store, avoiding multiple store checks by checking once for the receiver being young.  Good for a 4% speedup in the binary tree benchmark.Rename needsTwoPath to useTwoPaths.  Refactor StackToRegisterMappingCogit>>scanMethod so that it is used by RegisterMappingCogit and SistaCogit without having to duplicate an already large method with very minor varations three times.Add an isInstVarStore property to CogBytecodeDescriptor and set it in the bytecode tables.Fix bug in ARM''s concretizeSqrtRd.Fix Slang bug detabbing empty expansions in cppIf:ifTrue:ifFalse:.' id '638b0433-98fd-4fdf-8b75-588d6c09081f' date '1 June 2016' time '4:45:31.895746 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1876' message 'Eliminate the callerSavedRegMask variable and replace it with a CallerSavedRegisterMask variable computed at register initialization time.On ARM:- define the caller-saved registers as the subset of the caller-saved registers that excludes R0/CArg0Reg/TempReg & R1/CArg1Reg (R0 is the C result register), and use R2 & R3 for abstract registers (ClassReg and Arg0Reg).- save and restore elements of the caller-saved registers as appropriate around run-time calls.- use LDM & STM to do the saving.- hence provide two extra registers, now provinding Extra[012]RegFix the various nameForRegister: to get a useful printRegisterMap on RISCs that have register arguments in the C calling convention (x64 & ARM).In the simulator, provide the same breakpoiting facilities for "click step" in ABI calls as for run-time calls, and have prntCogMethodFor: print something useful for trampoline addresses..' id '28e91d90-4197-436d-9702-7c7dae02e85e' date '1 June 2016' time '12:02:13.056404 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1875' message 'Anti-slavery society forms (NY)...When I benched Immutability/write barrier, games benchmarks had identical performance with and without it (the difference was within noise).However I built a microbench doing only inst var stores:Foo>>imm: imm nonImm: nonImm	iv1 := 1.	iv2 := #foo. 	iv3 := imm.	iv4 := nonImm.| f |f := Foo new.[f imm: 2 nonImm: #bar ] bench   	And in this case there was 18.7% overhead with the write barrier. BinaryTree bench has a similar method, use it extensively and yet we can''t see the overhead on the whole bench, so it''s not that critical, but it''s still something which could matter in specific cases.In this commit I changed the JIT so that (with Immutability/Write barrier ON) methods with only frameless instance variable stores are compiled with two paths. The code first checks if the receiver is immutable/read-only, and takes the right path accordingly. The first path is frameless and does not include immutability/write barrier checks. The second one is frameful and does all the immutability/write barrier checks.I didn''t do it for blocks as I believe blocks with only instance variable store are not that common - I may be wrong, if you prove to me I am wrong on this with numbers, I will do it for blocks.In the micro-bench shown, #imm:nonImm:, the overhead decreased from 18.7% to 2.6%.I think this has an impact in general to setter methods.I made that in a Pharo sprint (or what it matters).' id '4da4e9c0-8ef3-4400-b610-73c7959006ce' date '27 May 2016' time '11:43:40.369719 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1874' message 'Cogit: Fix some compilation warnings in cogitX64.c' id '99326b2f-4a6d-48e1-9fa7-a2f841763f56' date '26 May 2016' time '4:56:42.490161 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1873' message 'Phhhh, get the change to the FoatArrayPlugin right.  Sorry for the confusion.' id '5936290a-e2d7-4ec8-a354-59ba42623622' date '26 May 2016' time '12:38:39.23329 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1872' message 'damn; fgix a slip in the last commit' id '6db6d610-b1a5-4f4d-978d-22c917bdb3e4' date '26 May 2016' time '12:24:21.998252 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1871' message 'Take a slightly more minimal approach to Esteban''s FLoatArray changes in VMMaker.oscog-EstebanLorenzano.1869' id '94d585d5-c18f-4880-9d8e-c4fdb1e7427c' date '26 May 2016' time '12:22:31.837215 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1870' message 'Fix slang regression in VMMaker.oscog-eem.1868.  See MessageNode>>asTranslatorNodeIn:.Fix ephemerons (at least for Gule''s test case).  The mournQueue is of course a root for teh scavenger and so must be visited at the start of a scavenge.  Fix receiver in fireEphemeron:.Simulator:  Make Spur clone the heap and do a lemming scavenge if leakCheckNewSpaceGC is set, just as ObjectMemory does.  Update Spur''s leak checker to scan the mournQueue.' id 'c5578dcb-22a8-4798-8aa0-097f5adbb95e' date '26 May 2016' time '12:10:14.605733 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1868' message '...and fix Slang to translate th erevised noCheckPush:onObjStack: (using '''' is quicker than [], but Slang needs not to translate the brace node).' id '5bcb9563-5037-4e58-8aca-fb68a963e028' date '25 May 2016' time '9:53:03.519464 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1867' message 'Fixes for ephemerons.Fix bug in markAllUnscannedEphemerons.  Now Gille''s test case works for 50k elements, but not yet for 200k.Fix asserts in various functions.' id '17d41c8f-18a0-4dd0-8b35-1eba4ffa1d53' date '25 May 2016' time '9:38:19.765577 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1866' message 'Fixes to ephemeron scavenging.Both fireEphemeronsInRememberedSet and fireEphemeronsOnEphemeronList must check for an ephemeron being fireable.  An as-yet-firable ephemeron misgt get added to the ephemeron list and later its key may get tenured, rendering the ephemeron unfirable in that cycle.Fix marking of obj stack contents (markAndTraceObjStack:andContents:).  Again tenuring could cause contents to be forwarded and hewnce a read barrier is needed.Fix asserts that check for ephemerons so that the change in an ephemeron''s format once it gets added to the mournQueue doesn''t break the asserts; isMaybeFiredEphemeron[Format]: answer true for ephemerons and ephemerons in the mournQueue.Make pushLiteralVariable: store unfollowed literals back into the literal frame.  Do so in a function off to the side, not inlined into the interpreter loop.Slang:Fix computation of StackInterpreter''s requiredMethodNames:; it must use objectMemoryClass, not assume NewObjectMemory.  And SpurMemoryManager''s api includes api methods in the scavenger.  Henc3e printRememberedTable is now generated.With these changes Guille''s test case still crashes but gets much further :| e |Smalltalk supportsQueueingFinalization: true.e := (1 to: 200000) collect: [ :i | Ephemeron key: (ObjectFinalizer receiver: ''test'', ''asd'' selector: #logCr) value: Object new ].Smalltalk garbageCollect!' id '7755faa2-afdc-4d3d-9530-47599e2eaf14' date '25 May 2016' time '5:58:11.196163 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1865' message 'Fix two bugs in ephemerons (found by Gille Polito - thanks!).1. obj stack extension must happen with marking set to true if new pages aren''t to be GC''ed.  So move the assignments to marking out into markObjects: where they can surround nilUnmarkedWeaklingSlots.2. fireAllUnscannedEphemerons needs to enumerate the unscannedEphemerons set properly, an oop at a time.Use bytesPerOop instead of wordSize throughout unscannedEphemerons access for consistency.' id '2aa4b0e0-004d-4599-896a-084a749a2c47' date '23 May 2016' time '3:49:52.425548 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1861' message 'Fix the Spur implementation of becomeForward:copyHash: for becomming immediates with copyHash false.  Fix the scavenger''s referenceCountRememberedReferents: for forwasrding to immediates, and add a printRememberedSet convenience.Make primitiveDoPrimitiveWithArgs usable as a mirror primitive, such that no message needs to be sent to the receiver to evaluate a primitive on it.  This would make possible Context>>receiver: anObject tryPrimitive: primIndex withArgs: argArray.Use symbolic constants for the primitive numbers of the primitive-executing primitives.  Provide support for running the leak checker after an external primtiive call in the StackInterpreter (for debugging leaks in the GdbARMPlugin).' id '2b288ffb-5ed0-4adc-9a5c-929af14fbb4b' date '19 May 2016' time '1:53:28.737873 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1860' message 'Fix assert in primitiveVoidVMStateForMethod; ensureFrameIsMarried:SP: exopects the stack pointer to exclude/point above any instruction pointer.' id '4d58d995-ee0c-4330-9190-adfa038e8f24' date '16 May 2016' time '6:44:21.882298 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1859' message 'Add missing subclassResponsibility so as to let <VMMaker generateSqueakCogVM>.Remove now unused *IntegerSuffix methods.' id 'b2663b17-a307-4844-8873-0dfbda8a731a' date '13 May 2016' time '10:14:41.362 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1858' message 'Fix slip in closedPICRefersToUnmarkedObject:' id '4b71a017-2e37-4c2f-bab6-9010e95cb2ea' date '11 May 2016' time '11:29:11.609577 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1857' message 'Add some hopefully helpful documentation page pointers to ARM instructions' id '01dc1cd0-4095-4ead-b3ca-408c051c29cf' date '10 May 2016' time '11:49:45.497012 am' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1856' message 'Fix two regressions introduced into the ARM cogit in the register allocation changes made recently.  a) getSave/RestoreRegs: should do nothing on ARM, and b) Extra0Reg must be distinct from the other registers (!!).  Fix a speeling rorre.Simulation: Fix printing of the register map (a regression from the abstract register putsch of last year).  Fix parsing invalid address traces in reporting the last N instructions.  Improve printing of ClassBindings in disassembly.In 1856:Gregor Mendel starts his research on genetics.Kate Warne, the first female private detective, begins to work for the Pinkerton Detective Agency.Pre-human remains are found in the Neandertal valley in Germany.' id 'ddc1d13f-a8de-4cb1-af85-65ca64ffbe34' date '9 May 2016' time '7:06:23.09895 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1855' message 'Fix primitiveIsPinned.In 1855The Bunsen burner is invented by Robert Wilhelm Bunsen.Friedrich Gaedcke first isolates the cocaine alkaloid, which he names "erythroxyline".William Odling proposes that carbon is tetravalent.Charles-Adolphe Wurtz publishes the Wurtz reaction.Benjamin Silliman, Jr. pioneers methods of petroleum cracking, which makes the entire modern petrochemical industry possible.' id 'd8e4a3c2-a3bf-4adc-b224-8012903a1ef4' date '1 May 2016' time '8:54:04.959896 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1854' message 'Delete a broken assert.  Rename a misnamed method.' id '69822805-79e9-43ee-a302-00e3536dc4fe' date '30 April 2016' time '1:13:30.569533 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1853' message 'Fix missing comparison operation in genPrimitiveIdentical. This should fix Character = problem encounterd in Cuis.Comment concretizePrefetchAw, and store machineCode in last statement so as to avoid a -Wunused-value warning.' id '3ff63b2d-9dc9-4d6a-b3ff-fb6d37f1085e' date '29 April 2016' time '10:58:38.094 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1852' message 'Correct slip in primitiveMethodXray, the flags were not set in each caseOf: branch (thanks to -Wunused-value).Remove assert in classTagForClass: because ensureBehaviorHash: already does it.Correct typeCompatibility test.' id 'c50f4c61-776f-4081-af84-ea320b056c30' date '29 April 2016' time '9:10:25.503 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1851' message 'Slang:Fix inlining in the wake of recent type inferrence/promotion changes that changed the inlining landscape sufficiently to uncover bugs.inlineCodeOrNilForStatement:returningNodes:in: and inlineSend:directReturn:exitVar:in: must cooperate to not drop returns in statement lists, other than at the end of the statement list, in the context of returning ifs.  They must be careful not to leave returns at the end of statement lists in returning ifs.  The symptom was falure to assign the value of a converted SmallInteger when inlining positive32BitIntegerFor: into positiveMachineIntegerFor: in the 32-bit case.Do not use cppIf: SPURVM ifTrue: ... or cppIf: MULTIPLEBYTECODESETS ifTrue: in InterpreterPrimitives and subclasses, and allow the vmClass to override VMBasicConstants so as to eliminate code at translation time that tests COGVM, COGMTVM, SPURVM  and STACKVM.  These need to be defined at compile time only in plugins; the VMs generated are soecific to the values of these constants.Rewrite methodClassOf: to not reply on comma-separated expressions in the generated C.In 1851 a population census is taken in the United Kingdom. The population reaches 21 million. 6.3 million live in cities of 20,000 or more in England and Wales and cities of 20,000 or more account for 35% of the total English population.  The first protected submarine telegraph cable is laid, across the English Channel. The Chilean Revolution ends after the rebel defeat at the Battle of Loncomilla.' id 'a2b37448-8ea6-480e-aa07-e99d6de1744a' date '28 April 2016' time '10:29:51.033515 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1850' message 'In 1850, Harriet Tubman becomes an official conductor of the Underground Railroad in the United States. The Potato Famine is ongoing.Partially fix inlining of returning ifs.  inlineCodeOrNilForStatement:in: is wrong to assume that a send is never a direct return; it is if it is in a returning if.  So refactor it to inlineCodeOrNilForStatement:returningNodes:in: and have its caller tryToInlineMethodsIn: compute the set of returning nodes appropriately.  This could all be cleaned up somewhat but better to get it working first.  Ficxing this bug then uncovers another in exitVar:label:. exitVar:label: uses replaceNodesIn: to replace ^exprs with exitVar := expr. goto exitLabel, but replaceNodesIn: is strictly top-down, so any replacement for ^expr ifTrue: [...^fu...] ifFalse: [...^bar...]			 will prevent replacement of either ^fu or ^bar. The corollary is that ^expr ifTrue: [foo] ifFalse: [^bar]			 must be transformed into expr ifTrue: [^foo] ifFalse: [^bar].This isn''t finished yet; e.g.	SpurMemoryManager>>firstFixedFieldOfMaybeImmediate: oop		"for the message send breakpoint; selectors can be immediates."		<inline: false>		^(self isImmediate: oop)			ifTrue: [oop asVoidPointer]			ifFalse: [self firstFixedField: oop]	is mistranslated as	static void * NoDbgRegParms	firstFixedFieldOfMaybeImmediate(sqInt oop)	{	    return (oop & (tagMask())	        ? ((void *)oop)	        : (/* begin firstFixedField: */	            return pointerForOop(oop + BaseHeaderSize)));	}but it''s close enough, given that the generated code from the previous version is wrong yet compiles silently.  This versiomn correctly translates e.g. inlines of positiveMachineIntegerFor: and inlines of positive32BitIntegerFor: into it.  Hopefully we''ll fix the remaining issues PDQ.Change statement list printing to use KB style I can''t read anything else, forgive me).' id '5a13ad57-d069-44d3-b7c3-855c926f66ad' date '27 April 2016' time '7:56:19.331347 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1849' message 'Fix a bad bug in primitiveVoidVMStateForMethod. One might think that the heap scan is unnecessary if the method does not have a cog method.  But it could be the case that the code zone has recently been reclaimed and so not having a cog method is no indication that it didn''t have a cog method some time in the recent past, and that there are indeed still contexts with machine code pcs out there.  The only steps that can be avoided is divorcing frames in the stack zone, and scanning to unlink and free if there isn''t a cog method.Refactor flushExternalPrimitiveOf: and callers to eliminate duplication; moving the primitive number test into flushExternalPrimitiveOf:.Side-step inlining for bereaveAllMarriedContextsForSnapshotFlushingExternalPrimitivesIf: to reduce duplication in Spur''s allObjectsDo: (which unrolls its argument three times).Extract one phrase from cog:selector: for readability.' id 'd65892b1-b636-442a-affd-36ef8f9abcd1' date '27 April 2016' time '12:44:35.473999 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1848' message 'In 1848 Giuseppe Verdi wishes to replace soprano Eugenia Tadolini as Lady Macbeth for the first Naples performance of his opera Macbeth on the grounds that her voice and appearance are too beautiful.Add printActivationsOf: and have it and printContextReferencesTo: print the pcs of the contexts they find.Eliminate duplication in [directed]SuperclassSend.Fix the order of the annotation names to fix disassembly in the simulator given VMMaker.oscog-eem.1847.  Print the homeOffset as well as the homeMethod in embedded block methods.A few minor changes to eliminate C compiler warnings.' id 'd9bc9a1b-451c-48b8-ba81-4c932fc83ca0' date '26 April 2016' time '5:06:28.431902 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1847' message 'primitiveVoidVMStateForMethod: ensureAllContextsWithMethodHaveBytecodePCs: should widow contexts, otherwise "separated" but not yet widowed contexts may persist..Cogit: reorder annotation constants to simplify isPCMappedAnnotation:.Simulation: fix receivers of integerObjectOf: in recent multiply prim changes.' id 'cc80350d-f8a9-47e6-960f-a0e31e20d725' date '26 April 2016' time '8:49:48.651885 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1846' message 'Added convenience methods to simulate new sista primitive allMachineCodeMethods (Maybe it shouldn''t be a sista primitive ?).Fixed the primitive so that it shorten the array answered instead of answering an array ending with many nil.' id '1722de25-959a-41b4-ab92-b31c62fa8ec0' date '26 April 2016' time '9:34:11.962387 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1845' message 'Debugging: Add printContextReferencesTo:Cogit:Fix regression in VMMaker.oscog-eem.1823 when merging the two map enumerators into one that affects Sista.  The merged enumerator must extend IsSendAnnotations with the AnnotationExtension.Inline label maintennance funcs.' id '8e0d7f76-6c62-4a86-98f5-2bb923f3bf98' date '25 April 2016' time '6:40:35.00415 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1844' message 'Change overflow tests in precondition rather than postcondition for small integer multiplication.Because integer overflow is undefined behaviour, and because we can''t rely on undefined behaviour, the compiler has a license to eliminate the post-condition as dead code (at least since iso c89 acception).Post-condition currently works because we use -fwrapv compiler flag, but relying on specific compiler flags is bad practice in the long term. The pre-condition test is not much more expensive and we can avoid a isIntegerObject: test in post-condition, so there''s no reason to not follow the C99 standard.Anyway, Cog will detect and accelerate these multiplication with just (integer multiply, jump on overflow) instructions, so we''re speaking of the fallback code here (like in case of byte code simulation).Note that I used a 64 bits (sqLong) result and signedInteger64For: in my own branch to completely eliminate overflow in 32bits and go beyond SmallInteger limits. I did not reproduce it here because it''s a departure from SmallInteger primitive that states:	"Primitive. Multiply the receiver by the argument and answer with the	result if it is a SmallInteger. Fail if the argument or the result is not a	SmallInteger. Essential. No Lookup. See Object documentation whatIsAPrimitive."Maybe we could implement this large integer trick in bytecodePrimMultiply (since it already has special case for Float argument, why not for large integer result...)...' id 'a0e829f0-7d01-424f-a6d3-520759f4a30d' date '25 April 2016' time '11:13:38.071 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1843' message 'Fix my recent bug for signed 32bit long access (introduced beginning of April).One symptom is:  (Alien newGC: 4)	signedLongAt: 1 put: -16r7287E552;	signedLongAt: 1I incorrecly used the signed value (integerValue) in one branch, and the magnitude (value) in the other branch...This is an incorrect copy/paste from maybeInlinePositive32BitIntegerFor: in my ultimate #if SPURVM refactoring.While at it, avoid the confusion by using a better variable name (magnitude), and eliminate UB related to computing opposite of INT_MIN by explicitely using unsigned type.' id '9ef5d374-ae5e-437a-9116-cde9d708c0d7' date '25 April 2016' time '8:24:03.731 pm' author 'nice' ancestors ((name 'VMMaker.oscog-cb.1842' message 'Added a primitive to answer all the methods present in the machine code zone.allMachineCodeMethods	<primitive: ''primitiveAllMethodsCompiledToMachineCode'' module:''''>	^#()	This way inferencing types from runtime information in the image is easier as one can ask the VM which method have type information, then ask for the type information of the method which have some.' id '2ce5e12d-6660-475e-ae31-cf98d07390dd' date '25 April 2016' time '5:43:54.079924 pm' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1841' message 'Revert type inference for shifts << >> because it prevents cog v3 to start (until we find why).Fix positive32BitIntegerFor: for Spur64 which did work only because the constant was generated ULL.Now the status of kernel tests is back to something normal at least on mac for Squeak.' id '0d40f497-289c-46c5-ace2-b3280a5b096f' date '24 April 2016' time '11:38:02.212 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1840' message 'Oops, correct the inversion of type inference for left/right shift.Protect the type of most used integerValueOf:/isIntegerObject:This restore good health for CogSpur32 tests, but not yet for CogSpur64 which has a problem with SmallFloat, and definitely not for CogV3 which now fails to start.' id '218875e3-8515-4804-a608-9e3228ffb843' date '24 April 2016' time '10:30:31.797 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1839' message 'Unify type inference used to #inferReturnTypeFromReturnsIn: with that based on AST.That means many more type inference for message sends (returnTypeForSend:in:). Ideally any message generated specially thru initializeCTranslationDictionary should have a corresponding entry in returnTypeForSend:in:, because type inference cannot apply to special tricks applied by CCodeGenerator.There is still possible ambiguity related to different types in different path (if else/ ()?: ). This was the whole point of #addTypesFor:to:in:. IMO we cannot resolve automatically and maybe the best will be to raise a Warning, optionnally ignore it and let expert user manually fix it..Now that type inference is a bit more thorough, release type restrictions in #isFunctional in order to obtain much more aggressive inlining.With those, a gain of 10% is possible on the LargeIntegersPlugin dominated bench:[ArbitraryPrecisionFloatTest suite run] timeToRun.' id '9f8b7677-00f1-4c43-bae8-2ab899cf0de4' date '24 April 2016' time '2:57:19.464 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1838' message 'Use a type inference that better fits C rules (C99 standard section 6.3):- in (float op int), int is promoted to double not float- in (unsigned short op short) both operands are promoted to #int due to int promotion rules.The idea behind this is that behaviour of generated code for inlined and non inlined code should be the same. We can guaranty such property only if we adhere to C rules.' id '73cf9fda-4e5a-4e0c-a1b9-92ace5f8f3c9' date '24 April 2016' time '1:47:02.874 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1837' message 'Extend type inference capabilities from the AST.Use minimum generality for generated integer constants:- use int if variable fits in int- else unsigned int- else long long (long would be enough for 64bits versions, but long long works for both 32 and 64)- else unsigned long longThis is to avoid spurious unsigned promotion due to improved type inference.Protect #pathTo:followWeak: which can currently only work with a signed int, from possibly future spurious unsigned inference (I didn''t bissect at which stage exactly this happens, but it happened).' id '7c7bd77c-ff12-4085-bbe1-9ba0962b5709' date '24 April 2016' time '1:37:15.458 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1834' message '1834: Charles Babbage begins the conceptual design of the "Analytical Engine", a mechanical forerunner of the modern computer.Fix slips in my versions of the offset time primitives.  They need to pop argumentCount + 1, not argumentCount.' id '858a9c54-959b-4d7e-b9b3-5f083d37f488' date '22 April 2016' time '1:04:12.789614 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1833' message 'The year Ada Lovelace was introduced to Charles Babbage by Mary Somerville.Revise slightly the declaration of the integer type testing macros for internal plugins.  Arrange that plugins not using the API are generated as previously.  Arrange that external plugins make no assumptions about tag assignments.  Fix the speeling of the proxy dereference generator.Fix primAlienReplace to use positiveMachineIntegerValueOf: instead of positive32BitValueOf:.' id '04364d67-49f1-4615-87e7-942001d37706' date '22 April 2016' time '11:15:44.990146 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1832' message 'Do that rename.  I wanna generate sources :-)' id '3e4d6e88-f60d-4a01-930d-7c5895b8a86a' date '21 April 2016' time '5:03:03.826813 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1831' message '64-bit Cogit: is32BitSignedImmediate: & isSignExtendedFourByteValue: are the same; we only need one.' id 'beed3fdd-2d6b-44ae-a973-f30b4dfa61e5' date '21 April 2016' time '4:25:31.011425 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1830' message 'Generate integer type checking as C macros rather than direct/indirect interpreterProxy function call in plugins.This remove the need for (compatibility broken) platforms/Cross/vm/sqVirtualMemory.[ch] rev 3673which can now safely be reverted.Don''t generate asCInt as (oop >> 1) because it would not work in Spur 64 VM. Fortunately, this selector was unused.' id '77b5402f-abf8-46ad-8f3c-4c8ab5e2e64a' date '22 April 2016' time '12:02:03.049 am' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1829' message 'Cogit: Fix PushCq in X64 for fully 64-bit quick constants (typically immediate floats).' id '7f3fe80a-c466-4d76-801f-0941dc2e0747' date '21 April 2016' time '12:00:00.793947 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1828' message '- Temporarily moved SistaCogit as a subclass of StackToRegisterMappingCogit because I need to compile it every while (sorry about that Eliot... I will try to fix RegisterAllocatingCogit when I can).- Various fixes to make SistaCogit compile:--- changed names for method genExt*RemoteTempOrInstVarLongBytecode to avoid C compiler conflict detection.--- added <inline:true> in extStoreRemoteTempOrInstVarLongBytecode for the interpreter, it''s mandatory with gnuification or there is a linking error.--- change descriptor type to Descriptor instead of AbstractInstruction in sista genJumpIf:, which is a mistake I introduced while removing counter generationg for an: / or: .' id '9bde9124-cb83-42bd-a9f4-7e035961afd3' date '21 April 2016' time '4:40:41.066653 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1827' message '(Ohm''s law publication year)- split compileAbstractInstruction in sub methods to understand what is going on.- Fix a bug in genUpArrowReturn (deadCode should be set to true for non local return). Fixing this allow to remove:(descriptor notNil and: [descriptor isReturn])	ifTrue: [deadCode := true].from compileAbstractInstruction.' id '49226588-0bfd-4e00-88c3-dfaefc9c0e57' date '21 April 2016' time '1:47:12.506717 pm' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1826' message 'When loading VMMaker, avoid dependency on this setting (Scanner prefAllowUnderscoreSelectors)' id 'e934173c-a640-fb47-b5ae-b1d706f566b9' date '20 April 2016' time '11:35:53.1 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1825' message 'Merge the LargeIntegersPlugin acceleration for type checking again (VMMaker.oscog-nice.1823).These changes require svn sources for platforms/Cross/vm/sqVirtualMemory.[ch] rev 3673' id '5fbd50af-ba8f-1a40-ae1d-72077badb7a1' date '20 April 2016' time '11:29:04.484 am' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1824' message 'Make sure the map data introspection primitive includes the stackCheck entry for frameful methods, and includes the entry offsets for frameless methods.' id '3e604324-d371-4ad6-ac2d-8acf325accfe' date '19 April 2016' time '5:09:37.848233 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1823' message 'Cogit:Add a primitive that answers pc map data for methods which can be used to better decorate methods in the VM Profiler.  Refactor the opc map enumeration facilities so that the Sista pic data primitive can share the same enumerator.  Do this by collapsing the isBackwardBranch and annotation parameters into a single parameter.  Nuke the Sista enumerator.  Rename SistaStackToRegisterMappingCogit to SistaCogit and correct its comment now it inherits from RegisterAllocatingCogit.' id 'e74631f5-1c33-4aeb-b228-c4fe40959252' date '19 April 2016' time '4:53:05.619923 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1822' message 'Slang, go the extra quarter-mile and define an optional primitive as the fast primitive fail code (null pointer) so that unselected optional primitives are in the prmitiveTable as fast primitive fails.' id 'f18408b3-d8bb-4ac7-9d7d-b37ace026619' date '19 April 2016' time '10:24:04.070999 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1821' message 'Got confused with the indexes. Sorry for the extra commit.' id 'b05e8610-8a40-46c9-992a-99b19ce720ed' date '19 April 2016' time '9:36:36.685084 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1820' message '- use option:IMMUTABILITY instead of ccpIf: to make it look better.- fixed a bug in receiver accessing in immutability primitive for mirror primitive.' id 'ce04560e-30f7-4eb5-ab6b-4863985954bb' date '19 April 2016' time '9:32:35.692708 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1819' message 'Spur: Fix bug in following state on primitive failure. The old code would always follow to depth 1, even if the accessor depth was 0.  Hard-code primitiveSize''s depth to 0 (accessing length in at:[put:] and size causes the stack depth computation to answer 1 instead of 0 for these primitives.' id 'ad6ff521-03fe-4a02-a5e1-37394ef3b399' date '19 April 2016' time '9:29:34.944574 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1818' message 'Abstract out the asnnotate Label or Nop riutine and use it to fix doubleExtendedDoAnythingBytecode' id '247e87e6-3e55-41b3-9801-7366a5913066' date '18 April 2016' time '11:00:43.154499 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1817' message 'Removed all the annoteUse (from the struct, its usage, etc...)' id '3306d184-513f-4ee4-a56e-dfad6680f5ac' date '18 April 2016' time '6:26:01.068449 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1816' message 'Fix a bug in an assert.' id 'be60cb5d-8a50-4bb5-a21d-bd9643d962a6' date '18 April 2016' time '6:23:05.986341 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1815' message 'Slang changes to get the RegisterAllocatingCogit to compile.  The struct classes must be generated in the order specified in the Cogit''s ancilliaryClasses since the structs referent each other and the first must precede the referers.  CogSimStackEntry nd subclasses get SimStackEntry as their struct name.  The ancilliary classes must include the most specific fixup and simstackentry classes only.  Remove some halts and fix a macro definition.Nuke the unused SpurCircularBuffser (a holdover from the first awful Spur compaction algorithm).' id 'db6eac8d-fe14-43c5-9fe8-a948bfb6ff4e' date '18 April 2016' time '6:17:02.429069 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1814' message '- added cogit to BytecodeFixup for slang style double dispatch.- improved support for register allocation: branch merge successfully compiled with register moved instead of spilling.- added convenient API for simStack printing to debug - started to fix liveRegister liveness.' id '9071cb14-5130-4cfa-bc91-324ea4eded36' date '18 April 2016' time '8:47:19.742585 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1813' message 'Improvement on RegisterAllocatingCogit. Still not fully functional.' id '6ad4e1ff-610a-48a9-a89e-3bc27bab1e21' date '17 April 2016' time '4:20:47.744692 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1812' message '- Fix in in-image compilation when compiling too many methods from the image- refactored annotateUse in CogSimStackEntry to share code between methods- tried to make some sense out of the fixup merge logic. Now all return and unconditionnal jumps marked explicitely the execution flow as being deadCode. At each merge point, depending if the execution can fall through or not, handle the merge differently.I will merge with Nice code later when we will have igured out what to do and what not to do.' id '66d654ed-d03d-469b-a8b5-9b8d35bd885e' date '17 April 2016' time '1:36:41.145733 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1811' message 'Rename ScratchNReg to ExtraNReg.  Provide availableRegisterOrNoneFor: in ARM & X64 to allocate ExtraNRegs when available.Provide isCallerSavedReg: as a convenience and use it where (self register: ReceiverResultReg isInMask: callerSavedRegMask) was.Abstract away the simStackEntryClass for RegisterAllocatingCogit that will appear soon.P.S.  Don''t merge with VMMaker.oscog-nice.1811, which is experimental.  The API Eliot & Clément would like to see is something like#if SQUEAK_INTERNAL_PLUGIN# define isLargeIntegerOop(oop) \     (!isImmediate(oop) && (unsigned sqInt)(classIndexOf(oop) - ClassLargeNegativeIntegerCompactIndex) <= 1)#elseextern sqInt isLargeIntegerOop(sqInt)#endif(ClassLargeNegativeIntegerCompactIndex = 32, ClassLargePositiveIntegerCompactIndex = 33, so the above allows us to fetch the class index once, not twice)This is way quicker than three calls through the interpreterProxy.  Internal plugins should have to pay minimal costs for class tests.' id 'fd4b3b24-5fd4-45ea-bae5-725bb30b6f12' date '16 April 2016' time '3:51:06.783848 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1810' message '- Made explicit messages related to bytecode fixup (abstract away from integer flags)- Introduced RegisterAllocatingCogit, though it is not complete yet.- rename vars in alloca methods.' id '2e5fb6e7-e3a1-44ce-86ed-3a699b5bfc8f' date '15 April 2016' time '6:05:26.586463 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1809' message 'Add a 64-bit Sista Spur VM configuration.' id 'ea36b0b1-2bb5-4763-87fc-d5fecda34867' date '15 April 2016' time '12:27:25.11135 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1808' message 'In the 64-bit Spur Cogit the selector index dereference routine neds to be full block aware.' id 'bf3ecf58-b837-41b3-bc00-a259aa39ea79' date '15 April 2016' time '12:22:25.036517 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1807' message 'Added flags not to compile full block closure if not available.' id 'efdcf018-e896-4dce-b1a3-7b07f4248263' date '15 April 2016' time '11:40:00.409121 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1806' message 'Fix option provessing in the Cogit''s primitive table generation for bytecode set options.' id '6a92b5f2-a4af-44e1-9146-b829bdd5452a' date '15 April 2016' time '11:25:55.653793 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1805' message 'Abstract away the first mapped pc in a method as this is dfferent in a full block.Fix some debug printing for full blocks.' id '61d3f13e-a9e7-4be6-98ed-6cbc4d2d9794' date '15 April 2016' time '10:22:05.002185 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1804' message 'Minor fix: a Full closure can now be created and executed from machine code. It seems there is a remaining bug in code compaction.' id 'ff06dd0e-1af8-4146-9fee-e6d59deb27d3' date '15 April 2016' time '9:36:54.882067 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1803' message 'JIT and execution-time support for full block closures.  Use the old cpicHasMNUFlag in CMMethod to mark full block code, hence renaming the flag to cpicHasMNUCaseOrCMIsFullBlock.  Provide isVanillaBlockClosure: to ditinguish between standard and full block closures.  Use it in makeBaseFrameFor:.  Fix a bug with the methodLabel remembering the "is block activation" flag from previous full block compilations, clearing the offset in preenMethodLabel.  Update CogMethod header printing to print the cpicHasMNUCase or cmIsFullBlock state.  Add pool vars for the names of the bytecode sets (SistaV1BytecodeSet et al) to allow them to be tested in code, not merely in <option:> pragmas.The first full block closure example works, but there''s at least a bug with young methods if the second example is run without AssemblerMethod implementing pushFullClosure:numCopied:.' id 'e0d388d5-d8fa-4752-ac00-a33f5b8d3f1c' date '14 April 2016' time '10:48:07.170501 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1802' message 'Minor changes to the simulator to ease simulation form a Pharo image.' id 'dfba380b-78c8-4336-82ff-da433937a972' date '14 April 2016' time '10:10:19.791967 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1801' message 'Fix assert and dequeueMourner for case where mournQueue is nil.' id '223ff8af-cbc0-49ff-9692-0e5154d3f954' date '13 April 2016' time '9:54:46.330833 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1800' message 'Double oops, and fix parenthesis slip' id '4f79995a-0cf7-4f28-b68b-1d97cb711c2e' date '13 April 2016' time '12:14:39.42 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1799' message 'Oops, remove the future change that leaked out last commit.' id '6b9b0afb-6684-4974-8a2a-6df806baac7e' date '12 April 2016' time '11:59:55.459 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1798' message '1) If CogMethodZone is not given a chance to initializationOptions:,  thentheCCodeGenerator shouldIncludeMethodFor: CogMethodZone selector: #followForwardedLiteralsInOpenPICListwill answer false even for a SpurObjectMemory.Let''s give this chance to any ancillaryClasses: now that this solution has been blessed by Eliot mail :)This restores the ability to generate suprsrc & co2) Don''t let LargeIntegersPlugin be the sole sender of stAt:put: -- this let a chance to remove some not so used VMMaker code and shrink the code area if we want to.3) Factor out the duplicated code that is generating C integer literals  The intention is to later change the generation, because it unecessarily generate unsigned long long when signed long long would do, and because it is not correct for long long negative int (the C Compiler can cope with this but would generate warnings) and even less correct for INT_MIN and LONG_LONG_MIN (which would be transformed as unsigned by C compiler and would most rarely meet our expectations).4) Dispatch on the translated parse nodes for infering translated C type.  By now, provide an exact image of previous behavior.Type inference is for assigning a type to variables, but also essential for correctly inlining translated methods.The mid term intention is to improve this type inference and use it in TMethod>>addTypesFor:to:in: too (which does quite the same type of job).This may later help to relax the TMethod>>isFunctional which currently drastically limits the inlining capabilities.These future changes may have uncontrolled side effects on generated code. They will be committed when presumed harmless for code generation of head revision (asserted thru lack of regression when running Squeak trunk tests), and in all cases after the burst of Sista activity,' id '73ccb805-35ae-4fef-a22d-12e0c069bb32' date '12 April 2016' time '11:49:11.283 pm' author 'nice' ancestors ((name 'VMMaker.oscog-cb.1797' message '- Fix a slip in CogIA32Compiler printing (machineCodeAt: got misplaced somehow)- Add API to do in-image compilation for full block closure- fix the machine code generation of full block closure value primitive and add the SistaV1BytecodeSet option- Fix a slip in machine code zone compaction of primitives.- Various fixes related to full block closures' id 'c057f777-22a9-4372-bb3d-958cee4fb0f0' date '11 April 2016' time '4:18:50.709039 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1796' message 'change names to avoid conflicts and make C compilation happy' id '5a18a192-ea9c-4283-8a4e-f533ff668767' date '11 April 2016' time '11:15:12.396012 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1795' message 'Fixed minor things to make slang compilation happy.' id '7e723234-b8d0-46a7-8e2c-180da3482a3b' date '11 April 2016' time '11:01:37.99209 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1794' message '- Full closure activation does not need to fetch the outer context (useless memory read)- change primitiveSetOrHasIdentityHash to patch the class table if the new hash is set to a behavior (the primitive knows it''s a behavior if the second (optional) argument is true)For example:FullBlockClosure tryPrimitive: 161 withArgs: {38.true}- add support for fullClosures in the stack depth finder- make sure the full closure scheme is fully working in the stack interpreter (there was a problem with copied values)- fix a bug with registers and full closure in StackToRegisterMappingCogit (register are always pushed on stack for full closure activations)' id '361bc1e7-5399-4bfe-9577-be50efec4d64' date '11 April 2016' time '10:52:42.79014 am' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1793' message 'The legacy Interpreter is non functioning in VMMaker.oscog branch and are way behind VMMaker head revision.All these primitives have been moved to InterpreterPrimitives in VMMaker too, so there''s no point in carrying this drag.It will be easier to redo the few oscog branch editions at the time when we''ll merge both branches.' id '9ea0fe1b-272b-4358-8b24-3150e32b180d' date '9 April 2016' time '3:29:55.543 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1792' message 'Ouch, fix a slip some pointer were lost.' id 'db1481ee-f663-436c-8fdf-25fe1abece62' date '9 April 2016' time '4:31:58.225 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1791' message 'Fix CCode generation of LargeIntegersIndeed, this method cannot be generated:InterpreterPlugin>>firstIndexableField: obj as: cType       <inline: true>       ^interpreterProxy cCoerce: (interpreterProxy firstIndexableField: obj) to: cType!Only the inlined version can work when cType is replaced by a constant String as actual parameter.Retract it for now since I found no way to avoid generation without eliminating inlining.Replace it with a specific #pointerToFirstDigitOfLargeInt:' id '25a942c2-9c18-4bcf-a1da-585c313c89a3' date '9 April 2016' time '4:22:36.058 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1790' message 'Fix simulation of coerceTo:sim: - a CArrayAccessor behaves like a CArray (with 0-based index) but translates indices to 1-based for accessing an underlying (fake) Smalltalk object.In case of CArray, we can directly access the interpreter memory so we don''t need a CArrayAccessor anyway.The only case where we use asCArrayAccessor is that of BallonArray where we simulate both a Smalltalk fake simArray and the interpreter memory.  We absolutely need to invoke BallonArray>>at:[put:] to be sure that both are maintained, and that''s what the CArrayAccessor indirection does. #asSingleFLoatAccessor would bypass this mechanism and is thus not appropriate. Please notice the += -1 offset in #asCArrayAccessor in this case.' id '97ba305c-3bf1-45ee-a4d2-eeea6a8f4b5a' date '9 April 2016' time '3:46:14.305 am' author 'nice' ancestors ((name 'VMMaker.oscog-cb.1789' message 'full block closure' id 'c7c64db3-8654-41d0-abbe-3002a7213130' date '8 April 2016' time '3:52:22.016614 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1788' message 'finished that constant generic methods I was willing to do for month.' id 'e171089f-d65b-4a37-bb49-6cf19cc8df7a' date '8 April 2016' time '3:06:15.108621 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1787' message 'Fix primitiveTable initialization in the CoInterpreter hierarchy now that diplication has been eliminated.(CoInterpreterMT is still broken for Spur).' id '81c1bf77-c1a8-4477-9cb3-89d77a88a59d' date '8 April 2016' time '12:29:18.395256 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1786' message 'Almost finished the abstraction over constants I added months ago.I would like to check once the simulator works again on my machine about the SubCW instruction used in must be boolean to understand why SubCq was not working, and add the proper comment if SubCq can''t be used, or use it if possible.' id 'bb4e05ae-a8a5-4615-8a4a-d07948350a58' date '8 April 2016' time '12:20:06.531273 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1785' message 'Fix a slip in the fix to CogVMSimulator initialization in VMMaker.oscog-eem.1780.' id '86955b14-8c52-4082-b99a-87a9c1ec24ef' date '8 April 2016' time '12:03:55.572746 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1784' message 'Better support for closures with no outer context' id 'd5dd5b87-329a-4129-9efe-797e54bbc6be' date '8 April 2016' time '9:27:51.773 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1783' message 'Added theoretical support for remote inst var access in SimpleStackBAsedCogit for system completion.' id 'e9911aea-b813-48dd-9870-db6dbabe40bb' date '8 April 2016' time '9:04:13.062 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1782' message 'Next iteration on full block closure in the JIT.' id '71fce71a-5a23-4640-9d08-212b83d860e4' date '7 April 2016' time '7:40:42.399 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1781' message 'First half of CoInterpreter support for CompiledBlock.Implement genPrimitiveFullClosureValue.Use just 3 primitive numbers for the flull closure value prims (the current situation with BlockClosure is a blunder which we can fix by switching to CompiledBlock)..Oull the assignment to isBlock out of scanMethod into the caller so that scanMethod can serve for CompiledMethod and CompiledBlock.[Perhaps still to do is to make the CompiledBlock support conditional on bytecode set when generating C].' id '8db183ba-c100-4a9c-a562-3fe72dd965f6' date '7 April 2016' time '5:34:13.587756 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1780' message 'Eliminate duplicate initialization of the CoInterpreter hierarchy.' id '4b90904a-80a2-4646-adc3-e5496b2fd317' date '7 April 2016' time '5:29:12.636568 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1779' message 'Fix simulation of the LargeIntegersPlugin.  The issue is that interpreterProxy firstIndexableField: answers a CArray whose unitSize reflects the object''s unit size, and becuase LargeIntegers are byte objects, the CArray is a byte accssor by default.  So add InterpreterPlugin>>firstIndexableField:as:, which uses cCoerce:to: to provide a CArray typed as requested, and use it everywhere the LargeIntegersPlugin takes the firstIndexableField of a LargeInteger, and cast to #''unsigned int *''.Go some way to speed up the warppers bya) improving CArray>at:[put:] to assume unitSize is a suitable power of two, andb) add CFloatArray to access float or doubleLater on we can add CUnsignedIntegerArray, as required.N.B.  While this fixes simulation of the LargeIntegerPlugin there is still something wrong under simulation in whatever produces large fonts.  Start up the Squeak 5.0 release image with the "Squeak 5.0 Release Notes" text in huge letters in a workspace towards the front and you''ll notice that in the simulator none of the large fonts are displayed, although the text from "Fast Become" works fine.' id 'eb3139fc-9d6f-432c-83b9-099675dcb37d' date '7 April 2016' time '5:26:14.093395 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1778' message 'Split the FullBlockClosure>>value[:...] support into its own set of primitives (531 through 538).  Make these optional, depending on SistaV1BytecodeSet.No longer follow the method and context fields in a closure in activateNewClosureMethod:numArgs:mayContextSwitch:; the caller will have failed if these are forwarders, so there is no need to check again.Simulator:Fix StackInterpreterSimulator>>endPCOf: for CompiledBlocks, where a blockReturn is the last bytecode of a block method.Slang:To allow methods to be optional upon a bytecode set add the name of the bytecode set as a key to the value true in initializationOptions in all of the bytecode set initializers, with names SqueakV3PlusClosuresBytecodeSet, NewsqueakV4BytecodeSet, SistaV1BytecodeSet.' id 'cdfc4d49-1f47-4ec4-a4e1-af37cd734fed' date '6 April 2016' time '7:48:57.63562 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1777' message 'Simulator:Rationalize cCoerce:to:.  Put one implementation in VMClass and override only in the Cogit (which defers to objectMemory) and InterpreterPlugin which simply answers the value.N.B.  This means that in the InterpreterPlugin hierarchy if you want null coercion (as for example in BalloonEngineBase>>initColorTransform) you sent cCoerce:to: to self, but if you want the proper coercion of oops you /must/ send cCoerce:to: to interpreterProxy.Fix just such a coercion slip in LargeIntegersPlugin>>digitAddLarge:with:' id 'a1efdb25-0231-43f2-bf60-5e6eb78dbf3a' date '6 April 2016' time '6:31:28.51167 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1776' message 'Simulator:Several fixes for coercion given Nicolas'' new 32-bit LargeInteger plugin code.The LargeIntegersPlugin needs to coerce the arguments to cDigitOf:at:[put:] correctly during simulation.Coercion needs to support #''unsigned int *''.Hack read & write in the FilePluginSimulator which should declare the pointer args byteArrayIndex correctly and access them via at: but for historical reasons treated them as integers.' id 'ffb1c333-7c42-4f80-a951-74db178aab65' date '6 April 2016' time '6:15:12.993129 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1775' message 'Simulator:Set SPURVM correctly on initialization.  Old code would always set it to false.' id '643dcc90-05cd-4945-9531-0bb9538805e0' date '6 April 2016' time '5:43:29.382334 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1774' message 'more full closure support.' id 'f4e5d06c-ff8a-4732-b3e4-724e85e421ae' date '6 April 2016' time '10:28:43.581 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1773' message 'Cogit:Follow selectors in the openPICList post Spur become.Move the compare constant convenience up.' id '7ff9cf9c-6983-47fc-96f1-c3f11eda1376' date '6 April 2016' time '10:23:32.090149 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1772' message 'Fixed minor details related to full closures.' id '506063d2-bc8d-49df-806f-6fd35f262345' date '6 April 2016' time '10:01:10.859 am' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1771' message 'Upgrade LargeIntegersPlugin to v2.0LargeInteger primitives now deal with 32-bits digits.At image side, LargeInteger digits are still 8-bit wide.This enables fallback code to work in absence of the plugin.Subtle code:1) Large integers still have byteLength calculated as short as possible   this is to avoid having null highest 8-bit digit at image side2) For this reason largeInt:growTo: takes a byte-length parameter   and we need to restore byteSizeOfCSI: and byteSizeOfLargeInt:3) For multiply, the result is allocated with just enough bytes   for example 13 bytes*11 bytes->24 bytes->6 digits   If we would round to digits, that would be: 4 digits*3 digits->7 digits   for this reason, an additional parameter (resLen) has been added to cDigitMultiply   and care is taken to not write a (null) carry past this result length4) For hypothetical big-endian machines, bytes are swapped on the fly at each fetch/store from/to memory (see cDigitOf:at: / cDigitOf:at:put:)   This is achieved thru byteSwapped32IfBigEndian: which translates to a C macro SQ_SWAP_4_BYTES_IF_BIGENDIAN (defined in SVN platforms/Cross/vm/sqMemoryAccess.h)   But this is necessary only for arithmetic ops (+ - * / < > ...)   For bit ops or copy, there is no need to swap bytes, so direct access to pointer is used.5) Due to SmartSyntaxInterpreterPlugin, byteSwapped32IfBigEndian: has to be send to self, not to interpreterProxy, otherwise the C function is generated even if we specified <doNotGenerate> in InterpreterProxy...  For simulation purposes, this message delegates to InterpreterProxy>>byteSwapped32IfBigEndian: (this time <doNotGenerate> is taken into account in LargeIntegersPlugin)  InterpreterProxy should have a knowledge of simulator objectMemory endianness, and we should be able to simulate big endian VM. But it currently does not, so we can only simulate little endian until we fix it.Other than that I renamed a few messagescDigitOfCSI:at: -> digitOfCSI:at:cDigitLengthOfCSI: -> digitSizeOfCSI:This was to have a better symetry with digitOfLargeInt:at: digitSizeOfLargeInt:For the future, some operations could be further optimized:- on Spur VM, objects are 8 byte aligned. If we can make sure that every byte up to byteLenght + 7 // 8 is correctly filled with zero, then we can implement some of the primitives with 64-bits digit (for example comparison and bit-ops)- the copy of digits could be perform with mem:cp:y:- in normalizePositive: / normalizeNegative: it should be possible to shorten a LargeInteger from longByteLen to shortByteLen without reallocating and copying, if ever (shortByteLen + 3 // 4) = (longByteLen + 3 // 4) in V3, and (shortByteLen + 7 // 8) = (longByteLen + 7 // 8) in Spur. I demonstrated this sometimes ago (see http://smallissimo.blogspot.fr/2013/04/still-hacking-largeintegerplugins-in.html)OK, this commit message is a bit longer than usual, and maybe this prose should be saved elsewhere, but at least it now exists.' id '36fe278a-84bd-4899-a882-833a4edf8696' date '6 April 2016' time '5:06:23.182 am' author 'nice' ancestors ((name 'VMMaker.oscog-cb.1770' message 'block creation side of full block closure scheme.' id '0c623bff-4d52-436e-8ce8-20e48a36f265' date '5 April 2016' time '6:28:46.687 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1769' message 'Added no must be boolean flag' id 'ff68a0fd-57fb-43a7-bfd9-9c72ab42b57d' date '5 April 2016' time '5:34:00.076 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1768' message 'extract constant from JIT code.Added support in the interpreter for remote inst var access and access flags in other instructions.' id '5027b1a4-9d8d-4358-91f7-d3de094ebd59' date '5 April 2016' time '5:30:34.345 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1767' message 'fixed a bug in and: or: generation in the SistaCogit.Check quickly that all extA are restored to 0.' id 'b8ef10ec-e7ee-458d-8b9c-47c0fb37d302' date '5 April 2016' time '4:54:59.54 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1766' message 'Added the no must be boolean flag to tell the JIt not to generate the mustbeboolean trampoline.' id '38f81b1b-b83b-42aa-9ed6-5f22efcd8db1' date '5 April 2016' time '4:48:20.054 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1765' message 'Added the remote inst var access bytecode in sista V1 bytecode without interfering with existing code.Added the ExtB flags extension to tip the JIT how what machine code checks can be ignored on specific operations.' id '65ea22d4-d96c-41bb-b7d8-4ad1f021409b' date '5 April 2016' time '4:34:19.354 pm' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1764' message 'Provide missing spur simulator messages byteSwapped32IfBigEndian: and byteSwapped64IfBigEndian:' id 'c776e6b6-a8ad-46a8-89c9-15460bf25c9a' date '6 April 2016' time '12:18:06.794 am' author 'nice' ancestors ((name 'VMMaker.oscog-cb.1763' message 'Nicolas, I had to temporarily revert some of my changes....I took your version and reapply only this single change.Sorry about that. Can you rebase form this version ?' id 'eae47156-f323-4975-880e-399822579ff1' date '5 April 2016' time '11:52:00.157 am' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1760' message 'Before updating LargeIntegersPlugin to 32bits limbs, get rid of obsolete primitives burden.' id 'ae64abbe-8a10-4814-95a5-d54c91e62463' date '3 April 2016' time '10:53:08.924 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1759' message 'Use the new macro SQ_SWAP_4/8_BYTES_IF_BIGENDIAN to factor out proliferation of cppIf: VMBIGENDIAN.Memory is 8 bytes aligned on Spur. When storing 32/64 bits large integers values, allways fill the eight bytes whatever the effectivily used size, rather than bothering with dissertion of size.Prepare the same change for fetching 32/64 LargeIntegers values on SpurVM, but comment it out for now as it''s unclear whether those oversize bytes are effectively zero for already created LargeIntegers.' id '19e95bf2-b480-4986-8d9a-8345e44f3099' date '3 April 2016' time '9:26:39.76 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1758' message 'Fix generation of byteSwapped in v3.Sometimes slang rules are just mysterious...' id '054160dc-66a2-450c-b22e-b7de8120f78d' date '3 April 2016' time '4:26:46.014 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1757' message 'Use the byte swap macros as provided by sqMemoryAccess.h since svn 3667Eliminate the now un-necessary related VMBasicConstants.Fx a snafu in StackInterpreter>>getWord32FromFile:swap: and CogVMSimulator>>openOn:extraMemory:  that would have swapped64 a long32 on 64bits VM...Well, there is no bigEndian 64bits STACK/COG image, so this was only a theoretical bug.Note: classical interpreter reads a long for image version, not a word32.Fix same snafu in StackInterpreter>>getShortFromFile:swap:  alas, I didn''t provide a SQ_SWAP_2_BYTES macro, so open code it for now....' id 'a8652aa5-b750-4c29-bb85-283dc8201c29' date '3 April 2016' time '12:47:06.347 am' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1756' message 'Spur:Have WideString>>at: fail to answer an out-of-range character in the interpreter primitive.Cogit:rescue compilability by making the immutability support routines option: #IMMUTABILITY.Fix the ARM''s caller-saved register mask now that we can name all the actual registers.' id '141cf0f3-955a-486f-8082-decbc14645d7' date '1 January 1970' time '5:12:04.098931 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1755' message 'Spur Cogit:Add a compile-time flag, CheckRememberedInTrampoline, that controls whether the remembered check is generated in-line or in the trampoline.  If checked in the trampoline and on 64-bits use one memory access to get the header and share the access between the IMMUTABILITY check and the rememberedBit check.  Factor out the rememberedBit check into its own method.The default leaves the code unchanged.  I doubt that the option will improve anything significantly; measuring the generated code in the simulator the option saves only 0.6% of generated code.  But it''s so lovely being able to explore the question in a couple of hours instead of at least a day or two in C.Here''s the data: CRIT=CheckRememberedInTrampoline; this methid is the last method generated in a listener image before it prompts the user:IMMTABILITY: 	16r93F80 <->    16r940E8: method:   16rC582F8 prim 117 selector:   16r6D12C8 primRead:into:startingAt:count:IMMTABILICRIT: 	16r93250 <->    16r933B8: method:   16rC582F8 prim 117 selector:   16r6D12C8 primRead:into:startingAt:count:VANILLA:		16r91C00 <->    16r91D68: method:   16rC582F8 prim 117 selector:   16r6D12C8 primRead:into:startingAt:count:VANILLACRIT:	16r90D80 <->    16r90EE8: method:   16rC582F8 prim 117 selector:   16r6D12C8 primRead:into:startingAt:count:16r93F80 - 16r93250 / 16r93250 * 100.0 0.560142292070402716r91C00 - 16r90D80 / 16r90D80 * 100.0 0.6256742179072277And interestingly IMMUTABILITY adds only 1.5% to the code bulk; writes are rare.16r93F80 - 16r91C00 / 16r91C00 * 100.0 1.522298456260720516r93250 - 16r90D80 / 16r90D80 * 100.0 1.5884573894282634' id 'adcfc67f-a856-48b8-aef2-71ff6275a903' date '1 January 1970' time '2:26:33.237515 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1754' message 'BitBltSimulation is operating on bits of 32bits words, therefore it''s better to declare its operans as ''unsigned int'' rather than sqInt.On 32bits VM, this should not change anything, but on 64bits spur, it makes this snippet work:| wideString source pos blt expectedWideString |source := #[1 64 255 14 1 64 48 251].expectedWideString := WideString fromByteArray: source.wideString := WideString new: source size // 4.pos := 0.blt := (BitBlt        toForm: (Form new hackBits: wideString))        sourceForm: (Form new hackBits: source).blt        combinationRule: Form over;        sourceX: 0;        sourceY: pos // 4;        height: wideString byteSize // 4;        width: 4;        destX: 0;        destY: 0;        copyBits.wideString restoreEndianness.self assert: wideString = expectedWideStringHence it fix loading/diffing MCZ with wide character.' id 'a0138c60-3e62-446e-a1d8-b00b7bb6c92b' date '31 March 2016' time '10:04:44.274 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1753' message 'Make VMMaker.oscog-cb.1752''s changes compilable.Add a class var to hold the number of store trampolines; use 5 trampolines.  Initialize the table for simulation in generateObjectRepresentationTrampolines.Declare ceStoreTrampolines conditionally depending on IMMUTABILITY.Avoid an extra register load in the store trampoline generator.' id 'c2577253-d843-4791-871d-f5e8ba2106b9' date '1 January 1970' time '12:22:37.951321 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1752' message 'Attempt to make multiple trampolines instead of 1 for the store trampolines. By changing in 1 place the code (numStoreTrampolines), choose how many trampolines you want.' id 'f33aacb8-6e6e-4aae-a6dc-18f006b76afd' date '31 March 2016' time '5:23:26.805 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1751' message 'Revise the IMMUTABILITY store check to remove the need for the branch around the setting of TempReg with the inst var index.  By having ceStoreTrampoline repeat the immutability test it doesn''t care about the value of TempReg in the store check case and so we don''t need to jump around the instruction that sets TempReg.  This reduces the store check by a further 2 byte instruction.  Clément, if you hate this we can back out of it, but I thought I''d commit it all the same.Simulator:  Fix casting in the JIT simulator for the recent integer conversion routine modifications.' id '1ae8a7b7-5497-4eba-9511-198cc5aa7485' date '1 January 1970' time '3:02:52.225589 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1750' message 'fixed a missing option which was triggering compilation warnings.' id 'f3fb15a8-3341-47eb-899d-eac3ca8696f3' date '30 March 2016' time '4:45:49.478 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1749' message 'fixed a type zip.' id '934efe61-338b-40ad-999c-a1c9bd594736' date '30 March 2016' time '4:38:46.991 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1748' message 'Reworked machine code generation of immutability so for common stores it uses a single trampoline for both store checks and immutability checks.I have simulation bug due to large integers, so I am not entirely sure everything is working, but generated code looks good.' id 'db420bcd-e4aa-4cad-9543-047274e49915' date '30 March 2016' time '3:52:01.732 pm' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1747' message 'Correct undue sign extension wile promoting 32 to 64 bits int in fetchLong64:ofObject:This was causing trouble in non spur object memory (V3) especially since I decided to generalize the usage of this message.My feeling: we urgently need unsignedLong32At: to avoid these beautiful cast.' id '1b765c2a-8d50-4187-8dc2-216c4556a755' date '29 March 2016' time '11:45:53.394 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1746' message 'Modify generateAbs:on:indent: to generate fabsf for float.  Write the case statement a little more declaratively/extensibly.' id '9e4a49eb-8ebe-486d-b6f0-430100efa288' date '1 January 1970' time '2:20:29.877909 pm' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1745' message 'Fix generation of abs now that SQABS and SQLABS macros have been committed.Beware: sending abs to an unsigned int will re-interpret the int as signed and will generate C compiler warnings.This is currently required to let the cog/stack VM work.' id '6db43a18-29d3-4ec4-a5de-9ce41c448089' date '28 March 2016' time '1:25:06.191 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1744' message 'Correct the LargeInteger division bug I''ve just introduced by declaring some variable unsigned.Note: the easiest correction would be to restore the signed declaration of hi/lo.Indeed, signed variable are going to work because we don''t fear that (unsigned char)*(unsigned char) would overflow MAX_INT (it uses at most 16 bits, and we have 31).I keep those variable unsigned though because it ain''t gonna scale with 32 bit limbs...(unsigned int)*(unsigned int) might overflow (signed long long).' id 'f0299599-4f32-422e-b4de-edbd3f35c594' date '28 March 2016' time '12:30:43.777 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1743' message 'Finish 1st round of LargeIntegers refactoring- simplify the left and right shift- use as much unsigned arithmetic as possible- homogenize type declaration within the plugin- remove unused digitOf:at:' id 'c4607394-3c0a-4984-87b6-06e1e25e744e' date '26 March 2016' time '1:38:58.425 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1742' message 'Refactor LargeIntegers in order to prepare the avent of digits larger than 8 bits.Most of these refactorings are already applied in classic interpreter VMMaker branch.Half message were named #bytesOp, the other #digitOp...Homogenize all message names as #digitOp.Also homogenize C core message names #cCoreBytes #cCoreDigit #cBytes -> #cDigit...Rename the rest of #bytes message (whose purpose is to operate on bytesObjects) -> #largeInt (whose effective use is to operate on largeIntegerObjects). This makes the intention a bit clearer.Remove unused #negative:Remove debugging stub #think' id '12c26a42-336a-4a56-a44f-a9a97fc3d43e' date '26 March 2016' time '12:08:11.776 am' author 'nice' ancestors ((name 'VMMaker.oscog-cb.1741' message 'Rewrote identity primitive to check for forwarders only when the identity of objects is different.I believe the previous version was buggy if the argument was a forwarder to an immediate.' id 'c7585fe1-9078-455c-be43-fd2944b8de9f' date '24 March 2016' time '10:26:08.795 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1740' message 'Fix slips in new versions of bit primitives.' id '10ece78d-d04d-4ad2-8598-e496b6a6097c' date '23 March 2016' time '12:56:08.002711 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1739' message 'Fix a slip in my correction of primitiveUtcWithOffset (wrong arg count check), and use ioLocalSecondsOffset to get the timezone, hence avoiding the need for the atomic accessor for both clock and timezone offset (the offset can only be changed from the system, and hence won''t change while this primitive is executing).Add a Smalltalk epoch version primitiveUtcAndTimezoneOffset and give it primitive #244.' id 'e9e980a3-1fc0-4425-acb8-f1f02f1977b0' date '23 March 2016' time '12:41:48.73939 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1738' message 'Fix a slip in VMMaker.oscog-dtl.1730; if the primitive failed having taken an argument that was not pointers of length 2 or more, it would have left the stack off by one.  Nuke the push/popRemappableOop cuz in Cog it isn''t required.' id '4025874f-971e-4cf2-86f4-c59e7b0b4a55' date '23 March 2016' time '12:23:01.545398 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1737' message 'Review VMMaker.oscog-nice.1731 through VMMaker.oscog-nice.1736.Fix maybeInlinePositive32BitIntegerFor: & positive64BitIntegerFor: in simulation for negative integers less than minSmallInteger.Shorten the commentary in the streamlined bitAnd: and bitOr: primitives.Use the right convention for SpurMemoryManager>>stSizeOf:; we mist defer to the coInterpreter so that the right code is run when simulating.' id 'b6c433f3-b377-4fb3-9547-6e6bd24eb90d' date '23 March 2016' time '11:11:50.230844 am' author 'eem' ancestors ((name 'VMMaker.oscog-nice.1736' message 'Fix another bug of 1732.nice commit which broke primitiveBitAnd and primitiveBitOrThe symptom is this one at least in stack spur 64bits:(-1 bitAnd: -1) -> -1 "correct"(-1 perform: 1bitAnd: with: -1) -> 16r1FFFFFFF ''huh?"it''s -1 asUnsignedInteger >> 3...The first one is working Ok because it''s using bytecodePrimBitAnd which is very simple and correct.here is the mistake I introduced a #usqInt type hint in slang.At the time I did it, it was to reduce the number of signed mismatch warnings which are a plague. Yes but:integerArgument := self positiveMachineIntegerValueOf: integerArgument.Ouch, the return value is supposed to be unsigned.While the parameter has to be signed in order to have the isIntegerObject: bit tricks working once inlined by slang...So reusing the variable name for two different things was not a good idea finally (it rarely is).This doesn''t happen in my own branch because I''ve carefully rewritten the shift logic to use exclusively well defined unsigned behavior, but my changes are too aggressive, and I''d like to introduce them gradually to give a chance of reviewing them.------------------While at it, use cCorceSimple:to: ''unsigned int'' when fetching integerValueOf rather than asUnsignedInteger.The reason is that the first will never do sign extension, while the second would in 64bits.OK, the 64bits spur cannot take this path, because a 32bit int would be a SmallInteger, but I prefer to throw good basis, this will avoid having to ask myelf about the same problem again in a couple of years...I would much prefer to have a fetchUnsigned32/64, but we''ll see that another time.' id '193c2046-4773-44ea-9455-a138be7b0992' date '19 March 2016' time '3:41:39.741 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1735' message 'Workaround spurious breakage caused by nice.1732Slang inliner does inline this call:    sqInt shifted = 0xFFFFFFFFU;    shifted = positive32BitIntegerFor(shifted);into:    sqInt shifted = 0xFFFFFFFFU;    if( shifted <= MaxSmallInteger)    {        shifted = (shifted << 1) | 1;       ...snip...shifted interpreted as signed integer is negative.MaxSmallInteger is a signed integer constant, so the if test is TRUE.and a negative SmallInteger is created (with value -1) instead of a LargePositiveInteger as it should have been.The intention is to interpret shifted as an unsigned integer, but since we did not help SLANG with a hint, slang did produce a signed (sqInt) by default.' id '498f1478-029f-42dc-8290-20203333af22' date '18 March 2016' time '11:56:29.175 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1733' message 'Oups (Oops) forgot the <doNotGenerate> for simulated #stSizeOf: version.' id 'cc4513ea-67e5-4b41-b7bd-2fc790ac0102' date '17 March 2016' time '11:45:52.436 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1732' message 'Use little endian accelerators too for fetching 32 & 64 bits large integers value (like the ones used for storing value).Dramatically simplify fetching of signedInteger values by using an intermediate unsigned magnitude.Declare the positive32/64BitIntegerFor: and maybeInlinePositive32BitIntegerFor: parameter as unsigned since it is interpreted as positive.Use asUnsignedInteger in isIntegerValue: tests, integerObjectOf: and rotatedFloatBitsOf: in order to ban potential UB.Simplify bit operations using positiveMachineIntegerValueOf:/positiveMachineIntegerFor: rather than doing 32/64 bits dissertation.Fetch magnitude of positive large ints into an unsigned for large int bit ops.' id 'ea9dd158-4847-464e-9642-9786252797dc' date '17 March 2016' time '11:22:07.715 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1731' message 'Fix a shift in BitBltSimulation. The shift must be signed but the simulator incorrectly makes it unsigned leading to memory exhaustion error.Let FilePlugin>>primitiveDirectoryDelete primitiveFail rather than raising a mustBeBoolean error.Fix 64bits simulation of long64At:put: that would fail for negative put value.Provide a SpurMemoryManager stSizeOf: for simulation purpose (the message is used by some plugins).Restore a more intention revealing literal in reverseDisplayFrom:to:' id '5a57b844-0803-41bd-b772-73cf6c7dfb0a' date '17 March 2016' time '10:33:40.804 pm' author 'nice' ancestors ((name 'VMMaker.oscog-dtl.1730' message 'Allow primitiveUtcWithOffset to accept an optional parameter with an array or object with two or more slots to store UTC posix microseconds and time zone offset in seconds. Compatibility with VMM trunk. Note, consider incorporating ioUtcWithOffset from SVN trunk to provide true atomic primitive.' id 'ad4e53e1-bdbc-4cb9-b5fb-f1229ca4e19f' date '16 March 2016' time '9:06:26.74934 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-nice.1729' message 'Let the FullSimulationTest pass on a non spur host image.Let the StackInterpreterTests>>testPointerTaggingDetagging pass on a simulated 64bits objectMemoryFix StackInterpreterSimulator>>withoutSmallIntegerTags: which would not do the right thing in a 64bits spur flavour' id '4f72e8e6-9dd6-4446-93c4-f85d1b4fa668' date '15 March 2016' time '11:47:13.473 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1728' message 'Fix some printf format/argument mismatch.Note: there is another mismatch in platforms sources that needs fixing::--- platforms/unix/plugins/SocketPlugin/sqUnixSocket.c  (revision 3635)+++ platforms/unix/plugins/SocketPlugin/sqUnixSocket.c  (working copy)@@ -612,7 +612,7 @@   if (-1 == newSocket)     {       /* socket() failed, or incorrect protocol type */-      fprintf(stderr, "primSocketCreateRAW: socket() failed; protocol = %d, errno = %d\n", protocol, errno);+      fprintf(stderr, "primSocketCreateRAW: socket() failed; protocol = %ld, errno = %d\n", protocol, errno);       interpreterProxy->success(false);       return;     }' id 'a993107d-99a8-411f-9fe6-310bb1cf5a67' date '14 March 2016' time '10:56:44.166 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1726' message 'Sista:Fix nasty regression in picData:''s populate:withPICInfoFor:firstCacheTag: from Tim''s new Closed PIC organization (mea culpa).Fix slip in Sista mustBeBoolean/counter-tripped trampoline generation that only shows up in simulation but would byte in the C VM.  We can''t use putSelfInReceiverResultReg when generating trampolines because simSelf has not yet been initialized.' id '6a968923-b541-4573-bc4f-64fb95e6462d' date '14 March 2016' time '11:51:18.700159 am' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1725' message 'make FFI load symbol fail after (when find function fails). In Pharo, we allow to load global functions (so we can control world windows through FFI). This change should not affect other distributions (it wil just fail a bit after).' id '565d98b6-020e-48f3-b2fe-171e8b09ee52' date '14 March 2016' time '3:43:34.128098 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-nice.1724' message 'Modernize MacMenubarPlugin with <var:type:> definitions and cppIf:ifTrue:' id 'e599a841-72b6-402b-8518-87a807a96752' date '12 March 2016' time '10:37:26.642 pm' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1722' message 'Revert the more flexible super expansion code.  It produces an as-yet-undiagnosed lockup in generating the NewspeakSpurCogVM.' id 'e5c44d63-ba75-4cd1-bf4e-c92c4232bbfe' date '10 March 2016' time '5:29:23.250589 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1721' message 'V3:Fix simulation of fetchLong64:ofObject: and hence in signed64BitValueOf: et al.Spur:resolve the conflict between 32-bit and 64-bit tag assignments.  In 32-bits we have 1=even SmallIntegers, 2=Characters, 3=odd SmallIntegers, and in 64-bits we had 1=SmallIntegers, 2=Characters, 3=SmallFloats.  hence we would want SmallFloat64''s identityHash to be 3, which conflicts with 32 bits'' odd SmallIntegers.  Change is for 64-bits to use 1=SmallIntegers, 2=Characters, 4=SmallFloats.  This also means single-bit tests in the Cogit, which produces better code, and no scratch registers to hold masked tags.Hence roll the 64-bit Spur image format version number from 68019 to 68021.  Delegate to the object memories to determine the image format version number.Add noInlineObjectAfter:limit: for a slighly less verbose initializeObjectMemory:Turn the various class pun constants into macros for mor readable C.Slang:Allow super expansion to deal with methods with inner returns.Timestamp plugin generation start.Simulator:Add missing facade methods.Use the Squeak convention for window colours to eliminae the drab grey CoInterpreter simulation win dow (thanks Marcel!).' id '0ff03e4d-2931-478e-93cc-4893234d94c0' date '10 March 2016' time '2:10:47.278868 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tfel.1720' message 'Fix the last commit: I got confused during code cleanup.' id 'e9aa577d-1e78-4d24-aab6-9e91764f86ee' date '9 March 2016' time '11:02:57.505428 pm' author 'tfrel' ancestors ((name 'VMMaker.oscog-tfrel.1719' message 'Improve the performance of BitBltSimulator by using += rather than + and new assignment for the src and dest index pointers if they are CObjectAccessors. This avoids creating many copies of CObjectAccessors in the inner BitBlt loops, and thus improves simulation performance dramatically. For the generator, the code is the same as previously, but now in an inlined method, so nothing changes in C-land.' id 'b09bd0a2-7d2a-41d2-9794-b83f2881c59e' date '9 March 2016' time '10:35:56.474573 pm' author 'tfrel' ancestors ((name 'VMMaker.oscog-eem.1718' message 'Fix primitiveFFIIntegerAt for signed 4-byte results.  Wuth the support for 64-bit results, signed 4-byte results must be sign-extended to 64-bits.' id 'cd0ee6db-bf03-4a36-9019-2a6dcfd82cf1' date '9 March 2016' time '12:52:15.359129 am' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1717' message 'using *machine methods instead singned64... and positive64... ' id '271f0af9-e85c-4afc-bf17-c4aa735ddaaa' date '9 March 2016' time '8:31:33.743422 am' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1716' message 'Fix the bug in markAndTraceClassOf: that causes the first class table page to become a visible array.  Add a hack fix on initialization.  SInce we /can/ fix the image manually this hack isn''t necessary, but the manual fix won''t work until the markAndTraceClassOf: bug is fixed.  Sigh...' id '9115c93b-f425-4118-96e7-7130adeff1f2' date '8 March 2016' time '4:26:55.123457 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1715' message 'Ensure purgeDuplicateClassTableEntriesFor: will not destroy class pun entries.' id '3e6d062f-668d-43fa-b068-402d2b862a2a' date '8 March 2016' time '3:10:49.368185 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1714' message 'Remove wrong coertion. If coertion is present, this assertion fails: ref := ByteArray new: 4.ref integerAt: 1 put: -10 size: 4 signed: true.self assert: (ref integerAt: 1 size: 4 signed: true) = -10' id 'e83d2c5f-76cd-47fc-ac29-6c4a25fa5deb' date '8 March 2016' time '6:16:11.06581 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-nice.1713' message 'The size of [unsigned] long long was not infered...VM fool proofing:Fix a missing guard in SmartSyntaxPlugin like explained athttp://forum.world.st/VM-safety-missing-failing-guards-in-SmartSyntaxPlugin-td4816518.htmlFix two missing guards in VM profiling primitives: one should not use the result of stackObjectValue: before checking for success, otherwise a null pointer exception will occur in case of failure.' id 'ac270981-d3ba-4c42-a2b1-3a83693776be' date '5 March 2016' time '3:15:22.817 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1712' message 'Make the MacMenubarPlugin 64bits aware: the menuHandle does not necessarily fit on a 32bits int.' id '5c7fb203-b18c-4143-a2b9-cd59c2acc47c' date '5 March 2016' time '2:32:35.84 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1711' message '3 minor fixes for type inference:1) remove unecessary block argument assignment2) infer type of allMask:3) infer type of rem: instead of mod: (mod: does not exist)Don''t use cCode: pointer aliasing for storing/fetching float/double in FFI primitives.Replace with a call to mem:cp:y:- the first one is dangerous with modern C compilers- while the second is optimized away (no call to memcpy)' id '9e7ba417-b6ed-4263-82f2-27ec641d8f30' date '5 March 2016' time '2:14:57.11 am' author 'nice' ancestors ((name 'VMMaker.oscog-eem.1709' message 'Make sure that VMClass''s brood update tehir timeStamps on mehtod removes.' id '10ded6ee-4717-4e34-84d0-9c501aed252b' date '4 March 2016' time '10:05:56.554554 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1708' message 'Nuke unused named prim primitiveOriginalMillisecondClock so VM can eliminate ioOldMSecs.' id '024f7c27-85ef-488c-ad21-bdbcac6e25ea' date '4 March 2016' time '9:57:06.482075 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1707' message 'Cogit:Revise the register saving convention for trampoline calls.  Instead of passing in a boolean to indicate if all registers should be saved or not (an aproach Ryan correctly notes is bogus), pass in a register mask of registers to be saved.  If the trampoline call has a machine code continuation then the argument is usually callerSavedRegMask, and on MIPS and ARM this is empty.Use the above to move the saving of registers in the store-check into the store-check trampoline and out of the call of the trampoline.  Further, use genJumpImmediate: in the immediate test, which saves an instruction.Nuke some obsolete methods.Simulator:Change the ByteCountsPerMicrosecond to better accord with a contemporary Mac.' id '6073be04-c0ce-4791-8ada-b2d1ec54f4a4' date '3 March 2016' time '5:02:18.222299 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tfel.1706' message '* Don''t query Smalltalk globals for the BalloonEngineSimulation - it''s always there* Simulate all primitives through BitBlt>>simulatePrimitive:args:* Add a test to make sure that simulating primitiveDisplayString through the InterpreterProxy works* Update InterpreterProxy>>showDisplayBits:Left:Top:Right:Bottom: to honor deferDisplayUpdates (like the generated VM code does) before forcing it to the screen. Needs Graphics-tfel.328' id '43520f08-911f-47a8-b749-db236fb636f8' date '3 March 2016' time '5:23:32.478036 pm' author 'tfel' ancestors ((name 'VMMaker.oscog-eem.1705' message 'Fix immutability suport in the Cogit by making sure that the Slang output for the bytecode generatorTable marks inst var store bytecode generators as mapped if IMMUTABILITY is set.Change vm parameter 65 to be a set of flags, not merely the boolean for MULTIPLE_BYTECODE_SETS, and make the flags answer MULTIPLE_BYTECODE_SETS & IMMUTABILITY.Add a PC map printer to the Cogit (used to debug the above issue).  Make the current image facade support more of the printing api so that the map printer can be tested in-image.Nuke an obsolete method.' id '47d289d4-7673-412f-95a2-c2633e2b0181' date '2 March 2016' time '7:08:07.484944 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1704' message 'Update primitiveFileRead for Spur.  It doesn''t need the PrimErrObjectMayMove handling sicne Spur has pinning.Allow the CurrentImageCoInterpreterFacade to print Cog methods (useful for looking at the methods generated during the pc mapping test).Modify the facade''s management of the headerToMethodMap so that methods are not flushed on each jit compile and asserts don''t fail (compare method headers not methods).' id '21fb8ca6-b62c-4c06-8144-bd8be0832a8d' date '1 March 2016' time '6:04:07.799253 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1703' message '64-bit Cogit:Fix primtive 171 (primitiveImmediateAsInteger) in the Cogit for SmallFloat.  The old code only dealt with Characters.  The new code replicates the rotatedFloatBitsOf: scheme in Spur64BitMemoryManager.' id '9bd9e03b-fbe7-450c-8adc-5e20f7d76cdf' date '28 February 2016' time '11:35:38.535648 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1702' message 'Eliminate some C compiler warnings in the generated code.Add returns at the end of sqInt methods that don''t end with a return.Improve the variable pruning to mirror dead code elimination.Make the leak checker operational in the non-assert (& non-debug) VM.' id 'ca289ff1-8bc0-40d7-a4bb-42b583f02dd1' date '26 February 2016' time '1:00:09.123061 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1701' message 'Fix casts of functions obtained form the SecurityPlugin which, you guessed it, should be typed using sqInt, not int.' id 'cc23c8bd-4264-4514-baa0-e0c9f5996c5f' date '25 February 2016' time '1:43:31.008874 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1700' message 'Fix special selector arithmetic and comparison in the 64-bit Cogit.  My original code for genJumpNotSmallIntegersIn:andScratchReg: merely jumped if the tags differed, hence not jumping if both arguments were SmallFloat64s (or both Characters).  The new code requires an additional scratch register; hence add genJumpNotSmallIntegersIn:andScratch:scratch:.' id '4efaff50-3cc1-4840-8195-df0e306eb5a4' date '24 February 2016' time '4:37:07.211949 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1699' message 'Allow a plugin to override moduleName in generating its export table, via moduleExportsName.To this end eliminate the pluginName variable from VMPluginCodeGenerator and use pluginClass moduleName instead.Also use a shared variable to hold the moduleExportsName in the gnerated source.' id '186ebd51-28ef-4e7f-8411-96b61577b777' date '24 February 2016' time '9:16:10.818176 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1698' message 'Fix a wild goose chase.  ake sure that simulated translate dprmitives fail if given the wrong types of bits arrays.  This fixes simulated aByteString asUppercase which uses the primitiveTranslateStringWithTable primitive with the UppercasingTable.  When UppercasingTable is a wide string the primitive should fail.Add tests for 16-bit and 64-bit indexable objects to SpurMemoryManager.Fix simulation of literal32BeforeFollowingAddress:' id '5135ebff-13d3-4d8c-8bce-ed314399b14e' date '23 February 2016' time '9:46:11.903576 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1697' message 'And get the adjustment correct for the SimpleStackBasedCogit too.' id '03f07782-25a7-4178-8528-7f8638ca30ff' date '23 February 2016' time '4:52:59.370596 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1696' message 'Fix serious bug in jitted perform: primitive.  Thanks to Stéphane Ducasse for finding and to Levente Uzoni for diagnosing the bug.  If the argument count is one greater than the max number of register aerguments (2 in Spur, hence perform:with:with:) then the code to remove the receiver and arguments from the stack forgot to remove the receiver and selector.' id '4db47df6-c329-44ca-a255-7483a9cac28f' date '23 February 2016' time '4:35:02.71435 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tfel.1695' message 'add a long32At: method (parallel to longAt:) to InterpreterProxy' id '8941a433-6d64-41cf-b9dc-6cf005dd51cd' date '23 February 2016' time '6:39:07.904562 pm' author 'tfel' ancestors ((name 'VMMaker.oscog-eem.1694' message 'Fix compilation of ThreadedFFIPlugin subclasses as internal plugins.' id 'e1381bbc-a5af-4a35-ac60-a739611c7e0e' date '23 February 2016' time '9:30:35.750871 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1693' message 'Fix a bug in printHex: for 64-bits (faulty arithmetic).Fix the remaining 64-bit issues in the ThreadedFFIPlugin.  The X64SysVFFIPlugin now passes the test suite.The issues addressed are:Masks for restricting and signing integral return values must be declared as at least long (again the fact that a manifest integer constat''s type defaults to int causes problems).  Cast 1 << foo to 1 asUnsignedLong << foo in one place where it is required.Use isFloatObject: rather than floatClass to test for floats since this works for both SmallFloat64 and BoxedFloat64 on 64-bit Spur.Several pointer declarations needed to be e.g. <var: #ptr type: #''long *''>, not <var: #ptr type: #''int *''>.Several casts to int of of firstIndexableField: (which has tyype void *) were discarded.ExternalAddresses and the like need to be created with BytesPerWord or (self sizeof: #''void *''),, not 4.Modify Slang to cast a manifest constant that is the receiver of a shift to long (via postpending ''L'' to the numeric string).Speed up ffiIntegerValueOf: by adding a tag test (harmless in our current crop of VMs) and cppIf: SPURVM as appropriate.(N.B. not merging with VMMaker.oscog-EstebanLorenzano.1692.  The change there-in is incorrect.  Esteban and I have discussed and resolved the issue off line).' id '609488bc-c34d-49c6-8040-676e1a9d9d0e' date '22 February 2016' time '6:43:36.966841 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1692' message 'ThreadedFFIPlugin fixes for 64 bits.Make ffiAddressOf:startingAt:size: & primitiveFFIIntegerAt[Put] 64-bit capable.Use signedMachineIntegerFor: to answer the result in primitiveCreateManualSurface.Fix slips in testing for float and/or double in the ARM & X64 ffiCalloutTo:SpecOnStack:in: methods.Add asUnsignedLongLong to Integer along with Slang support.' id '57b2f552-72d3-4db7-99d8-ef9872eb93f5' date '22 February 2016' time '10:57:10.137377 am' author 'eem' ancestors ((name 'VMMaker.oscog-tfel.1691' message '- call super in BitBltSimulator>>halftoneAt:- implement asInteger on CObjectAccessor, so simulation code works- fix InterpreterPrimitives>>primitiveUtcWithOffset to work in Simulator- add a test case to run the full simulation for a few million bytecodes' id 'cb86b38a-7db8-484c-9407-70223d2da428' date '22 February 2016' time '10:13:26.026346 am' author 'tfel' ancestors ((name 'VMMaker.oscog-eem.1690' message 'Fix snafu in the previous commit of the StackInterpreter''s followForwardingPointersInStackZone:' id '963a9e1f-8445-4185-b59e-6cb7127ae490' date '20 February 2016' time '8:51:36.176356 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1689' message 'ThreadedFFIPlugin:Arrange that the plugin includes sqFFI.h, but defines ThreadedFFIPlugin as 1 before hand so as to prevent sqFFI.h from declaring the old API.  This allows the preambleCCode to eliminate its declarations of the surface functions, which (of course0 fall foul of using ints where longts must be used on 64-bits.  Since sqFFI.h declares these functions and is included everywhere relevant it is the gospel here.StackInterpreter: Eliminate warnings from followForwardingPointersInStackZone: by following the approach taken by the CoInterpreter''s version.' id '4c473a09-7e78-4c59-b779-f2ad17e318ed' date '20 February 2016' time '8:26:37.272946 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1688' message 'X64 Cogit:make sure that literal32BeforeFollowingAddress: answrs unsigned.  Otherwise 16rBABE1F1(5H) causes an assert faul in expectedClosedPICPrototype at startup.Introduce an abstraction for unlinked inline cache tags holding selector indices (when will I ever learn??).' id '1216c2a8-fd06-474f-9f5b-33d14918ca23' date '20 February 2016' time '7:07:45.253804 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1687' message 'Fix the signature of characterbjectOf:.Fix slips in ThreadedFFICalloutStateForX64>>initialize.Fix 32-bit int vs 64-bit pointers issues in primitiveFFI[Allocate|Free].Get X64SysVFFI plugin to deal with sixteen byte struct return.' id 'fde8cc46-be93-419f-8087-ef54c0b4f237' date '20 February 2016' time '12:07:16.278693 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1686' message 'Rename VMMaker-Plugins-Alien to VMMaker-Plugins-FFI and put all the FFI plugins there-in.Get ThreadedFFICalloutState''s variable names right.Better define PLATFORM_API_USES_CALLEE_POPS_CONVENTION in ThreadedFFIPlugin''s preambleCCode.  Only WIN32 needs this as yet.Implement structure return for X64SysV and X64WIN64.' id '52f4115e-2108-421a-b31c-12d08603a073' date '20 February 2016' time '10:50:20.57672 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1685' message 'Slang:Emit constants before types to allow constant names to be used when defining types, e.g. for array extents.Threaded FFI plugin:Use above facility for neater declarations.Enable generation of the ThreadedX64Win64FFIPlugin.  Declare its number of int and float reg args correctly.' id '59633283-8843-4826-a68a-b23ea22d1fa8' date '19 February 2016' time '5:07:14.475113 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1684' message 'Spur:Fix bug in markAndTraceWeaklingsFrom:.  Fileds of weaklings may be immediate so must use followOopField:ofObject: not followObjField:ofObject:.FFIPlugin:First cut (untested) of FFI support for x86-64 on System V and WIN64.Simulation:Revert two of Tim''s changes that break the VM simulator.' id '001ebe3f-c0df-4d8a-9fdb-ccd6b34ab469' date '19 February 2016' time '4:09:29.090179 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tfel.1683' message '- Move BitBlt simulation methods into VMMaker, they can only be used if VMMaker is loaded, anyway, and they do not have any senders (besides a duplicated test that is also in VMMaker)- Avoid ENABLE_FAST_BLT binding lookup in BitBltSimulator, because that is not simulatable code' id '23976d15-2a83-46ed-8ce9-6ec4c186da1a' date '17 February 2016' time '5:53:14.824885 pm' author 'tfel' ancestors ((name 'VMMaker.oscog-tfel.1682' message 'fix BitBlt simulation to go through primitiveCopyBits primitive.' id 'be3fb4eb-3718-4bc1-b161-b3eab7e8d58e' date '17 February 2016' time '2:00:34.166899 pm' author 'tfel' ancestors ((name 'VMMaker.oscog-tfel.1681' message 'merge' id '9f4ae99e-aa27-4ca7-a7e8-b6dae0f82b34' date '17 February 2016' time '1:59:16.638589 pm' author 'tfel' ancestors ((name 'VMMaker.oscog-tfel.1680' message 'merge' id '55139d69-7f8f-7849-95ca-900810aadddc' date '15 February 2016' time '12:46:35.512 pm' author 'tfel' ancestors ((name 'VMMaker.oscog-tfel.1677' message 'Fix BitBltSimulation (for RSqueak on Spur)' id 'e845ffd7-66b9-594f-b02c-350f015e9cbf' date '11 February 2016' time '9:48:04.961 am' author 'tfel' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1676' message '- nuked useless method (it was necesary for pharo but not anymore)- if plugin is builting, compile fails because warning() is already defined elsewhere. - sanitize: predeclaring extern/used functions to avoid "undeclared" warning ' id '707197b7-1656-460f-bb98-5b042b79239b' date '3 February 2016' time '7:19:31.574513 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1675' message 'fix optional output for declarations. Rational for this change:  with the introduction of IMMUTABILITY flag IA21ABI plugin needs to be generated with an optional flag. When compiled as external, this plugin creates this structure: #if IMMUTABILITY	isOopImmutable = interpreterProxy->isOopImmutable;#else	#if !defined(isOopImmutable)		isOopImmutable = 0;	#endif#endifwhich at least for CLANG is bad, because it tries to excute a function who points to NULL.This change fixes that behaviour, while preserving correct generation when plugin is internal.' id '1ffd58e1-613f-4809-97aa-126f6b63ac17' date '2 February 2016' time '12:51:45.901817 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1674' message 'IA32ABIPlugin: Use cppIf: to exclude the ioDrainEventQueue call in non-Newspeak VMs.  Including the <option: #NewspeakVM> eliminaes the primitive from the generated C, which is not what we want.Provide a configuration that generates all plugins to src/plugins.' id '36dea99c-e7f7-4ff4-a430-99a8ad340d36' date '29 January 2016' time '2:58:45.443225 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1673' message 'restoring correct IB32ABIPlugin class comment' id '2770aa15-cadd-42f6-924f-95034ccb7f82' date '28 January 2016' time '6:57:24.889696 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1672' message 'added an option for #primDrainOSEventQueue because it just have sense for NewspeakVM (and it makes Windows build fails if present). ' id '3ed1ee79-ae66-44d8-8366-67899098dfab' date '28 January 2016' time '5:38:59.720208 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1671' message 'IMMUTABILITY: Now that isOopImmutable: is available through the plugin API, merge NewsqueakIA32ABIPlugin into IA32ABIPlugin and nuke NewsqueakIA32ABIPlugin.  Change the Newspeak configurations to not output their own plugins.' id '65ba2e3c-cf26-496b-94e2-9038a49724a7' date '25 January 2016' time '12:08:55.31255 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1670' message 'Spur: Maintain the survivor count on scavenge (seems cost free).  Nuke the special mark count variable; it''s always zero anyway.' id '6ba2dd3d-ab44-468e-9184-1c85580f980b' date '25 January 2016' time '9:39:09.293071 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1669' message 'Fix regression in StackInterpreters from VMMaker.oscog-eem.1665. It''s primitiveFail, not primitiveFailed...' id 'fb59e89d-14ad-4bad-a231-40f2d4f05dae' date '25 January 2016' time '8:14:23.991725 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1668' message 'Slang: fix another regression given the change in VMMaker.oscog-eem.1665 to eliding empty inlines.' id '1f0b27be-e423-42d3-a18d-1c7e292a4f14' date '25 January 2016' time '6:36:23.175497 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1667' message 'General: Add vmParameter 20 (stolen from ikp''s JITTER, forgive me Ian) to answer the utc microseconds at startup.Slang: Fix exitVar:label: given the change in VMMaker.oscog-eem.1665 to eliding empty inlines.' id 'bcfe6ade-2dce-4747-99d8-cc28480a226e' date '25 January 2016' time '6:14:12.220089 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1666' message 'Spur: Fix start up of images containing >= 16 segments.  The old code assumed numSegments < 16 and failed to grow the segment records, resulting in objects in segments not entered into the segments to not be swizzled.' id '17584957-610e-46c2-b8a6-fe889c90335a' date '25 January 2016' time '5:04:39.019831 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1665' message 'Spur:Add a free space mode to the leak checked to help track down the Newspeak image startup crashes we''ve seen recently at Cadence.  So checkFreeSpace is refactored to checkFreeSpace: gcMode.Insist on inlining objectAfter:limit:.  Never inline prepareForSnapshot or writeImageFileIO (for C-level debugging).Spur Cogit: Support CompiledMethod indexing in genPrimitiveAt[Put].  Refactor to pull-out the num-literals access from genPrimitiveObjectAt.CoInterpreter: Remove the atCache from the CoInterpreter.  It''s of little benefit in the Cogit.StackInterpreter: Don''t eneter an object into the atCache if it is 16-bit indexable (this is easier, or rather likely more efficient for non-16-bit access, than implementing 16-bit indexability in the atCache).Slang: Support allMask: for the Spur free space leak check.  Put log time stamps in more informative places.  Don''t plant comments for elided inlined methods.' id 'fcc356bf-0c12-4902-8cac-f0b6a96194d9' date '25 January 2016' time '4:59:23.956016 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1664' message 'And the type iferrence algorithm can''t cope with mutual recursion, so break the log jam by explicitly typing findMethodWithPrimitive:FromContext:UpToContext: which is mutually recursive with findMethodWithPrimitive:FromFP:UpToContext:.' id '9e676eea-f638-4da0-bd70-920a096bda28' date '23 January 2016' time '5:32:29.926128 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1663' message 'Slang: The previous fix surfaced a bug with addTypesFor:to:in: where it would misstate that a recursive method in the process of being typed could not be typed because the recursive call was as yet undetermined.  The fix is simply to discount untyped recursive calls, since we''re determining precisely that type and shouldn''t abort.' id 'a07a8c3d-4a04-48fc-bed8-f189f0494d6d' date '23 January 2016' time '4:58:59.147353 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1662' message 'Slang: Fix bad regression in type inference from VMMaker.oscog-eem.1587.  returnTypeForSend:in: can only default return types to sqInt for unknown sdelectors.  The rewrite in VMMaker.oscog-eem.1587 inadvertently defaulted the return type of known methods whose return type was yet to be determined to sqInt.  The fix is to only default to sqInt if there is no known method for the given selector.  This fixes the weird flipping of the type of 32-bit Spur''s headerWhileForwardingOf:StackInterpreterSimulator: determine the endPC of a method without depending on Cogit.  This allows StackInterpreter to do symbolicMethod: also.' id '686f2648-1716-445e-8440-ec23d22489a5' date '23 January 2016' time '4:15:00.048507 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1661' message 'Cogit IMMUTABILITY cleanups.Remove the need to map the primitive error code store bytecode by having mapFor:bcpc:performUntil:arg: skip the CallPrimitive & StoreTemp bytecoees if present.  Also avoid the set-up overhead when mapping the first bytecode by moving the first invocation early.Correct and simplify testBcToMcPcMappingForCogMethod:; is compiled method parameter was never used, and the startpc of a method should be derived from the cogmethod''s method obj.Refactor genImmutableCheck:slotIndex:sourceReg:scratchReg:needRestoreRcvr: to lose its unused popBoolean: keyword.Implement IMMTABILITY in SimpleStackBasedCogit.  All combinations of SimpleStackBasedCogit x StackToRegisterMappingCogit x IMMTABILITY=true/false work on the reader image in the simulator.  THANKS Clément!!Add SimpleStackBasedCogit>>putSelfInReceiverResultReg and use it where appropriate.Fix a comment or three.Oh we will, we will not be moved.Oh we have im-mut-a-bil-i-tyJust by a bit in every object header,we will not be moved.[ed: that''s pinning, surely]' id 'a34e0ec2-d251-4618-bd67-cef5b3eddcf5' date '22 January 2016' time '5:13:11.061636 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1660' message 'Immutability:Add the immutability info to the bytecode tables in SimpleStackBasedCogitUse isObjImmutable: externally to SpurMemoryManager and hence get rid of the cppIf:ifrue: around the failure.Make the married context inst var assign methods deny immutability for their contexts.Streamline primitiveSetImmutability to use booleanObjectOf:.Cogit:Move debugBytecodePointers up into Cogit to help debugging code generation in SimpleStackBasedCogit.Plugins:Fix the FilePlugin''s unnecessary fullGC on Spur.Slang vs simulation:Get rid of the hacks for variables defined on the C command line or in headers such as IMMUTABILITY or VMBIGENDIAN.  Introduce VMBasicConstants class>>namesDefinedAtCompileTime to define these names and- have dead code elimination check for these names and not eliminate- have emitCConstants:on: query them to decide which variables are to be output as #if !defined(... forms.Eliminate the !defined hacks from various declareCVars:.Make sure that IMMUTABILITY et al /are/ defaulted to appropriate values for simulation if not defined.Nuke the now incomprehensible copyOptionsBackTo:.' id '372f5635-366a-462d-8979-ae86dee05577' date '21 January 2016' time '8:32:44.580527 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1659' message 'Now that the Cog Simulator runs fine Spur images with immutability ON, I compiled the VM.This <api> pragma was missing, It now compiles fine.' id 'db25d5fe-a6c3-4db3-882f-f9c87e239dd2' date '20 January 2016' time '11:00:55.667 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1658' message 'Ahah I had just a conflict with another mapped entry.Now primitive with error code have correct mapped entriesI have an extra nop when generating primitive with error code only, which sounds acceptable' id '0668be84-e0ef-4922-9a8f-0fa6b311eb68' date '20 January 2016' time '10:38:00.364 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1657' message 'Slang: Make IMMUTABILITY something that is defined on the C compiler command line.' id '1f8ad679-f107-4ef7-94ef-76171db3aa25' date '20 January 2016' time '7:10:43.229682 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1656' message 'ARM Cogit:Fix slip in new 16-bit aware dispatchCOncretize.Interpreter: Provide an error code for immediate replacementSlang: Remember to remove the declaration for a local that is introduced for inlining where the inlining uses the parse tree, not the local.  Otherwise, stale declarations can be left that will mistype subsequent inlines of a method with formals of the same name.Use declatationAt:put:, not direct access to declarations, for debugging.Don''t transform the parse tree/collect new locals etc, when inlining withouty renaming, just to cut down on the garbage.' id '02086cbf-8db3-4035-9f0d-f2671db50748' date '20 January 2016' time '5:55:10.847536 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1655' message 'merge in ARM 16 bit write handling. Appears to simulate ok.' id '3085df01-1695-4f2d-8c08-92fd1b1e3df1' date '19 January 2016' time '1:36:16.63 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-cb.1654' message 'In the SqueakV3Bytecode set, extendedStore and extStoreAndPop are now mapped as instVar and LiteralVar stores need to be mapped for immutability. We need to generate a fake mapping to make the mcpc to bcpc mapping happy.Starting from this version, the mcpc to bcpc is happy *except* for primitive error code. In this case, an extStore bytecode is used for the error code but is still not mapped.' id '35bdf68b-ea60-4f01-8799-14baa71ab416' date '19 January 2016' time '2:28:37.278 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1653' message 'Simplified the generated code and code generating the machine code to make it easier to understand.Still I have some bugs (but less).' id 'c46f2c10-6886-4558-9cc7-ffaae87ba44f' date '19 January 2016' time '1:28:02.308 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1652' message 'Fixed some references to the interpreter instead of objectMemory.It was working but was *very* noisy in the Transcript while simulating.' id 'a32e69ef-409d-4aba-b19d-cb2e9ff34abd' date '18 January 2016' time '6:42:16.666 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1651' message 'In this version, the Stack VM compiled to C is fully working with Immutability ON.Load the package to try to use it.I fixed the primitive not popping enough the stack...Fixed a zip in Cogit.Important change in the stack interpreter: if the cannotAssign:withValue: callback was called, its sender pc was ahead by one due to the fetchNextBytecode before the normalSend. I postponed the fetchNextBytecode after the immutability check, which works fine in the compiled VM. I think the Simulator works fine too but I might need to fix something there.' id 'b53b4619-89ec-4131-bc40-8740fbb218fb' date '18 January 2016' time '6:29:12.307 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1650' message 'And primitiveStringReplace needs to chedck for immutability amd soon should support 16- and 64-bit access.' id '4ad67abb-b40f-42d5-b199-d265f0238ae7' date '18 January 2016' time '8:26:15.606026 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1649' message 'Spur: Add immutability check to changeClassOf:to: for primitiveAdoptInstance et al.Nuke the NewspeakInterpreter.  It was there only as a reference for the Newspeak immutability support and now we have immutability in the VM proper this can go.' id '036bbe08-e4f0-4524-b00f-0093e0cda96b' date '18 January 2016' time '8:12:19.652562 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1648' message 'Fixed a compilation problem.Looks like the Stack VM works fine with immutability. Although I am not sure as the VM I generate right now is not very stable (but it doesn''t seem to be related to immutability, when I disable it I have the same crashes).' id 'c46bfd06-cfad-408f-a561-675b25295f41' date '18 January 2016' time '11:59:22.027 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1647' message 'Newspeak 64-bit Cogit:x64 must define nsSendCacheAt:' id '013e4a41-bb4b-46ba-86e0-16c6977c4865' date '17 January 2016' time '7:58:25.363169 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1646' message 'harumph.' id '83280f1d-a69e-4201-a103-e3236315d026' date '17 January 2016' time '6:55:28.108612 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1645' message 'Add a 64-bit Newspeak Cog Spur configuration.' id '9a844972-69d5-4c06-a30c-1f12fe5aba14' date '17 January 2016' time '6:36:20.912311 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1644' message 'Fix normalizePositive: for 64-bit Spur.Correct the checking for in-SmallInteger-range large integers in commentary.' id '937e3a17-80a3-4def-ad31-64ecf88b41f9' date '16 January 2016' time '10:23:22.538484 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1643' message 'Spur Cogit:Fix bugs in Spur 16 & 32-bit string access.  Conversion from character to code must use Character conversion not SmallInteger conversion.' id '596fba7b-72f9-4914-8dd8-cc41d27ce470' date '16 January 2016' time '8:40:13.08503 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1642' message 'x64 Cogit:Fix at least some of the bounds checking issues in SPur''s genPrimitiveStringAt[Put].Fix the receiver in recent follow of stacked closure change.' id '32f50135-e850-42ef-af03-cf236135405b' date '16 January 2016' time '7:39:32.736816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1641' message 'Spur:Follow the stacked receiver (closure) of a block activation qwhen handling send faults so that forwarded copied values are unforwarded for subsequent activations of the same closure.' id 'a1fef138-fa26-4a09-b0c1-1e7be82e14a8' date '16 January 2016' time '9:23:06.807672 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1640' message 'Spur64-bit Cogit:Use the same approach for boxed float ops as for SmallFloat ops.' id '5fd87422-b235-4b98-b023-c3be3586cca5' date '16 January 2016' time '8:38:12.977363 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1639' message 'Cogit:Fix slip in immutability jumps.  jumpTarget is not a selector.  getJmpTarget is.64-bit Spur Cogit:Generate cleaner SmallFloat arithmetic and comparison code by extracting arg tag once.' id '0607da54-875d-4632-95f3-ce5b0d6d3bf9' date '16 January 2016' time '8:13:24.044011 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1638' message 'Implement MoveRM[16|b]r for MIPSEL and correct machine code size of MoveMbrR/RMbrR.' id 'fc0ece88-9300-410f-91c2-412f2bfa7772' date '16 January 2016' time '7:12:50.561101 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1637' message 'Add some commentary on default sizes, explaining why 64-bit Spur has the same default eden size as 32-bits.' id 'b9e8c2e2-f194-42cf-8ffa-ef31159aabed' date '15 January 2016' time '3:44:13.036088 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1636' message 'Add 16-bit indexability to Spur.  Generate slimmer code for positive32BitValueOf: on 64-bit Spur.Fix a slip in commonAtPut: immutability testing.' id 'b30fe4bc-4de8-4dde-9709-3ad459f46862' date '15 January 2016' time '1:44:19.712356 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1635' message 'x64 Cogit:Use 32-bit register comparisons in CmpC32R so as to generate a 5 byte sequencer for pic dispatch instead of 6, and hence brong the pic dispatch jump into the short range when jumping to the abort for an MNU PIC dispatch.Set the image name and first argument in systemAttributes in openOn:extraMemory: to get more accurate arg access during simulation.' id 'b1307876-bad4-4935-8367-eb7f2dde9f22' date '15 January 2016' time '11:37:28.881199 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1634' message 'x64 Cogit:Fix 32-bit words indexing bug in Object>>at:put:.  Improve slightly the String>>at:put: 32-bit indexing code.Nuke the erroneous clickConfirmusage in simulateCogCodeAt:.' id 'a99bb73c-384c-4889-863f-7f868de2b26d' date '15 January 2016' time '10:15:05.066576 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1633' message 'Cogits:Fix bug with new PIC scheme.  the opffset to the frst jump in the PIC (the jump to the next case) is at firstCPICCaseOffset - backEnd jumpLongByteSize - backEnd loadLiteralByteSize, /not/ firstCPICCaseOffset - backEnd jumpLongByteSize - backEnd loadPICLiteralByteSize.  (This affects only x64 and in-line literal ARM, hence no one''s noticed yet).Fix off-by-two error in 64-bit Spur''s genPrimitiveStringAt[Put]Simulator:Fix brakBlock: so that setting a break block puts the VM into single step mode.  Fiux same so that this doesn''t cause constant breaks in generating machine code.  Fix the usage of clickConfirm so that click step does proimpt for stopping in handleCallOrJumpSimulationTrap:, but doesn''t keep prompting there-after.Make disassembly of trampolines add a cr.' id '81214b9c-0c06-4344-9c78-7c030cb61460' date '15 January 2016' time '5:17:15.513995 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1632' message 'Cogit:Clean up the new(er) Spur genPrimitive*AtPut methods.  Fix a bounds check bug with 32-bit bits access testing the wrong register.Correct the commentary around genImmutableCheck:slotIndex:sourceReg:scratchReg:popBoolean:needRestoreRcvr:.Fix the C type of compileFrameBuild' id '8bfb8ff6-985c-496c-a098-f3b4ef954fce' date '14 January 2016' time '1:10:38.362818 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1631' message 'StackInteerpreter:Fix a simulation-time error in signed64BitIntegerFor:CoInterpreter:ceSend: et al need to add looked up methods to the method cache, otherwise methods only found through machine code sends will not be jitted.Push ObjectMemory''s freeStart: down to NewCoObjectMemory.  It''s used only from Cogit.Spur Cogits:Add 16-bit accessing to Object & String at:[put:].  Ryan, Tim, can you check the MoveM16rR and MoveM16rR code for MIPSEL and ARM?  I think the ARM code is there, and the MIPSEL code looks to be nearly there also.Add missing machine code primitives to 64-bit Spur.  Move "Spur"''s primitiveStringAt down to "32BitSpur".Make the MirrorNewWithArg primitive do the class size check before accessing the format field.Cogit:Eliminate the bogus min/maxAbstractGeneralPurposeReg thang and use a register mask as Ryan suggested.Fix debug printing of CogSimStackEntry.Fix bugs in X64''s MoveRMbr, MoveRXbrR.  SImplify rexw:r:x:b:.Replace use of decorateDisassembly:for: with decorateDisassembly:for:fromAddress: in report recent intructions.Worry:Earlier the 64-bit Spur Cogit simulator was not working, then I ran the 64-bit Spur interpretersimulator, which worked, and then tried the 64-bit Spur Cogit, which miraculously started working again.  So there may be a misinitialization issue with the COgits which is fixed by first running the interpreter simulators. :-(.' id '310ad568-2096-4840-bd31-2f7b6eb06a55' date '13 January 2016' time '10:12:40.901306 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1630' message 'Cogit:Fix the bug in ceCaptureStackPointers caused by pushing VarBasReg to save it offsetting the stack pointer.Eliminate all the maybe*VarBase methods since we have hasVarBaseRegister and teh few clients can test that and hnce not have to divine if maybeSaveVarBase pushed something or not.Remember to nuke the <inline: true> from all those accessors now we''re using asSpecifiedOrIsQuick as the inlining policy for Cogit.' id '2ed025ea-f400-4440-8e8b-5aa46d06c9ab' date '10 January 2016' time '2:42:14.328141 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1629' message 'And manage that pesky opcodeIndex correctly' id 'e706b773-41e5-482b-aa41-bacdf83d47e7' date '10 January 2016' time '1:42:57.314037 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1628' message 'Cogit:Have ceGetSP answer the SP prior to the call rather than after, hence eliminating the need for LEAF_CALL_STACK_ALIGN_BYTES in platforms/Cross/vm/sqCogStackAlignment.h.  Also, given that we already define leafCallStackPointerDelta in each back end we can eliminate the various genGetLeafCallStackPointerFunction shims.' id 'be5be9f4-d138-4ddf-b139-f2cb6cc49a23' date '10 January 2016' time '1:15:58.631735 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1627' message 'Slang: Avoid having to mark quick methiods as <inline: true> by providing #asSpecifiedOrQuick as an inlining policy.' id 'f97c427f-d97d-413b-9697-368e50fbf958' date '10 January 2016' time '10:47:33.98326 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1626' message 'x64 Cogit:cecaptureCStackPointers cannot assume VarBaseReg is caller-saved and should save and restore it if used.' id '5153564f-5657-42ca-a4c9-84b55b308375' date '9 January 2016' time '12:30:43.60787 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1625' message 'and another one...' id 'c1bd5626-30ae-42ed-b647-fdc16b18ddf6' date '9 January 2016' time '10:42:37.534795 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1624' message 'Fix SmallFloat primitive inclusion' id '9899b029-c39d-4da7-8c5b-b318c79fdbf8' date '9 January 2016' time '10:39:04.496004 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1623' message 'Fix a bug with out-of-place two-way become, which got the hash copy the wrong way round.  By default, the hash stays with the reference in two-way become.Fix what appears to be a compiler bug with in-place two-way-become by treating the headers to be swapped so that remembered flags are swapped and hash bits are swapped if required.' id '796c33c7-b025-4e0c-bd4e-1d3fa3d71f22' date '8 January 2016' time '10:56:32.739189 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1622' message 'StackInterpreter & IMMUTABILITY:Doh!  currentBytecode is only inlined in methods marked with <expandCases> so storeAndPopReceiverVariableBytecode needs to grab currentBytecode before fetchNextBytecode in C also.' id 'aa713001-52dc-4142-b483-57dd0339e464' date '8 January 2016' time '5:26:15.890666 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1621' message 'Cogit:Fix translation changes needed for last commit.' id '45817ea7-f2d1-4538-bfe4-c748be944bf2' date '8 January 2016' time '4:13:32.748993 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1620' message 'Cogit:Refactor primitive generation so that all primitives reside in CogObjectRepresentation and subclasses, except for genPrimitiveClosureValue and genPrimitivePerform.  This eliminates the outer/inner distinction and the need for a separate compileFallbackToInterpreterPrimitive:.  It aklso eliminates the difference between SimpleStackBasedCogit and StackToRegisterMappingCogit versions, having the object representation ask the cogits to load args into registers as required, and hence StackToRegisterMappingCogit>>#genLoadArgAtDepth:into: is now a no-op instead of an error.Eliminate the enabled function from a CogPrimitiveDescriptor, adding the enablement calls to the relevant primitives, and discarding the unused primitiveIndex arguments.Handle optional floating-point (i.e. the current MIPSEL) by adding <option: #DPFPReg0> to all floating point routines (except 64-bit Spur, which currently insists, but this could change) and modifying Slang to not output these methods (but the C generation hans not been tested yet; very soon...).Status: The simulator works.  I will test generation of cogitMIPSEL.c very soon, but want to commit this now rather than continue to sit on it.' id '2b2d0809-32ab-49a2-887e-a61d1efb2c17' date '7 January 2016' time '3:03:10.883236 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1619' message 'Fixed all the instructions in the 3 bytecode sets that needs to be mapped if Immutability is turned on.I introduced #isMappedIfImmutability, which sets isMapped to true if Immutability is turned on (based on Eliot''s suggestion a few months ago)I also introduced a new needsFrameFunction, called needsFrameIfImmutability:, which does what the name suggests :-)' id '6db8b900-9c8b-4328-a246-58ecc53178fb' date '7 January 2016' time '3:31:37.651 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1618' message 'Spur: Get initialization right so that #Spur32/64BitMemoryManager is defined to enable/disable the SmallFloat primitives in the interpreter too.Fix a regression in genPrimitiveSmallFloatSquareRoot.Revert some unchanged timestamps and correct an obsolete comment.' id '52b779fd-f223-4a12-8c51-5e10a3cf4a8b' date '5 January 2016' time '8:39:14.797875 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1617' message 'As Eliot ntoed, I made a dumb mistake breking instance variable stores in the interpreter.This commit fixes the mistake. In addition, storing into an immutable object in a primitive now signals a no modification error instead of inappropriate error.I checked and the StackVMSimulator is working fine after this commit. Unfortunately, the CogVMSimulator does not work in my machine, likely due to other bugs. I am going to check that it works and that compilation to C works right now.' id '81fe5b89-69de-45b8-9b65-f2f4a8bd187d' date '6 January 2016' time '2:46:27.798 pm' author 'cb' ancestors ((name 'VMMaker.oscog-rmacnak.1616' message 'MIPS: Implement I-cache flush with <asm/cachectl.h>.Explicitly initialize scratch and floating point abstract registers to NoReg to make the translated VM compile again.Use signed shift when generating I-type instructions.' id 'f9ab8d82-c5d7-4710-98be-572dd35495a9' date '30 December 2015' time '9:52:25.92 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-cb.1615' message 'Made a new version of immutability with Eliot''s remarks:- control flow maintained for the simulator- option pragma everywhere needed- removed duplication in extStore bytecodes- removed useless instruction in primitiveClone.I tried to use it, it does not work, but it seems the bleeding edge is not stable.The only thing I noticed is that some assertion may fail in #maybeCheckStackDepth:sp:pc: .' id '712a0115-a780-4d2c-b4f8-c0bc78031889' date '29 December 2015' time '10:30:37.779 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1614' message 'Cogit:Eliminate some obsolete assignments to maxSize in computeFooSize methods.Fix slips in genPrimitiveSmallFloatSquareRoot, generateInstructionsAt: & genJumpNotSmallFooInScratchReg:.Slang:Avoid computing variable and return typres prematurely i.e. don''t derive types from as-yet-untyped methods.' id '5ffe4d04-1144-4cc2-9b4d-4ab242e2217b' date '27 December 2015' time '12:57:04.521 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1613' message 'SpurMemoryManagers: Add Spur32BitMemoryManager or Spur64BitMemoryManager to the options so that Cogit can select small float prims properly.Cogit:Improve instruction printing so that floating point ops print with the right register names.  Refactor computing the print format to allow special casing throughout the CogAbstractInstruction hierarchy.Split out the abstract register names from CogRTLOpcodes to CogAbstractRegisters so that the mapping from opcode index to opcode name (and indeed the mapping from register index to register name) works straight-forwardly without hacks to prevent register index and opcode index confusion.Make initializeAbstractRegisters initialize all abstract registers to #undefined before defining the used subset to the relevant concrete registers.Nuke unused method.' id 'c484a2ad-5f40-4de8-a9c2-3c4f4a4942aa' date '26 December 2015' time '8:28:05.311 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1612' message 'Complete the "abstract registers simply name concrete registers" coup.  Eliminate all uses of concreteRegister: concreteDPFPRegister: abstractRegisterForConcreteRegister:.Make the abstract instruction tests initializeAbstractRegisters before running (CogRTLOpcodes still needs to be initialized separately).Slang: fix default in shouldIncludeMethodForSelector:.  Missing options need to default to false.' id 'be393e64-c959-4132-b754-cd2bda5bcf0d' date '25 December 2015' time '7:36:01.334 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1611' message 'x64 Cogit:Implement machine code SmallFloat primitives.  Fix conversion bug in maybeGenConvertIfSmallFloatIn:... (fix refactored into genGetSmallFloatValueOf:scratch:into:).Streamline genJumpNotSmallFloatValueBits:scratch:''s isolation of the exponent.Slang:Allow the Cogit''s primitive table to reference optional primitives (since SmallFloat prims are <option: #Spur64BitMemoryManager>.Simulator:Reimplement the brakpoint machinery in an OO manner, allowing multiple breakpoints and deleting all breakpoints.' id '854947cd-58c3-4c34-a8cc-bf673b67983c' date '24 December 2015' time '2:14:20.511 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1610' message 'Cogit:Execute the "abstract registers simply name concrete registers" coup.I''ve tested the x86, ARM & x64 code generators for Squeak.  I haven''t yet tested Newspeak but suspect it will be fine.  More importantly I haven''t tested Sista, and given that Sista makes much more use of registers there could be issues here.  Clément, apologies for any disturbance.SImulator:Fix a simulation-time assert failure if printStackCallStackOf: is given a StackInterpreter frame pointer (which are negative).Add accessors for printSends.Slang:Make slang check for cppIf:''s first argument being a string before using isEmpty/notEmpty, for robustness.' id '30dfc36f-1c08-4c13-a442-f4aa09bfe11f' date '18 December 2015' time '7:03:36.871 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1609' message 'Cogit: Fix the (arguably bogus) register save/restore code for safe trampolines, including the ceScheduleScavenge call.' id '771cdc25-5d27-4818-8943-2ba5c0e31791' date '17 December 2015' time '10:41:49.192 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1608' message 'x64 Cogit:Refactor genLookupForPerformNumArgs: along the same lines as compileOpenPIC:numArgs: to use a base reg to access the metod dict when outside the MoveMw:r:R: offset range.' id 'bf1e1bd4-7dd4-47e2-bb33-3a988cc4c276' date '17 December 2015' time '9:14:34.651 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1607' message 'Cogit: generateCaptureCStackPointers: must establish the VarBaseReg before accessing any of the stack pointer variables.' id '5f0a0a13-5e92-417b-8351-729d7cf5aead' date '17 December 2015' time '12:19:52.584 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1606' message 'x86 Cogit: Fix order of cmp in ArithCwR.Extend var base range to 1Mb' id '1efb5990-cfe7-420e-ae74-f40197a68c68' date '17 December 2015' time '12:08:45.954 am' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1605' message 'MIPS: Get compiled VM up to ceCaptureCStackPointers, crashing because no one setup VarBaseReg. Dumb luck that the address has been out of VarBase range on ARM so far.Implement identifyingPredefinedMacros and therefore start generating C for MIPSEL alongside IA32 and ARMv5.Implement machineCodeDeclaration so our instructions don''t get truncated. (Though oddly enough they''re not totally incomprehensible because the function for many instructions in the low bits.)Optimistically copy I-cache flush implementation from ARM.Rename break: to avoid the C reserved word since Slang doesn''t do it for us. Also don''t rename it _break: because `#_break: numArgs` is wrong in Squeak. Rename various shadowing temps since Slang warns it doesn''t make sure they refer to the same thing in C as they did in Smalltalk when inlining. Remove various simulation-only code.Add stubs for various unreachable code to make the C compiler happy.' id 'd5c6ef8e-2868-4f0a-8ff7-ae4bfeb5e37e' date '16 December 2015' time '10:38:55.921 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1604' message 'Cogit: Nuke incorrect uses of signedIntToLong on the results of callTargetFromReturnAddress:' id '296b641e-1f4e-40ae-ae2a-ed66e94ab4e8' date '16 December 2015' time '7:23:41.075 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1603' message 'x64 Cogit:Fix stupidities in concretize[Call|Jump]Full (move absolute value, not value referenced by absolute address).Delete the hack in the simulator that made this mistake "work".Fix REX byte slip in concretizeMoveCwR.' id '70337b05-e1e3-418f-9fcd-8a7f72c9a082' date '16 December 2015' time '7:09:36.295 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1602' message 'Spur: Missing classArray export.Slang: Don''t include sqmemoryAccess,.h include explicitly since it is pulled in by sq.h anyway.' id '16ff1141-4cce-41a9-a9f5-742da38970ef' date '16 December 2015' time '3:37:08.936 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1601' message 'Slang:Fix determining types for implicitly typed pointer variables.Fix indenting of some arithmetic expressions.' id 'faa527e8-769c-4c9d-b4c9-8ce48b8edbd5' date '16 December 2015' time '2:09:56.371 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1600' message 'Add missing exports from SPurMemoryManager to cogits.  On 64-bits defaulting to int foo(int bar) is not merely illegal in C99 but often disastrous.Do a better job managing comment production in statement lists by adding variables to CCodeGenerator that track the last comment node and whether that comment was a comment from an inlining decision.Rewrite some of the optional run-time routine generators to avoid generating empty functions.' id '41892ed9-b511-421c-beae-837cfcb0e2c1' date '16 December 2015' time '11:42:04.583 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1599' message 'x64 Cogit:Fix cogit generation regression in last commit.  Fix generation of x64''s isWithinMwOffsetRange:.  Mark the open pic probe routine as no inline.Slang:Fix inlining of chains of non-argument receiver sends, as in "cogit methodZone zoneEnd".' id '19b44fae-86ae-4f0e-a799-6d74f99dda78' date '15 December 2015' time '9:36:42.517 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1598' message 'x64 Cogit:Refactor compileOpenPIC:numArgs: to pull three probe generation sequences out into a single method.  Use a base register to point to the method cache if MoveMw:r:R: offsets aren''t large enough to access the method cache (as may be the case on 64-bit systems).  Add CogAbstractInstruction>>isWithinMwOffsetRange: to answer if offsets are within the MoveMw:r:R: range.Use the same base reg approach to dereference the class table in genGetClassObjectOfClassIndex:into:scratchReg:.' id '247e48e6-ff12-40b9-b6f8-8f8e9b45c4a3' date '15 December 2015' time '9:17:32.657 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1597' message 'Fix a regression in VMMaker.oscog-eem.1596' id 'd40647ee-f0e2-471a-8007-2d2ca3483790' date '15 December 2015' time '11:14:56.69 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1596' message '64 vs 32 bits.  Clarify translation of signedInt[From|To]Long[64].  signedInt[From|To]Long always operates on 32-bits and signedInt[From|To]Long64 always operates on 64-bits; there is no signedInt[From|To]MachineInteger.Refactor casting -1 as a stack limit into allOnesAsCharStar.Cogit: Fix regression in x86''s register save/restore.Nuke uses of thirtyTwoBitLiteralBefore: in favour of preexisting literal32BeforeFollowingAddress:.Slang:Make sure functional methods that answer char * (allOnesAsCharStar) can be inlined.Plugins:Fix the Alien plugins for 64-bits' id 'b5172901-ebc3-4132-b421-446d4a1d080f' date '15 December 2015' time '10:53:18.704 am' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1595' message 'MIPS: Complete simulation of the Newspeak test suite! (~30 billion instructions) (Modulo Aliens, which don''t work under the IA32 simulation either.)Fix off-by-8 in patching I-type branches. Bug had the effect of skipping loading the cPIC address for a cPIC miss if the cPIC was created for an MNU case.Handle PushCw in storeLiteral:beforeFollowingAddress:.Add the GC''s variant of rewriteInlineCacheTag:at:.Fix MNU in followForwardingPointersInScheduler.' id '3aac3671-b1ff-45b9-8ed0-f3ecc5bca0b3' date '14 December 2015' time '7:29:18.283 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1594' message 'Cogit:Don''t inline AndCq:R:R: because its translation contains a jump and hence won''t work in a statement list expression (e.g. as in x86''s genJumpSmallInteger:scratchReg:).Nuke genJump[Not]SmallInteger:scratch: in favour of genJump[Not]SmallInteger:scratchReg:Slang:Eliminate leaves in statement lists generated as expressions.' id '79da8b81-d1f3-469a-869c-16c79d12649a' date '13 December 2015' time '5:24:57.076 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1593' message 'x64 Cogit: More C compiler warning elimination.' id '27cc996b-9a33-43c3-a8ae-5f54de74f0ac' date '13 December 2015' time '1:55:38.459 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1592' message 'Eliminate warnings for %.*s string length parameters in printf.' id '4206cc41-66bc-4f72-916c-c43ec63be68e' date '13 December 2015' time '1:15:42.382 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1591' message 'Slang: move stream:endsWithAnyOf: up for  TSwitchStmtNode' id '27b9f438-09bc-4421-a07d-f70f493df338' date '13 December 2015' time '12:33:42.67 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1590' message 'Slang: Now that leaves are not necessarily output more care needs to be taken to generate an empty otherwise: clause.' id '02c40a2c-a23e-4e62-98c0-810aeeba31c8' date '13 December 2015' time '12:26:36.92 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1589' message 'Slang: Oops.  Need to omit labels, even if they do say they''re leaves.' id '8f3e3018-1a3b-452e-8e65-417e9692bfd5' date '13 December 2015' time '11:59:36.929 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1588' message 'x64 Cogit:Changes to get cogitX64.c to compile and link.Slang: don''t emit leaf statements to eliminate warnings in the cogit.c''s.' id 'e4446d99-f9ba-4680-be2d-543e9e0dc07e' date '13 December 2015' time '11:45:14.188 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1587' message 'x64 Cogit:More changes to get cogitX64.c to compile.Use unalignedLong* methods to access literals embedded in x64 instructions.Add tests for unaligned long access via Spur64BitCoMemoryManagerMake the inline primitive genertion code #SistaVM only.Slang:Provide a convenience for methods that return constants to be generated as macros.  These can be done using <cmacro>, no argument to cmacro: being necessary.Fix determining the return type of a method that is a macro.Include 64-bit Cog Spur in the Squeak configs under version control.' id '48e64289-9f7e-45c2-88f7-d480db5b6087' date '13 December 2015' time '10:18:19.053 am' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1586' message 'MIPS: Get simulation through part of the Newspeak test suite. Fail at a bad cPIC value flowing into ceCPICMiss:receiver:.(Noting that the access control tests fail in the simulator, even with IA32, which is worrying as they pass in the compiled VM.)Add access to a Newspeak send cache from the send site''s return address.Adjust MNU/interpret cPIC entries (i.e., jumps within the cPIC) during relocation when zone calls are absolute.Fix literalBeforeFollowingAddress: decoding PushCw.Fix MNU in cPICHasForwardedClass:.' id '8e44b2a7-68ee-4fc9-8513-a04520267053' date '12 December 2015' time '2:26:39.384 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1585' message 'Cogit:Nuke unused Fill options.  Better document the use of Fill32: so Ryan''s objection is answered.Comment-out the CogMT-specific opcodes in x64 compiler that will be needed some day.Make Slang translate signedIntFrom/ToLong64 appropriately.' id '93567cbb-bf4f-4cb8-8262-0142f3fd1317' date '12 December 2015' time '12:50:20.118 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1584' message 'Ghaahhh, Sensei just whacked me on the head again...why does Sensei keep doing that?' id '389d59b6-a7df-41a2-b92d-5991f0a14575' date '12 December 2015' time '12:02:58.198 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1583' message 'x64 Cogit: get generated cogitX64.c to compile.' id '7eb04eee-02fd-4ece-8742-c2f9ca00d4a0' date '12 December 2015' time '11:58:03.582 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1582' message 'Cogit:mframeHomeMethodExport is now not Newspeak only.Inlcude the 64-bit Spur Cog VM in Cog configurations under version control.' id 'ca77fb29-c2fc-44bd-8ca0-dfa5e8951b19' date '12 December 2015' time '9:43:01.742 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1581' message 'Cogit: Fix regression from NoReg change.' id 'ceb64363-bb65-4efc-a5c9-ad90ef4fc645' date '12 December 2015' time '9:36:18.788 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1580' message 'x64 Cogit:Fix some slang translation warnings.Add a configuration for the Spur Cog 64-bit VM.Make translateableSubclasses answer only those ISAs for the current wordSize.Add a Microsoft moniker for ARM to its identifyingPredefinedMacros.' id '2b856f5e-e0b4-44bb-b23d-07561132f8c8' date '11 December 2015' time '11:57:36.639 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1579' message 'x64 Cogit: Now that 3+4 works properly in the reader image. set the default code size.  x64 in-line literal code is very close to +37% larger than x86.' id '5fee3ea1-d520-4203-a63f-c73defa946e9' date '11 December 2015' time '5:53:19.237 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1578' message '[not merging with Clément''s immutability code just yet]x64 Cogit:Fix basicNew: for 4-byte arrays such as Bitmap.  The primitive needs to round down num slots and compute odd bits in the 64-bit form.Provide facilities to map selectotrs back to selector indices when unlinking sends on 64-bit Spur (which has 32-bit inline caches).Add method-relative labelling of disassembly if relativeAddressDisassembly option is asserted, to allow quick comparison of pre-compaction and post-compaction code (of course there was nothing wrong with compaction; the problem was with basicNew: but maybe it''ll be useful one day ;-)).Add a cr when printing just registers every instruction.' id '378ae02c-e414-43e2-aa16-861bb11dd45f' date '11 December 2015' time '5:29:36.885 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1577' message 'Cogit: More NoReg uses' id '89d1673b-bb42-4cc1-a5c7-57d047cc4520' date '10 December 2015' time '4:19:07.642 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1576' message 'A convenience for investigating BitBlt primitive failures in the sim.' id 'e6d962ae-6dfa-445a-90d4-cb6d01a1dd20' date '10 December 2015' time '11:21:50.176 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1575' message 'Delete DSAPlugin (instead load http://www.squeaksource.com/Cryptography/CryptographyPlugins).' id 'f2a4c66a-3549-411d-b970-7da4f55145f8' date '10 December 2015' time '11:16:58.37 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1574' message 'Cogit:Introduce the "abstract register" NoReg and use it everywhere we used nil before to indicate no register.  Rename selectors and temporaries of the form *registerOrNil*" to "*registerOrNone*".  Rewrite all uses of reg ifNil: to be reg = NoReg ifTrue:.This is prior to the putsch to replace the use of -1 to -N for abstract registers, collapsing them down onto the same 0-N range used for concrete registers.Ryan, Tim, Clément et al, perhaps you could review this carefully and check your own tests to ensure I''ve got this right.  At least the x64 and x86 Cogits look fine after this intermediate change.BTW, I used this to identify potential methods to change:self systemNavigation	browseMessageList: (self systemNavigation allMethodsSelect: [:m| (m methodClass category beginsWith:  #''VMMaker-JIT'') and: [(m literals includesAnyOf: #(isNil notNil ifNil: ifNotNil: ifNil:ifNotNil: ifNotNil:ifNil:)) and: [m methodNode tempNames anySatisfy: [:t| ''*reg*'' match: t]]]] localToPackage: #VMMaker)	name: ''Uses of nil'' 	autoSelect: ''Nil''and message names with the pattern "*reg*ornil*" to find selectors.' id 'ce2daaa5-0130-4ed4-abdb-26b8b6c06c6e' date '10 December 2015' time '9:36:18.933 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1573' message 'Refactor a few ifNil ifTrue:''s to ifNil: et al.  Slang is happy with this form.' id 'f73bf5a8-7b52-4be3-8983-50f7a73d45a8' date '10 December 2015' time '8:40:40.846 am' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1572' message 'MIPS: Get simulation up to the second compaction, stopping at unimplemented access of a Newspeak send cache.Teach the Cogit how to do compaction when intra-zone calls have absolute targets.Fix stupid bug in relocating long jumps wherein the jump was retargeted to (nearby) its own (precompaction) address.' id 'afb2ce9f-ad99-49c5-9ce1-935b47c0251a' date '9 December 2015' time '11:28:54.749 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1571' message 'x64 Cogit/InterpreterFix assert in x64''s relocateMethodReferenceBeforeAddress:by: for push method ref case.Fix simulation of primitiveBitShift.  left shifts must be clipped to machine integer range.' id '013290aa-4ee7-4fcb-be23-a09b041437ee' date '9 December 2015' time '7:44:54.732 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1570' message 'x64 Cogit:Fix creating small floats on x64; it helps if the result is written to the register expected to receive it ;-).Fix TstCqR for > 32-bits; it is backwards w.r.t. other clients of concretizeArithCwR:Add the primitive failure handling to primitiveDirectoryEntry in the StackInterpreter (because I''m comoaring the StackInterpreter with the Cogit to find out if the bitblt issue is a bug in the Cogit - it isn''t).' id 'f0f897bb-a851-48e8-9d3a-44461a674794' date '9 December 2015' time '6:47:48.811 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1569' message 'x64 Cogit:Fix regression in SmallInteger testing in introducing genJump[Is|Not]SmallIntegerValue:scratch:Add floating-point to SmallFloat conversion, and isSmallFloatValue: testing.  Add RotateLeftCqR, MoveRdR and extend TstCqR to 64-bits to support this.Add tests for MoveRdR & MoveRRd.Add a debug facility to halt when generating the Nth abstract instruction (debugOpcodeIndices).Use smallFloatMantissaBits rathe rthan the magic constant 52.  Make it an <api> method.Reorder genDoubleArithmetic:preOpCheck: top move the common case SmallInteger/SmallFloat conversion earlier in the method, before the failure code.' id '3f739d44-3a75-4591-9da7-42e50c358648' date '9 December 2015' time '4:22:18.409 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1568' message 'Interpreter: fix primitiveIsPinned, tweak primitivePin.x64 Cogit:Fix genInnerPrimitiveNewWithArg:; it was rounding up slot sizes using the 32-bit code (!!); no rounding up necessary in 64-bits.Fix overflow detection in the division primitives.Fix leak checking of 32-bit inline caches in 64-bits, renaming genLoadInlineCache: to genLoadInlineCacheWithSelector:.Add int 3 (stop) to the instructions handled in x86 & x64 instructionSizeAt:.Better comment isIntegerValue:' id '5b0f045a-94ac-45a9-9868-42e5db50b924' date '9 December 2015' time '12:57:00.723 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1567' message 'check for primitiveFailed after trying to load module in #primitiveLoadSymbolFromModule (it can fail  and in linux load a symbol from nowhere will lead to a crash)temporal: reverted (again) the in-memory check for access objects through FFI. It was making structure access fail... I need futher investigation on the area :) ' id '363ee8d1-d2fc-4176-8efc-75bbc9e8c482' date '8 December 2015' time '5:05:02.518309 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1566' message 'x64 Cogit:Implement smallFloat to float conversion.  Fix CogX64Compiler>>isQuick: so that the exponent offset add gets generated correctly.  Add RotateRightCqR for the conversion.Use the conversion in genDoubleComparison:invert:.' id 'd3adf893-7bc3-463c-81a9-498127ba75ad' date '7 December 2015' time '11:25:48.185 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1565' message 'x64 Cogit:Half-fix StackToRegisterMappingCogit>>genDoubleArithmetic:preOpCheck: so as not to produce a bogus value when faced with a smallFloat arg.  With this fix the simulator generates output in an emergency evaluator complaining of a primitive failure (which wouldn''t fail wityh conversion of smallFloat args).  (Still have to define it for SimpleStackBasedCogit).Implement the default do-nothing maybeGenConvertIfSmallFloatIn:into:andJumpTo: which will soon provide the relevant conversion.Rename genLoadHeader:intoNewInstance:using: to genStoreHeader:intoNewInstance:using:, which is what it does.Eliminate the unnecessary nop when MoveCqR uses MoveCwR to generate a long constant.' id '98c5bc39-e721-42ba-9bac-5b1dbfc0963b' date '7 December 2015' time '5:25:51.389 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1564' message 'Restored a check for spur in simulator. I still need it because we are still bootstrapping  pharo-spur from a non spur image (this will change this week, hopefully, but for the moment ...)Restored the "in memory" read restriction for FFI (unless object is pinned).' id '44b50984-d269-46c7-b4c0-841b9186e369' date '7 December 2015' time '1:22:41.655345 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1563' message 'x64 Cogit: implement MoveRdM64r' id '9e8be763-2d4a-4e2d-bf6a-c8a46c5499c0' date '6 December 2015' time '10:44:12.225 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1562' message 'x64 Cogit:Fix shift right; tags must be zeroed before SI tag can be set.Fix rewriting of Call/JumpFull' id '4928e91f-9353-4858-8b2f-a5d968eec177' date '6 December 2015' time '9:51:53.153 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1561' message 'x64 Cogit:Simplify Spur''s Object>>at: and fix it for x64 (no byte read zero extend).Add a simple way to prevent methods from being jitted to allow JIT bugs to be located.Fix genInnerPrimitiveObjectAt: for 64-bit Spur.Add x64''s stop.Fix slip in maybeSelectorOfMethod:' id '2ba95ccf-0c2f-4801-ba84-847742ce246b' date '6 December 2015' time '4:13:03.829 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1560' message 'Fill unused portions of methods with the stop instruction, not nop.Explicitly initialize the code zone with stops. Explicitly clear the reclaimed portion of the method zone after a compaction.Include the reclaimed portion of the method zone in the I-cache flush after a compaction: no point in leaving it in cache since it isn''t a valid call/jump target.' id '7fceca4c-cedf-42fb-bc90-2f786223abbc' date '6 December 2015' time '3:00:08.74 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1559' message 'Spur Cogit: Use the correct jump for bounds checking generated objectAt:' id '52385182-ad6d-4bdc-975a-7328fd81b6da' date '5 December 2015' time '5:44:41.199 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1558' message 'Cogit: Make sure relocateJumpLongConditionalBeforeFollowingAddress: is implemented for otehr than MIPS.The rump C stack printing for whereIs: is only for simulation.' id '5d47d096-784a-47aa-baf3-9cd715f9939f' date '5 December 2015' time '4:25:10.79 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1557' message 'More propitiation.  Refactor constant output so that macro output for the api header can collect any used constants so there can be emitted too.' id '62f0e86e-6d1b-4b56-889a-df2f75c352c0' date '5 December 2015' time '4:11:06.632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1556' message 'Propitiate the Slang gods.' id 'b50470c0-c306-40ed-96dc-aada552d93a4' date '5 December 2015' time '3:28:47.468 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1555' message 'Cogit:Refactor the logic to handle UnimplementedPrimitive and UnfailingPrimitive in a common routine, passing the result of the primtiiev generator to #compileFallbackToInterpreterPrimitive:.  Add the notion of Completeprimitive for primitives that may fail, but handle all teh success cases, hence if a method including such a primitive doesn''t use the error code teh Cogit doesn''t have to compile the call to the interpreter primitive as a fallback.Add genPrimitiveObjectAt to provide fast literal and header access on Spur.Fix deep copying of the V3 simulator, restoring the ability to simulate v3.Styreamline access to the tag patterns form the Cogit by using macros.' id '0db98e05-01ec-4055-92eb-1ef1a08198ee' date '5 December 2015' time '3:06:42.81 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1554' message 'MIPS: Get simulation just past the first code compaction. Fail shortly thereafter.CPIC relocation: fix conflation of unconditional and conditional jumps.' id '973f6adb-6fb4-4648-ab13-64872ee85702' date '5 December 2015' time '2:19:42.958 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1553' message 'Cogit: Implement overflow checking for primitive div that works in 32- and 64-bits.' id '85428a3c-bbe7-43dd-876e-625f56beda91' date '5 December 2015' time '11:37:56.127 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1552' message 'x64 Cogit:Fix double adding of numSLots to header in ByteString>>basicNew:Fix the simulator''s defaulting of ISA so that x64 is the default if 64-bit spur is selected.Include the new scratch regs in the register map printing.' id 'f86a39c0-4b4e-459d-aa15-15cadd793672' date '4 December 2015' time '10:53:48.8 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1551' message 'x64 Cogit: Lift restriction on OpCqR that value must be 32-bits.  Correct a comment.' id '6888417d-b2bd-4ff5-9dea-d29090173d97' date '4 December 2015' time '6:54:29.867 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1550' message 'x64 Cogit:Provide a convenience method to hide the inconvenience of checking for UndefinedOperation in uses of genJump[Not]SmallInteger:.Reefactor to share genInnerPrimitiveStringAt: between 32- and 64-bit Spur obj reps.' id '4b7ae25c-2439-4e33-aa5f-fb0210af3ca0' date '4 December 2015' time '6:02:26.372 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1549' message 'x64 Cogit: rationalise concretize"Op"RR into two routines in both x64 and x86.Implement more Spur64Bit obj rep machinery.' id '99726a9e-1891-4707-90a8-b4df377175aa' date '4 December 2015' time '4:19:50.516 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1548' message 'x64 Cogit:Fix sizing of CmpC32R so that the jump to the next CPIC case is always short, and so reuse the x86''s rewriteCPICJumpAt:target: for x64.Avoid using isCallPrecedingReturnPC: for testing if compileInterpreterPrimitive used a CallFull or a JumpFull to invoke the prim, hence allowing isCallPrecedingReturnPC:to only have to apply to calls used for sends, and hence reuse x86''s isCallPrecedingReturnPC: for x64..' id '40c57289-8839-4966-afa7-14ba4e813a46' date '3 December 2015' time '10:34:24.663 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1547' message 'x64 Cogit:Fix comparison of pairs of integers for 64-bit Spur.  Spur''s 3-bit tags imply e.g. xor to check each tag in a pair.' id 'dbc286db-e2dd-47a9-b251-e51a7c123ae2' date '3 December 2015' time '7:03:52.115 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1546' message 'x64 cogit:  Fix slip in concretizeAndRR.use assert:equals: throughout CogX64CompilerTests' id 'c944400d-c93e-49d8-85e7-d060d8585fd3' date '3 December 2015' time '6:33:03.684 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1545' message 'Fix setting of expected stack alignment; fp & sp alignments must be mod stack alignment.  This fixes stack alignment checking on x64 when PostBuildStackDelta is incuded.Fix genPrimitiveClosureValue for 64-bits (use genJumpImmediate: to exclude non-cogged methods).Add AndRR for x64 and enable multiplication.Sim: include rump C stack in whereIs: ranges.' id '4d01d362-c534-495a-979b-c549f7b5541a' date '3 December 2015' time '3:22:11.903 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1544' message 'x64 Cogit:Implement or fix OpCqR MulRR, relocation machinery etc.Add tests for OpCqR (to x86 also).  Use assert:equals: and override in AbstractInstructionTests to do a case-insensitive comparison for strings.More facade machinery for in-image compilation.Update smallFloatValueOf: for running on 64-bit Spur (reduce the result to SmallFloat if possible).' id '2c5a349c-21ac-4949-bc39-5a93f5eb243a' date '3 December 2015' time '11:53:57.341 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1543' message '...and fix the shadowing warnings.' id '7ab33230-086d-4b21-a335-26f16100a3b4' date '2 December 2015' time '12:47:13.204 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1542' message '...and fix the shadowing warning.Make primitiveDirectoryEntry fail silently when it should.' id 'f4d237d6-28fd-4441-9ca6-eaa7cf79541d' date '2 December 2015' time '12:41:45.337 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1541' message 'Cogit:Fix the regression caused by the incorrect fix for skipping the primitive and primitive error code bytecodes.  Handle the skip in compileMethodBody.  Cache methodHeader in an inst var; it''s used enough.' id 'fd860929-ae11-4236-be33-c21b42f1293b' date '2 December 2015' time '12:20:51.846 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1540' message 'Cogit: Fix x64''s MoveM64rRd.Sources: Generate the Squeak3D plugin.' id '5455d58b-81e7-4a4b-aee0-d4e621ae247a' date '2 December 2015' time '11:35:56.301 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1539' message 'Fix a return type warning' id '7d957563-4269-4950-9f7d-3d2dde2ac18d' date '1 December 2015' time '11:26:48.427 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1538' message 'Cogit:Fix /horrible/ bug with primitive error codes and fixups.  The adjustment of the initialPC to skip the primitive and error code, if any, was done after generating fixups for backward branches, and hence these branches were bogus.  Object>>shallowCopy in Spur is subject to this, but amazingly enough it has not surfaced before now.  Fix this by adjusting the initialPC before scanMethod scans for fixups.Add MoveRRd & MoveRdR for eventual use in 64-bit Spur immediate float primitives.Implement ConvertRRd for x64, and make a stab at implementing MoveM64rRd, but this is falling foul of a disassembler bug with Bochs 2.3.7, the current Bochs code base :-(.Add the additional 8 xmm registers to x64.' id '8eb28260-86bc-4f74-b62d-aab8212d9272' date '1 December 2015' time '11:21:52.981 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1537' message 'MIPS: Get simulation past the first display update.Remove Jump[No]Overflow in noteFollowingConditionalBranch: as a different check is needed for add/sub and mul.Use the right destination for MulRR. Rename locals in concretization of binops to help clarify the pattern.Add the short-immediate variants of the binops.Disable disassembly prints on code patching.' id '090316cc-9bb5-4d24-9597-c464661d9b48' date '30 November 2015' time '8:32:24.833 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1536' message 'X64 Cogit:Make rewriteConditionalJumpLongAt:target: a default to be overridden.Now that the 64-bit Alien accessors and the Bochs x64 emulator have been fixed, get division working on x64.  Add XorRR support for the division primitives.' id 'fe6b5e3a-872a-44b3-bae8-d4a2cbb678f8' date '30 November 2015' time '5:54:18.551 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1535' message 'Fix maybeInlinePositive32BitIntegerFor: and hence positive64BitIntegerFor: for values that look like 32-bit negative SmallIntegers.Nuke broken and obsoleted by Tim''s new CPIC the DumpJump*: Cogit assembler ops.' id 'eceebca6-4bc3-4640-b1eb-18e0ea917247' date '30 November 2015' time '3:57:15.946 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1534' message 'The receiver of initializeSpecificOpcodes:in: is not necessarily the defining class of its method argument.' id 'dbeb984f-191e-4919-94b7-ffb681765d32' date '27 November 2015' time '6:12:43.777 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-rmacnak.1533' message 'Move MIPSConstants to VMMaker.Add CogMIPSELCompilerTests.Move noteFollowingConditionalBranch: to catch branches created outside of Jump<Cond>:Fix Br instructions that use slt[u] right, left.Fix backwards SubRR. Two address instructions are bizarre.CPIC patching (architecture independent): fix call mistaken for a jump and conditional branch mistaken for a jump.' id '6f75f364-358a-4762-b934-fefc76c19285' date '27 November 2015' time '2:07:17.218 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-rmacnak.1532' message 'MIPS: Add multiply and divide instructions.Add some variants of add/sub with overflow checks.Adjust some CPIC patching for merged CmpC32R/JumpLongZero.Recast noteFollowingConditionalBranch: as N + M instead of N x M. Fix isJump. Mark concretizeJump<Cond> other than overflow as unreachable.' id '20303656-4854-4e5b-8bcd-eeff8cf5d262' date '23 November 2015' time '8:07:29.718 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1531' message 'Cogit:Finish the CPIC rewrite cleanup.Move the rewriteCPICFoo methods out of the AbstractInstruction classes and into Cogit.Add asserts to check the three-operand rewrite routine rewriteCPICCaseAt:tag:objRef:target: works as intended.  Make expectedClosedPICPrototype: live up to its comment and answer a bitmask identifying errors.Use inCurrentCompilation: in a few places that still used the bowels of inCurrentCompilation:.' id '6ce9cac7-d262-4fbc-b171-33134440cdaf' date '23 November 2015' time '6:10:46.101 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1530' message 'Split out testing of ARM instrucction condition codes and make sure it is checked for CMP/ORR - just in case.' id '0f807d01-9fc9-4fd6-8c9d-8763700efed1' date '22 November 2015' time '11:18:39.8 am' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1529' message 'Fix generation of the CPIC prototype for inline literals x64.Add some more opcodes to handle compare/branch collapse for CmpCqR on MIPSEL.' id '6b91882c-e59c-4c22-8d16-77d16299d2d4' date '22 November 2015' time '10:29:01.889 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1528' message 'Reorder CPIC instructions to suit MIPSEL, i.e. put the load before the compare and jump.  Simplify and eliminate duplication, especially in thge literals managers, nuking almost all of their PIC support code.  It isn''t needed since the code ends up being the same in each manager.There is still work to do:- the rewriteCPICFoo methods should all be implemented in Cogit and should use the same accessors as expectedClosedPICPrototype demonstrates.- those methods should be tested via extra asserts in expectedClosedPICPrototypeExtend MIPS'' noteFollowingConditionalBranch: to include long conditional jumps.' id '3ed0e2f1-7f11-4ab0-be68-96373bf4612f' date '22 November 2015' time '9:33:01.294 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1527' message 'Cogit: Beef up the asserts in expectedClosedPICPrototype so that updating the class and method entries is tested.Use CmpC32:R: to compare the class tag in CPICs to match in-line caches on 64-bit Spur.  Add CmpC32R generatoion for X64.' id 'f3bbc339-3ee1-4fbf-afc3-0d49b67a54f6' date '18 November 2015' time '5:28:31.956 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1526' message 'Cogit:Revise Ryan''s scheme for overflow checks in arithmetic operations, using a scheme which shoudl generalise to the collapse of Cmp[Cq|R]R; JumpCond: sequences onto the unitary compare-and-branch instructions the MIPS provides.So revert all uses of AddCheckOverflowRR et al and add these as specific opcodes of MIPSEL.  Make all JumpCond: methods follow the pattern of invoking previousInstruction noteFollowingConditionalBranch:, to allow the two instructions to be modified as required, either to check for overflow or to collapse onto a unitary instruction.Tidy up the declaration of processor-specific abstract opcodes by extracting the code into a method, initializeSpecificOpcodes:in:.' id '65bfe6e2-d2a0-48a4-bdbb-67a9d71f32ee' date '18 November 2015' time '12:40:54.121 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1525' message 'Fix Slang regression.  TSendNode>>isSameAs: must take into account the receiver!!' id '5266f3ec-ae14-4584-8c0a-dd024e4efa4a' date '18 November 2015' time '10:43:11.992 am' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1524' message 'Get MIPSEL up to the first CPIC extension.Add separate RTL opcodes for Add/Sub/Mul with overflow check.Fix relative jump offsets.Fix MoveMwrR with large offsets.Fix confusion of call as jump in initial CPIC setup.' id 'd298c397-7a0b-4973-b1e1-39c9b08053c9' date '17 November 2015' time '10:03:52.949 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1523' message 'Cogit: Provide a convenience for disassembling in-image compilation of the closed PIC prototype.' id '937e2290-24ff-463f-82fa-6a04c3454b28' date '17 November 2015' time '5:30:56.2 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1522' message 'Cogit:Implement the long conditional branch/long unconditional branch split necessitated by the MIPS processor in all of the closed PIC methods.Update Slang to collapse an ifTrue:ifFalse: if bioth arms are the same, to avoid the code duplication this introduces on the rest of the processors where conditional and unconditional branch offsets can be accessed in the same way.Caution:  Tim''s new CPICs are broken w.r.t. accessing class tags in PICs.  In fact, he''s left the breaks in classRefInClosedPICAt: & storeClassRef:inClosedPICAt: to show his unease.  I''ll fix this asap.  First I need to add code to disassemble the closed PIC prototype so I can see the wood for the trees.' id '62cb521e-b3cc-4104-999e-095ad37474a5' date '17 November 2015' time '5:12:50.33 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1521' message 'Fix accessor generartor for surrogates when BytesPerWord=8 and hence generate correct accessors for the CogStackPageSurrogate64.' id '4e7fb348-e709-4cb4-8752-c48d71d5e011' date '17 November 2015' time '1:44:42.026 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1520' message 'Get MIPSEL up to the first page fault accessing an interpreter variable.Adjust CPIC verification to distinguish between conditional and uncondtional jumps.Fix loading large literals.Increase range of MwrR to support clever backwards use of base and offset in OPICs.' id '9198a43e-399e-42c8-9586-90f81ffa70cf' date '15 November 2015' time '3:53:46.069 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1519' message 'Ugh, global variables :-(.  Deal with the fact that BytesPerWord need to be set when generating surrogate accessors.' id 'a683baa2-76fe-4d7e-9727-4966635a51cd' date '13 November 2015' time '3:10:38.531 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1518' message 'Include exported api variables (between Cogit and CoInterpreter) for better type checking and fewer warnings.' id 'f6074a8b-be78-48cd-a00b-26606f77d06b' date '13 November 2015' time '2:45:55.557 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1517' message 'Eliminate some Slang generation-time warnings.' id '227c3a0e-9be8-409b-ae31-2f4ddad87156' date '13 November 2015' time '12:43:12.972 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1516' message 'Use the memoryAsBytes: routine to map an AbstractInstruction''s machine code to a ByteArray in the tests.Refactor the varBase and pc-relative addressing queries up into AbstractInstructionTests from CogX64CompilerTests so that making CogARMCompilerForTests inherit from CogInLineLiteralsARMCompiler results in compilable instructions.' id 'e7c665c7-2a20-4873-959b-86a9eb315d3f' date '13 November 2015' time '11:43:01.923 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1515' message 'Use the "approved" conversion method for accessing processor simulator registers in ARM division emulation.Make simulated directory access fail correctly when a file doesn''t exist.' id '9b821af2-6714-461b-b0b1-eb5c660f75e4' date '12 November 2015' time '5:34:55.49 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1514' message 'Initial commit of MIPSEL backend.' id '8504ecc7-5b6f-42d1-90de-3176997a24f7' date '11 November 2015' time '8:50:09.071 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-tpr.1513' message 'Fix a couple of CPIC bugs and commetns.' id '6ff3cfa5-df00-4848-96ba-589d9ddeb05b' date '11 November 2015' time '11:33:12.233 am' author 'tpr' ancestors ((name 'VMMaker.oscog-rmacnak.1512' message 'Fix ARM debug VMs. Release ARM VMs still broken unless compiled with -O0.' id '14d52427-4db4-49b4-a3c7-94f99e78f83e' date '7 November 2015' time '4:58:32.667 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-tpr.1511' message 'Merge in a fairly large change to closed PICs; they are no longer compiled each time we make on or extend one, but rather  copied from a prototype and updated as needed.Take a look at  http://wiki.squeak.org/squeak/6205 for some explanations.Oh, and fix the div/mod simulation so it actually works. This makes simulating the stdio reading test images actually work on ARM.Clement - there is a single Sista related change in here that may or may not break things for you ;-)' id 'c040c1b1-b67f-45ec-973e-4ffd34322ea5' date '6 November 2015' time '1:08:47.44 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1510' message 'x64 Cogit:More support in the obj rep to do at: and size prims.Add MoveX32r:R:R: to index 32-bit indexables.Add a disassembly convenience on CogAbstractnstruction' id 'f4c6b0cb-dda2-4a50-a0c5-cd7609a53503' date '4 November 2015' time '6:26:00.671 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1509' message 'x64 Cogit:Streamline genInnerPrimitiveIdentityHash: to compute the tag pattern only once.Fix shifting by > 31 bits.Fix in-image compilation of same.Fix the simulation assert checking valid jump targets.' id 'f6a1e16a-fc26-4558-b806-cff0653e30a2' date '4 November 2015' time '11:28:10.971 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1508' message 'x64 Cogit:Refactor some instantiation routines in the Spur object representation to use the header initialization abstraction.Add instruction sizing to allow disassembly of methods containing blocks.' id '4d5233a4-5fe7-4211-8e7d-d4b3e4ed4fec' date '4 November 2015' time '8:38:48.263 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1507' message 'x64 Cogit:Fix ceDereferenceSelectorIndex for blocks; must locate the homeMethod to fetch literals.Implement Fill32 and fix compileBlockEntry:.Fix JumpFull & NegateR.Some way to implementing identity hash (still needs SmallFloat testing).Comment assumption of sign-extension for 16-bit & 32-bit partial word reads.Revise the generation of accessors for surrogates, so that one can look at the generated code without necessarily compiling it.  Fix the failure to round up the bit position to derive the alignedByteSize.  Fix alignedByteSize for CogBlockMethodSurrogate64.Comment typos.' id '89bfdb3d-78c9-442b-80d8-3be3b6577397' date '3 November 2015' time '7:19:44.589 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1506' message 'Oops!  remember to comment the byte read convention in CogRTLOpcodes class>>initialize' id '1eef10b5-fab7-41fe-a8fc-b5d77379ce72' date '3 November 2015' time '1:54:20.959 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1505' message 'Cogit:Clarify whether byte reads zero-extend by introducing CogAbstractInstruction>>byteReadsZeroExtend.  Make sure the x86 does zero-extend and take the easy route with x64 having it not zero-extend.  Leaving the ARM to Tim (thanks!!).' id '4cd041e4-27ee-474f-b71c-f5230ed35af2' date '3 November 2015' time '1:48:54.159 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1504' message 'Merge with VMMaker.oscog-EstebanLorenzano.1503:- simplify the addressIsInInstructions: macro.- express some concerns about ffiAddressOf:startingAt:size:x64 Cogit:Add support for MoveAb:R: & MoveR:Ab: on x64 & x86.  Tim, would you mind adding support for ARM?The misuse of MoveMb:r:R:/MoveR:Mb:r: as a stand-in for MoveAb:R:/MoveR:Ab: only works on 32-bit platforms.Fix rip-relative addressing for MoveCwR/PushCw.  Add some tests.Nuke the leaking breaks in genInnerPrimitiveNew[WithArg]:Execution now gets to the first jitted method that wants to create a closure.' id '3c702143-ff40-4e38-a55e-065a3aec15ec' date '2 November 2015' time '10:16:22.592 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1503' message 'general: - applying correct cast so compiler does not fails.ThreadedFFIPlugin:- ExternalAddress now are taken correctly (nor as ByteArray or Alien, because they are  different beasts).   - allow pushing of pointers to any type (into a ByteArray, an ExternalAddress or an Alien), to allow passing parameters style int*, float*, etc.- allow reading in memory to allow read chunks of ByteArray' id '2cc25296-b733-4968-bd6b-8f3db5277693' date '30 October 2015' time '2:37:07.998518 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1502' message 'x64 Cogit:Implement dereferencing selevtor indices in a generated routine called from each send trampoline.  Leave it misplaced in the obj rep for now, but I think it really belongs in the Cogit.Implement more compilation and inline cacheing support in the x64 backend.Fix a bug in selectorForSendAt:annotation:in: with selector indices, and a bug accessing variable addresses from simulatedVariableGetters.With these changes x64 seems to work up until the first interpreter primitive invocation (primitiveDecompressFromByteArray).Allow doits to access the cogit in the simulator''s bottom right pane.' id '4851de61-8c75-48cc-b0b3-ea3e5636226e' date '23 October 2015' time '8:24:53.207 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1501' message 'x64 Cogit:Generalize testing for pc-relative labels and addresses, and use the generalization (inCurrentCompilation:) in ARM and x64 pc-relative addresing for MoveCwR and PushCw.Add pc-relative addressing to x64 for MoveCwR and PushCw.Fix labelling of in-image compilation by fixing initialization of mehtod zone''s baseAddress.Fix bug in x64''s concretizeMoveCqR.Make addressIsInInstructions: immune to confusion with immediates.Nuke unused hasPCRelativeAddressing' id '633ef0f8-05bf-46fc-ab1c-69c86dd0be33' date '23 October 2015' time '2:47:40.308 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1500' message 'x64 CogitPrimitive new & new: for 64-bit Spur, plus support.Fix slip in AndCq:R:R: to not generate a redundant move if the two registers are the same.' id 'ca55bc4b-ab0a-4dab-bff6-ed3d97117e09' date '22 October 2015' time '5:22:43.93 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1499' message 'Other half of minor assert refactor in C stack setup' id '763bd6b9-763f-41d0-b104-12abbe13bf18' date '22 October 2015' time '2:59:27.94 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1498' message 'x64 Cogit:Add barely tested support for supporting the System V and MSVC ABIs for x64 (they used to be the same :-( Looks like Microsoft have ARMified their x64 ABI)..Fix bugs in x64''s is32BitSignedImmediate:, setting of CStack/FramePointer & disassembly at pc..Comments and comment typos.Needs Cog-eem.287' id '48806953-dab0-4898-a699-fb076d884b77' date '21 October 2015' time '3:50:58.285 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1497' message 'Make sure signed comparisons are used in the relevamt isIntegerValue: implementations.' id '0719f4d7-3dd5-4f5c-bc36-07461475c215' date '20 October 2015' time '4:07:03.853 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1496' message 'One last waafer-thin tweak to bounds checking in the Alien plugins Monsieur Creosote?  Use a form immune to integer overflow.  Document the design decision.' id 'f6c0ecb8-51de-4da5-aa23-5f96baa84178' date '20 October 2015' time '4:02:56.214 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1495' message 'Sync NewsqueakIA32ABIPlugin with IA32ABIPlugin.' id '1bac6ffc-4f19-447a-9236-c8b9be3b7936' date '19 October 2015' time '9:15:56.71 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-rmacnak.1494' message 'Fix missing primitive failure for Alien typeAt: 0 [put:].' id 'b288db64-85ad-44a1-b406-da026226b4fc' date '19 October 2015' time '8:40:22.914 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1493' message 'x64 Cogit:Refactor CFrame/StackPointer simulation machinery so they can be accessed via VarBaseReg.Fix stack alignment code for processors with register arbguments (I hope).Implement x64 prefetch.' id '106ebfee-467a-4cc7-a1cd-8accfc7926b0' date '19 October 2015' time '10:15:07.794 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1492' message 'x64 Cogit:Get the Cogit to a state where the 64-bit Spur image starts simulating.  It''s a new world ;-)Reimplement CMethodCacheAccessor, introducing CArrayOfLongsAccessor for the primitive trace log.Alter CogStackPage and surrogates so that CogStackPageSurrogate64 is properly laid out.Revise the signedIntToFrom/Foo methods, and add some tests to check their behaviour.Provide two move multi-tab browser opening conveniences.' id 'a0778a36-b0e9-4e06-af1a-0e50572c9db1' date '17 October 2015' time '5:32:12.348 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1491' message 'x64 Cogit:Refactor the gen[NS]Send: machinery to take selector indices instead of selector oops, to allow the x64/Spur64 JIT to use 32-bit in-line caches that hold selector indices, not selector oops.  Scheme is commented in genLoadInlineCache:.Still required is PIC support (CmpC32R).Fix the use of 80 as a constant in the special selector machinewry.  This should be firstSpecialSelectorBytecodeOffset.  Add [Alt]NumSpecialSelectors for range checking special selector indices, which are negative.Nuke an obsolete method.' id '05ac8927-326d-4bb1-bb66-99d4615fd7fa' date '6 October 2015' time '6:29:21.907 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1490' message 'x64 Cogit: MoveXbrRR and MoveRXbrR' id '522f8b21-bd73-4dde-900f-ece1c5bf0f38' date '6 October 2015' time '12:13:38.596 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1489' message 'Integrate Monty''s fsync primitive.' id 'f3c880a7-1667-4700-bc2f-b43ea844cc6a' date '4 October 2015' time '9:52:22.669 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1488' message 'Cogit:Fix bug in Spur machine-code at:put: on 32-bit bits objects; method failed to fail for negative values.Simplify and correct CogIA32Compiler>>shiftSetsConditionCodesFor:.Simulator:Harmonize the [LittleEndian]Bitmap>>[unsigned]Long[64]At:[put:] methods, allowing them all to support unaligned accesses.  Add MemoryTests to test these.  Update the accessor generation code to use unsignedLong64At:[put:] and update the relevant surrogates.  Further, streamline the accessors, eliminating use of >> & << sicne these have an extra activation and since the sign is always determinable via some constant the convenience isn''t necessary.Add code to allow ByteArrays to print themselves in hex in the debugger.Extend the click step scheme to ask if one wants to halt when making a run-time call, hence kind of supporting step into run-time.  But this really needs a trinary choice dialog.' id 'f4dff9b3-beb7-46b5-8e92-ad9e59b7f402' date '2 October 2015' time '12:47:53.132 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1487' message 'empty log message' id '7f65b3d4-eb96-4fff-abc2-bb6edd58e98d' date '1 October 2015' time '4:07:44.54 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1486' message 'Added Smi >> bitAnd: , bitOr: , bitXor: in the inline primitives.' id '3b8ba650-4c3f-4cdb-9c17-a2e978ff3743' date '1 October 2015' time '10:44:25.006 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1485' message 'Simulator:Fix bug in CogMethodSurrogate>>containsAddress: (argument shadows inst var).Fix bug in BalloonEngineSimulation>>loadWordTransformFrom:into:length: (code disabled writing of values to both heap object and simArray).Make sure that CogStackPage also checks its surrogate in initialize.Add a run leak checker entry to the utilities menu in the VM simulators.StackInterpreter: speeling errorsNSSendCache: categorization' id 'b5561be1-d4c9-4ae7-b09b-6e8b626d40da' date '30 September 2015' time '1:32:27.435 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1484' message 'Add word accessors to Alien.' id 'ff357178-7fee-49ac-9ac9-0d33800ef6f5' date '29 September 2015' time '7:00:15.911 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1483' message 'reverted last change (was wrong)' id '5eea8d60-f0ba-409c-8c53-c96fcbf05e25' date '29 September 2015' time '5:23:36.92365 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1482' message 'Float new: 2 is invalind, changing it for 0.0 seems to work fine.' id '82196012-eb6f-4ab2-b5aa-5cef663d6f13' date '29 September 2015' time '4:49:27.731611 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1481' message 'Slang:Propagate types of actuals with other than the default sqInt type to untyped formals, hence fixing bogus inlining of genLoadHeaderIntoNewInstance: into genGetActiveContextLarge:inBlock:.Fix baaaad bug in node:typeCompatibleWith:inliningInto:in: which was looking up the type of the formal parameter in inlining in the target method, not the method being inlined! (bug surfaced by previous fix).Allow constant elimination for Const ifNil: [] ifNotNil: [], hence cleaning up uses of characterTable in the Spur VMs.' id 'b3ce7300-4547-4a6d-be81-4c9d121a4d31' date '28 September 2015' time '8:58:19.086 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1480' message 'mmmph' id '1d688e12-495b-4ec7-ac4f-4c07d435ed64' date '28 September 2015' time '7:08:16.863 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1479' message 'and clean up collateral damage' id '543de85e-ae35-48a1-9a24-d176a2818012' date '28 September 2015' time '7:05:52.522 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1478' message 'Fux a spleen errorre' id '4a4c879d-a0f7-426c-a63a-a573dac30c7f' date '28 September 2015' time '6:52:02.984 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1477' message 'x64 Cogit:Fix PushCw, and fix the tests so they''re not confused by the scratch value left behind in RISCTempReg.  Fix fetch/storeLiteral[:]beforeFollowingAddress: for PushCw.Fix slip in concretizeMoveCqR' id '108eaaea-883b-4418-9167-b10697ae9f7e' date '28 September 2015' time '6:46:16.264 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1476' message 'x64 Cogit:Implement most of the inline cache tag/literal extraction code so that CogInLineLiteralsX64Compiler can generate both PIC prototypes.  This is broken because I was confused about PushCw, thinking there was a push 64-bit immediate, there isn''t.  I''ll have to undo some.Change the 64-bit surrogates to use long64At:[put:] instead of the deprecated unsignedLongLongAt:[put:].Fix a bad (but currently symptomless) bug in classRefInClosedPICAt: which had things backwards.In-line compilation now "works" for CogInLineLiteralsX64Compiler (pace the PushCw confusion), except for the use of 32-bit entries in in-line caches.  hence the next task is to compile sends so that 32-bit inline caches can refernece selectors (i.e. by containing indices into a method''s literal frame or the special selector array).' id '55852bcd-c81e-4325-a2a7-66b2277e49cd' date '28 September 2015' time '4:14:35.548 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1475' message 'x64 Cogit: At last, a beautiful inline cache check sequence since there''s no convincing reason to go for a 1-bit SmallInteger tag.' id 'dd428db7-b55c-422a-9a51-b6ee788a2aee' date '28 September 2015' time '12:43:54.791 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1474' message 'x64 Cogit:More support. Get VarBase support sorted out, including in disassembly decoration.Fix bug by establishing the VarBaseReg in cePrimReturnEnterCogCode enilopmarts.' id 'c11cadbf-1f63-4bd2-95cb-4c5d2de058c5' date '28 September 2015' time '12:23:48.419 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1473' message 'x64 Cogit: Get MoveRMbr & MoveMbrR right.' id 'b89ffa84-63b0-4e63-803c-2b715ad3f7ef' date '28 September 2015' time '10:23:36.698 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1472' message 'Cogit:More x64 support.  Refactor most of the Arith CqR concretizers into one routine.' id '1a6bf281-67c0-4ce6-90c4-438537babf5f' date '27 September 2015' time '5:34:37.934 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1471' message 'Cogit:Refactor context creation generation code in Sour object representations for sharing between 32 and 64 bits.  Implement some 64-bit obj rep generation support.' id '59ce1851-0880-4d7b-990f-a19c882dbeae' date '27 September 2015' time '10:44:07.215 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1470' message 'Cogit:More x64 compilation support.  Now all trampolines up to, but not including, the object representation ones are generated.  Fix a bug in the x64''s concretizeMoveCqR.' id '1c861b42-d808-4f4d-822f-99d58bff669d' date '26 September 2015' time '6:59:57.54 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1469' message 'Cogit:Refactor argument passing in run-time calls to enable an evil act, that of using the C arg registers RDX & RCX for their "traditional" uses, ReceiverResultReg and ClassReg, due to an awful coincidence.' id '1ef45942-3ff0-4899-bc2b-20d600d357b2' date '25 September 2015' time '5:50:20.457 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1468' message 'Slang:Fix emitCFunctionPrototype:generator:isPrototype: for funciton pointer return types.' id '2b6a8fd8-cddf-447d-bee4-11d53d2ef9bc' date '24 September 2015' time '11:35:27.891 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1467' message 'Slang:Fix the NoDbgRegParams and NeverInline attributes.  These need to be emitted immediately before the function name, not after the parameter list.  After the parameter list was legal in older gcc''s but as of about 4.7 or 4.8 gcc insists that funciton attributes preceed the name and are emitted both for forward declaration and definition.Nuke the unused emitExportPragma code.' id '79c4a282-1c32-4d20-a323-f931cdd7a05c' date '24 September 2015' time '10:37:16.727 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1466' message 'x64:Implement RetN.Implement var-base relative addressing for MoveRAw/AwR.Revise upwards the max machine code size (for MoveRAw/AwR).Implement some of the calling convention machinery.Hence hit the first problem (in genPassReg:asArgument:).  The Cogit assumes the C argument registers are distinct from the other abstract registers, but on x64 these are rdi, rsi, rdx & rcx, all of which we like to use (for Arg1Reg, Arg0Reg, ReceiverResultReg & ClassReg respectively).  So it''s probably time to revise the abstract to concrete register mapping to avoid the conflict.  But I want to sleep on it first.' id '52d92b43-041a-4a50-af5d-965ade697d40' date '23 September 2015' time '6:33:07.031 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1465' message 'Cogit:Extend the abstract register scheme to include 8 scratch registers.  Allow ARMv6 use one, and x64 use 6.  Hence nuke the ill-thought-out GPRegMax GPRegMin, and coincidentally, the unused MulCqR MulCwR MulRR.Add in-image compilation support for x64.' id 'abda63f2-d72f-486d-8163-d23e6a7ebaeb' date '23 September 2015' time '11:07:41.674 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1464' message 'Implement MoveMwrR for X64.  Extend the operand range tested by testMoveMwrR & testMoveRMwr.' id '2f0362da-1883-477a-a0b9-21ef804ceac7' date '22 September 2015' time '7:39:38.675 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1463' message 'x64: Implement the division support.  Fix the s:i:b: byte for registers >= R8.  Hence fix testMoveRMwr.  16 errors and 1 failure.  Extend the range of testMoveRMwr to test non-zero offsets.' id 'e20aaf0a-a2fd-494a-9597-dc013eabe882' date '22 September 2015' time '4:53:01.397 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1462' message 'More fixes for X64.  18 erroring tests remain.' id 'c70fedfe-dca4-4f7a-83ac-40c7f6e818b5' date '22 September 2015' time '12:27:16.045 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1461' message 'Refactor concreatizeAt: to eliminate duplicatuion and to check for exact size matching in the tests.Add the missing X64 tests from IA32.Improve CogIA32Compiler>>computeMaximumSize''s accuracy.' id '5745bccf-6b46-4e68-bcd6-e33a3124ff25' date '22 September 2015' time '11:56:19.984 am' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1460' message 'Remove some hardcoded word sizes from Alien.' id '1e805848-96e9-4317-9750-726ab918b8bc' date '21 September 2015' time '10:15:06.87 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1459' message 'Finish the binary jump and quick arith tests for x64.  Leaves three failing common tests.' id 'f43b14d5-edd9-4ba3-a467-af394e66fdbf' date '21 September 2015' time '3:28:36.804 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1458' message 'Add some more support for more passing tests in the x64 code generator.  Correct some of the x64''s computeMaximumSize.Modify the test harness to use the double dispatching for integer <=> register contexts conversion.' id '18916203-1fcb-4a85-9f86-9c798ab47c58' date '21 September 2015' time '1:16:58.857 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1457' message 'Add enough to get the simple conmditional jump test to work on the x64 alien.Refactor assertSaneJumpTarget: up into AbstractInstructionTests.Improve a comment or two.' id 'eb386c95-4dfd-464c-ac8f-d48208f11177' date '21 September 2015' time '11:19:30.886 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1456' message 'Add enough support for the first X64 test to pass (testAndCqR).  Fix a few of the CogARMCompilerTests given that they have been broken by various changes in getting the CogARMCompiler working.' id '518085e6-a9c6-4fe5-be72-d0a7bda0fa6f' date '17 September 2015' time '5:29:27.743 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1455' message 'Simplify ffiCreateIntegralResultOop:ofAtomicType:in: gievn that my modification was completely wrong <blush>.Make sure the actual SMalltalk selector is included in error messages and the comment at teh beginning of a generated C function.Fix C compiler warnings by making sqAssert: answer its argument (as looked like the intent from the original version).' id '79b98152-ce26-4bf5-a737-3d8b41450be8' date '15 September 2015' time '4:09:42.434 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1454' message 'fix coercion problems on FFI plugin (IA32)- character were not correctly mapped back- floats were not being well chequed- external addressed needs to be treated as aliens for the purpose of coercing them as pointers' id '6d3ecc16-3f07-4f72-bf4c-9b1b9ee83e87' date '15 September 2015' time '3:07:49.521664 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1453' message 'Fix bugs with 4-byte long integers in the 64-bit or machine word on 64-bit signed integer conversion routines.' id 'baf34f5d-4d8d-4f5f-b74a-1d76ecd08695' date '14 September 2015' time '6:02:22.862 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1452' message 'Add a rump CogX64Compiler' id '46cef839-11ad-4fd2-9a33-98ff44a285ec' date '14 September 2015' time '5:13:59.043 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1451' message 'Oops! The has hash arm of primitiveSetOrHasIdentityHash needs to return, not fall through.' id '35560bfb-1823-47e2-a964-8906c9d43890' date '14 September 2015' time '2:48:26.684 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1450' message 'Fix a typo in the Matrix2x3Plugin (thanks Nicolai).Eliminate || (0) and && (1) from generated C.' id 'a7ae1719-23fb-488d-943d-5c5ca08af59c' date '14 September 2015' time '2:19:15.875 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1449' message 'Fix positive32BitValueOf: & signed32BitValueOf: for 64-bit Spur; these must fail for SmallIntegers with digitLength > 4.Modify secret primtiive 161, primitiveSetIdentityHash so that with 0 args it answers whether an object has an identity hash.  This is vacuously true for V3, but is meaningful in Spur.' id 'd4ac7710-be23-4445-8a3c-1d95713d5f26' date '14 September 2015' time '10:57:17.94 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1448' message 'Fix emit of PharoVM define in the FIlePlugin' id '987a0908-6f37-437b-80a8-4db22a6e92bd' date '10 September 2015' time '4:16:55.359 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1447' message 'Whoops!  Several of the flags were inverted when computing the flag word written to the image header.  Also, queueMourner: must check for an empty or full queue.' id '21232acb-44b6-4dc4-a345-108a56a916a8' date '1 September 2015' time '11:38:44.935 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1446' message 'Implement ephemeron queue primitive.  Add an image flag that controls the finalization support (StackInterpreter instVar newFinalization).  If unset, finalization is as currently expected; WeakArray finalizes all WeakArrays in its registries on each finalization (which does not scale!).  If set, then both fired ephemerons and bereaved weak arrays are added to the finalization queue and the finalization semaphore is signalled.  In this regime the image is expected to send mourn to each element of the queue, and weak arrays will send themselves finalize in mourn, side-stepping the finalizeValues steps and rendering WeakArray''s FinalizationDependents and WeakRegistry obsolete.  The bit is set via Smalltalk vmParameterAt: 48 put: ((Smalltalk vmParameterAt: 48) bitOr: 64).Rename ephemeronQueue to mournQueue to reflect the more general use of the queue.Reorganize the getting/setting of the image header VM flags so that processHasThreadId & noThreadingOfGUIThread are now inst vars of CoInterpreterMT, not CoInterpreter.' id '9ab44a24-1f54-4c21-b99a-3977d5ecc0a1' date '31 August 2015' time '11:59:47.399 am' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1445' message 'adding ThreadedFFIPlugin>>#primitiveLoadSymbolFromModule (copy and adapt from IA32ABIPlugin)' id '30a4eca9-7084-44ad-afec-ec964765b8a8' date '28 August 2015' time '2:53:43.289316 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-rmacnak.1444' message 'Fix bug from refactoring in VMMaker.oscog-eem.1438 - lookupProtected:startingAt:rule: should return the actual lookup rule, not 0.Fix bug in MNU for cogged dynamic super sends - should start looking for #doesNotUnderstand: in the superclass not the receiver class. Unify MNU lookup between absent and present receiver sends as a result.Rename local variable lookupClass to currentClass in a few places to avoid confusion with instance variable lkupClass.' id '2ffc3ab7-87d2-43b1-b719-6d4cf96765b5' date '25 August 2015' time '9:05:48.306 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-rmacnak.1443' message 'Further fix outer send MNU by not confusing lkupClass and lkupClassTag. Push setting lkupClassTag down to clarify it is for new cache entries.' id 'fd1228e3-f910-43a8-b648-f197510852c5' date '24 August 2015' time '11:09:53.273 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-rmacnak.1442' message 'The actual receiver of an MNU from an outer send is not necessarily the method receiver.' id 'f34e246e-855a-4049-bcc7-76440e7a5e54' date '22 August 2015' time '4:28:54.585 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1441' message 'Modify Spur ImageSegment load to become the segmentWordArray into an Array of the loaded objects if load is successful, hence decoupling ImageSegment from the assumption that objects are allocated in order.Fix the (unused) ByteArray>>long64At: extension method to do what it advertises.' id 'c41d605b-7d2e-4ecc-95e1-b295119106a7' date '21 August 2015' time '6:18:57.387 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1440' message 'Fix use count printing in printStackPagesInUse et al.Nuke the unnecerssary Glue configurations.  One can already override EnforceAccessControl on the command line.' id 'afa0373e-0470-4a3b-bdac-0345416dbe0e' date '20 August 2015' time '1:44:11.242 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1439' message 'Add no-access-control Stack and Cog Spur VMs for Cadence Newspeak.  Refactor lookupDynamicSuperSendNoMNU:; it belongs in CoInterpreter.' id 'ce1fb6f7-90ee-48c4-9f60-6ff1731ec464' date '19 August 2015' time '4:33:56.517 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1438' message 'Use the isFooMethod: level method privacy accessors to test in two remaining lookup routines, restricting AccessModifierPublic et al to the inner accessors.' id 'ee0708f6-7d3b-4c75-8e4b-376cf87ef426' date '18 August 2015' time '12:39:27.454 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1437' message 'Enable access control in 64-bit Newspeak VMs as well.' id '38743754-8c7a-40c6-a752-2542c195ae62' date '17 August 2015' time '9:13:35.253 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1436' message 'Fix the bug introduced by the fix to primitive function invocation in VMMaker.oscog-eem.1351  The fix correctly changd primitjve code to set the primitiveFunctionPointer appropriately when a jitted external primitive was rebound, but it didn''t remember to void the jit''s record of the offset of the assignment that sets the primitiveFunctionPointer when switching between profiling andf non-profiling regimes, so that the address from the wrong regime would remain and be used to smash prmitive code.  The fix is simply to void the externalSetPrimOffsets in voidCogCompiledCode.This fixes the bug whose symptom is a hard VM crash when using AndreasSystemProfilier.' id '9d2442c4-2066-4ffd-a215-e7e2b6cb8eed' date '17 August 2015' time '8:47:20.904 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1435' message '...and don''t break it for the 32-bit VMs.' id '114c4214-dede-4f25-9bbb-c912623d0ef4' date '17 August 2015' time '5:08:53.21 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1434' message 'Fix negative 64-bit shift in the 64-bit Spur interpreter.' id '34b0a129-6a56-4023-94d1-50a55188b497' date '17 August 2015' time '4:55:04.843 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1433' message 'Good to know the max number of live pages on map as well and this makeds for cleaner counting code.' id '9ad71bda-65b6-4a4b-a0a1-97c45ec115cd' date '15 August 2015' time '1:19:34.476 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1432' message 'Finally erge and refactor [Co]InterpreterStackPages into these plus a common superclass CogStackPages.  rename InterpreterStackPage to CogStackPage.  Add stats to compute the average number of live pages at map.  Move newStackPage into CogStackPages cuz that''s where freeStackPage: is.Make marshallAbsentReceiverSendArguments: use wordSize instead of BytesperWord.' id '926b6e9a-689f-411b-8b70-baa322cf73e7' date '14 August 2015' time '6:49:05.319 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tfel.1431' message 'Merge from VMMaker-bak.364: simulate SNAPSHOT primitive (requires SystemTracer2 to be installed)' id '5c3941c4-ec5d-5842-8d20-ff51dd53e5cd' date '12 August 2015' time '9:03:42.197 am' author 'tfel' ancestors ((name 'VMMaker.oscog-eem.1430' message 'Get the fix for Integer receiver, float arg comparison right.Fix some C compilation warnings.Size a dictinary in Slang appropriately.' id '3d5ca520-ac41-40be-8a8b-95a18d1cb027' date '11 August 2015' time '12:17:13.928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1429' message 'Fix Integer receiver, float arg comparison with NaNs in the machine-code primitive.  This has started failing in the FloatTest>>testNaNCompare since the new machine-code perform primitive invoked the machine-code version of the primitive.  The Interpretewr code has always been correct and the old perform primitive would always run the Interpreter primitive if it exsted, since this would probably be faster.Luckily the ARM requires no changes.  It can continue to use FCMP instead of FCMPE.  Include a generator for the FCMPE instruction; it got written to experiment and does no harm remaining there unused.Refactor stack page list printing to include use counts.Simulator:Simplify and clean-up directory entry call.' id '446c2481-93c9-43bc-86ac-0743223bfa0c' date '7 August 2015' time '11:46:05.819 am' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1428' message 'Fix MNU for cogged self and outer sends.' id '7ae0e720-4afd-4d2d-9824-6b553e1fc559' date '29 July 2015' time '8:50:25.107 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1427' message 'Revert some of the cppIf: NewspeakVM changes; they are needed to hide nsSendCache variables from non-Newspeak VMs.' id 'c5cb18c5-f69e-4e41-8f87-943a495659b4' date '18 July 2015' time '2:12:47.196 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1426' message 'Fix at least one set of 64-bit issues caused by Slang.  In particular the integerObjectOf: code resulted in (objectMemory integerObjectOf: MillisecondClockMask) evaluating to the -1 object, instead of the 16r1FFFFFFF object, which was the cause of the initially nresponsive 64-bit image on the real VM (no problem in the simulator).' id '94ab92ba-c5c4-4953-8566-a4cd9c38df1f' date '18 July 2015' time '1:54:29.051 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1425' message 'Don''t use cppIf: NewspeakVM(et al)  to avoid leaving #if NewspeakVM everywhere.  Instead rely on generation-time dead code removal.  Both Newspeak and Saqueak VMs benefit from improved readability.Fix some primitiveFail[For:] calls in potential mirror primitives that did not return after falure, and could hence continue to do damage after detecting a failure condition.' id '940a2af5-eb00-4257-8328-aba1f471da49' date '18 July 2015' time '1:01:15.695 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1424' message 'Simulator:Allow the displayForm to be resized when the simulator window is resized.' id '56110fd1-2a81-4bc6-ad9c-e33cafbd2c71' date '17 July 2015' time '4:41:03.737 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1423' message 'oops!' id 'cf39cfd3-52f5-4f6b-bba6-892ee83000fe' date '15 July 2015' time '8:28:00.1 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1422' message 'Fix a warning.' id '72d0eb67-7dbb-463f-8481-c6677291e4f6' date '15 July 2015' time '7:55:18.56 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1421' message 'Implement a machine code perform:[with:]* primitive,  Fix open PICs in the simulator.  They were failing due to an off-by-one error and have been for ages.  Eliminate the duplication between SimpleStackBasedCogit>>compileOpenPIC:numArgs: and StackToRegisterMappingCogit>>compileOpenPIC:numArgs: now that we have dead code elimination enabled.' id '662f4359-0c53-410a-9be0-e8fa46ea0446' date '15 July 2015' time '7:52:24.886 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1420' message 'Simulator:Get the simulator''s event handling to the state where one can do 3+4 ctrl-p and get 7, and bring up halos in the world, rather than the simulator''s window.  Move the relinquish processor flashing into the simulator window if it exists.' id '694d0e1e-2003-493c-82ab-1d60581cb544' date '15 July 2015' time '3:40:39.568 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1419' message 'Reduce the simulator''s event handling to just keyboard and mouse events.  Filter-out mouse moves unless buttons are pressed so that the simulator doesn''t get endless window leave events as one interacts with the simulator''s window.' id '40db9abe-8bac-4b73-8cfa-a8773c2f1db0' date '15 July 2015' time '12:03:32.999 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1418' message 'Simulator:Rename Timothy''s StackInterpreterSimulatorFoo classes tosomething a little less of a mouthful.  Plumb his (now) SimulatorEventTransformer into the existing simple simulator UI. (thnks Tmothy!  Sorry I''ve been so long getting to this)  Copy the event queue code from StackInterpreterSimulator to CogVMSimulator.  Fix Spur64BitMemoryManager>>newInputEventAccessorOfSize: and allow CPluggableAccessor to hard-code the size.' id 'ec9f7a35-a5c8-4eb2-ad7d-c3f0cb2e2e84' date '14 July 2015' time '9:26:06.427 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1417' message 'Change the type of the event buffer from int[8] to long[8].  Provide simulation support for accessing it in the object memories.  Fix a slip in ioGetNextEvent:' id '5220753e-35a2-46e9-89ad-f7e65d93073b' date '14 July 2015' time '3:14:42.397 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1416' message 'Merge Ryan''s 1415 and fix a stupid deletion by that idiot tpr.' id 'eac0fe5f-4fb3-4a57-8e6d-803471cce6ce' date '14 July 2015' time '1:19:02.665 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-rmacnak.1415' message 'Compile Newspeak self and super sends as clean sends as well.Slower in monomorphic case but net win for the larger benchmarks, presumably because it avoids I-cache flushes in the polymorphic case.Also means implementing polymorphic caches for clean sends will benefit all non-ordinary sends.DeltaBlue +8.2%Splay +7.6%ParserCombinators +4.7%Richards +0.5%SlotRead (replaced with self send) -17.6%' id 'b80baa14-1f7b-43f2-aeee-f17c4262fdf8' date '13 July 2015' time '8:33:03.418 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-tpr.1414' message 'Final (please) change for ARM __aeabit_idivmod support. Benchmarks suggest a useful improvement as a result. Scratch PacMan on a Raspberry Pi2 runs at 30fps or so.' id 'cc8ee57d-fbf9-409f-93da-6a9d5442e435' date '13 July 2015' time '4:52:46.377 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1413' message 'Calls to ARM __aeabi_idivmod now work;Possibly messed up merge with VMMaker.oscog-eem.1412 may make this go awry; let''s see.' id '3dc53b94-e67c-42b2-aecb-ca3e226316a1' date '13 July 2015' time '2:54:04.432 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1412' message 'support calling ARM abi stuff that neds no stack fussing. Carefuly don''t smash registers that dont orta be samshed' id 'c5b072c9-f74d-43af-9504-edd76655b0b4' date '13 July 2015' time '12:00:05.608 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1411' message 'simulation phase support for ARM div/mod ''instruction''. Works in sim-land; a new ABI call-out short-circuits some of the more general call-out support and the register-smashing is more restricted since we need R0/1/lr to survive.Next stop - finding out how to call the real __aeabit_idivmod call and find ing out how it differs from intel''s IDIV instruction in its treatment of value.' id 'f10b2335-024d-4641-8c0f-fb88f7dccafc' date '12 July 2015' time '1:21:23.189 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-rmacnak.1410' message 'Spill ReceiverResultReg before the runtime call to fix pushEnclosingObject on ARM.(ReceiverResultReg is eax/caller-saved on IA32 but r7/callee-saved on ARM.)' id '78ff7835-55a3-4bd0-854e-36a3237cf56e' date '10 July 2015' time '9:02:24.902 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1409' message 'Fix slangification of ThreadedFFIPlugin.  Eliminate a few warnings there-in.Make type of tenuringIncrementalGC agree with sqVirtualMachine.h.Provide a back dorr for the ARM division routines diuring simulation.' id '428ff402-b7ce-44c6-a95d-5db172a1e43f' date '10 July 2015' time '1:59:54.741 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1408' message 'ThreadedFFIPlugin:Allow ffiCreateIntegralResultOop:ofAtomicType:in: to be inlined.  reduce the number of tests leading to the common case of an integral return in ffiCalloutTo:SpecOnStack:in: etc.Refactor the remapOop:in: idiom up into InterpreterPlugin and use it in the ThreadedFFIPlugin.' id '51bc4e0f-a338-4394-8c6a-22b4b3e07c61' date '8 July 2015' time '11:24:12.884 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1407' message 'Eliminate compile-time warnings from Newspeak ARM Cogit.' id 'cc7c9003-2145-44b0-a3bd-937c285968bb' date '7 July 2015' time '1:49:34.367 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1406' message 'Implement the relevant implicitReceiveCacheAt: for the ARM Cogits.  Make this work for in-image compilation too.' id '8623e529-d65d-4cc1-b62a-477bffeb453d' date '7 July 2015' time '12:53:22.553 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1405' message 'Spur:Make sure the post become action unforwards theProcess in the activeProcess inst var up to date.Add some more asserts to check.  Also follow thespecialObjectsArray after a pin become.Generically use storePointerUnchecked: whenstoring nils into the process lists.Nuke an unused method in the MT VM.' id '7aff388a-73ba-4202-bb5a-72b0759ff46b' date '6 July 2015' time '11:43:50.069 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1404' message 'Fix merging of properties for super expansions.  The old code would merge properties before renaming variables for inlining the super expansion, and forget to rename variable names in properties.  The new code renames variables in properties as well as in the parse tree of copy to be inlined, and merges properties after renaming.Use super genSpecialSelectorEqualsEqualsWithForwarders in SistaStackToRegisterMappingCogit>>genSpecialSelectorEqualsEqualsWithForwarders now that super expansion is fixed and nuke the indirection method.Fix SpurMemoryManager>>initializeWithOptions: to copy the options dictionary to its subclasses and all ancilliary classes.  Fixes eg. in-image compilation now that maxOldSpaceSize is settable via options.' id 'b73d0e90-367a-4575-8a29-87bbc81e4715' date '2 July 2015' time '9:40:01.397 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1403' message 'Fix long-standing bug in primitiveVMParameter forsetting, and hence allow Spur to set maxOldSpaceSize.' id '66fdf690-416b-4359-be28-c0387023baa6' date '29 June 2015' time '6:24:23.709 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1402' message 'oops.' id '6f030706-bed6-4c29-a2f7-5e3653737178' date '29 June 2015' time '5:43:57.101 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1401' message 'Provide a limit to the size of old space on Spur.Access maxOldSpaceSize via vmParameterAt: 67.' id '036f0933-639a-49dd-8a1d-a03bcdcb0a0a' date '29 June 2015' time '4:40:43.429 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1400' message 'Fix block mehtod header printing and scavengethreshold access in in-image compilation/disassembly.' id '5e8b83f1-809e-46d3-8ab1-38d50fdf3ff4' date '29 June 2015' time '2:53:44.273 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1399' message 'Moved down the return because slang doesn''t translate correctly returns on conditions resolved at compile time.' id '288a6e76-6729-4327-9507-23659247129e' date '29 June 2015' time '2:59:03.143 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1398' message 'rewrote the statement so the slang generator won''t complain.' id 'b7d7554c-3637-4d11-a5e1-4b97eeae7e5a' date '29 June 2015' time '2:44:44.1 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1397' message 'separate the case where the specialSelector comparison has two constants as operands and share the code between the two JITs' id '2462319b-7f8e-4da4-8507-e6e14177bf44' date '29 June 2015' time '1:52:05.055 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1396' message 'fixed trinaryInlined primitive which was forcing a reg to be ReceiverResult reg when it shouldn''t....' id 'ec6d1c5e-1867-428f-9163-9f54422ce6f9' date '29 June 2015' time '1:29:37.265 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1395' message 'reuse code instead of duplicating it.' id 'c9baacae-c4ac-43f9-b0ba-3beae22c2eb5' date '29 June 2015' time '1:14:40.644 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1394' message 'optStatus ssEntry was initialized only in frameless methods, it is now initialized also in frameful methods.This allows to remove the checks for optStatus ssEntry = (self addressOf: simSelf) at multiple places in the code.' id 'bcbb50b5-80d7-4f84-bb1d-48ffc770dae1' date '29 June 2015' time '12:52:59.639 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1393' message 'rename from availableRegNotConflictingWith: to: #availableRegOrNilNotConflictingWith: to be more explicitput back Eliot''s code written slightly better for pushRemoteTemp as it make sense on slow processor (maybe it impacts things like the PI)refactor a bit the closure code I was reading to avoid important code duplication.' id 'a8818eac-bc1d-46a0-8131-d0b52265c57b' date '29 June 2015' time '11:15:38.181 am' author 'cb' ancestors ((name 'VMMaker.oscog-rmacnak.1392' message 'Remove some dead code.' id '8f30a56b-7998-4e50-bc9f-63b7e3281afc' date '27 June 2015' time '5:32:42.014 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1391' message 'Revert back to Clément''s version ofgenPushRemoteTempLongBytecode now thatexample response has been committed.' id 'bdc64a36-203a-4f8f-b8e9-53ef7e41bfb9' date '27 June 2015' time '12:43:14.39 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1390' message 'Example response to Clément''s last commit.Add the potentially useful availableRegNotConflictingWith:.Use the available register if available in genPushRemoteTempLongBytecode.' id '8c7374c7-15cf-49d6-9917-609af6a1ee1c' date '27 June 2015' time '12:40:53.257 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1389' message 'simplify pushRemoteTemp register management to be able to improve urther the overall register management.' id 'ba6a0324-f38b-4e2b-9489-68461034aa2b' date '27 June 2015' time '5:09:17.165 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1388' message 'Newspeak:Declare EnforceAccessControl so it can beoverridden at compile time.  Modify Slang toprovide const:declareC: for this purpose.Add inline decls to the access modifier accessorsand use the is[Pulic|Protected|Private]Method:forms.  Use the class vars for the access codes.' id '5946eb20-1cae-4cba-98b5-467aa146ffab' date '26 June 2015' time '9:13:40.945 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1387' message 'Nuke obsolete inline prim bytecode' id '62775273-e462-4d31-9c0b-d66d8db48cb1' date '26 June 2015' time '1:47:11.51 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1386' message 'Add hardware FP support for ARM.Runs all SUnit tests and assorted benchmarks ok, makes nbody 3X faster.Probably some cleaning up to do, possibly more careful NaN handling etc.' id '440eb32a-a8d2-43de-931f-9915aba55157' date '26 June 2015' time '11:25:06.76 am' author 'tpr' ancestors ((name 'VMMaker.oscog-tfel.1385' message 'Copy changes from VMMaker-tfel.366fix some code paths in the BalloonEngineSimulation that are used when rendering true type fonts' id '4e33063c-40a3-4d4f-b15d-cfc1f3cd80b0' date '26 June 2015' time '10:44:51.305 am' author 'tfel' ancestors ((name 'VMMaker.oscog-tfel.1384' message 'Copy changes from VMMaker-tfel.365generalize primitive simulation for Balloon, BitBlt, and image snapshot simulation (used RSqueak in lieu of VM implementation/plugin)' id '455a0b04-791c-cc40-ae78-2de330b4d9ce' date '26 June 2015' time '10:43:25.979 am' author 'tfel' ancestors ((name 'VMMaker.oscog-rmacnak.1383' message 'Set lkupClass when MNU because of protected method in lookupOrdinaryNoMNUEtcInClass:. Remove duplicate lookup in findNewMethodInClassTag:.' id '07614259-3b43-4981-afba-ab17e3835074' date '25 June 2015' time '9:58:12.556 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-rmacnak.1382' message 'Distinguish lookup for ordinary sends and for MNU processing in the JIT. Skip private methods and stop on protected methods in ordinary lookup. This should complete Newspeak access control.' id '21362455-f28a-4718-9285-bc2c42a55fb1' date '25 June 2015' time '9:01:41.81 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1381' message 'Unreachable needs to be inlined to avoid popping up in the cogits.' id '354a3c71-6582-4dbc-bfc8-39bda700e8cf' date '25 June 2015' time '1:58:03.542 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1380' message 'Add some <option: #NewspeakVM>''s to eliminatecode from the non-Newspeak VMs.Eliminate a double method cache flush on startrup.' id '582c96d5-f95a-4916-a11d-62c452accc31' date '25 June 2015' time '1:30:03.792 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1379' message 'Fixes the #== bug that was crashing the VM when the counter trips in some methods' id 'cc44db6e-5fe4-4aee-9a1b-e6de870b83a8' date '25 June 2015' time '6:50:58.585 pm' author 'cb' ancestors ((name 'VMMaker.oscog-rmacnak.1378' message 'Do proper lookups for self and super send misses from cogged code.' id '75a23d0a-2813-46a9-947d-63c53f91f078' date '24 June 2015' time '8:28:02.92 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1377' message 'Make InterpreterPlugin>>#sizeof: work for e.g. #''void *''.Exclude nsMethodCache from non-Newspeak VMs.Make the assert in topOfObjStack an eassert forfaster simulation of Spur GC.' id '5b760c4a-fa68-41f0-bb5f-de1657f1a7f3' date '24 June 2015' time '12:15:15.033 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1376' message 'MiscPrimitivePlugin class>>#translatedPrimitives is slightly different for Pharo. Answering a different version if PharoVM = true.' id '96f873b1-3c5f-4b42-aaed-a1a370b8d2af' date '23 June 2015' time '11:43:50.383921 am' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-rmacnak.1375' message 'Do proper lookups for implicit receiver and outer send misses from cogged code.' id '2834a848-0c6d-4c29-bd1e-a43ad70450d9' date '22 June 2015' time '10:07:47.302 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-cb.1374' message 'Interesting register hack to avoid 1 move instruction in #== with forwarders.' id '888aa558-5941-4f00-9d4d-bb9dbedd1c3a' date '22 June 2015' time '5:34:35.858 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1373' message 'slighlty change the code generation of #== in sista Jit to decrease the estimate size of abstract opcodes. We now need 11 in the sista Jit instead of 10 in the regular jit due to the counter logic, but it remains reasonable on the contrary to the previous value of 14.' id '4994d85f-07d9-481a-8ab9-68ccfd589507' date '22 June 2015' time '4:20:40.643 pm' author 'cb' ancestors ((name 'VMMaker.oscog-rmacnak.1372' message 'Enforce Newspeak access control in the interpreter, and enable it in Stack VMs. Disable in Cog VMs to avoid partial enforcement. Should be eliminated by Slang from Squeak VMs.Add a separate global lookup cache for non-ordinary sends.' id 'addc4f0f-0a6b-4594-b946-a7f8af54d6a4' date '21 June 2015' time '5:25:31.325 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1371' message 'Fix bogus assert in extSendBytecode.  SimplifySpurMemoryManager>>classForClassTag:; itsassert is superfluous.' id 'a51022d9-e5d7-4dbf-83d3-4326bd5ea61f' date '21 June 2015' time '1:51:53.326 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1370' message 'Whoops!  isForwarded: is the api, not isObjectForwarded:, which is V3 compaction-related.' id '779d3751-cd1b-4882-b870-156bf7da752a' date '20 June 2015' time '3:26:27.254 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1369' message 'Tweaks to the last commit.addressCouldBeClassObj: is for asserts only.Forwarding in prims that will be retried is wasteful.' id '46477ec0-5610-4000-b7b6-4d32e240b753' date '20 June 2015' time '11:42:33.24 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1368' message 'Add explicit read barriers to primitives whichaccess an argument as the receiver (i.e. themirror primitives).  Don''t check if the actualreceiver is used.  Simplify failure whereappropriate because the primitives will be retried.' id '413094c9-bc1b-430f-8e41-34a0438291c5' date '20 June 2015' time '11:22:19.253 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1367' message 'Fix PIC parsing for out-of-line literals.  Add anassert to the closed PIC prototype code to check all PIC parameters are accessible.Add a containsAddress: to abstract away thetest for a target within the PIC.Make the OOLL [store]classRef[:]InClosedPICAt:code 64-bit aware.Fix method header printing for PICs.' id '5d5685bb-29fe-4d36-8ff2-df498dd8cc47' date '19 June 2015' time '8:24:51.209 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1366' message 'ARM Cogit:Revise the outOfLineLiteralOpcodeLimit sincemore thna one hardware nstruction can be emittedper abstracxt opcode.  The old code fell foul ofIntegerTest>>#testIntegerPadding which containsmany literals but no jumps or returns.' id 'caed09f8-bf82-445d-b581-1d65e2b6882c' date '19 June 2015' time '11:08:41.465 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1365' message 'Cogit:Fix regression in relocateMethodsPreCompaction inVMMaker.oscog-eem.1342.Fix multiple annotations on the same pc now thatannotations are directly attached to instructionsby annotating a Label with the second annotation.Affects e.g. calls through ceNonLocalReturnTrampoline.Neaten generateMapAt:start: by moving the bytewrite inside the new addToMap:instruction:byte:at:for:.Fix addressIsInCurrentCompilation: usingyoungReferrers as the upper limit.  ReviseinitializeCodeZoneFrom:upTo: as a result.ARM Cogit:Fix relocating jumps in PICs by indirecting through theliteralsManager to skip out-of-line literals as required.' id 'a12bef68-d8c2-4546-80c5-310ef8d8cd88' date '19 June 2015' time '9:53:09.405 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1364' message 'ARM Cogit:Set an out-of-line literal''s opcodeIndex whendumping literals and revise the ARM''soutOfLineLiteralOpcodeLimit up a bit.  Add an assertto check that the pc offset is in range.Remember to nil the address on literal allocation.Make Literals not pc-dependent; only theinstructions that reference them are.Change the second loop index in generateInstructionsAt:for easier debugging (run until...)' id 'da709414-067f-45e5-b1a6-4d14acb3f58d' date '18 June 2015' time '4:47:28.809 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1363' message 'Move the Literal initialization code intoCogAbstractInstruction and make sure they arefully initializaed (old code left bogus annotations).At least under X11 the OOLL ARM Cog VM now runs.' id '7688edec-456b-4fce-a6e0-b0dd8cf2877a' date '18 June 2015' time '1:58:49.325 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1362' message 'Fix initialization issues with the array of out-of-lineliterals by initializing each literal on allocation ratherthan early in a bzero call.Drop the unused parameter from resetLiterals: andhide the send of resetLiterals inside the twoallocateOpcodes: methods, rewriting them in moreconventional style, relying on inlining rather than aC macro to have them inlined into their callers.' id 'eb2638bd-a092-4dc0-9495-82249a85bfbb' date '18 June 2015' time '11:40:39.303 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1361' message 'Cogit:Fix return type calculation for mapEntrySize (handleunsigned char + unsigned long).Fix a warning in picDataFor:Annotation:Mcpc:Bcpc:Method:' id '000b1a0b-f89e-415f-aae5-405d3a401928' date '16 June 2015' time '8:29:45.641 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1360' message 'ARM Cogit:Fix growing literals.  Can''t use realloc cuz existingrefs must be updated to new literals.Fix literalInstructionInRange: in C by making surethat literalOpcodeIndex is signed.Fix type errors and typos.' id '5c6c54b7-17d9-4a75-8da3-c908c8329fef' date '16 June 2015' time '7:42:05.97 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1359' message 'Slang:Fix the extern extern regression on generating pluginscaused by the changes in VMMaker.oscog-eem.1349' id '0e62a222-6136-430f-9bc2-8e7cee245076' date '16 June 2015' time '4:25:10.061 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1358' message 'Fix Slang for sends that return the result of amessage send of a method containing valueexpansions.  The old code would return the valueof the first statement of each block expandedin a value expansion, instead of the last.' id '9b5a5fe3-2c6a-46d1-ab86-007b3d28be17' date '16 June 2015' time '4:02:48.322 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1357' message 'ARM Cogit:Provide the rest of the literal scanning andupdate support required for out-of-lineliterals.Fix Slang translation.Eliminate compiler warnings.' id 'e41e9e44-9282-44ad-9e31-d7a33f325590' date '16 June 2015' time '3:27:59.805 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1356' message 'Revise object reference scanning in PICs to allowfor out-of-line literals.  Indirect through the literalsmanager to access obj refs and distinguish methodliteral and class obj refs. Rename the accessors tomake clear they''re for use only in closed PICs.' id '27c54f55-7a3e-447b-b627-bbef39086d7c' date '16 June 2015' time '10:22:20.888 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1355' message 'ARM Cogit:Fix otherwise clause of inverseOpcodeFor:.Declare OutOfLineLiteralsManager'' literals correctly.Slang:Modify typedef printing so that all class namesfrom the concrete type throguh to the abstracttype are renamed with a define if necessary.Hence fix compilation of cogitARMv5.c.(Still have CogOutOfLineLiteralsARMCompilermethods to implement to get it to link though).' id '9845d764-065b-4f4d-83ec-cb0743402fca' date '15 June 2015' time '8:41:02.452 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1354' message 'For correct translation CogARMCompiler must be isAbstract' id '33807720-0fc7-43d4-98b3-1230281feaf6' date '15 June 2015' time '7:28:27.853 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1353' message 'Oops.  Fix slip.' id 'a321fae2-70cd-4d36-8048-f46d3613e346' date '15 June 2015' time '6:04:08.621 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1352' message 'Concoct a scheme for choosing a defaultCompilerClasswhen there are multiple choices.  Hence fix Slangtranslation of the CogOutOfLineLiteralsARMCompiler' id 'a638308d-1558-44d2-9408-bd5ffd38bb49' date '15 June 2015' time '5:56:48.795 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1351' message 'Cogit:Fix bug in rewriting compiler primitives on moduleunload, etc.  The old code didn''t change theassignment to the primitiveFunctionPointer, which isneeded for correct management of failing primitivecalls on Spur.  Simplify the post compile hook toeliminate the label parameter; this is local to theCogit.  Move all the relevant variables down toSimpleStackBasedCogit.ARM Cogit:Get out-of-line literals fully working, at least in thesimulator.  Implement the necessary rewriting codeand implement saving and restoring around blockcompiles for the cases where they''re redone.Fix some bugs with PushCw, and AndCqR.' id '7152bdb6-6f96-4cbc-97ae-2095989ab1e2' date '15 June 2015' time '5:27:35.339 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1350' message 'ARM Cogit:Move the calculation of which address to annotatefor an annotated instruction into the instruction,allowing CogOutOfLineLiteralsARMCompiler toannotate the out-of-line literal, rather than theinstruction following, and implement literal updateon GC for out-of-line literals.Slang:Eliminate blank lines coming from conditional deadcode elimination.' id 'ae606b2c-4dc1-4c8f-9f69-793010abbd03' date '11 June 2015' time '5:54:31.583 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1349' message 'Slang:Modify prototype output so that non-static functionsare declared as extern.  This to try and cure Cogcrashes on compilers such as clang 3.4.Relax the isNil: warning for prevInstIsPCAnnotated;accept simple struct send receivers.' id 'c4bacc64-8f85-425f-b5b9-47504c99cabe' date '11 June 2015' time '3:30:12.807 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1348' message 'Rescue compilation of the cogits by getting theancilliary classes back in the right order.Add an argument to dumpLiterals[:] to indicate ifa branch around the dumped literals is required.Eliminate some bogus variable declarations.' id '2280408f-212d-4fe2-b338-f8d8c0e75340' date '11 June 2015' time '2:33:00.174 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1347' message 'Fix the blunder with shared out-of-line literals;the out-of-line literal for an in-line send cachemust be unique.Fix genQuickReturnConst for out-of-line literals.' id '2a1037d4-068d-465f-871f-673a04dd7e0f' date '11 June 2015' time '12:49:55.335 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1346' message 'Cogit:Move annotations into instructions, where they sitmore naturally anyway.  But doing so makes it trivialto move annotations from the instructions referencingout-of-line literals to the literals themselves.Hence nuke CogInstructionAnnotation.Update usesOutOfLineLiteral to reflect the changesin computeMaximumSizes & dispatchConcretize tobe accurate in identifying insttructions that use oolls' id '899ace24-f7ff-42f5-9652-f95e532a1bb8' date '10 June 2015' time '6:11:01.157 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1345' message 'Implement finding the inline cache tag withARM out-of-line literals.' id 'b1992ade-70ba-4fbd-9b02-c2cb4a119370' date '10 June 2015' time '4:26:07.813 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1344' message 'Cogit:Get code generation working for CogOutOfLineLiteralsARMCompiler.Fix initialization of methodLabel in Introduce DumpJumpLong[Zero]: for convenientPIC wirting where the literals need to be dumpedin consistent places to keep PIC cases the same size.Fix isAnInstruction for labels (methodLabel) anduse it to guard addressIsInCurrentCompilation:calls where a label is involved.For better initialization of literal managementuse zeroOpcodeIndex everywhere opcodeIndexis initialized, and have it reset literals.  And havecomputeMaximumSizes dump literals.Move the assignment of maxSize out ofcomputeMaximumSize and intocomputeMaximumSizes for concision.ARM Cogit:Introduce some more abstractions for rotateableconstants so that it is easier to relatecomputeMaximumSize and dispatchConcetize inCogARMCompiler.  Provide more opcode names anduse them, and use inverseOpcodeFor: to calculatethe inverse opcode when the inverse constant isused.Revise ARM getDefaultCogCodeSize given betterestimates of relative code sizes.Simplify isPICDependent to eliminate Calls, whichare not pc-dependent (ince they always call out ofthe current compilaiton).Simulator:Safety in instruction printing, and spotting literalsin disassembly.Slang:Fix ancilliaryClasses: given the deeperCogAbstractInstruction hierarchy on ARM.' id '020ff2e2-0424-44b9-9fde-7bfbe945d1ad' date '10 June 2015' time '3:17:31.452 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1343' message 'Added support for jumpOrPopIfNotInstanceOf: in cogit''s scanner.' id '666300e9-e0db-40f6-bf41-7c9df3946f79' date '10 June 2015' time '4:23:56.634 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1342' message 'ARM Cogit:First cut of out-of-line literal support.  AddOutOfLineLiteralsManager and InLineLiteralsManagerto insulate the Cogit from the difference.  Addcalls in generation to generate literals, dump literalsetc.  InLineLiteralsManager implements these asempty, so the existing backends are unchanged.Allow the literals manager to mediate creation ofinstructions that refer to literals.N.B.  Only the existing in-line literal back end should befully functional.  The out-of-line back end needs work:- very likely the computation of the offset to fetch  the out-of-line literal is wrong; see  CogOutOfLineLiteralsARMCompiler>>#moveCw:intoR:- annotations on instructions that refer to literals  are not changed to refer to the literals.- disassembly is not fixed to print literals as literals- none of the relocation/relinking code affected by  out-of-line literals has been written yet.- the literals management code hasn''t been added  to the PIC prototype generators yet.Refactor CogARMCompiler into CogARMCompiler &Cog[In/OutOf]LineLiteralsARMCompiler.  Make about14 methods subclass responsibilities, moving theoriginals down into CogInLineLiteralsARMCompiler.Fix bugs in computeMaximumSize with AddCqR andSubCqR, and a bad slip in concretizePushCq.Nuke the unused BICCqR opcode.  Add class vars toname all the opcodes passed to concretizeDataOperationCwR:.Add a class var to hold the current compiler classinstead of using CogProcessorAlien class>>abstractInstructionCompilerClass.' id '15bbc313-57fa-44b9-b2aa-ba0bc38aa00f' date '9 June 2015' time '3:18:21.796 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1341' message 'Spur: Remember to count shrink requests' id '191bffae-dc94-4a4f-a716-35a4621001a7' date '7 June 2015' time '11:29:26.491 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1340' message 'Make all the usages of flushICacheFrom:to: work with start-address to byte-after-end-address. Irrelevant to x86, perfect for ARM, matches most of the usage already in place.Fix up a few type complaints from gcc. Whiny, whiny.' id '4826ecce-62d5-4976-ae28-aeb9abeb88a5' date '6 June 2015' time '2:46:53.877 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1339' message 'Spur Cogit:Fix Spur block performance now that we followforwarded receivers in blocks.  Scan blocks forinst var usage, only unforwarding in the prologue ofblocks that actually refer to inst vars.  In a test SpurSqueak image only 12.5% of blocks do refer toinst vars.  So this is definitely a win.Add a special purpose store check trampoline tostore check the updated receiver.  Make sure it''sonly called if the eceiuver is updated.Rationalize computing the number of trampolines.Add state to CogBytecodeDescriptor, CogBlockStartand CogBlockMethod to track block inst var usage.' id '022ddfcc-a8f6-422b-8a81-edffae18ebe6' date '4 June 2015' time '12:58:10.572 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1338' message 'Fix the bug eliot reported where rcvrReg was nil in genEqualsEqualsnoBranch.' id '25cd5227-7a5f-466c-8e83-eb3533ccee1a' date '4 June 2015' time '4:28:00.954 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1337' message 'Fix defaultCogCodeSize to avoid exporting the AbstractInstruction type' id 'bbb568f4-b2c8-4711-9d7a-7ad42d103182' date '3 June 2015' time '10:42:04.417 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1336' message 'Merge with VMMaker.oscog-tpr.1335, keeping the -1''sin the cache flush extent calculations.Fix the hack introduced in VMMaker.oscog-eem.1199for Sista which merely stopped reclaiming closedPICs.  In non-Sista VMs do the usual thing of decayingusage counts on PICs, as with methods, andreclaiming those least used.In Sista, retain PICs until teh next cycle, identifyingunused PICs as part of the compaction scan,reminiscent of tri-colour incremental GC.Move defaultCogCodeSize into theCogAbstractInstruction hierarchy so that e.g.CogARMCompiler can specify a larger defaultcode zone.' id 'a8254ed3-d450-4a8a-aa78-7ae88f6aae1a' date '3 June 2015' time '10:06:12.601 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1335' message 'Enable the magic MULL instruction on ARM.Clean up flushICache usage' id 'de4ebc16-0bda-42c8-b337-9d3b09f41627' date '3 June 2015' time '5:49:55.408 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1334' message 'Spur:Since the invariant is that the receiver is neverforwarded, Spur must check for forwarding onblock activation.  A become between closurecreation and closure evaluation can forward thereceiver, and it must be unforwarded.  Here we doso by checking for a forwarded receiver in thevalue[:] primitives. This is a major blow to blockperformance; e.g. the nfib block	b := [:n| n <= 1				ifTrue: [1]				ifFalse: [1 + (b value: n - 1) + (b value: n - 2)]].slows down by 11%.  So we can and will do better.We should scan for receiver usage in the JIT andoptionally compile unforwarding code in the prologdepending on whether self is used or not.Cogit:Use the Tst-based generators for immediate andSmallInteger tests more widely to save a few moreinstructions.' id '1d933034-0724-4da9-82e4-f79648b6dc8b' date '3 June 2015' time '5:08:13.124 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1333' message 'Cogit:Fix assert-fails with absent receiver sends inNewspeak.  Have the implicit and outer sendlookup trampolines set the stacked receiver(when there is one) when setting the implciitreceiver.Streamline send trampoline creation by refactoringtrampoline name generation so that the two limits,NumSendTrampolines - 2 and numRegArgs aretreated separately, and numArgsOrSendNumArgsReg:answers the relevant numArgs argument.  This shouldclear up confusion between numRegArgs (which can be 0, 1 & 2)and NumSendTrampolines - 2, which is always 2.' id 'bc9001c2-8816-4b4e-bf91-8e11cad6ed6b' date '3 June 2015' time '8:51:47.115 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1332' message 'Fix the regression in implicit receiver sends causedby VMMaker.oscog-eem.1317 (fix to performanceregression caused by using XCHG on x86).The implicit receiver cache uses SendNumArgsRegto refer to the cache object.  Hence we must useTempReg for genPushRegisterArgsForNumArgs: inthis case. So refactor togenPushRegisterArgsForNumArgs:scratchReg:, passingeither TempReg or SendNumArgsReg as approprate.' id '528336b3-25ab-41f7-b788-2b9155e5d980' date '1 June 2015' time '5:02:18.369 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1331' message 'Cogit:Refactor genGetFormatOf:into:baseHeaderIntoScratch:to genGetFormatOf:into: and implement it for SqueakV3.Use genJumpImmediate: et al in various basicaccess primitives.Document that genJump[Not]SmallInteger: can''talways be done with a single register (e.g. Spur64).' id '2da6f9fc-7921-4c8b-8c78-dd47f9ddd76e' date '30 May 2015' time '12:00:50.505 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1330' message 'Cogit:Test the outerContext and method for sanity in themachine code clocure value primitive(s).  Spur mustcheck to fail in the presence of forwarders.To support the primitive provide TstCqR support onx86 (already exists on ARM), and use it to implementgenJumpImmediate: et al.  We need to use this morewidely.Spur:Spur must follow forwarders in machine codebefore it follows forwarders in stack pages (sincestack page parsing examines methods).Further, closed PICs that refer to unmarked objectsmust be discarded in freeUnmarkedMachineCode.And closedPICRefersToUnmarkedObject: shouldguard against an immediate selector.Simulator:Some reveiver fixes for simulation-time issues.' id '95343ab5-05e4-40a9-9d2d-c7ab1f884d15' date '29 May 2015' time '8:15:50.25 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1329' message 'Fix cache tag access for ARM in cPICHasForwardedClass:Guard access to the inline cache tag in PICs inGC routines by inlineCacheTagsMayBeObjects.Mark inlineCacheTagsMayBeObjects as inline toeliminate dead code.' id 'd25444c7-af99-40e1-ab8a-a765c046eae5' date '27 May 2015' time '11:42:44.314 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1328' message 'Fix determination of the picInterpretAbortOffseton ARM in cogExtendPIC:CaseNMethod:tag:isMNUCase:.' id 'c1e2ed6b-28c4-448f-88b8-4c7a3ad53b78' date '27 May 2015' time '9:54:09.994 am' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1327' message 'simulator should use LittleEndianBitmap instead Bitmap as memory when possible .' id '66c08101-8728-4cf9-9cb7-994f08387c86' date '27 May 2015' time '2:47:05.018933 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1326' message 'StackInterpreterSimulator>>#veryDeepCopyWith: just work if working inside a Spur image, and Pharo is still not ready to do that.Added a check to ensure it works. ' id '8979417d-cdd7-4f86-9439-d474c595e021' date '26 May 2015' time '3:29:25.646752 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1325' message 'NullStream needs to support crtab.' id 'a0bb0f7f-5e6e-48a7-bf73-fa5d135e06c0' date '24 May 2015' time '2:19:24.991 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1324' message 'Move comment containing method name from afteropening brace to before function prototype, becauseotherwise it interferes with the var struct decl.' id '2a4c329d-49f0-41cd-9b2b-857fb713383c' date '24 May 2015' time '1:45:10.298 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1323' message 'Merge with Pharo (with VMMaker.oscog-EstebanLorenzano.1322).Fix PIC creation on ARM to jive with new pc-relative addressingsupport (addressIsInCurrentCompilation:).Move the specifics of NoDbgRegParms out of VMMaker.Assume it is defined in the various sqPlatformSpecific.h (see r3356).' id '95fb28f1-4ac9-434c-adb9-b0a3111e70ad' date '23 May 2015' time '7:07:35.921 pm' author 'eem' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1322' message 'added a PharoVM flag I forgot' id 'f973b39f-b9fb-425b-90d2-eda1a2c2406e' date '22 May 2015' time '8:38:54.928627 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1321' message '- merged- nuked unused/incorrect methods- removed executable memory flags... this is just necesary for NativeBoost and we are not including at the moment.  I took notes in case we want to put it back in the future. - removed inclusion of <setjmp.h>, it was needed for windows in the case of nativeboost. ' id '1d5fdcdd-b2cb-4f67-b92d-c3b4e1ac710a' date '22 May 2015' time '1:10:57.157449 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1320' message 'reverted change on StackInterpreterPrimitives>>primitiveDoNamedPrimitiveWithArgs' id '4c63806a-119f-4bf2-abbe-61e9d947fd89' date '21 May 2015' time '9:54:04.725977 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1319' message '- merged- applied some suggestions by Eliot' id 'e29a9b86-a5ef-4313-a789-9f8e5f2d1bbe' date '21 May 2015' time '9:46:26.77 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1318' message 'merged' id 'c53a326a-ac71-48fe-8a7c-e46e5a1aeb07' date '21 May 2015' time '9:04:09.836252 am' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-EstebanLorenzano.1317' message 'Adapted to work with Pharo... it should work with Squeak tooComprehensive guide to all changes:------------------------------------ CCodeGenerator>>#emitCFunctionPrototypes:on:added __MINGW32__ and __MINGW64__ check needed in newer versions of MinGW- CCodeGenerator>>#emitGlobalCVariablesOn :added VM_EXPORT to exported funtions, needed in windows builds (also, probably because of newer MinGW versions)- CoInterpreter>>initStackPagesAndInterpretadded PHAROVM_USE_EXECUTABLE_MEMORY to mark memory as executable (probably this can be removed soon)- CoInterpreter>>#declareCVarsIn:some refactors to take advantage of "Smalltalk way" (and remove some ifs... but not all)- CogVMSimulator>>#primitiveDirectoryEntrychanges to take into account FilePlugin changes- CogVMSimulator>>#primitiveDirectoryLookupchanges to take into account FilePlugin changes- Cogit>>#declareCVarsIn:added <setjmp.h> include (needed for windows builds)- CurrentImageCoInterpreterFacadeForSqueakV3ObjectRepresentation>>#compactClassIndexOfClass:checking if corresponds MethodContext or Context (Pharo does not have MethodContext)- Interpreter>>readImageFromFile:HeapSize:StartingAt:Pharo uses sqImageFileReadEntireImage because then in iOS (iPhone, iPad) we take just chunks of memory (a trick made by John)- InterpreterPrimitives>>#primitiveGetNextEventWe have complex event support... is backeard compatible so ok to include it as is.- InterpreterPrimitives>>#primitiveImageFormatVersionUseful for certain experiments - InterpreterSimulator>>#primitiveDirectoryEntrychanges to take into account FilePlugin changes- InterpreterSimulator>>#primitiveDirectoryLookupchanges to take into account FilePlugin changes- ObjectMemory>>#finalizeReference:cheching for pharo finalizing strategy - ObjectMemory>>#getHeapGrowthToSizeGCRationeeded for pharo finalizing strategy- ObjectMemory>>#isInFinalizationList:head:needed for pharo finalizing strategy- ObjectMemory>>#readHeapFromImageFile:dataBytes:Pharo uses sqImageFileReadEntireImage because then in iOS (iPhone, iPad) we take just chunks of memory (a trick made by John)- Spur32BitCoMemoryManager>>#assimilateNewSegment: added PHAROVM_USE_EXECUTABLE_MEMORY to mark memory as executable (probably this can be removed soon)- Spur32BitMemoryManager>>#objectRepresentationClasswe need this method to generate pharo stack versions- StackInterpreterPrimitives>>#primitiveDoNamedPrimitiveWithArgsthis is a bugfix we made with Guille last week :)- StackInterpreterSimulator>>#makeDirEntryName: size:createDate:modDate:isDir:fileSize: posixPermissions posixPermissions:changes to take into account FilePlugin changes- StackInterpreterSimulator>>#makeDirEntryName:size:createDate:modDate:isDir:fileSize:posixPermissions:isSymlink:changes to take into account FilePlugin changes- StackInterpreterSimulator>>#primitiveDirectoryEntrychanges to take into account FilePlugin changes- StackInterpreterSimulator>>#primitiveDirectoryLookupchanges to take into account FilePlugin changes- StackInterpreterSimulator>>#redirectTranscriptToHostSometimes when bootstraping spur, I needed to check some oop values, etc. I added this method to be able to see those objects in regular transcript, without needing to open the simulator morph.- TMethod>>#emitCCodeOn:generator:adds a bit more information to generated methods- TestOSAPlugin>>#declareCVarsIn:including Carbon.h make the plugin works for newer versions of mac sdk- VMClass class>>#initializeMiscConstantsadds default initialization for PharoVM- VMMaker>>#needsToRegenerateCogitFile #modificationTime in Pharo answers DateAndTime, not a number, so we need to convert it - VMMaker>>#needsToRegenerateInterpreterFile #modificationTime in Pharo answers DateAndTime, not a number, so we need to convert it - VMMakerTool class>>#initializePharo does not has TheWorldMenu class- SerialPlugin>>#primitiveSerialPortOpenByName:baudRate:stopBitsType:parityType:dataBits:inFlowControlType:outFlowControlType:xOnByte:xOffByte:primitive to work on serial plugin with named ports- SerialPlugin>>#primitiveSerialPortReadByName:into:startingAt:count:primitive to work on serial plugin with named ports- SerialPlugin>>#primitiveSerialPortWriteByName:from:startingAt:count: primitive to work on serial plugin with named ports- FilePlugin>>#primitiveDirectoryEntryadapted to ansert posix permission and symlink flag- FilePlugin>>#primitiveDirectoryLookupadapted to ansert posix permission and symlink flag' id 'a710630f-0260-48b8-a9b7-f0950ad25407' date '20 May 2015' time '5:06:47.855784 pm' author 'EstebanLorenzano' ancestors ((name 'VMMaker.oscog-eem.1316' message 'Fix signature of InterpreterProxy''s callbackLeave:' id 'ac16258c-3444-49a0-957a-7b02871f8682' date '19 May 2015' time '2:09:58.385 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1315' message 'Slang:Do a more thorough job of transforming complexto:[by:]do: loops so that the limit expression is onlyevaluated once, not on each iteration of the loop.' id 'a8172799-131a-401c-861e-55a1d2c21710' date '18 May 2015' time '5:44:23.955 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1314' message 'Fix regression in read-before-written code whenrewriting to only initialize simple types.Fix ARM-only regression in StackToRegisterMappingCogit''sPIC aborts when the SimpleStackBasedCogit was fixed.' id 'a1091890-158e-4f00-bb49-c1b2bd6f8a5b' date '18 May 2015' time '1:18:51.827 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1313' message 'Fix edge case in  read-before-written initializer.' id 'f7251538-4676-49b4-bc2c-f2cfecd2a3ae' date '17 May 2015' time '5:47:58.622 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1312' message 'Make accessor depth calculation more accurate bynot considering fetchInteger:ofObject: and arraySize:et al as object accessors.Make the read-before-written initializer safer, onlyinitialzing simple types (integers and pointers).Be prepared to answer the size of usqInt.' id 'f2ba142e-f4e1-43de-9f3e-b33fa10e5e45' date '17 May 2015' time '5:41:05.845 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1311' message 'Fix VMMakerTool dimensions given recent UI changes.I still use the VMMakerTool for outputting a plugin.' id '61f8144b-089d-4ca4-9e81-4ccfa6de0fc3' date '17 May 2015' time '3:16:07.333 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1310' message 'Fix constant elimination on arithmetic generationso that named constants (defines) are not elided.' id '91e78d06-5110-42ac-9e5e-43197f4ddf2e' date '17 May 2015' time '2:26:38.118 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1309' message 'Fix ceActivateFailingPrimitiveMethod: to returnproperly after retrying a primitive aftercheckForAndFollowForwardedPrimitiveState. e.g. fixes| s |1 to: 5 do:	[:i|	s := ''bar''.	s becomeForward: ''bzzt'' copy.	''foo'' <= s]Fix bug in followForwardedFrameContents:stackPointer:so that arguments are actually followed.  N.B. drivesthe above bug underground ;-).Make the bounds check in primitiveObject:perform:...more restrictive and fix bugs in the commentary.Make stack pages a reasonable size.  My math waswrong and the size was half as big as intended.Simulator:Refactor accessor depth determination of accessorsso that simulator derives correct values for translatedprimitives.  And fixtranslatedPrimitiveArgument:ofType:using: so thattranslated primitives will fail in the simulator.' id 'e84bfebb-45e5-4768-8af7-865503cec26a' date '17 May 2015' time '12:49:48.29 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1308' message 'Remove landmine left from restructing implicit receiver and outer sends as clean sends.' id '0ea6a317-5be4-48a2-b82e-ba8fea3f5fc4' date '16 May 2015' time '5:12:07.514 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1307' message 'Revamp icache flushing in the Cogit for ARM.Move icache flush for generated methods/pics tothe fillIn*Header: routines.  Make sure the cache isflushed in generateCaptureCStackPointers:.Flush the entire PIC when extending it (dubious).Extend the fastPrimTrace scheme to trace stack overflow,prim failure and prim retry to help debug thephantom stack frame bug in Cog Spur.' id '4406a119-cdb6-40b3-a2ec-c1989e044870' date '15 May 2015' time '5:58:56.595 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1306' message 'Fix old bug in ceMNUFromPICMNUMethod:receiver:that has been masked by cacheing of MNU methodin MNU PIC entries.  ceMNUFromPICMNUMethod:receiver:must set up lkupClass before calling handleMNU:...Simulation:Fix MNU send breakpoint in simulator''sceMNUFromPICMNUMethod:receiver:; don''t pop thePIC abort ret pc twice.Fix the click-step breakBlock when there''s a breakPC in effect.Speed up simulated GC by short-cutting unnecessarycopying when cloning the VM.' id '88864d96-33bb-4285-9fb5-02d57043a1e2' date '15 May 2015' time '1:07:11.757 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1305' message 'Put the eassert: expressions in blocks so that in thesimulator they are not evaluated unless enabled.Fix lookupAddress: selector printing in Newspeak.Remove the setRememberedSetRedZone simulationhook.Add MNU breakpointing to the simulator''sceMNUFromPICMNUMethod:receiver: to stop beforethe action.' id '7e7b9dc3-41a0-4822-ba38-eb6af5d7f32b' date '15 May 2015' time '10:33:30.524 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1304' message 'Make ARM rotated 8bit constants actually be correct(er) ie16r4000001 (SmallInteger 16r2000000) work. This helps quite a lot.' id '4ed4bcb5-48d9-462d-a493-123140828ba3' date '14 May 2015' time '7:14:06.9 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1303' message 'Fix the regression with #== in the StackToRegisterMappingCogit;a spilled constant must still be dropped from the stack.Mark the genEnsure... stubs in CogObjRep as inlineand fix a signature to eliminate warnings.' id 'd796217a-dcf4-47eb-9a63-579a7e69a7fa' date '14 May 2015' time '7:05:55.34 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1302' message 'Allow setting of debugBytecodePointers anddebugFixupPointers from initializationOptionsfor inimage compilation, allowing getting to thepoint quickly as inStackToRegisterMappingCogit	genAndDis: BorderedMorph>>#borderStyle	options: #(ObjectMemory NewCoObjectMemory				debugBytecodePointers #(137))Use the compiled method, not the header oop, whendecoding method headers during in-image compilation,so as not to be confused by the different compiledmethod header formats between V3 and Spur.' id 'bebc79cd-5926-416b-a9ab-ed02e54e4e46' date '14 May 2015' time '6:12:02.036 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1301' message 'Cogit:Since the method zone does not scavenge PICs, theMNU method in an MNU PIC entry cannot be young.If it is, void the cache (load 0 instead of the method).' id 'ce7e12a9-6ef4-412e-942d-8b9d3b3b2980' date '14 May 2015' time '3:19:41.497 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1300' message 'Explicitly initialize cFramePointerInUse before firstpotential use for assertCStackWellAligned.' id '96e6db92-4bc0-4435-b929-c8dddf26b0c7' date '13 May 2015' time '6:08:53.689 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1299' message 'Clarify how to specify variadic primitives in the Cogit''sprimtiive table initializer (it had confused me enoughto cause a regression).Fix the regression in genPrmitiveClass.Implement the stream primtiives using genFastPrimFailwhich should speed up the stream prims noticeably.' id 'cbe293c4-e086-4dbf-bb1c-055f8c47b3ef' date '11 May 2015' time '6:11:43.449 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1298' message 'Doh!  primitiveClass needs to take > 0 args inSqueak too, for objectClass:.' id 'da9fd4c2-e7e4-48c1-bfb6-87139d690def' date '10 May 2015' time '5:27:04.768 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1297' message 'Fix slip in primitiveClass.Fix Slang warning in Sista special selector #==.' id '1125d82b-1be0-4ed8-bdfa-9557c360bf1b' date '10 May 2015' time '10:27:36.599 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1296' message 'Revert the commonSend path, keeping a distinctcommonSend: path, so that there is no duplicationof message lookup code in the non-Newspeak VMs.' id '264a71ca-50a1-4e84-96f4-dcb1c571859b' date '10 May 2015' time '9:07:52.076 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1295' message 'Fix genInnerPrimitiveMirrorNewWithArg:.  Class''s hashwas being accessed twice, reusing variable holdingjump instruction.Fix primitiveClass and genPrimitiveClass for mirrorcase (arg count = 1). Also fix Newspeak primitivetable to allow nargs > 0 for genPrimitiveClass.Make sure CogObjectRepresentation has defaultversions of new unforwarding routines.Add missing accessors for in image compilationfound when compiling genInnerPrimitiveNewWithArg:' id 'd04946a6-67d1-4bcd-abcd-7475630de999' date '10 May 2015' time '8:03:05.615 am' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1294' message 'Thread lookup rule through from bytecodes to internalFindNewMethod.' id '30c9bb7e-e2bc-4d98-8dfe-c357139ee75f' date '9 May 2015' time '7:11:51.94 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1293' message 'Doh!  The read-before-written initialization schemeneeds to exclude explicitly initialized variables too.Thanks Esteban.  Forgive my being dense.' id 'ed2bc7a3-7765-48d2-ab78-08f4a0488693' date '7 May 2015' time '4:44:33.335 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1292' message 'Fix a regression in externalInstVar:ofContext:.  Thehead frame pointers must be written back if we''regoing to map a machince code pc to a bytecode pcin case of code reclamation.Add asserts to the stack page enumerators to checkthat the head frame pointers have been written back.Use macros for the oop comparisons, avoidingcCoerce:, to get faster simulation and avoid theinliner not inlining in conditionals.' id '0cde527f-cdb5-4345-adad-7dd496ef023e' date '6 May 2015' time '6:01:52.857 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1291' message 'Change computeRefCountToShrinkRT to- compute the ref counts and population in a single  pass over the RT- determine the ref count for tenuring based on  half the population of remembered objects, /not/  half the size of the RT.' id '522d9b4a-a938-488b-ae43-6b4ccdd13d5c' date '6 May 2015' time '10:41:54.305 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1290' message 'Removed the storeCheck in inlined pointer at:put: if the value stored is an unannotatable constant. I believe this is important in some cases I found where an array was initialized with 0 or false in all its slots.' id 'bfb69f82-a7f2-42e8-b375-32586dc89270' date '6 May 2015' time '11:05:39.237 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1289' message 'Increased the opcode size heuristic in the SistaCogit. Maybe I''ll figure out something better if I rewrite the #== logic.' id 'e7a5f914-5989-4493-8941-936984bdd80a' date '6 May 2015' time '9:26:52.521 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1288' message 'Implement remembered table pruning via ref counts.The algorithm selectively tenures objects to reducethe remembered table, instead of merely tenuringeverything.Be selective about remembering tenurted objects;actually scan their contents before rememberingwilly-nilly.Nuke obsolete copyToOldSpace: methods.' id '909625f0-4d63-4a3b-84e1-1f2753923d7e' date '5 May 2015' time '8:16:46.533 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1287' message 'Add a nice click step facility for single-steppngthrough machine code that sets up a suitablebreakBlock and proceeds the debugger, promptingfor a click at each step.Fix instruction decoration when printing instructionswith EagerInstructionDecoration false.Add an assert to insist that the receiver not beforwarded to mnuMethodOrNilFor:.Safer comparison in simulator''s createActualMessageTo:' id '45fc3cf4-0050-4473-af9e-392747bdd689' date '5 May 2015' time '10:08:54.172 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1286' message 'trap callback have no freaking argument any more.' id '1f96acd1-0fdd-4775-8165-485cba2fdb10' date '5 May 2015' time '4:26:27.068 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1285' message 'Forgot a -1 which was creating a segfault....' id '7ee85347-ea18-4249-81f1-e0510c99c8ce' date '5 May 2015' time '3:30:06.47 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1284' message 'Reduced by 24 bytes the instructions generated by #== in SistaCogit in most cases.' id '37a41c7d-771e-4cee-9b78-94dc22070682' date '5 May 2015' time '1:58:03.991 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1283' message 'Fixed a bug in SistaCogit where a trampoline needed a specific register instead of an allocated one.' id '3000cd43-f84f-4b75-9fdf-aff579a5105b' date '5 May 2015' time '11:48:13.804 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1282' message 'Fix genPrimitiveNewWithArg for Spur in theSimpleStackBasedCogit.Fix unimplemented primitive invocation in theSimpleStackBasedCogit.' id 'b73c3415-0ca0-423f-8fab-e7b2a3e8ad39' date '4 May 2015' time '7:28:01.081 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1281' message 'empty log message' id 'cc082267-e8f9-4e94-819e-a1862c86ac81' date '4 May 2015' time '3:30:20.072 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1280' message 'Catch some - surely not all - place where values need to be typed as signed ints. At the least this fixes a fun case where a lrd r7, [r11, #-12] becaseldr 77, [r11, #4084].' id '311d1461-dec3-4161-8c5b-350075f9752a' date '4 May 2015' time '3:20:50.336 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1279' message 'Fix the translation of StackToRegisterMappingCogitby implementing genPrimitiveNewMethod as required.Use anyMask: to test the 24th bit.' id '719a0652-b34e-495c-b036-87c46e76fe7b' date '4 May 2015' time '10:32:39.506 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1278' message 'Converting #bitAt: 24 to bitshiftery with 24 just isn''t going to work, dummy. It needs to be shift by 23.Coming soon- changes to  memMxr:reg:base:u:b:l:imm: - hold onto your cat!' id 'd4f57d4d-5a8f-4cfa-8f0c-fd7dd187e3fa' date '4 May 2015' time '10:24:57.661 am' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1277' message 'Some cleanups to make C happy(er). Some type stuff, some confusing names choices altered, some junk cleaned out.' id '433ce7ae-ccd7-4fa6-9c51-66b9feebe3ac' date '2 May 2015' time '8:16:00.792 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1276' message 'Rescue open PICs in the SimpleStackBasedCogit onARM.  Refactor genSmalltalkToCStackSwitch to movethe LinkReg push there-in.Make SpurMemoryManager>>lookupAddress: morerobust.' id '2e88ef12-ccb1-40db-84b8-71122c8ed738' date '1 May 2015' time '4:36:58.846 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1275' message 'Fix SimpleStackBasedCogit primitives for ARM; theyneed an abstraqction for stack access on accountof there being a ret pc (x86) or not (ARM).Fix regressions in genPrimitiveAsCharacter andgenInnerPrimitiveIdentityHash: where RetN: offsethad been replaced with 0.Remove all the "self flag: ''currently caller pushes result''."noise.  This was the right decision givenStackToRegisterMappingCogit.Fix the store check trampoline for theSimpleStackBasedCogit given the bettercaller-saved-register logic there now.  Move somereegister mask methods up the hierarchy as a result.SimpleStackBasedCogit still crashes (in widthOfString:)but gets much further than it has in recent months.' id 'c6fd91fc-f1cd-4ca7-93f6-38d581973d92' date '30 April 2015' time '2:16:10.579 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tfel.1274' message 'Merge from VMMaker-tfel.363. Add primitive 255 as marker to InterpreterProxy>>primitiveFailFor: for RSqueakVM to notice that the simulation is about to fail' id '11ab491c-b25b-4a4b-bbee-864f39e9d3e7' date '30 April 2015' time '7:59:26.741 am' author 'tfel' ancestors ((name 'VMMaker.oscog-rmacnak.1273' message 'Allow setting preemptionYields in the stack VM.' id '10812de2-817a-4ce0-80a3-3732d94687d7' date '29 April 2015' time '10:18:51.331 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-cb.1272' message 'Isolate more super sends that were triggering bugs in C code generation.' id '45c8bdbc-d974-494f-a827-27ce49c06790' date '29 April 2015' time '2:46:41.805 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1271' message 'In fact in genJumpIf we always reload the counterReg after the trampoline after the jump back to retry. No need to add logic there.Fix the bug that #== was marked as mapped whereas it should not thanks to Eliot.The SistaSimulator runs without assertion failures. I''m going to try to recompile it now.' id 'd1d8e36f-01bc-4d38-b9a2-6a5188c5e3cc' date '29 April 2015' time '10:33:32.261 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1270' message 'Nuke obsolete printMcpc:Bcpc:on:Correct SistaStackToRegisterMappingCogit>>genJumpIf:to:to reload counterReg instead of saving andrestoring it around counter callback trampoline.' id 'a6737c7e-fb6b-4fe9-a44e-6b01396cff34' date '28 April 2015' time '5:11:29.049 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1269' message 'Punctuation ( .. => . ).  Simplify C for jumpTargetPCAt:' id 'dfe19ffc-4c55-433c-a284-cf4696e6489b' date '28 April 2015' time '2:52:00.14 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1268' message 'changed the return type to usqint based on Eliot''s advises' id '3d3bd6a7-9121-4682-a388-0037d1513a0a' date '28 April 2015' time '4:20:16.748 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1267' message 'Find a workaround to compile genSpecialSelectorComparison without slang generating incorrect code for the macro replacement of super.Added many types to remove C compiler warnings.I also added temporarily 	<returnTypeC: #sqInt> in getJumpTargetPCAt: to solve a conflict between ARM and IA 32 back end until Eliot or Tim tells me a better solution.' id 'd6fac431-cfba-44bc-9590-d031f970feda' date '28 April 2015' time '1:00:54.291 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1266' message 'Added many types to remove C compiler warnings.I also added temporarily 	<returnTypeC: #sqInt> in getJumpTargetPCAt: to solve a conflict between ARM and IA 32 back end until Eliot or Tim tells me a better solution.' id '23e3ed75-3a08-43b7-8d78-23f2d7662cbc' date '28 April 2015' time '11:41:57.155 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1265' message 'Added a missing type. The VM now compiles correclty and starts up correctly spur images again. (At least the StackToRegisterMapping one)' id 'cbbc3952-338b-466e-8e6b-f6483c657c95' date '27 April 2015' time '3:51:44.905 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1264' message 'Rewrote the method to be correctly inlined by slang. It generated ''... , l1:...'' instead of ''...; l1:...''. I guess I could improve slang to crrectly inline the method instead of rewriting it, but I tried and failed.' id '85bfc943-a124-4ba4-ab44-c117ce807cce' date '27 April 2015' time '3:43:21.287 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1263' message 'added inlining of 4 Args block with value: value: value: value: in slangAdd and remove a few types to make gcc and CCodeGenerator happy.' id 'a1bd713c-e904-4df8-8db6-540c64c90ab8' date '27 April 2015' time '3:26:40.541 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1262' message 'Removed 3 typos ''self self'' instead of self.... Crashes at C code generation time...' id '9210cbaf-05f6-43e7-a3a6-57ab7cec7828' date '27 April 2015' time '2:28:22.575 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1261' message 'added a method to be able to simulate non spur images.fixed a typo...' id 'a70f7860-6338-4b1a-a62d-15501ed6b8b8' date '27 April 2015' time '1:31:34.958 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1260' message 'After hours of debugging, I realized an assertion was failing but the SistaVM is working :-/.I fixed the trap logic. Now I''ll compile the VM on linux and see what''s going on.' id '5727199d-3cf7-4bc6-b881-d17da3761458' date '27 April 2015' time '10:31:56.371 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1259' message 'ooops I forgot an inline true so C code generation was not working because the blocks were not inlined.' id 'c85fc97c-7c12-471f-ba77-932844e7db53' date '26 April 2015' time '6:19:03.384 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1258' message 'I removed a few methods in register allocation because there were too many indirection it was too hard to debug.I fixed the counter logic which was definitely crashing when the trampoline was used with a caller saved register for counters. I added #allocateRegPreferringCalleeSavedNotConflictingWith: to allocate a callee saved reg for counters if possible.The sistaCogit still does not start but I''m closer and closer...Added a few comments in register allocation.' id 'db02f249-b7aa-4d3d-bd32-d6660ca3bee4' date '26 April 2015' time '5:50:58.72 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1257' message 'Extracted the count logic in SistaCogit to be in one method called by the 3 methods generating branches to avoid duplication. I believe there''s a bug in JumpIf:, if the couterReg is callerSaved then I think it is not saved correctly. That was probably not an issue before I introduced the better register allocation because Eliot most probably carefully picked a register for counterReg which was callee saved in x86.Added a few comments and indentation fix in StackToRegisterMappingCogit.' id '2ad6cc71-391b-4b83-b2b6-ccb90ceb6d00' date '25 April 2015' time '4:23:00.043 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1256' message 'After spending yet another hour on the SistaCogit to figure out what is not working, I realized that I could simplify a lot the #== code generation code in StackToRegisterMappingCogit. The code is now simpler to read. The only difference in the generated machine code is that 2 branches now jump to the instruction after a Nop instead of jumping directly to the Nop, but though I enjoy stepping over Nops while simulating machine code, it does not change anything.' id '3f901fb1-b9ab-4c74-8a9a-b9483fbd9830' date '25 April 2015' time '3:39:56.845 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1255' message 'Improved readability by using even more #genMoveConstant:R: instead of: (objectRepresentation shouldAnnotateObjectReference: constant)		ifTrue: [ (self annotate: (self MoveCw: constant R: reg) objRef: constant) ]		ifFalse: [ self MoveCq: constant R: reg ]' id '939d4856-6309-444c-9ed9-32caf51a7001' date '25 April 2015' time '3:17:57.287 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1254' message 'In genStorePop: popBoolean LiteralVariable: litVarIndex ; use allocateRequiredReg instead of allocateCallReg as the ceStoreCheckTrampoline generation takes already care of saving the register, including ReceiverResultReg, better.In genStorePop: popBoolean MaybeContextReceiverVariable: slotIndex, fixed a commentIn genStorePop: popBoolean RemoteTemp: slotIndex At: remoteTempIndex, still need to allocate ReceiverResultReg (one of my recent fix remove allocateCallReg: instead of replacing it with allocateRequiredReg:) and move optStatus isReceiverResultRegLive: false in the branch where ReceiverReg is allocated only.' id '97025480-a775-439d-b087-6a5f4be3e7c7' date '25 April 2015' time '2:53:23.172 pm' author 'cb' ancestors ((name 'VMMaker.oscog-tpr.1253' message 'Add ARM opcodes for MSR (status register updating) and CMPSMULL (a virtual instruction that actually uses a CMP but brings in an ASR 31 of one arg; this is only for use in the genMulR:R:)Since fixing the mulitply breaks things - we think because the sim code does not handle it correctly though cannot be sure yet - turn off usage of it by setting canMulRR to false.Add a crucial rewriteInlineCacheTag:at: for ARM.We can now sim the trunk46-spur image up to where Balloon does something the simulator code can''t handle. 130 million bytecodes or so and a full scale gc, compaction, pig compact and code compact.' id '8f8f4942-2558-4a50-a21a-80d513acf9f0' date '24 April 2015' time '3:34:54.257 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-cb.1252' message 'In order to fix the SistaCogit (still crashing somehow), I refactored the #== code which was duplicated three times between the Stack v3 / Stack Spur / Sista Spur cogits, mainly by creating 2 smaller methods which are now called by the 3 duplicated methods.I introduced: #extractMaybeBranchDescriptorInto: so I don''t need to duplicate the code that fetch the branch descriptor in #== and comparison.Removed a useless allocateCallReg in genStorePop:RemoteTemp:At: because the call reg are saved in the trampoline.Removed a duplicated self assert: needsFrame in genStorePop: popBoolean LiteralVariable: litVarIndex (Eliot moved it to the beginning of the method).' id '020130de-cdca-49ec-8f3f-2fa2d3d110d2' date '24 April 2015' time '11:59:54.377 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1251' message 'Tiny change.  I prefer intention-revealling var names,not type-revealling var names.' id 'e2557ad3-dc51-4f12-98dc-6e9b4477571d' date '23 April 2015' time '11:30:49.748 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1250' message 'fix frameless inst var store. I made a mistake.Added the flush in SistaCogit for branchIfNotInstanceOf' id '7ac1c3b2-fa60-4fa8-85b4-1fd406143de6' date '23 April 2015' time '8:21:51.274 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1249' message 'More commentary.' id '41e8dbc2-ed01-42d2-9155-eaf604510aaa' date '23 April 2015' time '11:07:28.905 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1248' message 'Commentary, and one assert added to Clément''s changes.' id 'ec950a22-b488-4bba-9520-24174b51b5ca' date '23 April 2015' time '10:43:29.344 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1247' message 'I think I fixed #== in the SistaCogit, At least the simulator goes further (but it looks like it still does not start... ).' id 'e18d9b5d-23e8-4f00-bd6e-76bad1b22dd5' date '23 April 2015' time '2:54:45.86 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1246' message 'Refactored storePop methods to use register allocation.I believe that now #genStorePop: popBoolean LiteralVariable: litVarIndex can be frameless but I am confused on how to handle ReceiverResultReg. I need to discuss with Eliot about it.' id '94149f1f-8fa4-4899-84c6-091fcb539bf7' date '23 April 2015' time '1:56:41.665 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1245' message 'Simple refactoring for booleans moved to registers.' id '45d37997-2805-4e01-8abf-0edd7e1f6b76' date '23 April 2015' time '12:58:24.961 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1244' message 'Changed #genStorePop: popBoolean LiteralVariable: litVarIndex so it uses register allocation instead of ReceiverResultReg and ClassReg.This method now does not require a frame if the assigned value is an unannotatableConstant. However, it still needs a frame in the other case due to the ceStoreCheck.' id 'f9bea40c-9a55-4113-8b12-49e6d23056e2' date '23 April 2015' time '11:36:22.065 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1243' message 'Removed a ssAllocateRequiredReg which was not needed.Basically refactored:| constVal |constVal := self ssTop maybeConstant.	(self ssTop type = SSConstant	 and: [(objectRepresentation shouldAnnotateObjectReference: constVal) not])	to:(objectRepresentation isUnannotatableConstant: self ssTop)so I can understand the methods and see if I can change them with better register allocation. I am interested especially in genStorePop: popBoolean LiteralVariable: litVarIndex which has the flag:	self flag: ''with better register allocation this wouldn''''t need a frame.  e.g. use SendNumArgs instead of ReceiverResultReg''.' id '783d50c8-1cf1-4b51-acf9-98aab1d6e486' date '23 April 2015' time '10:22:23.414 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1242' message 'Fix the read-before-written initializer to not initializestructs (if the struct types can be identified).Make the allOldMarkedWeakObjectsOnWeaklingStackassert an eassert: (it /is/ extremely expensive) andcorrect some typos in eassert:.' id '24d3608c-2198-4927-90b4-477af0cca4e7' date '22 April 2015' time '5:53:15.54 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1241' message 'and fix slips in generateAllSqueakConfigurationsUnderVersionControl' id 'a04410be-4749-4ca7-a350-4788549b0da4' date '22 April 2015' time '10:58:24.214 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1240' message 'Phhh....' id 'b4f0eba3-7350-41a0-a8da-52fbc1568cc8' date '22 April 2015' time '10:49:33.219 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1239' message 'And fix another glitch...' id 'ef1b96fd-5ad1-4f23-84ba-5d5e7a6a3812' date '22 April 2015' time '10:37:54.358 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1238' message 'Fix some glitches with the new cogit source scheme' id '6d58bf61-31c3-4ae5-a203-3b154b9cebf6' date '22 April 2015' time '10:25:11.206 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1237' message 'Change source file output for the Cogit so thatcogit.c includes cogitARMv5.c or cogitIA32.c asappropriate, using the same style asThreadedFFIPlugin.Fix some generation-time errors and warnings forARM.' id '0864d0ce-8b0f-4415-ab43-13e2581488d5' date '22 April 2015' time '10:00:33.801 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1236' message 'changed the names of register allocation methods for more explict names, for instance, allocateOneReg -> allocateRegForStackTopFixed a bug where not the best register was allocated in #== (was allocating a reg based on stackTop value instead of ssValue: 1)' id 'cf4af270-9dfa-4f2a-b84c-0cdb3c5f4913' date '22 April 2015' time '10:07:41.028 am' author 'cb' ancestors ((name 'VMMaker.oscog-tpr.1235' message 'Trivia - replace a few magic numbers with the proper class vars' id '48aefbc1-af89-414c-9431-089e36ea786e' date '21 April 2015' time '7:19:54.816 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1234' message 'Cogit:Allow ARM concretizeMoveCwR use pc-relativeaddressing alongside PushCwR.  Fix the effects onPIC parsing by introducing loadPICLiteralByteSize.Correct slip in sub:rn:imm:ror:.Fix sub:rn:imm:ror:.Fix relocateMethodReferenceBeforeAddress:by:for the 4 cases we have now.Code compaction now works once again on ARMbut we generate more compact code and mostmethod/pic self-references are made with non-relocateable pc-relative addressing.  Woot!' id '012b3371-995e-451f-85ec-a5144379427d' date '21 April 2015' time '6:52:37.482 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1233' message 'Fix a couple of places where the change to a word array of machine code needed compensating changes.' id '56dee307-7a91-489a-865d-e11a267b7bf3' date '21 April 2015' time '2:56:01.578 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1232' message 'Fix ARM''s relocateCallBeforeReturnPC:by:.N.B. Still have to fix MoveCw on ARM to treatmethod label like PushCw.  Lunch first...Stop ARM decoration from accessing current regvalues unless decorating the current instruction.Hack fix the facade''s canContextSwitchIfActivating:header:' id 'd1b071ef-d873-4af9-9be2-33e8360ddc05' date '21 April 2015' time '12:49:58.208 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1231' message 'Cogit:Change map generationa nd interpretation so thatthe displacements are in codeGranularity units, andmake the codeGranularity 4 on ARM.  CommentmachineCodeSize and maxSize.Fix a translation-time warning foroutputMachineCodeAt: (thanks Esteban).Introduce UnfailingPrimitive and use it to avoidgenerating the interpreter primitive call in Spurthe Character>>asInteger primitive.' id '208aaef1-8c8d-43fb-8af9-5189214ff390' date '21 April 2015' time '11:09:26.049 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1230' message 'With the change to Word access for machineCode on ARM, I think we should probably fill any nops in word-wise or some odd effects may occur.' id 'e3e97b8a-ab52-415b-aaaa-ae57a7aabff7' date '20 April 2015' time '8:19:17.483 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1229' message 'CogARMCompiler:Fix updating of call and jump instructions by splitting thecall/jump update from the callfull/jumpfull update.  Renamethe operand extractor toextract32BitOperandFrom4InstructionsPreceeding: and addinsert32BitOperand:into4InstructionsPreceeding: to go with.Use these to update instructions.Modify machineCode array to be array of longs. Refactormachine code output so that CogARMCompiler can spitout words while the x86 dribbles bytes.Avoid annotating the absolute CallFull/JumpFull instructionsso that the update is simplified.Now the system survives a code compaction on ARMalthough it doesn''t continue for long there-after.' id '9265e9ce-f37e-4bd0-9d85-e266d05f6628' date '20 April 2015' time '7:50:05.213 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1228' message 'CogARMCompiler:Fix pc-relative addressing for generating themethod reference in frame build.  Attemptingto use pc-relative addressing shouldn''t have theside-effect of altering the value pushed when pc-relative addressing can''t be used.Accept that not all method references can behandled this way (i.e. mehtod reference followinga long generated primitive such as new:) and somake relocateMethodReferenceBeforeAddress:by:handle those rare cases.Recategorize.Fix some stupidities in CurrentImageCoInterpreterFacade;perhaps the headerToMethodMap is unnecessary.' id '486228a3-4d6f-474c-8f04-7b9105457d09' date '20 April 2015' time '5:00:18.118 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1227' message 'make pushCw use pc relative values if it can to avoid long constant fabrication' id 'f22ff47a-427a-4a28-bc45-e929f8dff617' date '20 April 2015' time '1:47:15.52 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1226' message 'Fix a couple of not-implemented-for-ARM methds.Call correct relocate code in relocateCallsInClosedPIC:' id '4005ac70-5638-4ec4-9560-675851459bd6' date '20 April 2015' time '12:34:10.863 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1225' message 'Fix in-image compilation fakery so that there''s noconfusion between entry-points and variables whendopign in-image compilation.' id 'c10c4841-2649-4ecf-bee5-b50ca4e6ae76' date '20 April 2015' time '10:51:11.031 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1224' message 'Implement CogARMCompiler>>relocateCallBeforeReturnPC:by:given the new simple intra-zone calls and jumps.Rename relocateJumpBeforeFollowingAddress:by: torelocateJumpLongBeforeFollowingAddress:by: toreflect our more accurate terminology.So now ARM stops in code compaction when tryingto relocateMethodReferenceBeforeAddress:by:.Currently the method literal is synthesized using the4 instruction sequence, and so the relocation coulduse an adapted rewriteCallFull:.  But much better is touse pc-relative addressing to produce the methodliteral, which would result in a nullrelocateMethodReferenceBeforeAddress:by:.So make no attempt to implementrelocateMethodReferenceBeforeAddress:by:.' id '95771251-df5c-42c0-9d62-a7a26d0c5646' date '19 April 2015' time '6:31:17.879 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1223' message 'Fix frameless block return on RISCs; indeed the ret pcis in the LinkReg as it should be.As a result one can evaluatre 3+4 in the Simulator using the ARM JIT.  We have two JITs :).' id '4f987b81-cdc5-494d-b0ab-b9ec680208d3' date '19 April 2015' time '6:04:56.957 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1222' message 'Oops, NOP size is 4 on ARM, not 0.' id '450da7c2-7fde-4a26-be04-6bf4f3f4cba4' date '19 April 2015' time '2:18:52.714 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1221' message 'Correct CogARMCompiler>>literalBeforeFollowingAddress:so it also deals with PushCw instructions.' id '8fd9dd12-6a9b-441f-8a1d-deb53c09117e' date '19 April 2015' time '12:32:58.489 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1220' message 'commentary' id '3cb0dbde-58a9-46ec-877f-ee998b93e538' date '19 April 2015' time '11:23:30.505 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1219' message 'Merge in tpr work on the jump/call-long/full changes.Re-organize the ARM dispatch/compute tabels to match the x86 and simplify life when comparing.' id '244f3faa-c54f-43e5-95b7-9441aa8445de' date '19 April 2015' time '11:08:55.629 am' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1218' message 'First cut at changing ARM call/branch ranges to useimmediate call/jump for all intra-zone transfers,and clumsy 5 instruction sequences only fortrampoline and interpreter primitive calls.' id 'dd01c3b2-8eeb-4c53-b402-006d691908c6' date '19 April 2015' time '8:59:15.182 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1217' message 'Fix printing of CogFooInstructions with code LastRTLCode.Make read-before-written initializer not initialize arrays.' id '87d89bfd-be60-4963-983c-67eef2ea907f' date '17 April 2015' time '7:44:40.717 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1216' message 'fix a bug where some #== followed by a branch would not generate the compare instruction before the jumpZero.' id 'f8d9c5c3-14f2-42ae-a382-6d7623ed69b1' date '17 April 2015' time '7:13:59.32 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1215' message 'Fixed machine code generation of #== in the sista cogit. simulated stack was imbalanced and I made a typo label -> Label' id '23e722f5-4075-4d01-bb4b-2b2cb6125fa1' date '17 April 2015' time '6:46:28.58 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1214' message '- Change the code generation of == for sistaCogit- change the coutner reg to be allocated instead of being a fixed abstract reg- fix a C code gen bug in code gen of #==- fix a bug in #== where the arg was not unforwarded' id '9a0055bc-76f8-4dd5-bf2f-08e553c83141' date '17 April 2015' time '6:37:18.871 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1213' message 'Fix generation-time warnings with recent changes.' id 'd04cb582-a05d-454c-9d66-b60b4ac26839' date '17 April 2015' time '6:20:21.453 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1212' message 'Fix C generation issues with recent changes.' id '57841054-6567-44f4-9719-ab98551d8f2a' date '17 April 2015' time '6:08:18.528 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1211' message 'Used register allocation in #== with V3 in order to limit register moves.Use bytecodeSetOffset constant instead of some bitAnd: computation.' id '5bfea133-65e7-4b14-a105-9d71ebc8266a' date '17 April 2015' time '5:26:30.846 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1210' message 'Fix register allocation in frameless #== withforwarders.  Now spur images start up with the new#== code that only checks for forwarders on false..Have genEnsureOopInRegNotForwarded:scratchReg:ifForwarder:ifNotForwarder:answer 0, in accordance with tradition.Fix some facade issues.Allow turning on compilationTrace throguh init opts.Fix slip in generateAllConfigurationsUnderVersionControl' id 'c2e233d4-648a-4ffa-95d6-f002c1ae4574' date '17 April 2015' time '5:08:05.523 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1207' message 'ugh...' id '4a338677-029f-42ac-b38d-2bc5ecc213f1' date '17 April 2015' time '12:21:48.799 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1206' message 'And add the 64-bit Newspeak Stack Spur VMfor Ryan.' id '604eeba5-6ab3-46d3-a433-aa4afad6b9f5' date '17 April 2015' time '12:16:49.625 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1205' message 'Save a version of VMMaker.oscog-eem.1208 thatisn''t subject to regressions caused in recent wizardexperiments in improving #== code in the VM.Head slap!  Fix the copy-paste error that causedthe regression in VMMaker.oscog-eem.1160/3308.Fix tiny formatting issue.Don''t merge with VMMaker.oscog-cb.1205 et al yet;they have changes that are as yet incomplete andincorrect.' id 'e6bba287-15f1-427b-ad63-4a84f10b3122' date '17 April 2015' time '12:09:11.953 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1204' message 'ifTrue:ype of AbstractInstruction opcode must beunsigned now that we have > 128 opcodes(XCHGRR pushed things over the top).Fix some Slang generation-time warnings.' id '45d34c98-fee8-4874-95b4-842de9ba8cbc' date '16 April 2015' time '3:23:07.977 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1203' message 'added types for arrays used in machine code generation.' id '915d00b2-7c03-4dfc-bcfc-00afe5c86fb6' date '16 April 2015' time '3:10:57.814 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1202' message 'Fix regression in map machinery due to addingAnnotationExtension scheme.  findMapLocationForMcpc:inMethod:must not be confused by IsDisplacementX2N bytes.This is likely the cause of the recent crashes withr3308 and earlier.Lay the groundwork for 32-bit intra-zone jumps andcalls on ARM by introducing CallFull and JumpFull(and rewrites thereof) that are expected tospan the ful address space, leaving Call/JumpLongto span merely the 16mb code zone.  On x86CallFull and JumpFull simply default to Call/JumpLong.Tim will implement the ARM support soon.' id '992991db-47cc-4d19-85cf-4959c54bd41f' date '16 April 2015' time '12:53:28.012 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1201' message 'Replace bytecode trapIfNotInstanceOf by jumpIfNotInstanceOfOrPop.Rewrote the JIT logic for traps to be able to write trap trampolines calls at the end of the cogMethod.' id 'f8ff87ac-4da4-47b4-b2ea-17ff99caf18a' date '16 April 2015' time '12:25:27.512 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1200' message 'Refactor the slot store and store check machineryto take an inFrame: argument and hence deal withthe store check in genInnerPrimitiveAtPut: on ARM.Implement jumpLong[Conditional]ByteSize for ARMnoting that this is unsatisfactory.  We need togenerate "short" branches on ARM for PICs.' id 'ceecee7e-aaa2-408c-a876-f346805fbdb2' date '16 April 2015' time '10:52:10.154 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1199' message 'Fix genGetActiveContextLarge:inBlock: for ARM:Clarify and correct Tim''s comments re link regand reintroduce choice of bounds check dependingon link reg.Introduce marryFrameCopiesTemps and use it tonot copy temps in Spur contect creation trampolines.Change initial usage counts to keep more recentlyjitted methods around for longer, and do *not*throw away PICs in freeOlderMethodsForCompaction,so that there''s a better chance of Sista finding sendand branch data for the tripping method.Provide missing V3 long64At:[put:] methods forsimulation.' id '87562ee0-1720-478d-a9bb-04170c151a89' date '15 April 2015' time '6:23:33.213 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1198' message 'Fix ARM rewriteJumpLong... after we changed register usage a little.Change genGetActiveContextLarge:inBlock: handling of ARM SP stuff a smidge. This gets us a lot further but I''m not completely convinced it is finished with.' id 'aac4f3ef-af49-40f6-9125-e09781490e3c' date '15 April 2015' time '2:20:30.908 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1197' message 'Changes that make ARM cog go further and in somer cases faster.The genGetActiveContextLarge:inBlock: code may well be wrong to wrap the callRT:.' id 'b9bf7cd9-ddce-4c05-afc3-b7830daa9842' date '14 April 2015' time '7:18:07.275 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1196' message 'Fix bug in computing offsets for arg access inframeless methods when args are on stack andthere is a link register.  In this case there is noreturn pc to skip over.' id 'c4a2dfab-74cd-4fea-a202-fb28c5accc00' date '14 April 2015' time '4:16:37.464 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1195' message 'Don''t save the header in a scratch register unlessit is useful to do so in the Spur at:[put:] primitives.' id 'f4010d16-6f81-4e0a-89a6-1332a5dfbea9' date '14 April 2015' time '2:54:00.204 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1194' message 'Fix limitation with MoveRXbrR; can only do movb from%al through %dl, so swap with %eax around movb.Fix mistake with genGetNumBytesOf:into: by refactoringgenGetFormatOf:into:baseHeaderIntoScratch: intogenGetBits:ofFormatByteOf:into:baseHeaderIntoScratch:and hence fetching and subtracting only odd bits of format.' id '4dd0eb1a-ef1d-4e2e-943b-2b3adfb13baa' date '14 April 2015' time '12:27:40.3 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1193' message 'Correct in-line primitive SmallInteger = ~=missed in the last commit.Fix slip in genGetNumBytesOf:into:.  And noticethat genGetFormatOf:into:baseHeaderIntoScratch:et al can use byte access to get at format, asintended in the Spur header design.' id '0b243ced-57fc-4dee-a6da-ec553b55eb40' date '14 April 2015' time '11:10:47.632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1192' message 'Correct the in-line primitive SmallIntegercomparisons; CmpXR is confusing ;-)' id 'ab70bc3e-c6c7-4a3e-9b94-1a6d0c2dcbc9' date '14 April 2015' time '10:28:56.8 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1191' message 'Fix var op var unsafe byte at:.  Result must beconverted to SmallInteger.' id 'd9d44898-0ffb-47de-82c8-95e5266149a4' date '13 April 2015' time '8:04:19.77 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1190' message 'Render the generated Slang for the new registerallocation code by adding a read-before-writtenpass to C generation that initializes variablesread-before-written with 0 (the C equivalent of nil).' id 'f4e308b4-64a8-45d2-9bde-52d4dc64a850' date '13 April 2015' time '7:33:48.858 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1189' message 'StackDepthFinder needs to implement doNop forin-image compilation of ScUnsafeOperationTest methods.allocateTwoRegistersInto: et al must be markedat <inline: true> for slang to do its thang.' id '592df209-8c8c-467b-b0df-a5195f376aa6' date '13 April 2015' time '3:51:49.43 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1188' message 'fix a bug where sometimes register allocation was marking ReceiverResultReg as dead whereas it was still alive.' id 'cd69e2b4-f2bc-45f3-8183-3dfd01738742' date '13 April 2015' time '3:31:45.334 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1187' message 'Nuke the unused NewspeakV3 initializers' id '07546b59-e5a0-46ac-9300-4e153dc451b6' date '13 April 2015' time '2:42:11.955 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1186' message 'Added with Eliot some abstraction other register allocation. This is now used in inline primitives.' id '238dfa51-a02c-438a-9bd3-5e48cd33b24f' date '13 April 2015' time '1:13:39.752 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1185' message 'Improved register allocation.' id 'f6bfc799-11a0-4e86-8168-994f0af7fac9' date '13 April 2015' time '11:12:19.768 am' author 'cb' ancestors ((name 'VMMaker.oscog-rmacnak.1184' message 'Fix unlinking dynamic super sends.' id '7dbf0e4d-ab34-4318-963f-f4cd8c08f047' date '12 April 2015' time '5:20:57.049 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-rmacnak.1183' message 'Reduce false positives in access control violation reporting by marking the super send we actually use as privileged. Remove unused Newspeak bytecodes.' id '36901a68-c2cb-4b19-8321-67d6aca3e45d' date '11 April 2015' time '4:29:06.815 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-rmacnak.1182' message 'Reduce false positives in access control violation reporting by marking the super send we actually use as privileged. Remove unused Newspeak bytecodes.' id '459b2a8a-80c9-4721-aee3-7e7d336eaf6d' date '11 April 2015' time '4:14:27.824 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1181' message 'Fix code generation bug surfaced by inline primitives.On x86 movb N(%reg),%rl can only store intoal, bl, cl & dl, whereas movzbl can store into anyreg.  On ARM move byte also zero-extends.  Sochange definition of MoveMbrR to always zero-extend,use movzbl on x86 and remove all the MoveCq: 0 R:used to zero the bits of the target of a MoveMb:r:R:.And now that we have genGetNumSlotsOf:into:, use it.Fix CogIA32CompilerTests for testCmpRdRd andmodify testMoveMbrR appropriately.Fix a slip in genTrinaryInlinePrimitive:, meet the constraintthat the target must be in ReceiverResultReg, and doa better job of register allocation there-in.Do dead code elimination for the branch followingan inlined comparison (this is done ingenBinaryInlineComparison:opFalse:destReg:copying the scheme in genSpecialSelectorEqualsEquals).' id 'f6eaf06e-ed76-43ab-a517-891ecb31f637' date '10 April 2015' time '8:41:28.267 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1180' message 'Do register allocation in the right place ingenUnaryInlinePrimitive:.Fix overflow slot access in genGetNumSlotsOf:into:et al.' id '7b05983e-40dd-497e-9b91-91c188ecc133' date '10 April 2015' time '3:59:26.259 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1179' message 'Fix several slips in inline primitive generation:Object>>at:put: needs to include a store check.Some register allocation code was wrong.Some results needed converting to SmallIntegersand recording results as pushed on the sim stack.extendedPushBytecode /does/ need a frame.Change calPrimitiveBytecode togenCallPrimitiveBytecode in the Cogit.remove the misnomer genConvertIntegerToSmallIntegerInScratchReg:Fix some receivers for simulation (self => stackPages etc).Add a workable callInlinePrimitive: for StackDepthFinder.' id 'f8947e83-b2c5-440a-9ac2-4d4dbfe69448' date '10 April 2015' time '3:12:02.167 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1178' message 'Implement Clément''s much better solution for thestale supersend problem.  Place code at the sendsite for super sends to follow stale forwardedreceivers.  This parallels the interpreter implementation.Beef up the post-become scan of send sites tounlink all send sites that link to an invalid class tag.' id 'bb034bb1-371f-44a6-a66f-bbcfaff35456' date '9 April 2015' time '12:07:00.341 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1177' message 'Fix two moron-level typos in short, simple bits of code. Sigh.' id 'faf2f535-d388-4c67-b5bd-141ba5038afd' date '7 April 2015' time '7:21:19.146 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1176' message 'Fix bug in SistaV1 pushActiveContext bytecode ininterpreter.  Don''t blindly use pushActiveContextBytecode.Fix initialization race condition withBytecodeSetHasDirectedSuperSend' id '723057a3-0609-4d45-8062-d5f120adf832' date '7 April 2015' time '5:19:20.165 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1175' message 'Add the Stop & PushCq abstract instructions support for ARM. Add some more quick-constant processing, just because.' id '2d20a320-fb8d-4b8f-9086-d24ef877f591' date '7 April 2015' time '5:08:52.952 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1174' message 'Eliminate strangeness during simulation whenmanipulating 64-bit headers in the Spur obj rep.' id 'dfadb20f-3702-4286-9bd7-ba6128c0ab6c' date '7 April 2015' time '4:57:51.069 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1173' message 'StackToregisterMappingCogit must specifygenExtPushReceiverVariableBytecode as frameful' id '02d23ef1-d72f-4784-a039-3aa0f04fdfbc' date '7 April 2015' time '3:56:31.122 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1172' message 'The multiple bytecode set initial nil counters needto be specific to the bytecode set in effect.' id '865d65bc-e102-4ae8-ae3c-a3142af34ff3' date '7 April 2015' time '3:35:23.328 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1171' message 'Simple terminology change to accomodate ARM habits; ''quick'' means small constants to us, not short jump intervals. Just change the naming to make it less cognitively dissonant. Happiness ensues. Chocolate may be consumed.This is the correct one. The recently saved Cog-tpr.258 was in fact empty because of a stupid missed button.' id '06201046-1d4c-437b-9646-fb607702e22c' date '7 April 2015' time '2:04:16.488 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1170' message 'Fix the argument count of interpreted directed super sends.Fix a compiler warning in followForwardingPointersInStackZone:' id 'a7e67417-a6d1-4be5-a392-11b8f02f8296' date '7 April 2015' time '11:01:43.626 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1169' message 'Print a warning in the method shared under multipleselectors scenario in Newspeak.Fix a compiler warning and a speeling error' id 'ef6e7ddc-c17a-45bf-bc91-7d09344b95f6' date '7 April 2015' time '10:43:55.212 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1168' message 'Added bytecode annotation for traps so the mapping mcpc -> bcpc is available' id 'f530e35d-fc36-425b-9397-9062becddd18' date '7 April 2015' time '10:13:57.848 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1167' message 'Fix framePointer access from the Cogit for Newspeak' id '558c26e6-9fcd-401b-8f0d-920bd88e7c82' date '6 April 2015' time '10:42:46.417 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1166' message 'Change IA32''s genPushRegisterArgsForNumArgs: tonot smash TempReg now that it is used in directedsuper send trampolines.Fix bug in generateMapAt:start:, miswritten for newannotation extensions, and change it to take nil,not 0, as the "just measure, don''t generate" flag.Make send table yielding functions testBytecodeSetHasDirectedSuperSend, not SistaVM.Fix slip in maybeFreeCounters:.Optimize StackToRegisterMappingCogit>>genReturnReceiverto not load ReceiverResultReg if it already contains self.' id '7300780d-95c8-42a4-96f2-b0bea69f363d' date '6 April 2015' time '8:09:36.675 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1165' message 'Fix compilation of the cogit given the directedsuperclass send.' id '50f4a10d-8ba4-473f-b37c-afe188112e2c' date '6 April 2015' time '4:37:02.565 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1164' message 'WARNING!! Because of the rename of VMSqueakV3BytecodeConstants to VMBytecodeConstantsyou will probably have to do a recompile package afterloading this iunless loading it for the first time.Add support for a directed super send bytecodethat starts the lookup above the class that is thevalue of an association pushed on the stack immediatelybefore the send.  This bytecode is used in SistaV1to allow inlining of code that contains super sends.Add mapFor:bcpc:withAnnotationPerformUntil:arg: anduse it to gather send and branch data in the SistaCogit.Rename VMSqueakV3BytecodeConstants toVMBytecodeConstants and add theBytecodeSetHasDirectedSuperSend flag.  Rewriteinitialization of NumTrampolines to take into accountthe directedSuperSend trampolines.Use PushCq to pass small integer constants in thetrampolines instead of smashing TempReg, which isnow used to hold the directed supersend argument.Add support for PushCq.  Could use PushCw but onx86 PushCq is a lot shorter.Change a few byteAt: sends to send to the right class.Fix a slip in isDirectedSuper:extA:extB:.  Fix slip inannotationForSendTable:.Fix a bug in nextDescriptorAndExtensionsInto: so that itanswers info for the next, not the current, bytecode.Fix printing in CurrentImageCoInterpreterFacade so thatprintTrampolineTable works with a facade.' id '69e65453-aec5-4f00-9b29-14fa7f384209' date '6 April 2015' time '4:07:16.571 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1163' message 'Abstract out voiding nsSendCaches.framePointer needs to be <api> for the newceSICMiss:.' id 'da9d6c8a-90b3-4ffd-a306-b6ac5c777078' date '4 April 2015' time '6:54:44.393 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rmacnak.1162' message 'Move responsibility for ensuring ReceiverResultReg has the receiver to marshallAbsentReceiverSendArguments: and fix as-yet-encountered bug where absent self and super assumed it was already there.' id 'eedc3f6a-c3f6-4e97-90da-e51cbe7ad6ec' date '4 April 2015' time '6:47:29.348 pm' author 'rmacnak' ancestors ((name 'VMMaker.oscog-eem.1161' message 'Merge VMMaker.oscog-eem.1160 & VMMaker.oscog-rmacnak.1160' id 'a8728d01-5850-4343-a02c-6b57fb3593cb' date '4 April 2015' time '6:08:41.888 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1160' message 'Cogit:Revise method map generaqtion to provide multiple sendtype annotations.  Add an IsAnnotationExtension annotationtype that implicitly has a zero displacement and uses itsdisplacement bits to extend the preceeding IsSendCallannotation.  This allows us to eliminate all the exoticentry-points and keep only the checked and uncheckedentries.Fix pc mapping tests for Spur.Recategorize bytecode generation suport methods intheir own category.Nuke unused variables and some methods.' id '0dbe8bb6-0fba-4989-8902-9ea276afe1e5' date '4 April 2015' time '5:40:16.719 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1159' message 'Add a Stop abstract instructuion that maps to Int 3on x86.  This for debugging.  Planting stopinstructions in unreached code traps mistakenreturns etc.' id '14bcce0c-7b30-4b18-8d60-ed5a3a27b18a' date '4 April 2015' time '2:50:59.849 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1158' message 'remove no longer needed stack usage tracing method. Replaced by improved decorateDisassembly:for:fromAddress:' id '53bdfe34-8b75-4c70-8836-41b88a9bc606' date '2 April 2015' time '7:28:53.812 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1157' message 'Fix the num initial nils processing in StackToRegisterMappingCogitfor SistaV1.  The pushNilSize: functions need to take numInitialNilsas an additional argument so that those that have a single bytecodefor all nils can compute the size of the bytecode correctly.Nuke the unused initializeBytecodeTableForNewspeakV3PlusClosuresinitializer.  Fix in-image compilation by addingSpurMemoryManager class>>bytesPerOop' id 'c081c694-f570-4e28-b4e7-13e90e7cff04' date '2 April 2015' time '5:16:44.107 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1156' message 'Integrate Nicolas'' fixes that usepositiveMachineIntegerFor: for pointers.' id '697f9d2d-3d70-4c35-b4b6-421c1f3d77de' date '2 April 2015' time '2:47:35.24 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1155' message 'and fix that compiler warning properly.  If one definesa function return type the arguments are typed there-in.' id '5b49a52a-92ca-464e-b0cc-bdda9118a6a1' date '2 April 2015' time '11:37:40.429 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1154' message 'fix inline primitive for at: and at:put: to be 1 relative. This simplifies the JIT in 64 bits because the 1 relative correponds to the 1 word difference between baseHeader and first object field hence generating one less instruction.' id '781d2614-872e-4094-b150-c0b8fdaea15b' date '2 April 2015' time '11:29:17.951 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1153' message 'Rename the inconsistently-named and hence confusingframeReceiverOffset: to frameReceiverLocation:.Fix the slip in followForwardingPointersInStackZone:that was due to this confusion.' id '078f2fbd-0bb3-4773-a8b7-73a06a398a24' date '2 April 2015' time '11:01:15.816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1152' message 'Better living through compile-time type checking.Fix offset calculation in followForwardingPointersInStackZone:as indicated by a C compiler warning.' id '9ca91213-b542-43ee-8410-354257eaa7b1' date '2 April 2015' time '9:50:29.616 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1151' message 'Include the directedSuperclassSend shared case inthe right bytecode.' id '4356fa11-234c-40ba-b3cc-fc9797b15238' date '2 April 2015' time '9:31:47.639 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1150' message 'Protect components of the ARM memory instructions from too-large values.Improve the MoveRXwr/XwrRR code a tad.Part of a low-level review of the instruction building code.' id 'af1f8f36-86cf-4fa7-9dad-1f92603c7891' date '1 April 2015' time '5:27:16.284 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1149' message 'Nuke the SqueakCogSista VM; we''re only doingSqueakSpurCogSista.' id '985fbd74-7cbc-419b-92ed-d0cc3cc58dad' date '1 April 2015' time '3:54:45.797 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1148' message 'Define startpc in closure creation jitting appropriately (and hence correctly for Sista)' id 'b67f9693-ad92-4951-ad6b-a62a64bf4ddb' date '1 April 2015' time '3:47:27.079 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1147' message 'Spur: Make sure that all stacked values are followedin CoInterpreter>>makeBaseFrameFor:Newspeak:Unstub ceSelfSend:to:numArgs:.Nuke the obsolete NewspeakV3PlusClosuresbytecode table initializers.Eliminate some compiler warnings.' id '0fd3920d-c904-484f-b436-e6563dce31c2' date '1 April 2015' time '2:52:03.518 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1146' message '...and fix primitiveIsBigEnder for Cog.' id '0bdb63f1-8a30-4a34-9300-43937b9b3aa5' date '1 April 2015' time '11:35:11.604 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1145' message 'Retract the decision to type the results of the bitwiseoperators as unsigned; it breaks at least the BitBlt plugin.' id '945d0a43-e29d-4fb4-a1b8-263465636aec' date '1 April 2015' time '11:04:56.527 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1144' message 'Integrate primitiveIsBigEnder & Nicolas'' fix forprimitiveAdoptInstance.Fix a time stamp.' id '8474d1b4-3499-48db-b51c-2ff2c4efb587' date '31 March 2015' time '9:28:32.065 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1143' message 'More constant generation improvements in CogARMCompiler.Also some NSSendCacheSurrogate categorization changes that are there purely as artefacts of MC usage and don''t actually represent any deliberate change at all.' id '76e7613a-1b56-4e2b-9932-42df34c06102' date '31 March 2015' time '9:11:29.066 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1142' message 'Make sure the stack is scanned after a pin operationthat involves forwarding.Make sure that the unforwarding stack scan post-become(or post-pin) scans all of the stack contents in theCoInterpreter, sicne super sends have no read barrier.Implement the SistaV1 directed super send bytecodein the StackInterpreter.Fix BitBlt simulation:- BitBltSimulator>>halftoneAt: does not work in Cog; nuke it.- BitBltSimulator>>initialiseModule must answer a boolean.- tryLoadNewPlugin:pluginEntries: needed to choosethe plugin classes more carefully.' id '518e91ab-2513-4368-acb6-830554983a2b' date '31 March 2015' time '7:03:04.226 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1141' message 'Make the fake address generation stuff for in-imagecompilation a little less confusing.' id 'a20d15d4-58a4-4dcb-83d5-d20904fc76ef' date '31 March 2015' time '4:54:17.46 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1140' message 'Fix code generation for ARM concretizeMoveMbrR/RMbrFix in-image compilation for ARM and varBaseReg.Beware!  There may be discrepancies betweenin-image compiled code and simulated compiledcode.  We need to reduce these, ideally to none.' id 'b5079ad1-0ca2-4184-bb6f-4c61f4390d1c' date '31 March 2015' time '4:45:47.233 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1139' message 'Fix register map printing given the new registerassignments on ARM, and new abstract registers.' id 'e8eb9b7b-a9f8-40f2-9b93-d0f13e1204f4' date '31 March 2015' time '3:22:28.078 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1138' message 'Fix a C compiler warning.' id '78f53b2b-2b10-4896-a1f4-8ab0e5a9a820' date '31 March 2015' time '11:51:36.459 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1137' message 'Rescue generation of cogit.c after adding NSSendCachetype.  Do so by moving the definition of thensSendcache variable in all uses inside thecppIf: NewspeakVM block and beefing up unusedvariable deletion to no longer include varablesreferenced in dead code.To do this add a new parse tree enumerator,nodesDo:parent:unless:, and refactoringallReferencedVariables and removeUnusedTempsto take the code generator as an argument.' id 'f5b1b284-2ce3-43df-a03a-279529d7091c' date '31 March 2015' time '11:31:47.262 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1136' message 'Better fix for the initialization bug when using Sistaand multiple bytecode sets.  Make sure that allconcrete Cogit classes in thehierarchy initisalize the bytecode set and henceagree on the bytecode set.' id '3f1acab7-bf76-422e-9334-aeff3a1aa45e' date '31 March 2015' time '9:46:16.323 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1135' message 'Fix an initialization bug when using Sista andmultiple bytecode sets.  StackToRegisterMappingCogit''sand so SistaStackToRegisterMappingCogit''sdeclareCVarsIn: must include a super send toprovdie the right receiver.' id 'e4eb83cc-09c2-4ae6-b695-cee7426dd51f' date '31 March 2015' time '9:33:16.285 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1134' message 'Integrate Ryan''s new self-send scheme whicheliminates the clumsy and slow implicit receivercache.Minor edits to not generate an include ofnsmethodcache.h in non-Newspeak VMs.Soon we should nuke the NewspeakV3 bytecodeset initializers and eliminate NSSendIsPCAnnotated.' id '5ce56810-9b43-406a-8935-c292cd5cfed8' date '31 March 2015' time '9:11:36.572 am' author 'eem' ancestors ((name 'VMMaker.oscog-tfel.1133' message 'Merge changes from VMMaker.tfel-358-tfel.360- Fix simulation of full world draw- optimize BitBltSimulator to avoid reinitialization on each call to simulatedCopyBits. Makes it roughly 500x faster on RSqueakVM- Merge simulation fixes and optimizations for Balloon and BitBlt. Relevant changes only the simulation classes, the generated code should be unaffected.' id '662624c8-dadf-394a-a2c9-a5475e564aa4' date '31 March 2015' time '2:55:58.037 pm' author 'tfel' ancestors ((name 'VMMaker.oscog-eem.1132' message 'Comment an obscurantism.' id '3dd41ab4-d8a1-4129-ac2d-6da7a7cfd543' date '30 March 2015' time '6:09:19.787 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1131' message 'Integrate Ryan''s SelfSends (new self sendentry-point) code.Refactor send generation to take the send table to useas an argument.  rename sendTable to ordinarySendTable.' id '5b810f83-978b-4275-999c-61ed1a9a39d8' date '30 March 2015' time '5:40:05.693 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1130' message 'Integrate Nicolas'' safer primitiveScanCharacters' id '7d87dac8-7e00-47ba-86da-1180507647a6' date '30 March 2015' time '5:20:24.731 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1129' message 'Add support for the VarBaseReg scheme to ARMMoveMbrR & MoveRMbr sicne these are used foraccessing the primTraceLogIndex.Add hasPCRelativeAddressing and for the ARM,isAddressRelativeToPC:.  We can use this to referto the method without generating a map entry.Mark the remaining relevant feature test methods inCogAbstractInstruciton as <inline: true>.' id 'b103538d-b36d-4c70-9600-57ee25a189aa' date '29 March 2015' time '12:09:02.727 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1128' message 'Oops!  remember to answer an abstract registerderived mask for ARM''s callerSavedRegisterMask.Change the ARM reg assignments to use r0 forTempReg and r7 for ResultReceiverReg.At some stage (e.g. when Clément arrives to workon Sista) the register mask machinery may have tochange to use concrete register numbers to allowthe allocator to allocate more registers than canbe named as abstract registers.' id '4947273c-262c-4a41-bec3-ad0e940276b3' date '28 March 2015' time '2:26:04.224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1127' message 'Rename executeCogMethod:... to executeCogPIC:...Add support for a variable base register forreferring to the CoInterpreter variables frommachine code on RISCs (ARM).  Load the VarBaseRegin enilopmarts.  It must be a callee-saved reg.Add support for a 3 argument AndCqRR and use itin the entry-point sequence.  This has the nice side-effect of fixing the inability to differentiate thechecked and unchecked entry-points on ARM if weuse the MoveRR, AndCqR two instruction sequence ;)Nuke the unused and misleading callsAreRelative.Mark the other backEnd ability test methods as<inline: true>.Simulator:Add print cog methods with selector... to the utils menu.' id '5f21363d-74e9-4c95-8c48-6f6d18ef3890' date '28 March 2015' time '2:00:26.196 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1126' message 'Add an improved constant generator that can deal with consts like 0x3FFFF where it can be made fro m0xFFFFFFFF shifted right a few places. This saves several instructions in some important places.' id 'beeacd84-5c81-496d-b734-2da3371e344e' date '27 March 2015' time '7:18:08.438 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1125' message 'On ARM the abort sequence pushes the link reg.This means that in the stack overflow case thelink reg gets opushed twice and hence the trampoline must overwrite the stacked link regwith the one for the ceMethodAbort call, not pushthe link reg twice.  Now the system gets beyondthe first stack check into some interesting infiniterecursion around Interval(Object)>adaptToInteger:andCompare: ;)' id '7d683ed5-85b1-4f54-b6d6-f869fd20e944' date '26 March 2015' time '2:17:38.667 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1124' message 'A read simulation trap must not set the pc to nextpc if the read wrte to the oc register (ARM doesreturns via pop into pc, etc, and we use this incePrimReturnEnterCogCode to write instructionPointerdirectly into pc).' id '842fe1b7-f431-40f7-ba16-a156d4dafd38' date '26 March 2015' time '11:15:29.762 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1123' message 'Have genPrimReturnEnterCogCodeEnilopmart:directly pop the result off the stack intoReceiverResultReg and directly write the retpcfrom instructionPointer into pc for ARM.Given Cog-eem.251 and the above the simulatoris correct on ARM through most ofcePrimReturnEnterCogCode, but the plugin appearsto fail to jump when the pc is written to:000023ec: orr	sl, sl, #16711680	; 0xff0000000023f0: orr	sl, sl, #65024	; 0xfe00000023f4: orr	sl, sl, #60	; 0x3c = 16r7FFFFE3C = &instructionPointer000023f8: ldr	pc, [sl] = 16rFFFE3C00000023fc: mov	sl, #2130706432	; 0x7f00000000002400: orr	sl, sl, #16711680	; 0xff000000002404: orr	sl, sl, #65024	; 0xfe0000002408: orr	sl, sl, #24 = 16r7FFFFE18 = &newMethod0000240c: ldr	r6, [sl] = 16rFFFE1800instead of jumping to the contents of theinstructionPointer (16rB6D4 in this case).' id '3ecc162f-6d41-4c60-a718-b96e7de481f7' date '25 March 2015' time '11:44:08.131 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1122' message 'update two tests - one deleted, one ''fixed''.' id '35623fda-ad89-4dbf-8908-2bf5d62d3b54' date '25 March 2015' time '9:12:25.847 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1121' message 'Update a key comment.' id '14447ec4-7c99-42e0-9c33-eeee7cd61b1a' date '25 March 2015' time '4:27:35.341 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1120' message 'Revert CogARMCompiler>>genSubstituteReturnAddress:;the return address must indeed be assigned into the LinkReg, not pushed on the stack.' id 'ba71f97c-eb8c-4c06-9679-ba2cbce49e14' date '25 March 2015' time '3:18:22.865 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1119' message 'Rescue Spur Cog compilations by removing thebogus <api> pragma from headerForSlots:hash:format:classIndex:.Now that headerForSlots:hash:format:classIndex:exists, move identityHashFullWordShift up toSpurMemoryManager.And note that in the last commit, copyToOldSpace:bytes:format:was marked as <inline: #never> to keep copyAndForward:slim and to the point.' id '0d6a1369-da4c-4ba3-a388-5100190dc256' date '25 March 2015' time '1:16:26.195 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1118' message 'Work around a compiler bug in 64-bit gcc 4.4.7-4 onRedHat that elided one f the two assignments to acorpse''s header in threading it onto a weak survivorlist.  Do so by, in 64-bits, performing a singleassignment to the corpse''s header, instead of two.' id 'b055db97-d17b-4dfd-b281-57e8df3faf12' date '25 March 2015' time '12:41:22.816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1117' message 'Fix a bytecode compiler shadowing warning.' id '71e6dd3b-c884-47ec-a004-bce9fe9517c5' date '24 March 2015' time '5:10:09.005 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1116' message 'Fix initialization of numPushNilsFunction andpushNilSizeFunction in Newspeak Spur VMs.' id '7b20b977-3e22-40c9-90a5-ba114e037e3a' date '24 March 2015' time '5:07:08.667 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1115' message 'Merge with VMMaker.oscog-tpr.1114 restoringtestAdd.Fix an assert in SpurSegmentManager>>insertSegmentFor:' id '925a7df5-a222-417f-9d84-c7f3ff488f79' date '24 March 2015' time '1:10:10.337 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1114' message 'ARM specific  multiply related tests - currently showing it ain''t gonna work, at least for SmallInteger maxVal.' id '9fccfcb8-3e48-4f58-ae59-2bcfabcd6f30' date '23 March 2015' time '6:03:41.429 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1113' message 'Redo free space allocation on Spur image load.Provide a minimum ammount of free space, takinginto account extant free space.  Provisionally useextraVMMemory in the header, defaulting togrowHeadroom if extraVMMemory is empty.This can be revised if folks protest.' id '9b08eea7-d3db-440f-ba64-16abc799fcf8' date '23 March 2015' time '12:52:02.301 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1112' message 'Provide a common sizeof: for SQSocket.Exclude dumpImage: from Spur (no seg support yet)' id 'ad55a64a-81f7-4a37-9fb4-3787919a6923' date '23 March 2015' time '10:11:57.392 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1111' message 'Fix misgeneration of saveAndRestoreLinkRegAround:by not marking as required <inline: true> methodsin CogAbstractInstruction.  Has the nice side-effectof deleting ~ 2000 lines of dead code from cogit.c.Revert the bogus fix to preGenerationHook:.Fix type coercion in propagateReturnIn: to notgenerate unnecessary casts.Fix baseTypeForType: to remove the function namefrom function types that include a function name.' id 'd49aabf6-9652-4eaf-b08d-0ccddc9c9146' date '22 March 2015' time '6:38:13.789 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1110' message 'Do dead-code elimination on (expr and: [false]) ifTrue:and hence fix a few exprs in primitiveVMMarameter' id '4950d2be-40ff-4b33-b2ff-ab97229ff92d' date '22 March 2015' time '4:05:48.065 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1109' message 'Hack fix non-generation of saveAndRestoreLinkRegAround:' id '6254b95a-10b0-46b3-87bf-695a46771eb4' date '21 March 2015' time '8:05:21.408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1108' message 'Merge in Nicolas'' fixes for incorrect use of #|.Change the time base in the CogVMSimulator touse ByteCountsPerMicrosecond and havestackLimitFromMachineCode poll every 2ms insimulated time, according with default heartbeat.' id 'e4a2d953-eee6-4f93-939c-0bf28fbba1e2' date '21 March 2015' time '11:27:13.632 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1107' message 'Rescind unneeded redundantly unneccesary class vars that are unneccesarily redundant' id 'befb7aea-840f-4950-ae37-b19889979997' date '20 March 2015' time '12:40:18.01 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1106' message 'Make sure LinkReg is pushed in abort sequences.' id '960f0eca-f580-4e6b-9c07-0af3da72e77a' date '20 March 2015' time '12:17:37.251 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1105' message 'Implement genMulR:R: for ARM.  Only 4 instructions :)Provide support for conditional instructions, eventhough the multiply sequence doesn''t need them.It will be useful later on.' id '57fdb1dc-a1be-40c3-a5a3-1ccc60068cfe' date '20 March 2015' time '10:58:51.231 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1104' message 'Fix accessing the result in compileInterpreterPrimitive:when there''s a LinkReg, cuz it''s on top of stack, notunderneath the stacked ret pc (cuz there isn''t astacked reg pc).' id '7af53438-a43a-49e8-95f4-9dd5ae431173' date '19 March 2015' time '4:51:03.238 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1103' message 'Fix some Slang issues with ARM methods (clashingarg names).Provide an abstraction for saving & restoring link regaround calls.' id '64ddd2e1-e5f5-4ad0-b512-b1d0e32e99f7' date '19 March 2015' time '4:20:02.926 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1102' message 'Trampolines should not pop the link register unless they push them.Correct shortcutTrampoline:to: for ARM.Generate the actual tracing trampolines when simulating so one can grok them.' id 'ba19f395-e6a0-4a6a-9949-b3ee0c06a28f' date '19 March 2015' time '1:43:07.647 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1101' message 'Refactor the enilopmart creation machinery so thatthere is only one creation routine, adding a forCall:parameter to differentiate enter and callenilopmarts.  Allow nil to be passed for reg argshence only one routine.  Make RISCTempReg one ofthe global reg ids.  RECOMPILE!!Fix block frame build for ARM.  The LinkReg must ofcourse be pushed.Fix CogMethodZone>>whereIsMaybeCodeThing:which was testing the wrong boundary.Fix printStackCallStack for simulation, nilling localFPwhen in machine code so that we know which framepointer is valid.' id 'bf76a676-94a9-440d-82bd-64304fc1d429' date '18 March 2015' time '7:31:23.381 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1100' message 'Block disassembly and dispatch support for ARM.' id '7c4e7d35-34c3-4654-a7c2-09b21aceb1d3' date '18 March 2015' time '4:21:41.552 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1099' message 'Fix the traceLinkedSendOffset for ARM; it must includethe link reg push size.Provide a hack so that ARM can use bl to call theshort-cut trampolines through bl during simulation.Fix the ceBaseFrameReturn and ceReturnToInterpretertrampoliners to not push the link reg; these are reached via returns.' id 'b8e80b54-512a-418f-8134-fc7d11e3b116' date '18 March 2015' time '3:45:44.227 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1098' message 'Improve rotateableblahblah to only use even shifts (because ARM) and to handle well-rotated values like 16rF0000000F' id 'e2b9f747-52b7-4b07-8689-8b09ebb75c65' date '18 March 2015' time '2:58:53.385 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1097' message 'Add a MoveOpcode to CogARMCompiler and use it.Provide class side access to OrOpcode for GdbARMAlien''sdisassembly code.' id '2d5d2313-de19-4642-9963-5e97ad1c7da8' date '18 March 2015' time '12:59:01.849 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1096' message 'Fix regression in generateObjectRepresentationTrampolines.Of /course/ ceScheduleScavengeTrampoline needs tobe a safe trampoline.' id 'a138f73f-adc5-4a10-af7b-b1a8276295dd' date '17 March 2015' time '6:39:31.258 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1095' message 'On ARM the ceTraceLinkedSend call needs toposh/pop the LinkReg around the call.' id '87e54293-385c-427c-8c96-3d8b934aa808' date '17 March 2015' time '5:50:59.242 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1094' message 'Make the ISA explicit in the VM generators, now thatwe''re running the ARM simulator alongside the IA32one.  Make sure Cogit is initialized with optionswhen generating the interpreter.Fix assertClassOf:is: to handle immediates upstreamof isClassOfNonImm:equalTo:.Fix CogARMCompiler>>computeMaximumSize for Slang.' id 'f3729206-0d5c-4380-bdd8-790bbbbc500d' date '17 March 2015' time '5:08:01.778 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1093' message 'Make the translated primitive simulation machinerykeep up-to-date with methiod changes.Fix a spelling error with the schedule scavenge trampoline.Revert the alas bogus change togenGetInlineCacheClassTagFrom:into:forEntry:and fix a method timestamp.' id 'ac934d6c-fe5e-4bcf-8c3e-e042e66f15c8' date '17 March 2015' time '8:25:59.874 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.1092' message 'Small improvements to some code and mostly comment improvements so there is some hope of making sense of this later on' id 'ff3802c0-8550-4a16-baef-1a4b359ef4b1' date '13 March 2015' time '10:19:11.654 am' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1091' message 'second attempt to save tpr.1090It''ll all end in tears' id 'f570cbcd-13a8-4dc8-9cb9-2714d07ca58e' date '12 March 2015' time '2:38:37.189 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1090' message 'Merge with eem.1089' id '046c40ac-0ada-468c-b1da-cfdee8453d6d' date '12 March 2015' time '2:36:18.642 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.1086' message 'Add FOR ARM ONLY so far a new abstract instruction TstCqR that provides a non-destructive register AND quick const test. THis can replace a common idiom of cogit MoveR: sourceReg R: destReg.cogit AndCq: 1 R: destRegwith a single instruction for ARM and probably for x86.Usage is currently limited to CogObjectRepresentationForSqueakV3>genGetInlineCacheClassTagFrom:into:forEntry: and can be extended if approved.It has the advantage of making it a lot easier for  the ARM entry code to meet the checked/unchecked mask creating test.' id '94c94bd5-0d74-41e5-9191-6ed932a5a21b' date '9 March 2015' time '1:16:01.722 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.1085' message 'Fix slip in LargeIntegersPlugin (thanks Nicolas).' id 'bd028125-317e-40fe-ac8c-461e7f59dbb6' date '5 March 2015' time '11:46:45.763 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1084' message 'Simulator:Fix slip in ioMousePoint (thanks Nicolas)' id '915a7f50-4ff8-4962-b397-7f91aa58c144' date '4 March 2015' time '5:06:14.325 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1083' message 'Fix disastrous typo in VMMaker.oscog-eem.1081endianness changes.' id '4d0a08c2-6218-4726-816c-1d6e3ae601d8' date '3 March 2015' time '1:17:35.981 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1082' message 'Avoid duplication in fetching active process andscheduler in process-switch machinery.' id '3b300530-9ed0-4828-89c6-3d0bf7411ee7' date '2 March 4654' time '12:14:01.781 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1081' message 'General:Take advantage of endianness for simpler largeinteger initialization.Slang:Fix inlining of (u)sqLong expressions bound tountyped formals; since the system expects untypedformals to be of type #sqInt the expr must be castto #sqInt.Put node:typeCompatibleWith:inliningInto:in: inCCodeGenerator, not TMethod.' id '4cd33ad1-8b0f-4537-bf5f-7a4a25a1a2f9' date '25 February 2015' time '1:15:04.185 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1080' message 'The Newspeak VMs still need plugins' id '8b1a09b7-4f58-4375-b16a-e42e63ffd542' date '24 February 2015' time '1:32:01.941261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1079' message 'Avoid casting nil to pointers' id 'fdd342f3-6d47-4bbe-be50-86e2865b8b3b' date '24 February 2015' time '1:06:02.27832704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1078' message 'Fix a typing bug in initializeOldSpaceFirstFree:.Add breakpoint in inferReturnTypeFromReturnsIn:' id '4f7efca2-6dd0-40ea-9abb-2b1f68ee8269' date '24 February 2015' time '11:41:02.64 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1077' message 'Fix a type declaration error uncvered by the newinlining.  Inlcude freeMethod: in Cogit''s api for method xray.' id '5c8fcc56-3a1d-4267-a434-e701ce9a2064' date '24 February 2015' time '11:16:01.841032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1076' message 'oops...' id 'fbce8f44-4ca0-48db-a0cb-7e06d2adb34f' date '23 February 2015' time '9:48:01.846130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1075' message 'Slang:More improvement to type inferrence/propagation.Support ifTrue:ifFalse:.  Better separate the passes ininferTypesForImplicitlyTypedVariablesAndMethods.Fix slip in nodeToCast:to:.  Provide types for atan, et al.Make the inline selector breakpoint machinery allowmultiple selectors, and use it to break for type inferrencetoo.Don''t inline complex expressions that are bound tovariables used in asserts.Make sure return types are symbols if they exist as symbols.General:Simplify primitiveMakePoint. Include primitiveMethodXrayFix some type warnings in Spur stack VMs.Fix privacy violation checking for super sends.' id '3ced243a-888b-4008-8036-42ec11da99d7' date '23 February 2015' time '7:54:01.323294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1074' message 'Use printstringof;maybeselect for more reliableprinting of selector in Newspeak privacy check.' id 'b88dbe30-1cfb-4a06-b6ad-89e63489893e' date '22 February 2015' time '4:29:00.608425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1073' message 'General:Add an option to control FailUnbalancedPrimitives andno longer burden the Stack VMs with the responsibility.Newspeak VM:Add an optional CheckPrivacyViolations option andobey it (thanks, Ryan).Nuke unused Newspeak configurations.Slang:Add code to cast untyped expressions inlined in placeof typed vars, even though currently never triggered.' id 'f5e526a5-587e-4182-856d-519220e8efa9' date '22 February 2015' time '3:03:04.127065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1072' message 'Fix typing multiple assignments to a variable- promote the type to the largest integral type of  all assignments	(primitiveDecompressFromByteArray)- do /not/ promote a variable typed with an integral  type to a floating point type (transformColor:)Provide size of short int.Fix weird regression for Objectmemory>>baseHeaderSize' id 'bd9d8dd5-dea0-49da-8be7-cb246f49f554' date '20 February 2015' time '7:30:01.558130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1071' message 'Fix several bugs in the new type inferrence code,resulting in a functional VM again (phew!).Do a much better job at typeForArithmetic:in:;answering the longest type for integral types.In inferTypesForImplicitlyTypedVariablesIn:, observeassignments from both sends and typed vars.Comment the method better so that alreadyExplicitlyTyped''s usage is clear(er).On type compatibility of inlined expressions,insist on signed compatibility or accept an untypedactual.Provide a return type for asFloat (so inlining inprimitiveAsFloat still occurs)Provide an exception in unsignedTypeForBitwiseSend:in:for currentBytecode to preserve the nice constantinlining of currentBytecode & N in the bytecode cases.This time I feel that the Slang Sensei has hit meover the head and some enlightenment has ensued.That''s a first ;-).' id '6b4dfa33-242b-4b9b-8b1a-0aee9139cf6c' date '18 February 2015' time '7:25:02.01332704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1070' message 'Fix inferTypesForImplicitlyTypedVariablesIn: forvariables assigned arguments.  This rescues atleast BitBlt plugin.  Fix typeFor:in: to provide sqIntas the default type for arguments.' id '080caffc-cd6c-4da2-934b-8c477c1f0c1f' date '17 February 2015' time '4:24:00.168032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1069' message 'Slang:Make transformConditionalAssignment:in: more selective;only transforming if at least one arm contains an inlinablesend.Improve the type inferrence machinery further tosupport pointer subtraction.  Eliminate code duplication(determineTypeFor:in: now uses returnTypeForSend:, etc).Do away with the warning in typeForDereference:in:; apimethods make this impracticable.Eliminate the funky code generation scheme fortranslated primitive plugins (MiscPrimitives et al)and use the same inlining and code generation pathas normal plugins.  Finally implement a time stampchecker that looks at the source method timestamps.Type some InterpreterProxy methods to generatevalid signatures.' id 'e4eaa3f3-535f-4d9f-a2fb-971bad5af7cc' date '17 February 2015' time '2:32:02.908425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1068' message '...and add type inference support for at: rto rescueinlining in the Klatt plugin.Mark SpurSegmentManager>>initializeFromFreeChunks:as doNotGenerate to avoid a type inferrence error.' id '3aeb252a-64eb-45a8-a5ad-c4daf88f87b8' date '16 February 2015' time '11:53:03.995359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1067' message 'Back out of the wrong-headed attempt to fix thesymptoms of bad inlining rather than the cause byhacking comparison generation.Insist on signedness of actual expressions matchingthe signedness of formals to inline an expression,otherwise assign the expression to the inlined formal.Add support for type inferrence of simple arithmetic(+,-,*,/) but *not* >> << et al, so that inlining is stilldone for e.g. pointer arithmetic expressions.Refactor the inlining breakpoint machinery so one canbreak only at the point of inline as well as only at thepoint of testing for inlinability.Fix a bug in TMethod>>typeFor:in: which was causingthe failure to find the types of global variables.' id 'a5db4c60-0a4d-4375-8e2b-9a1ece21e34c' date '16 February 2015' time '11:26:00.842098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1066' message 'Make sure that integral comparisons against zeroare signed, casting the receiver as necessary.Refactor the typeOf:in: machinery to allow theTMethod and the CCodeGenerator to dance together.Change the heuristic for inlining expressions toinclude a maximum usage count.' id '1ddbaab7-252c-4785-a326-3beb68f0fe08' date '15 February 2015' time '1:07:04.15816352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1064' message 'And take advantage of the better inlining in copyAndForward:' id '9d9d2583-03e6-4b6b-9b24-51587933f8f3' date '13 February 2015' time '5:47:01.860359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1063' message 'Slang:Rescue translation of the non-64-bit Spur VMs bya) doing a better job of suoper expansions, handling expansions	that are returning ifs as well as just returns correctly.b) transforming variable := expr ifTrue: [s1] ifFalse: [s2] into    expr ifTrue: [variable := s1] ifFalse: [variable := s2]to allow inlining of s1 & s2.' id 'c4480dac-ed58-41cc-a585-b6b4a89c72c8' date '13 February 2015' time '5:37:02.304065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1062' message 'Simplify primitiveDisplayString given isArray:.' id '5016dc92-e170-43ca-bef4-9f8fb53a75f9' date '13 February 2015' time '11:37:01.484196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1061' message 'Refactor positive32BitIntegerFor: and signed32BitIntegerFor:in the realization that these reduce to essentiallyintegerObjectOf: in64-bit Spur.  The idea is to inline if in64-bit Spur but not if in the 32-bit VMs.  Add notOption:processing to allow excluding noInlineSigned32BitIntegerFor:et al.  Add hasSixtyFourBitImmediates to no longer assumethat wordSize = 8 implies 64-bit immediates.Use positiveMachineIntegerFor: in place ofpositive32BitIntegerFor: in some plgins.Simplify two B3DAcceleratorPlugin prims giventopRemappableOop and isArray:Fix a simulation bug in shortAt:put:.With these changes 64-bit Spur Stack Linux manages3548 run, 3495 passes, 0 expected failures, 47 failures, 6 errors, 0 unexpected passes' id 'bbb9d477-8fc5-4f93-a996-48a20fafeeff' date '13 February 2015' time '11:21:03.103359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1060' message 'And FloatMathPlugin needs floatExponentBits' id 'c43c476e-10ff-420e-a2eb-c17d4624e338' date '12 February 2015' time '11:16:03.578032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1059' message 'Add support for <inline: #always> to mark thegenerated function as inline for use when Slangcan''t inline (it currently doesn''t inline multi-statement functions in conditionals).' id '3ab35d11-5ea9-4f1c-b47e-97c792c7a98f' date '12 February 2015' time '10:48:01.29632704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1058' message 'Revisit primitiveTimesTwoPower.  Avoid complicationsin the 32-bit versions.  Clip the argument in the 64-bitversions and avoid the compiler warning with a cast.' id 'fdd2ee43-600b-4068-9956-dc6d59e05044' date '12 February 2015' time '10:06:01.300294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1057' message 'primitiveDoNamedPrimitiveWithArgs needs to followthe same convention re primitiveFunctionPointeras primitiveDoPrimitiveWithArgs et al on failure,otherwise checkForAndFollowForwardedPrimitiveStatewill be fatally confused.Add an assert to check the range of accessorDepth.' id 'e81e5238-13d6-428d-8292-2472236402ac' date '11 February 2015' time '7:10:01.076392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1056' message 'Range-check the three float timesTwoPower:implementations to ensure that the argument toldexp does not exceed int range.' id '3069334b-0e1a-4609-840d-f85302692f97' date '11 February 2015' time '6:06:04.278196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1055' message 'Broaden primitiveBitXor for Spur 64-bits.Now there are no uses of popPos32BitInteger in Cog :-)' id 'dd8f0ae4-8ad8-470c-a35b-29cf787f83c8' date '11 February 2015' time '2:10:04.283294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1054' message 'Broaden primitiveBitAnd and primitiveBitOr for Spur64-bits.  Make the bytecodes handle the commonSmallInteger op SmallInteger case.Fix C code for and endianness under simulation ofSpur64BitMemoryManager>>fetchLong32:ofFloatObject:' id '3d511797-53fc-4848-b1ec-4b8a1eb0c0ff' date '11 February 2015' time '1:20:01.475 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1053' message '...and fix initialization of those constants on generation' id '86f23972-c4fa-430d-93b9-865bb86a098d' date '11 February 2015' time '11:10:03.973261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1052' message 'Spur:Fix idiocy with bit-position constants in image segments.Move the constants to class variables.  Make sureevery method is commented as being part of load or save.' id '95db113a-844c-43a2-8da1-a7943c926aee' date '11 February 2015' time '11:06:01.430392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1051' message '...and rescue compilation of the cogits given the change tocheckIntegrityOfObjectReferencesInCode: in VMMaker.oscog-eem.1048' id '75c9356f-fb1e-4f2b-99a7-21725cccaa91' date '10 February 2015' time '6:58:00.292392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1050' message 'Clean up a few more flushAtCache duplicates' id 'ad3a825c-97ba-4d01-a0e7-637af8cbf52b' date '10 February 2015' time '6:37:01.618 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1049' message 'Spur:It''s the atCache, stupid.  Flush the atCache after every become.Eliminate duplicate flush in flushExternalPrimitives.Introduce lastPointerOfArray: and use it to slim downbecome checking.  Simplify getErrorObjectFromPrimFailCode.Use lastPointerOfMethodHeader: in makeBaseFrameFor:to same effect.' id 'aeda18a2-b9e8-4f87-8f4f-194a0155cc4a' date '10 February 2015' time '6:20:00.33716352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1048' message 'Refactor leak checking code so that GCModes areflags and coincide with flags for what GC events toleak check.  Hence ensure leak checking is actuallyrun when requested.  As part of this move the shrink action from postGCAction: into the memorymanagers and hence allow Spur to not shrink on scavenge.Fix bugs with immediate character printing.Allow printing the mark state of free chunks.Spur:Fix some dumb slips in the image segment code.Fix bogus assert in remapObj: and only copy-and-forwardthere-in in the right cicumstance.' id '8c759c0d-f612-4018-8a05-45ec7f6af78f' date '10 February 2015' time '2:57:01.534130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1047' message 'Spur:Have lengthOf: answer 0 for ephemerons andsomething sensible for 64-bit indexable on 32-bits.' id '602b03c8-5b48-4e59-b0f3-e58c72344c7e' date '6 February 2015' time '11:19:00.291425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1046' message 'Spur:Scavenging ephemerons should update the ephemeron''skey with the scavenged key.Add an assert to remapObj:.' id 'b7e289ed-2b6a-43c7-a1d0-82fdaf8538bb' date '6 February 2015' time '11:05:03.054294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1045' message 'Make getModuleName simulate for theLargeIntegers plugin''s primGetModuleName.' id 'afe6083b-7ae4-4670-9338-4db5a0538104' date '5 February 2015' time '2:48:00.948196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1044' message 'Nope.  The fix is to make ensureBehaviorHash:inlineable.' id 'e04ad0a1-2b15-4561-a3ed-1a4d4d6d58c8' date '4 February 2015' time '4:45:01.82216352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1043' message 'but classTagForClass: can''t be inlined yet so rewriteprimitiveObject:perform:withArguments:lookedUpIn:' id '60965dc0-4817-47e5-950d-87354d8acb50' date '4 February 2015' time '4:26:01.139392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1042' message 'fetchClassTagOf: also needs to be inlineable in ifs.Use << instead of bitShift: in Spur seg load.' id 'cd14932f-16ef-41a5-8212-83e584ac417d' date '4 February 2015' time '4:10:00.595359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1041' message 'Like V3''s, Spur''s fetchClassOf: also needs to be inlineable in ifs.' id '07a9d555-3a71-4774-a5f2-04a2ee09a74e' date '4 February 2015' time '3:39:01.702098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1040' message 'Fix slip in new primitiveObject:perform:withArguments:lookedUpIn:' id 'be108ef5-00a3-425b-b228-16515cc447c7' date '4 February 2015' time '3:32:02.179065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1039' message 'Allow primitivePerformWithArgs to avoid fetchClassOf:in Spur by making the last arg toprimitiveObject:perform:withArguments:lookedUpIn:lookupClassOrNil.Update Slang constan folding to include nil isNil/notNil.' id '931d69b1-7be3-42dd-8833-1ba325d2b5f2' date '4 February 2015' time '3:17:00.032032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1038' message 'Fix 32-bit word reversal in 64-bit Spur and hencefix 64-bit pur image segment loading.Make sure the leak checker is run when image segmentleak checking is enabled.Never inline fetchClassOf: in Spur; it''s a lot of codeand should be rare, dynamically.' id 'b980b192-bb2a-4a7b-9ca5-e570007bc55e' date '4 February 2015' time '2:55:03.718 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1037' message 'Spur image segments:Offset class indices in objects in segment to avoidconfusion with forwarders etc.Comment helper methods better.Add 32-bit byte swapping for 64-bit segment support.' id '36af936c-f30f-4e91-9d1f-4b41f1122891' date '4 February 2015' time '10:48:02.497 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1036' message 'Eliminate NewspeakV3 support from the Newspeak Spur VMs.Fix commonSendAbsent''s comment.Don''t expunge unmarked entries from the class table in thesegment storage markObjects: invocation.Use numSlotsOfAny: to avoid unnecessary assert fails in someprinting & testing code.  Fix ... bug in longPrintOop:Simulate primitiveDirectoryCreateFix missing supersend init bug in the DeflatePlugin.' id 'd4ac012e-2503-42d2-a8c1-e73dd59b48eb' date '3 February 2015' time '6:54:01.281425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1035' message 'Newspeak:Refactor the absent receiver shuffling in theinterpreter to get more common code.Spur: comment more carefully the receiver andsupersend forwarding invariants, and thereforeeliminate internalForwardedReceiver.' id '33a34378-0618-40c7-8fbb-c467fb40fc57' date '1 February 2015' time '5:16:01.507261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1034' message 'Clarify and ensure that we always follow receiversafter any become to ensure that e.g. super sends on non-pointer receivers (which don''t check) will haveunforwarded receivers and hence any primitives thatdon''t validate their receivers will function correctly.Better safe than sorry.Don''t prune unreachable code in plugins since thepruning code doesn''t yet work correctly for them.(skip VMMaker.oscog-eem.1033)' id '1a93b31c-cf2c-4a2c-b53f-9eae1d7863c7' date '30 January 2015' time '6:12:01.778359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1032' message 'Eliminate some warnings in the B3DAcceleratorPlugin' id 'a3c915e6-d663-4d65-ab41-493c71498549' date '30 January 2015' time '5:10:02.977425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1031' message 'Redo the Asynch changes to avoid ugly code generation' id 'dacb0163-3f52-4afa-8c44-eed0ed3d892e' date '30 January 2015' time '12:45:02.146294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1030' message 'Fix 64-bit warnings in AsynchFilePlugin and in#Array parameters in the SmartSyntaxInterpreterPlugins.Fix a warning in the Alien plgins.' id '714f922a-8349-4094-b2e2-359fd5140db9' date '30 January 2015' time '12:37:01.39832704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1029' message 'And fix the regression in V3 due to the post becomerefactoring.' id 'a2c6da7a-d111-4184-bf10-039ed2bea424' date '27 January 2015' time '3:01:02.086425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1028' message 'Add/improve some debugging functions andfix a comment typo.' id '19752f44-5207-45a2-9930-ae424e662f66' date '27 January 2015' time '1:38:01.069 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1027' message 'Spur:Make postBecomeAction''s stack sweep only occurin Spur (fix regression).  Refactor so that the scan isnot inlined. Don''t assume newMethod isnon-immediate in post-become actions.Fix stack adjust slip in primitiveSmallFloatTimesTwoPowerMake ensureBehaviorHash: fail for uninitializedbehaviours and hence fix the Behavior basicNew basicNew hang.Fix word size assumption in assert inwithoutSmallIntegerTags:LargeIntegersPlugin:Remove/fix assumption of 32-bit digit length innormalization routines.Simulator:Fix element sizes in Integer>>coerceTo:sim:Add another objmem=>coInterpreter redirect' id 'ab1faad9-ecf8-43d7-843d-b718feb0917c' date '26 January 2015' time '4:30:04.061359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1026' message 'Fix type regression in primitiveBitShift due to 64-bits.Reduce the max num literals in the alternate headerformat to 15, and steal the bit for the Sista
optimized method flag.Provide accessModifier methods for Newspeak.' id '58161d66-0b23-4356-89f1-8e951fd1a1d9' date '22 January 2015' time '4:41:03.055294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1025' message 'Spur: Optionalize some api methods the Spur Cogitdoesn''t use.Make cogCodeConstituents 64-bit ready.' id '1a29f456-a8e2-4312-a391-8e2cdb0430ee' date '20 January 2015' time '3:42:02.980425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1024' message 'Newspeak:Integrate Ryan''s newer absent receiver sends,which first apeared in VMMaker.oscog-eem.919,abandoned because of Glue issues now resolved.Includes nice refactoring of absent send argumentmarshalling into its own routine.Spur: Provide a validFreeTree checker.' id 'f6cf904e-36ea-4109-a415-b8564601d19e' date '19 January 2015' time '4:23:02.46532704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1023' message 'Spur:Rename and correct ensureSemaphoreForwardedThroughContext:to ensureSemaphoreUnforwardedThroughContext:, its intendedfunction.Make shouldRemapObj: filter-out objects already in newSpacesince mapStackPages, va mapInterpreterOops, can visit objectstwice in a scavenge, GC, compact sequence.General:Speed up assert engines by using addressIsInPage: instead ofstackPageFor:.' id '3b0b931e-e8b1-4155-ac38-8a078ddcec98' date '17 January 2015' time '2:06:00.465425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1022' message 'Cope with the funky primitives generated fromSmalltalk methods in computing accessor depths.' id '69a59ffb-cfbd-4b9e-af74-7c2eb662beac' date '15 January 2015' time '1:30:00.67216352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1021' message 'Fix in-image compilation for the at:put: primitive.Bow to the inevitable and add a manual override forprimitive accessor depth.  Use it in at: & at:put:.If manual override is not used then the automaticallycomputed depth is too deep because of contextaccess.' id '8d22d520-7ec6-4a2e-b554-441ae57f5453' date '15 January 2015' time '12:59:02.87432704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1020' message 'Fix monumental blunder in jitted store-check code.The saved registers mask needs to be the *or* ofthe value reg and the caller-saved registers, notthe *and*!!Merge with VMMaker.oscog-cb.1019''s changes thatuse the method header flag bit to identify optimizedmethods.  rename HeaderFlagBitPosition andMethodHeaderOptimizedBitShift toMethodHeaderFlagBitPosition.Slang:Eliminate null expressions in and: and or: ifgenerateDeadCode is false.' id 'ef73cd3f-99cc-4bb1-83ac-31e56411dc5c' date '15 January 2015' time '11:39:01.031 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1019' message 'added super calls in conditionnal jumps generation in order not to generate counters for optimized methods.' id '9f3b07dd-ec85-455f-b8a4-2dc0f27868ed' date '15 January 2015' time '5:14:03.142032704 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1018' message 'added unconditionnal single bytecode 217This bytecode can be used in two case:- when a method is discarded, all its bytecodes are replaced by the unconditionnal trap and its cogVMState is flushed- in optimized methods, in a branch that wants to trigger dynamic deoptimization' id 'f6c38e14-dde6-469d-98a9-d4dd54b6fa99' date '15 January 2015' time '4:20:01.107065408 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1017' message 'Add an assert to check for forwarding inwakeHighestPriority to hunt bug CM is seeing.Comment typo' id '5684df46-8489-43e5-b2ac-6406ef739cf5' date '14 January 2015' time '10:59:03.427261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1016' message 'Fix some type warnings in the Newspeak cogit.' id '656d7591-7ea4-4c5f-9d13-c6a0bd8b8286' date '9 January 2015' time '1:57:02.461130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1015' message 'Fix some C typing slips in recent Sista JIT code.' id 'cc6ec010-1b1d-4ba3-8a4d-1c31b2931fbd' date '9 January 2015' time '12:57:02.709 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1014' message 'Make the pin primitives Spur-only.Nuke an erroneous method and add a missingsimulation method.' id '8c9c75f6-b340-4135-ae40-399c35379d5d' date '9 January 2015' time '12:14:03.281294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1013' message 'Spur: Get following of the saved and caller contextsin base frames correct in followForwardingPointersInStackZone:General:Bow to the inevitable and add eassert: for thoseexpensive asserts you just can''t let go of.' id '04aee5a6-0821-468f-be83-9f4a10199c94' date '9 January 2015' time '11:58:01.982098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1012' message 'Spur:Make sure the saved contexts at the top of eachstack page are followed post-become infollowForwardingPointersInStackZone:.Add an assert to Spur''s shouldRemapObj: to verifythat new space references are only visited once ina scavenge.Add asserts to check that contexts are notforwarded when marrying stable contexts.General:Never inline mapStackPages, for debugging.Add an assert to returnToExecutive:postContextSwitch:to ensure the instructionPointer is valid whenchecking for being at a send return pc.Eliminate the simulator overrides forwithSmallIntegerTags: and don''t assume theSmallInteger tag pattern.' id '0c6e99ae-1afa-4f1e-a20c-3ded152f264d' date '8 January 2015' time '5:00:01.721 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1011' message 'Spur:Fix bad bug introduced in become changes in  VMMaker.oscog-eem.841 through 844.  The classtable contains puns, e.g. using Array and WeakArray.These class index puns must not mislead theallInstances primitive into concluding that theclasses in question are at multiple indices andhence avoid wrongly purging them.' id 'dd0dbcf0-1b1e-4d40-854c-130590e38268' date '8 January 2015' time '1:01:03.189065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1010' message 'Be lenient w.r.t. unpinning married contexts.  Movethe check down into StackInterpreter''s version.This allows e.g.    self allObjectsDo: [:o| o unpin]' id '9065e685-b193-428f-9c7a-27ce1afe8c71' date '6 January 2015' time '10:52:02.447 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1009' message 'Fix slip in primitivePin.' id 'b7476b8c-cba9-42a5-8b0d-676775d111ef' date '3 January 2015' time '12:26:00.801098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1008' message 'Third time lucky?And remove a gcc compiler warning for printHexnp:' id 'e5b26122-f27e-498b-bc8a-70f5f0fc3e1a' date '1 January 2015' time '2:03:01.789 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1007' message '...and use a signed shift for the 64-bit SpurloadFloatOrIntFrom: check.' id '5ab9382c-cd68-43ef-a5e4-0c107083d0c6' date '1 January 2015' time '1:38:00.90432704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1006' message 'Ugh, /really/ fix stupid regression infindUnwindThroughContext:.' id '9d3cd4bd-d2d0-476b-bf87-1b040eaaf57e' date '1 January 2015' time '1:27:02.115228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1005' message 'Fix stupid regression in findUnwindThroughContext:.Minor streamline to commonReturn in CoInterpreter.Add range check for 64-bit SmallInteger to Floatconversion since in 64-bits this can overflow theexact float range.' id '60586ca3-d2d0-4b96-b7e0-7956eb990e3c' date '1 January 2015' time '1:17:00.198261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1004' message 'Revisit the bug fix for followed contexts duringscavenging in VMMaker.oscog-eem.913 of24 October 2014.  Split isWidowedContext: intoa more careful version, isWidowedContextDuringGC:for use only during scavenging.Speed up non-local return processing by using thefact that 98% of the time returns are within thesame page.  The search for the home contextfollowing finding an unwind is unnecessary iff thehome is married and on the same page.Refactor commonReturn to eiminate CoInterpreter''sversion, moving the divergence intomaybeReturnToMachineCodeFrame.Makew sure the search for the home through theblock''s closure uses followField:ofObject:.Fix a slip in genBinaryInlineComparison:opFalse:destReg:.Nuke erroneous instance-side versions ofinitializeFrameIndices (editing blunders).Typos.' id '132642b3-ab26-4957-82a4-8aa19b60f188' date '31 December 2014' time '2:21:00.125 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1003' message 'Added code for inline primitive comparison.I now need to test them from the image.' id '012766da-2988-46a8-8f32-f8849b1e5324' date '30 December 2014' time '1:41:01.893098112 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1002' message 'Send cannotReturn for sideways return attempswhen there''s an unwind-protect.  Old code woulderroneously answer unwind-protect even if homecould not be found.e.g. This should raise cannot return:	| b |	b := [ ^ 42 ].	[ [b value] ensure: [1] ] fork.	Processor yieldjust as this does:	| b |	b := [ ^ 42 ].	[ b value ] fork.	Processor yield' id '6b1f3f75-19bc-4453-be2f-bf7067898bbf' date '27 December 2014' time '5:07:03.498228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1001' message 'Mark externalInstVar:ofContext: as not to be inlined(otherwise it is inined into 64-bit primitiveSlotAtPut !!).Remove useless initPrimCalls from primitiveFloatAt[Put]and fix latter for potentially immediate receivers.Fix off-by-one slips in primitiveSlotAt[Put] and copy newcode down into StackInterpreter, with appropriatehandling of context receivers.typos' id 'fef56678-07b1-4fca-8300-17d6afc0c6e4' date '26 December 2014' time '5:11:01.45816352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1000' message 'Fix slip in primitiveImmediateAsInteger' id '68704c7c-954b-4a1c-bf46-c06bf4a54087' date '26 December 2014' time '2:01:03.608359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.999' message 'Spur:Fix argument count slips in three primitives.Check for sufficient memory in two-way become.All:Fix checking of boolean arg inprimitiveArrayBecomeOneWayCopyHash.Make primitiveSlotAt[Put] cope with non-pointerobjects.Sista: Simplify genGetNumBytesOf:into:' id 'b0fe8d34-046c-4ef4-8ca5-cdfe166c52fe' date '25 December 2014' time '5:56:02.721032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.998' message 'Fix printStackReferencesTo: for CoInterpreter.Similarly collapse printFrame: into StackInterpreteronly.  Declare as #undeclared CoInterpreter-specificindices in StackInterpreter.' id '20a6acb3-9a01-4219-b650-8966301ffe11' date '23 December 2014' time '9:31:00.934098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.997' message 'Replace primitiveCharacterValue withprimitiveImmediateAsInteger which providesSmallFloat64>>identityHash as well as Character>>asInteger.Refactor small float manipulations to introducesmallFloatBitsOf:.Provide printStackReferencesTo:.Fix slip in StackToRegisterMappingCogit>>genBinaryConstOpVarInlinePrimitive:Fix slip in shortPrint:.Simulator:Fix simulation of followForwardingPointersInStackZone:.' id '91767646-27b5-4e5b-9a0f-fc5fc4bdceb5' date '22 December 2014' time '1:13:03.655196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.996' message 'Change the pixel-touch-pixel prim to allow LPI arguments for the color values' id '7fe1e44f-8163-41e0-a7f7-4e4264c8790b' date '19 December 2014' time '5:37:00.03216352 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-cb.995' message 'Fixed a bug in inlined primitive sub (forgot to move to result register the result value).Now that I understood that ra means registerArgument and rr registerReceiver, rewrote trinaryInlinePrimitive to use correct names.' id '9e0e4367-220e-459a-807c-0878bfac2320' date '19 December 2014' time '11:39:01.691130816 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.994' message 'Fixed bugs in inlined primitive (I mixed some registers).Fixed bug with inlined primitive sub for cst - reg (inlined primitive code was doing reg - cst)' id '09c70d1c-d75e-4095-9205-dec6b5080db6' date '19 December 2014' time '11:31:00.745098112 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.993' message 'Added inlined primitive code for:byteNumBytepointerAt:byteAt:pointerAt:put:byteAt:put:Variable object inlined primitives are amazingly little because the optimizer ensures the rcvr and args types and range (including second arg range for byteAt:put:) and handles at bytecode level the instSize shifts.Generated assembly code looks ok but I didn''t run it. Can you review #genGetNumBytesOf:into: Eliot ? I am not sure how to rewrite that in a single instruction:	cogit AndCq: objectMemory formatMask R: destReg.	cogit AndCq: objectMemory wordSize - 1 R: destReg.I will now try to add code for inlined primitive < <= = ~=' id '94e6546c-43c8-4f3a-a18e-175e5dacd79e' date '19 December 2014' time '10:43:03.406196224 am' author 'cb' ancestors ((name 'VMMaker.oscog-eem.992' message '64-bit Spur:Correct a few comparisons and shifts in small floatcode to make comparisons in generated C correct.Move loadFloatOrInt: into the ObjectMemoryhierarchies to allow Spur64BitMemoryManagerto generate better code.Make printOopShortInner: small-float savvy.Make printHexnp: 64-bit aware.Can now interact with a 64-bit Spur image.' id 'bbbe8c5f-97d3-42fe-b068-76c6890a1733' date '18 December 2014' time '2:02:04.276098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.991' message 'The fetchLong32:ofFloatObject: indirection shouldne marked inline to avoid changing generatedsource too much.' id '368647af-b954-4bf5-a526-3f83badb3361' date '17 December 2014' time '2:15:02.538425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.990' message 'Fix bitInvert32 for 64-bits.  Now window bordercolours are correct in the 64-bit Spur Stack linux VM.Cast a left shift to long if in the 64-bit interpretercode.Fix printFreeListHeads' id 'f4a22308-891c-4542-b6a4-10fe174bc82a' date '17 December 2014' time '1:52:03.010392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.989' message 'Update the ScratchPlugin bilinear scaling prim to include the correct alpha channel value for non-transparent output pixels.' id 'bf75a0a2-413c-4995-b0cc-ec065e10a2f2' date '16 December 2014' time '2:59:01.459196224 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.988' message 'Fix isSmallFloatValue: for the low boundary case.Eliminate an obsolete type declaration.' id '76d73591-5a89-416d-b6f7-90cd2a89ffcb' date '15 December 2014' time '5:09:01.61316352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.987' message 'Fix generateIsIntegerObject:on:indent: for 64-bit Spur.Make primitiveFloatAt support immedate floats.Fix the regression of breakmnu (breakSelectorLengthmust be initialized early).Make shortPrintOop: primnt immediate floats.Fix the stack page size for 64-bits.Add boundary cases for isSmallFloatValue:' id '08aad1a5-4044-4aec-aecc-53c535ab4e34' date '15 December 2014' time '3:48:01.03732704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.986' message 'Spur:Eliminate the erroneous and confusingsetRawNumSlotsOf:to: and setOverflowNumSlotsOf:to:.Use rawNumSlotsOf:put: & rawOverflowSlotsOf:put:which match the getters.  Hence fix 64-bit compaction.Simulator:Don''t warn of MNU redirection in doits.' id '62703abf-bfd4-4966-a13c-036fa3da9950' date '15 December 2014' time '12:33:02.239261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.985' message 'Fix slip in unreachableMethods.Print first field of free chunks in printOop:if on Spur.' id 'f455e095-e61a-46a0-8994-c4bc33bb8a46' date '15 December 2014' time '9:40:01.100032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.984' message 'Hack fix generateIntegerObjectOf:on:indent: for 64 bits.' id '82523b67-016c-4327-b41e-658b54a99470' date '12 December 2014' time '8:11:00.848228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.983' message 'and to avoid including positiveMachineIntegerFor:et al in every plugin add a dead code removal pass.Fix unreachableMethods to do a proper tramsitiveclosure and answer methods instead of selectors.' id '4cdca841-6318-4c49-95de-8c47d0d7e91d' date '12 December 2014' time '5:04:01.337425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.982' message 'Provide accessors in InterpreterPlugin to answerinteger objects for positive and signed machinewords.Use these to make the ALien plugins 64-bit capable.' id '067c9e12-04dc-44f6-9888-d38d55e243f5' date '12 December 2014' time '3:47:04.146392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.981' message 'Eliminating warnings in B2DPlugin and theVMProfileLinuxSupportPlugin.' id 'ecd418ea-aea9-4e0c-8c48-e9a17117abc3' date '12 December 2014' time '10:40:02.814261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.980' message 'And fix the regression in generateShiftLeft:on:indent:' id '3d7d339f-6a22-4bd1-b959-cddf9c41cc60' date '11 December 2014' time '5:25:00.87032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.979' message 'Handle not in nilOrBooleanConstantReceiverOf:Don''t do the 32-bit swap in a 32-bit words object in64-bit Spur.  May have to do it in a 64-bit word objin 64-bit Spur, but it can wait.' id '6e5d060a-75ea-42ab-8dd3-ac3d7a550ed9' date '11 December 2014' time '5:14:01.654032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.978' message 'Generate the right casts for left shift beyond the intrange.Generate the right error code for negative argumentsto primitiveSizeInBytesOfInstance' id '1af5bc4f-0f74-4dcb-bebb-24e2d2265a05' date '11 December 2014' time '2:56:03.799425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.977' message 'Correctly translate cinstant arithmetic expressionsthat overflow the int range.' id 'd3b509f8-c6ef-45f4-869a-4aceb248830d' date '11 December 2014' time '12:03:03.58132704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.976' message 'The criterion for promoting a shifted constant tolong was wrong.  It needs to compare againstsizeof(int) (the default type) not sizeof(long).' id '52a3f72e-3ba1-4f89-997b-261fa38345c0' date '11 December 2014' time '11:11:01.996130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.975' message 'Fix 64-bit issues i BitBlt Drop MIDI and RE plugins.' id 'de22d941-0268-4e60-a8be-89a3a88aa567' date '10 December 2014' time '4:08:01.413294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.974' message 'Fix 64-bit issues in the AsynchFilePlugin.' id '7ca9044b-c2d1-4605-b2b6-2b8ffc66c096' date '10 December 2014' time '3:15:00.696065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.973' message 'Fix regression caused by breakmnu changes due to mis-initialization of breakSelectorLength.' id '1c182b73-874c-48f7-a4f4-61255efdc565' date '6 December 2014' time '5:31:00.297032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.972' message 'and let''s inline that puppy...' id '741005af-763d-4a93-918d-014972c404ef' date '6 December 2014' time '12:25:00.042065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.971' message 'Fix a devilishly tricky bug with 32-bit Spur and PICsin the Cogit.  In 32-bit Spur only zero is a valid cachetag, that for Characters, due to SmallIntegers havingboth 2r11 and 2r01 as valid tags.  The cache checkprolog collapses these down onto 1 by anding with1 and hence collapses Character''s 2r10 to 0.The cache tag is also tested in the PIC abort routineto distinguish between an MNU abort and an interpretabort.  A PIC MNU entry jumps to code that first zerosthe cache tag (held in ClassReg) before calling theabort routine, which tests ClassReg and selects therelevant abort processing.Hence in 32-bit Spur if a send site is linked forCharacter and later extended to a PIC with aninterpret case, that interpret case will instead invokeMNU processing.  This is rare; first there needs to be asend to a CHaracter, then a send to something elsewhich binds to something that must be interpreted.Ouch.The fix is simple; if a send site that was linked with azero cache tag (which can only happen in 32-bit Spur)link to an open PIC instead of to a closed PIC, or in thecase of an MNU do not link.Changes:Rename compilePICProlog:, mnuCall and interpretCall tothe more accurate compilePICAbort:, picMNUAbort andpicInterpretAbort.  Coment compilePICAbort: andcompileAbort. Name the zero valuepicAbortDiscriminatorValue to make the code morecomprehensible/browsable.Assert that the cache tag is not zero in ceCPICMiss:...Refactor cogMNUPICSelector:methodOperand:numArgs:to add receiver: parameter for the check for a zerocache tag.Eliminate some duplication introduced in early versionsof the ARM abort code.  Specifically lose sendMissCallmnuCall interpretCall & interpretLabel.Fix image load for Spur32BitMMLECoSimulator.Fix type regression in cogMethodOf: withcCoerceSimple:to:; CogClass''s version should bemarked <doNotGenerate>.Fix type warnings in primitiveCopyObject andprintStackCallStackOf:.' id 'ed756b25-4d7e-45a8-8a3b-c06199675128' date '6 December 2014' time '12:17:01.539098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.970' message 'Revert those two cases; they were already covered.' id '3869e39d-0172-4f38-9db5-cdca677eab92' date '5 December 2014' time '8:22:00.54932704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.969' message 'Two more cases where the mnu compilation breakpoint needs to be checked.Use numBytesOf: for length of selector.Rename checkValidInlineCacheTag: tovalidInlineCacheTag:.  Implement it in the right placein the obj rep hierarchy for Spur.Add a debug lookup routine that only looks up (and follows forwarding pointers).' id 'cdd723c1-bec0-42d5-970f-354702984955' date '5 December 2014' time '7:01:01.621196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.968' message 'Update configs to inlcude Squeak Spur Stack 64 VM' id 'ddef3ea8-2ea4-4fe4-98ac-de4698b42ab8' date '5 December 2014' time '3:04:01.764032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.967' message 'Extend the -breakmnu facilities to break oncreating MNU PIC entries, not just activating them.' id '546b1d7c-4cc7-4e0c-b2a3-4e2877fb821e' date '5 December 2014' time '3:00:02.918261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.966' message 'Add support for a -breakmnu vm argument that callswarning (or in the simulator, halts) on an mnu of aspecific selector.Update StackInterpreter''s class comment.Eliminate a type clash with getLongFromFile:swap:' id '46dd10c6-dc03-444c-bfa2-0f0b279c9b06' date '5 December 2014' time '12:15:01.205359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.965' message 'Fix in-image PC mapping testing.Add Spur64BitCoMemoryManager.Nuke the now obsolete withoutForwardingOn:and:sendToCogit:' id 'e8fc6a7f-6a04-4e57-a9f7-2ca56387d4d8' date '4 December 2014' time '6:29:00.26732704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.964' message 'Make the return type of safeObjectAfter: stable andconsistent with that of objectAfter:' id 'c27b9d18-c73d-48e3-a63a-3e4b3f14c7ab' date '4 December 2014' time '1:07:00.687392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.963' message 'Fix SmartSyntaxPlugin code generation for Spur of- asOop: old code assumed 4 byte oops & headers- Unsigned old code assumed 32-bit oopsFix Float class>>ccgCanConvertFrom: to use isFloatAvoid duplication of effort in special selector sendforwarding fault handling.' id '9df56221-18fd-4dcd-b93f-ae000bef62e5' date '4 December 2014' time '12:00:00.591294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.962' message 'Improve stack trace printing for Newspeak andGlue by providing something that assumes thepenultimate literal is the selector or anAdditionalMethodState-like thing containing it.Fix generation of 64-bit Spur VMs by addingtranslation support for timesRepeat:, by initializingBytesPerOop in SpurMemoryManager class, andby initializing is64BitVM in VMMaker.Add a configuration for the 64-bit Spur Stack VM.' id '7f55aa33-f2c1-4b7d-8456-5c2a33e4298b' date '3 December 2014' time '2:09:02.31032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.961' message 'Fix StackInterpreter>>isFloatObject: andprimitiveVMParameter to use isFloatInstance:.Fix simulation of primitiveSmallFloatTruncated.' id '005b79a9-dcf2-4df1-a959-696a1a5889d6' date '1 December 2014' time '6:25:01.44516352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.960' message 'Add some SmallFloat64 tests.Hence fix isSmallFloatValue: for simulation.' id '1b13b4c0-c9f8-4441-a0fa-08b7cd13a92a' date '1 December 2014' time '4:11:03.577294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.959' message 'Reimplement primitiveCopyObject to work for bothpointer and bits objects.  This to support a goodObject>>clone for Spur.Fix shortPrint: and simulated use of dbgFloatValueOf:,moving it to the ObjectMemory hierarchy.Fix Spur''s isWordsOrBytes[NonImm]:.' id 'e20df829-a81a-4af0-ab05-a80eb5730705' date '1 December 2014' time '2:34:02.753196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.958' message 'Fix simulation of sizeof: in InterpreterPlugins' id 'a63f2901-77e4-4db7-a6d2-16f121e54bac' date '1 December 2014' time '10:14:01.66332704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.957' message 'Fix regression in magnitude64BitIntegerFor:neg:Move dispdbg.h above cointerp.h & cogit.h in cogit.cotherwise NoDbgRegParms gets screwed up.Use asInteger instead of asUnsignedIntegerin followForwardingPointersInStackZone: sosimulation of Stack VM doesn''t trigger the assert inasUnsignedInteger.Spur:Make instantiateClass:indexableSize: check forFloat instantiation, failing for other than 2 words.Rewrite 32-bit coalesce:and: to use the raw slotaccessors.  Implement 64-bit coalesce:and:.Simulator:Make printStackCallStackOf: accept contexts.' id 'ac5f8308-02e5-4277-b28c-595b7a4cf34a' date '27 November 2014' time '3:39:02.955294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.956' message 'Make sure #ObjectMemory option is set ininitializationOptions if defaultObjectMemoryClass exists.' id 'c2eb8c1e-ed43-4316-80b4-781c57cf3f1e' date '24 November 2014' time '12:15:04.015032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.955' message 'Fix brain fade in primitive[SmallFloat]Truncated' id '19a7c0be-668e-42a6-8178-96235b5aafd1' date '24 November 2014' time '11:41:01.143228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.954' message 'Fix some warnings and some 64-bit issues with theThreadedFFIPlugin.  Comment the FFIPlugin as obsolete.' id 'b7f58c9d-3ec9-4d7f-b41e-45aac820f622' date '24 November 2014' time '11:05:04.238392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.953' message 'Implement SmallFloat primitives.Fix code generator to allow <option: #Spur64BitMemoryManager>Implement exponentOfSmallFloat:.Correctly define smallFloatExponentOffset.Fix smallFloatObjectOf: for simulation.Avoid cCode: ''... modf(...'' in two prims using self mod: f: instead.' id '62e5308c-b39a-464e-a2d5-ce7b6573d462' date '22 November 2014' time '1:10:04.019294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.952' message 'Implement SmallFloat/SmallDouble encode/decode.Rename isInstanceOfClassFloat: to isFloatInstance:Refactor floatObjectOf:, floatValueOf: andisFloatInstance: into the ObjectMemory hierarchies.' id 'c6647828-7baa-4c80-8f8f-1cfb627e2b84' date '21 November 2014' time '6:40:00.246 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.951' message 'Fix positive64BitIntegerFor: by fixing newgenerateSignedShiftRight:on:indent:.Symptom is LargePositiveInteger results fromprimGetPosition: for SmallInteger values.' id 'f669df37-8b1c-41de-b9ab-a6626a19f914' date '21 November 2014' time '6:14:03.98016352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.950' message 'Fix regression in new primitiveBitShift.Introduce >>> as an explicitly signed shift.64-bit ize magnitude64BitIntegerFor:neg:,positive64BitIntegerFor: & signed64BitIntegerFor:' id 'd4d2d679-fd90-48f5-a47a-ebae021776e7' date '21 November 2014' time '3:00:04.064425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.949' message 'Add the correct init code for the fast bitblt extensions (its in the plain interp but got left out of the cog code) and add a new bitblt prim to compare two forms for pixel color state; useful for sprite touches sprite type tests and very common in Scratch.' id 'f88be574-4771-44fb-a08e-f1312faaec73' date '20 November 2014' time '7:28:00.280359744 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.948' message 'Spur:Fix regression in primitiveNewWithArg fromVMMaker.oscog-eem.859 which caused basicNew:on fixed classes to raise OutOfMemory instead ofthe relevant error.Slang:Fix FilePluginSimulator>>fileValueOf: givenVMMaker.oscog-eem.946''s sizeof: changes.Use isFloat instead of class == Float in anticipationof SmallFloat.' id '9323b2ad-f5cf-4aca-8f31-67eb5616ccca' date '20 November 2014' time '6:37:04.284032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.947' message 'Add class side implementations of min/maxSmallIntegeras required for translation.Add a first cut at the primitiveSlotAt[Put] primitives.If asUnsignedLong needs an assert to check for> 0 then so does asUnsignedInteger.Spur:Have checkForAndFollowForwardedPrimitiveStatefollow other referencesin the frame if a forwarderis found on the stack.' id 'bfefff63-4592-4c2c-84d9-4d8753db03ba' date '20 November 2014' time '4:06:00.171392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.946' message 'Fix CArray>>at:put: for 64-bits.Implement sizeof: in InterpreterPlugin to handle SQFileand squeakFileOffsetType.  Nuke FilePluginSImulatorimplementation.Use numBytesOf: in signed32BitValueOf:.Fix 64-bit storeFloatAt:from:.Fix slip in 64-bit setFormatOf:to:Fix convertFloatsToPlatformOrder.Fix SmallInteger class>>ccgCanConvertFrom: for 64 bits.Simulator now starts up Spur 64-bit image, drawingentire display correctly.' id 'cdb491d7-dbc3-4758-82fb-f77bab8ce8d5' date '19 November 2014' time '10:51:04.007032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.945' message 'Fix new primitiveBitShift (primitiveFailed => primitiveFail).Fix integerObjectOfCharacterObject: for 64-bits.Add bitInvert64.Fix mem:mo:ve: for 64-bits.Fix error in reverseDisplayFrom:to:Use dsame leak checker for 64-bits as 32-bits.' id '8fea87e3-42d1-45d9-8f11-d49d0c9edccc' date '19 November 2014' time '9:49:00.80132704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.944' message 'Define areIntegers:and: for 64-bit Spur, and move itinto the ObjectMemory hierarchies.Add maxSmallInteger and minSmallInteger and matchingmanifest constants.  Use these in LargeIntegersPluginand Matrix2x3Plugin.' id '14ad71a2-117d-4a73-b041-efb833d79f01' date '19 November 2014' time '4:26:03.915032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.943' message 'Fix the code generator for 64-bit Spur integerValueOf:.Fix 64-bit integerValueOf: integerObjectOf: &isIntegerValue:.Use numBytesOf: instead of lengthOf: in the 64-bitinteger conversion routines.  Reorder cases inSpur''s numBytesOf: to put common case first.' id '3e35700d-2330-4eb4-96fb-22812be23140' date '19 November 2014' time '10:01:00.001392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.942' message '64-bit-ise access to method primitive numbers.Nuke obsolete ImmediateTagMask & SmallIntegerShiftconstants in VMSqueakV3ObjectRepresentationConstantsand remove its use in InterpreterPrimtiives and StackInterpreter.64-bit Spur now executes as far as the first bitShift:primitive, 161 bytecodes in.' id '0e7b390b-5dac-4ff1-84a3-55e02ad8de11' date '18 November 2014' time '6:45:00.339032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.941' message '64-bit-ise string printing and method header numArgsand numTemps access.' id '729c5ae6-4737-4218-905d-063cc7afb645' date '18 November 2014' time '6:13:02.18716352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.940' message 'Make setHashBitsOf:to: work for 64 as well as 32 bits.' id '425ce64c-828e-4ddf-adc5-201f2469cce5' date '18 November 2014' time '4:58:01.667098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.939' message 'Add access and convenience methods so Spur 32- to64-bit bootsatrap does not have to clone objStacks.' id 'd8fdd96e-da44-4baf-a81a-d4a489ba76c7' date '18 November 2014' time '4:07:01.542 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.938' message 'Rewrite image save to match the recent 64-bit imageload changes.Nuke obsolete storeHeaderOnFile:bytesPerWord: andassorted detritus.' id '6b72ed8b-d485-4ffe-a710-f207bd7141f0' date '18 November 2014' time '2:32:01.486065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.937' message 'Rewrite writeImageFileIO[Simulation] to support 32 and64 bits.  Nuke memory simulator putLong/Short:toFile:''s.Comment typos and recategorizations.' id '93c76c68-ea84-4009-b9b8-7e919ae306a0' date '18 November 2014' time '11:24:03.830359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.936' message 'Add Spur64BitMMLESimulator, fleshing it out fromSpur32BitMMLESimulator.Implement allocateSlots:format:classIndex: inSpur32BitMemoryManager and Spur64BitMemoryManager.Make the superclass implementatiuon a subclassResponsibility.Delete the simulator isIntegerObject:''s that check forrewritten clients.  They have served their purpose.Nuke the obsolete longLongAt:[put:].Make positive64BitValueOf: always answer a value.Move the cogitClass implementations up into VMClass.' id 'e52558f4-f06e-4d8b-8e7a-ee476528106b' date '17 November 2014' time '8:44:01.473261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.935' message 'Restore the Spur initialization of BaseHeaderSize,which is still needed for correct C generation.Provide a 64-bit memory printing routine fordebugging precisely this issue ;-)' id 'e1096b9f-e01b-4709-b369-18563b884832' date '15 November 2014' time '11:44:00.61432704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.934' message 'And remember to generate the GdbARMPlugin' id '5e8d814f-34c9-4966-a0c3-4d424bfe1b80' date '14 November 2014' time '12:54:00.830392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.933' message 'And more of the same...' id '5a37067c-b76b-4ada-9399-1de11632acd8' date '14 November 2014' time '12:17:03.485359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.932' message 'Deal with collateral damage from the friendly fire ofVMMaker.oscog-eem.931.' id '64910734-a74a-4e9b-8357-68ee708d8318' date '14 November 2014' time '11:42:01.179065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.931' message 'Yet more tweaking to get the same inlining behaviouras before the constant to send putch for ShiftForWord.Refactor mostBasicConstantSelectors etc into theclass side of VMBasicConstants.' id '13d1914a-98dc-4d3a-8e80-ec9ce100239b' date '14 November 2014' time '11:34:03.758032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.930' message 'Fix some bugs in V3 given the new handling of codegen for bytesPerOop et al.' id '050e5e3c-ef02-46ae-b867-db538668688e' date '14 November 2014' time '10:29:04.194294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.929' message 'More tweaking to get the same inlining behaviour asbefore the constant to send putch for ShiftForWord.' id '03ec1944-f1e5-4f50-a4b7-7a73a8d9b42f' date '13 November 2014' time '7:39:04.013359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.928' message 'Mark expandDereferenceInterpreterProxyFunctionTableas doNotGenerate and fix its comment.' id 'b54d1270-d8e4-42a0-b861-481cd83ac1a3' date '13 November 2014' time '4:46:01.648196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.927' message 'Fix slip in Newspeak plugin list, AioPlugin = UnixAioPlugin.Add check to validation.' id '1d35bd51-8903-4f30-b934-cbf44b739956' date '13 November 2014' time '4:21:01.012392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.926' message 'Make buildCaseStmt:in: look for code in all the right places' id '9c0b0c9e-ba3b-4f54-bdf1-d9c1c18af828' date '13 November 2014' time '3:52:04.064392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.925' message 'Fix recursive def of ObjectMemory>>wordSize andcomment the relevant implementations.' id '78aa3501-bb68-484a-967e-8315ecc0165d' date '13 November 2014' time '3:26:01.528261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.924' message 'Simulator/Slang:Refactor to allow 32-bit and 64-bit Spur to coexistin the simulator, thereby allowing a 64-bit bootstrap.Replace direct use of BytesPerWord, ShiftForWord,BytesPerOop, and BaseHeaderSize with sends ofwordSize, shiftForWord, bytesPerOop andbaseHeaderSize respectively.Make sure these are still output as the manifestconstants in the generated C.  Eliminate use ofbytesPerSlot in favour of bytesPerOop.  The use ofsends is similar to those in trunk VMMaker, but Idon''t have time to merge.  Sorry :-(.Work-around use of sends for bytesPerOop in e.g.generateToByDo:on:indent: and users ofisConstantNode:valueInto:.Do a better job at inlining viainlineCodeOrNilForStatement:in:.  Comment inisNode:substitutableFor:inMethod:in: explains.Eliminate generic VM_LABEL support, labelling onlythe bytecodes in interpret.Eliminate use of LargeContextSize in the stack andcog VMs.  Alas haven''t yet eliminated the frameoffset constants such as FoxCallerSavedIP et al.We only need one of the two word sizes ofinterpreter to be executable in the bootstrap.' id '911b0856-1686-43f8-b8cf-275a4dfd4968' date '13 November 2014' time '2:16:00.266261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.923' message 'Back out of Ryan''s recent absent receiver changes,while accumulating the other recent fixes.  There''ssome incompatibility with the working classesmachinery at Cadence and Ryan''s recent changeswhich we don''t have time to resolve right now.The kept changes are:Fix asserts in addFreeSubTree: & addToFreeTree:bytes:.Fix possible forwarding of the receiver in implicitreceiver sends.Eliminate some compiler warnings in the refactoredinstVar:ofContext: changes.' id 'b4a88a08-47d9-4173-9d8d-a2c11886c5fb' date '4 November 2014' time '4:45:03.148261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.918' message 'and include wchar.h in the interpreter for wint_t (Spurimmediate character printing), sicne stddef doesn''talways define it (on linux of course; elsewhere itseems to be present).' id '17402dc7-cd8d-4656-8ec9-a74c22c85ac8' date '2 November 2014' time '7:42:00.510228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.917' message 'Fix bad bug in callPrimitiveBytecode.  Old codeskipped past next bytecode.  This broke codedepending on ContextPart>>restart, such as Exception>>retry.' id '01a47aaa-5fab-45fc-ada3-3c26b0d51edd' date '2 November 2014' time '7:38:02.931032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.916' message 'Spur:Reimplement deriving the accessorDepth and retryingprimitives on primitive failure machinery.  Always takethe primitive index from newMethod (setting newMethodto a SmallInteger for primitiveDoPrimitiveWithArgs.Have the Cogit always set primitiveFunctionPointer andnewMethod for the retry,Add isNonInteger(Non)Immediate: and use it in several ofthe integer conversion routines that were missing codeto exclude Character immediates, with fatal consequences.With these changes the Pharo 4 test suite runs withoutcrashing on the latest Pharo Spur boot image.' id '79925bdf-769f-446f-8532-f04f0e2f11ae' date '31 October 2014' time '12:03:00.167098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.915' message 'Fix processWeakSurvivor: so that it answerswhether a weak object refers to a young object. The old version only scanned weak fields, igoringrefs to young objs from strong fields.Move check for valid classes from findClassOfMethod:forReceiver: into  findClassContainingMethod:startingAt:,hence making findClassOfMethod:forReceiver: et al morerobust.' id '4159cf52-4807-4416-9da6-1c46ec5b9f10' date '30 October 2014' time '5:02:00.63416352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.914' message 'Spur:Implement safe access to contexts and methods whencreating image segments (since internally marriedcontexts and jitted methods have hidden stateencoded in odd ways).As a result:Fix baaad bug in SpurMemoryManager>>lastPointerOf:for contexts, caused by transcription from(New)ObjectMemory where the method works on awing and a prayer because	BaseHeaderSize = BytesPerOop.And I can''t be arsed to fix it.  It''s, cough, grody code.Refactor decoding of context instruction pointers sothere is only one copy of the code.Fix baaad bug in accessibleObjectAfter: and add anassert to primitiveNextObject to catch similar bugs.Can now enumerate objects in new space, which willsort-of work, but code should really use allObjects.Will fix at the image level as time allows.Eliminate isInSurvivorSpace: in favour of the identicalisInPastSpace:.All:Fix the comments in loadImageSegmentFrom:outPointers:;the array is not truncated to zero length; it retainsits version info.Fix storeShort16:ofObject:withValue: to acceptnegative values.' id 'bda96e1c-f22e-4b32-9ee1-620740e1fec5' date '29 October 2014' time '4:46:00.778425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.913' message 'Fix baaaad bug in checking for still-married contexts inSpur.  One *cannot* simply follow what is assumed tobe the frameContext field of what is presumed to bea context.  On Spur we need to *know* whether wehave a valid frameContext field, and for that we haveto know there is a valid frame.  So refactor, movingisFrame:onPage: from StackInterpreterPrimitives toStackInterpreter, and use it to validate the framepointer of a maybe married context before testingthe context for being forwarded.' id '236b8f3e-0ff4-4a68-baf9-e3fc62b97da7' date '24 October 2014' time '3:48:03.341 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.912' message 'Fix another assert fail case in ceInterpretMethodFromPIC:receiver:' id 'd8b9d04a-adc6-44f8-b460-225d5ab73f6c' date '24 October 2014' time '1:36:02.004065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.911' message 'Avoid cogging methods containing unknown bytecodesearly in scanMethod.  Use a hack to avoid a test on thecommon path.Fix the return type of implicitReceiverCacheAddressAt:.' id '39c7bff8-ff88-43a5-88bc-cbbdb206cbcd' date '24 October 2014' time '11:44:01.467032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.910' message 'And fix an oopsie.  thanks Bob!' id '5b3b6e58-f2cf-46c5-9ce3-13eeae644df4' date '23 October 2014' time '5:41:01.676261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.909' message 'Oops, markStack pop order is LIFO.  Explicitly putthe roots array first in the reachable objects arraythat populates a segment.  The testImageSegmentsShouldBeWritableToaFile test nowsucceeds and the system stays alive.' id '0d4fb242-44a2-408b-bc90-a737cfdd364d' date '23 October 2014' time '5:31:01.23932704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.908' message 'Refactor the Spur image segment code into smallermethods.  Collect the classes in a segment at thestart of the seg, immediately following the root obj,to ease postponing adding cxlasses in th seg to theclass table until after validation.  Byte swap imagesegments in the load primitive if required, as isexpected by the ImageSegment code.Print slots of word objects in longPrintOop:' id 'e256ea16-b97f-485e-a32f-49d4254845be' date '23 October 2014' time '12:11:01.219098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.907' message 'Eliminate some translation-time warnings' id '1d1ad3df-9d81-4278-95fd-a11857f7a60d' date '21 October 2014' time '7:05:00.842 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.906' message 'Spur:Implement image segments.  Use Igor''s idea ofsplitting the computation of the transitive closurefrom the writing of the image segment for simplicity,even if the two are rolled together into a singleprimitive for backwards-compatibility.Status is that raw use of the primtiives works, but use in the context of ImageSegmentTest failsapparently because something somewhere changesthe version stamp at teh start of a segment.  Anyclues appreciated.Rename markAccessibleObjects tomarkAccessibleObjectsAndFireEphemerons,rename markObjects to markObjects: flag, whereflag is true if objects are known to be unmarkedbefore hand.Move expungeDuplicateAndUnmarkedClasses: andnilUnmarkedWeaklingSlots into markObjects: fromglobalGarbageCollect.  This is all to ensure that themark phase of the storeImageSegment prim doesprocess weaklings fully before computing thetransitive closure.Extend the object shortening code to include wordobjects (for the image segment arrays) and makethem deal with new space objects as well as oldspace objects.  Have freeObject: attempt tocoalesce to avoid fragmenting the largest freechunk all the time it is used for scratch storage).Nuke the abortive attempt to implement the Spurimage segment code similarly to the V3 code.Simplify isHiddenObj: for leak checking to toleratemore punned scratch objects in new space.  Adda flag to checkForLeaks to specifically check forleaks around the segment prims.Change readableFormat: so that on Spur there is asyet no acceptable compatibility version.All:Rewrite the two primitives to pass back an errorcode on failure, and rewrite the (New)ObjectMemorycode to answer informative failure codes.Make findClassContainingMethod:startingAt: et alrobust in the face of faulted-out classes (nil methoddictionaries).' id 'aaa9ffc5-3dc3-455d-b550-92988ab90a8d' date '21 October 2014' time '6:20:00.635 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.905' message 'No longer parenthesize BaseHeaderSize (and soonBytesPerOop and BytesPerWord) for upcoming 64-bitchanges.Fix parenthesization bugs in validation code in someAlien plugin primtiives.' id '1950998d-1b02-4101-b5ca-17c00dd41e86' date '18 October 2014' time '11:48:04.111 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.904' message 'Include the AioPlugin in the Newspeak VMs; recentreports indicate it''s essential to good performancein recent versions of OSProcessPlugin.A little more progress on the Spur image segmentprms.' id '6754ddfb-7fdd-46ea-9823-4e32b4454d70' date '16 October 2014' time '1:38:02.863065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.903' message 'And follow in enclosingObjectAt:withObject:withMixin:' id '9ce090a8-4af5-4298-8b32-3b5a832a1c06' date '14 October 2014' time '12:48:01.259228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.902' message 'Rewrite implicit receiver lookup logic to follow andfix up forwarding pointers.  Fixes occasional failuresto locate correct implicit receiver which manifest asMNUs.Fix SimpleStackBasedCogit by markingSpur''s addressCouldBeOop: <api>' id 'e97518bb-4f81-470b-9557-6beed90a223c' date '14 October 2014' time '12:26:00.300196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.901' message 'Rename hiddenRootsObj: to setHiddenRootsObj: forclang.' id '08ffab52-343a-41c4-a367-493bbc4d3eaa' date '14 October 2014' time '8:30:03.20432704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.900' message 'Change a couple of between:and:''s that should beoop:isGreaterThanOrEqualTo: andLessThan:''s' id '3d11cf21-4f5f-406a-85ae-ccbc786612a0' date '13 October 2014' time '4:27:01.705261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.899' message 'Fix signed/unsigned comparisons with freeStart in V3.' id '494bc6dc-a8af-4d43-8858-7abf9968b9b4' date '13 October 2014' time '4:17:00.31832704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.898' message 'Assert for empty remap buffer means Spur''saccessor needs to be defined as a macro.' id 'c7464fab-57af-4c31-955e-20f718082965' date '13 October 2014' time '2:31:00.65332704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.897' message 'Fix old V3 NewObjectMemory bug in fullGC.sweepPhaseForFullGC failed to update freeStartat the end of its sweep which could leave a partial object between the last object and freeStart,causing subsequent crashes in enumeration.This fixes an occasional crash in muO''s releaseprocess: MuODeployer makeImageReleaseAlways initialize the DisownVM constants inCoInterpreterMT to ensure that the defines insrc.vm/interp.h are non-nil.Smulator:get validate and validate: right.' id 'fcc5e4e2-808e-4ab1-97ae-079cc4b9d7b8' date '13 October 2014' time '1:25:02.635 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.896' message 'Use the lemming technique for debugging theV3 memory manager.  Fix v3 validation andsimulated leak checking under NewObjectMemory.Fix simulation of asOop: for Boolean and Float.' id '6a341edb-bba5-473e-86ec-adc3ff98f21d' date '11 October 2014' time '2:59:03.653032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.895' message 'Compile the NewspeakV4 bytecodeextPushPseudoVariableOrOuter frameless whenpushing nil, true, false.  This means the scanMethodand scanBlock: implementations must maintain extAand extB.Provide a simulation-only allCogMethodsFor: thatyields block methods within a Cog method, for testing.' id '2c674935-8b94-45ff-b8fc-59fb78830eb3' date '8 October 2014' time '11:43:02.044261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.894' message 'Rename "explicit outer" foo to "enclosing object" foo' id '7417a203-5178-46d0-951c-b3dd1487a267' date '7 October 2014' time '11:20:03.404228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.893' message 'Further work to rescue the SimpleStackBasedCogit.' id '1db16930-a6b8-419b-bedc-83dfe3c6f277' date '7 October 2014' time '10:40:00.784261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.892' message 'Stop addMethodFor:selector: from removing methodsunless a doNotGenerate overrides a superclassimplementation.  Make isInlineableConditional:in: useanyMethodNamed:.  This rescues #numRegArgs usagein the CoInterpreter with SimpleStackBasedCogit.' id '8054d05d-3157-4dd0-b7d6-82df62e46ae2' date '6 October 2014' time '5:20:01.137294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.891' message 'Fix compilatiom of v3 VMs (fix v3 pinObject: type).Fix Squeak V3 checkValidInlineCacheTag:(SmallInteger 0 is a valid cache tag).' id '2b1ec85c-bd1d-4299-938a-80aef455e476' date '5 October 2014' time '2:34:04.160294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.890' message 'Spur:Fix one-way become for classes with and withoutcopyHash, primarily by fixing allInstances.  One-waybecome for classes causes duplicates in the classtable (either that or an allInstances scan would beneeded as part of the become to change instancesreferring to the deleted class index, which would bevery slow).  So allInstances must be able to copewith duplicates.  Hence split it into a fast pathcommon case when the class in question is notduplicated, and a slower path when it is.  Make boththe marking phase of GC and allInstances check forand eliminate refereces to duplicate entries atwrong/obsolete class indices.Fix markAndShouldScan: to not scan the pun classesof non-objects on the heap such as implicit receivercaches and Sista counters.Eliminate the classTableBitmap prematureoptimization.  All the information we need is in thecassTable and the class''s hashes therein.Document the failure return ofallocateSlotsInOldSpace:bytes:format:classIndex:Change pinObject: to answer 0 on failure and the(possibly moved) object on success.  Much easierthan having to check and follow forwarding pointer.Simulator:Eliminate the halt in Spur globalGarbageCollect,the lemming approach raising an error in the copybeing much more useful.Fix FakeStdinStream and FilePluginSimulator>>sqFile:Read:Into:At: for buffer sizes > 1.misc:fix some C compilation warnings' id '4cec861e-a7df-45b3-8298-ecb127ee6703' date '3 October 2014' time '9:20:01.087228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.889' message 'Fix the assert fail caused by a frameless method withan unaccessed temp.  Move the assert check togenPushTemporaryVariable:.' id 'f7ca0f83-4116-4c07-8307-3c23f8f5600a' date '30 September 2014' time '3:29:04.122065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.888' message 'Fix bug in Cogit>>lookup:for:methodAndErrorSelectorInto:which if cogging a metod found through an MNUwould set the cog method''s selector to the originalselector that was not understood instead of#doesNotUnderstand:.' id 'e58fb0f2-df49-4ac0-8e84-48499470b5f6' date '30 September 2014' time '9:59:03.281196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.887' message 'Install the callPrimitiveBytecode in the Interpreter''sbytecodeDispatchTable on Spur.Modify callPrimitiveBytecode to not invokeunknownBytecode processing if at the first bytecodeof a primitive method.Correct sign comparison of instructionPointer injustActivateNewMethod.Relax the validInstructionPointer:inMethod:framePointer:assert to accept any pc in initialPC to self size rangenow that callPrimitiveBytecode is more forgiving.Speed up primitiveMarkUnwindMethod &primitiveMarkHandlerMethod in the StackInterpreter bysetting them to 0 in the primitive table.' id 'f980d45a-5622-46f6-95d9-ac8d00a34e81' date '29 September 2014' time '6:09:03.232228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.885' message 'Fix regression in youngReferrers management inV3 become introduced in VMMaker.oscog-eem.882.We /must/ priune young referrers ifmapObjectReferencesInMachineCodeForBecomeremoves a cog method from youngReferrers becauseit may get added back and youngReferrers cannotcontain duplicates.Fix potential bug in Spur become argument validation.Check for immediates needs to come /after/following forwarders since an object canbecome-forward to an immediate.Fix cPICHasForwardedClass:; this did /not/enumerate the classIndices in a Spur Closed PIC.Fix codeGeneratorToComputeAccessorDepth.  Iwent to all that trouble in VMMaker.oscog-eem.873to not rely on cogitClass et al but forgot to changethe operative case.' id '292f0a8d-0afa-4943-90fd-be53fb40772a' date '25 September 2014' time '3:34:00.716098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.884' message 'Straggler now uses the revised classTableEntriesDo:' id '964a6c98-a49a-441b-8030-3e4d869efe22' date '25 September 2014' time '10:20:02.867130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.883' message 'Spur:Change become to flush method caches forbecommed classes.I''m not sure this is necessary but strangely the newcode is faster than 882 for the Newspeak bootstrap.So I''m committing this to allow me to compare thetwo.Changes are to- add a BecameActiveClassFlag to becomeEffectsFlags- refuse to do an in-place become on active classes.- flush the caches before the post-become scan ofthe class table so that forwarded classes can bespotted.  i.e. if a class index in a method cache is thatof a forwarded class then it was becommed and thecache entry can be voided.' id 'a585d66e-f0cd-42cd-ad84-5cc861a20f9e' date '24 September 2014' time '6:34:03.511294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.882' message 'Spur:Fix bug in sweepToFollowForwardersForPigCompactwhich failed to update and answer lowest forwarder.Fixes numForwarders == 0 assert failures.Fix bug with become and class table not removingclasses which become causes them to be unhashed.Fix bogus assert fail in synchronousSignal:. Refactorfollowing code into ensureSemaphoreForwardedThroughContext:and fix the assert there-in.Use rawOverflowSlotsOf: in bytesInObject:.Make a little more progress on Spur image segmentsupport.  Provide a classTableEntriesDo: and use itto compute an arrayOfUnmarkedClasses.Cogit:Make sure voidImplicitReceiverCacheAt: setscodeModified if IRCs are inline.Make sure freeMethod: clears cmRefersToYoungFix assert in cogitPostGCAction: that would fireerroneously in Spur become.Nuke some unneeded pruneYoungReferrers calls.Factor-out send-site unlinking intounlinkSendAt:targetMethod:sendTable:Comment CogMethodZone.Sista:Rename ceClassTrap: et al to ceSistaTrap: giventhat Sista may trap in more cases than just unknownclasses.Renumber the primitives in StackInterpreter>>callPrimitiveBytecode. (bring them up-to-date)' id 'f22a00ff-acaf-49b0-9f6d-44efec689c0d' date '24 September 2014' time '6:12:01.305228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.881' message 'Fix some conflicting return types.  Add debug hook toinferReturnTypeFromReturnsIn: to do so.' id '539d444b-dd24-4254-a007-bd1e298e84f7' date '13 September 2014' time '4:51:00.093196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.880' message 'Move evaluation of Cogit primitive desacriptor enabledfunction from initialization to just-in-time, and add enablerson SmallInteger primitives to ensure they are applied onlyto SmallInteger receivers (falling back to interpreter prims ifnot).  Hence fix Cog for 4.1 (e.g. MuO) images.Declare primitiveTable as static since the change localizes it.Add more of the potential Spur image segment implementation.Fix a cast in the simulator.' id '4aeaa3e0-8c6b-44b4-a124-128870605261' date '13 September 2014' time '4:07:02.27632704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.879' message 'Back out of saneMethodClassAssociation assert ininitialPCForHeader:method:.  Newspeak falls foul of this.' id '44c718be-2a51-4e7e-9553-5def29daaade' date '12 September 2014' time '5:11:02.340196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.878' message 'Make sure that the method is set on returning from a callback.' id '4165e5c9-05a2-4795-9295-8b309fa52e2d' date '12 September 2014' time '12:35:01.32516352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.877' message 'Simulator:Allow one to specify a break block for theStackInterpreterSimulator.Fix sizeof: for squeakFileOffsetType.' id 'db2baa66-7729-434c-891f-b5acb1002b7b' date '10 September 2014' time '7:58:01.558 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.876' message 'The option for Spur is SpurObjectMemory, notSpurMemoryManager.' id '85989927-97e3-4111-a351-b242bf444291' date '8 September 2014' time '3:09:01.402130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.875' message 'Cogit class and CogObjectRepresentation class also need toimplement cogitClass.' id '79a4ffdf-9e0f-4b5c-9336-0af5d0eb447b' date '8 September 2014' time '2:42:03.306130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.874' message 'Slang:Further clean-up and fix of regression with optionsprocessing.  Make sure the Cogit is added to options.Eliminate the cogitClassName from the VMMaker.' id '8a6f15e2-ae6d-48ef-a502-75f0973938b5' date '8 September 2014' time '2:06:00.436228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.873' message 'Slang:Base the computation of what''s in the primitiveTable on theinterpreterClass, not on StackInterpreter.Rewrite CCodeGenerator>>shouldIncludeMethodFor:selector:to ask the methodClass for the cogClass, interpreterClassand objectMemoryCLass, instead of assuming there''s a vmMaker on hand.  These classes can be computed fromthe class inst var initializationOptions, and hence be availableeven at run-time when Spur is computing accessor depths.Recategorize these methods.Drop CoInterpreter''s CogitClass class var and a fewmethods as a result.Clean up the class hierarchuy computations in VMMaker''sbuildCodeGeneratorFor... methods.Harmonize RiscOSVMMaker & VMMaker''s time stamp calculation.' id 'b4a15623-1d81-4824-87e9-d081a7c73331' date '8 September 2014' time '11:36:03.260098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.872' message 'And make sure CoInterpreterMT includes its own primitives.' id '976a2fb3-3e7e-472c-836f-eb6b91ebe26a' date '6 September 2014' time '11:27:02.916261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.871' message 'Base declaration of primitiveTable on vmClass, notimplementor of declareCVarsIn:' id '55559e8e-a9ae-4560-b462-1c3bcbad7852' date '6 September 2014' time '11:11:03.738032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.870' message 'Fix bad regression in FilePlugin>>primitiveFileSetPositionthat breaks > 1Gb file access.Trim printing of large literals in CogMethod disassembly.' id 'aa732da6-bba7-4906-b822-6dfd7f4e1bc7' date '5 September 2014' time '10:05:03.768065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.869' message 'Change the callPrimitive bytecode indices based onthe latest BytecodeSets spec for EncoderForSistaV1' id 'e7410d5a-8fac-4a96-a888-7881e9e015de' date '28 August 2014' time '4:33:04.195098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.868' message 'Rescue in-image compilation for V3' id '14a9feae-9641-497b-afe9-190e47fd6e37' date '28 August 2014' time '9:25:00.40316352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.867' message 'Make SpurBootstrap more debuggable by short-cuttingstoreOn: in VMMethiodProxy which was trying to serialize anentire simulator when asked to answer the storeString ofa selector literal in a proxy CompiledMethod.' id 'cc1cfd85-364f-4e96-8244-aadf3c1f8182' date '27 August 2014' time '2:56:01.394294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.866' message 'Define the SmallFloat primitive numbers for 64-bit Spur.Have Slang and the simulators elide primitives that areunimplemented or optional and not selected from theprimitive table.Sista:Fix slip in genBinaryVarOpVarInlinePrimitive: reg alloc.Implement numSLots in genUnaryInlinePrimitive:.' id '5b1723bd-9d29-4685-be23-7816f5af9822' date '27 August 2014' time '10:58:01.047425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.865' message 'Fix a simulation only method by marking it <doNotGenerate>.' id '4efffc12-280e-4060-b741-9066fb3fc970' date '26 August 2014' time '9:33:03.709359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.864' message 'Sista:Fix primitiveSistaMethodPICAndCounterData after theVMMaker.oscog-eem.814 change moving counters tothe heap.  Add several modifications to the current imagefacade so we can get the send and branch data for anin-image compilation.  Fix header printing of counters andIR caches.Implement genBinaryConstOpVarInlinePrimitive: &genBinaryVarOpConstInlinePrimitive: and correctgenBinaryVarOpVarInlinePrimitive: for Slang.V3:Fix bug with become where duplicate entries in the inputarray would crash the system (thanks Igor).' id '6a9b157d-24d8-47eb-bbc0-0a467b390e26' date '26 August 2014' time '9:28:02.999228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.863' message 'Add an assert to check for a valid mehtodClassAssociationin methods (arguably dubious) to help catch malformedmethods in multiple bytecode shenannigans.Reduce the possibility for heisenbugs by providingnoFixupFollowField:ofObject: and using it in debugging code.' id '379b797e-e115-4d63-b667-6d17ce3230d9' date '23 August 2014' time '5:10:03.442261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.862' message 'Make nameOfClass: more robust, in both the real andsimulated VMs.Add a documentation method for the structure of aCogMethod.' id '34b8f089-7da3-4c40-9996-2d2611fe5111' date '21 August 2014' time '8:14:01.395 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.861' message 'Spur:Fix the bootstrap by initializing the become effects flagsconstants in SpurMemMgr class>>initializePut the stack accessors in their own category to simplifyinferring isStackAccessor: when computing primitiveaccessor depths.Simulator:Add support for counting full lookups.Fix the short-cut trampolines for the tracing routines; theyweren''t brought forward when trampolines were changed.' id 'fab1298a-2969-4281-816e-0733d5d11443' date '19 August 2014' time '2:22:02.411 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.860' message 'Use objectMemory bytesPerOop instead of BytesPerOopin primitiveNewMethod.Eliminate double negatives translating ifFalse: (for primErrorCode).' id '8d8013d8-d7e1-4dd8-b1fa-a83723e2d31a' date '13 August 2014' time '6:22:01.882392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.859' message 'Spur:Fix system crash on using basicNew: on CompiledMethod.Have instantiateClass:indexableSize: refuse to instantiate aCompiledMethod, and add instantiateCompiledMethodClass:indexableSize:.Get the error code right for primitiveNew et al.' id 'afaa1544-1a80-43c3-b9b8-575978540d13' date '12 August 2014' time '8:12:01.850425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.856' message 'Hmmm... heapBase needs to be a macro, but hwo did it ever work before?' id '54d2ae8c-9eb0-4f03-9be9-0862764f0035' date '12 August 2014' time '3:47:02.009425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.855' message 'Spur bootstrap support/simulation:Tolerate a nil displayForm in the simulators.Add a couple of missing methods.' id '23b3416e-7a63-4ddf-ae9b-66921eb7eb10' date '12 August 2014' time '3:09:00.79832704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.854' message 'Retract the setHashBits: assert check for classes; a Processfooled addressCouldBeClassObj: so the assert isn''t selectiveenough.Add some support for the munger.Modify simulated ioScreenSize to answer savedWindowSizeif displayForm is nil.' id '22ed2e38-a5ed-446a-9695-cf5ec7ec4d36' date '9 August 2014' time '8:59:02.209294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.853' message 'Fix numSlotsForBytes: for simulation.Provide compiledMethodFormatForNumBytes: for munger.' id '8c3cd406-d31e-43d2-b69d-b8ef74b556dc' date '9 August 2014' time '2:10:00.955294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.852' message 'The setHashBitsOf:to: needs to use noCheckClassIndexAt:' id 'b67d56c1-40f1-4532-9cd6-c3636d52b013' date '9 August 2014' time '11:39:04.080098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.851' message 'Provide SpurMemoryManager>>isCompiledMethodFormat:for bootstrap.Fix NewspeakV3 on Spur:Replace genPushExplicitOuterReceiverBytecode withcallPrimitiveBytecode in NewspeakV4 table on Spur.methodHeaderOf: needs to be <api> for cogits.Fix return in validInstructionPointer:inMethod:framePointer:for MULTIPLEBYTECODESETS' id '54313625-56b1-41ea-87f9-088d0e9903f0' date '9 August 2014' time '10:40:01.597294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.850' message 'Fix some simulation bugs with the Cogit in running the newformat Spur images.Alter the SqueakV3 Cogit bytecode table initializers to addthe callPrimitiveBytecode: at 139 if in a Spur VM.Hack the dependency on BytecodeSets forstackDeltaForPrimitive:in: to be soft via an MNU handler.Update the prim numbers for inlined prims ingenCallPrimitiveBytecode to match the latestEncoderForSistaV1 class comment.' id '9781942b-089b-4bea-b70c-ea9394fae3b4' date '8 August 2014' time '8:00:02.102098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.849' message 'Convert Spur to use only the alternate CompiledMethodheader format (65536 literals, primitive in a bytecode).3+4 evaluated in the simulator. Moved literal count methods from StackInterpreterhierarchy to ObjectMemories.Rename headerOf: to methodHeaderOf: &literalCountOfHeader: to literalCountOfMethodHeader:Abstract out lastPointerOfMethodHeader:Cogits:Fix offset of first special selector send not to presumeSqueakV3 and/or NewspeakV4.Move guts of availableRegisterOrNi into the backEndallowing different ISAs to answer more registers.Psrtially implement genCallPrimitiveBytecode.Flesh out some of genBinaryVarOpVarInlinePrimitive: forthe Sista inline primitive code.  But the primitive numbersstill need reassigning.Slang:Collapse CoInterpreter and CoInterpreterMT''s headergeneration so interp.h is stable.' id '40f41a86-320e-4b77-b526-104a01f8adf0' date '8 August 2014' time '6:09:02.695228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.848' message 'if at first you don''t succeed...try to get the criterion for header regeneration right again...' id '2aa6755a-a96a-4834-bc08-5c0a831c4648' date '7 August 2014' time '8:10:03.017392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.847' message 'Fix the header rewrite filter so that interp.h doesn''t getendlessly regenerated, reducing recompilations.' id 'c9c7ffd4-9899-43f5-b566-ab69319636b9' date '7 August 2014' time '7:48:03.403130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.846' message 'Sista:Implement ceClassTrap.Fix argument access in inlinePrimitiveBytecode:.  RefactorprimitiveQuo to share code with inlinePrimitiveBytecode:.Fix argument type of branches and its allocain genExtTrapIfNotInstanceOfBehaviorsBytecode.Provide a dummy genCallPrimitiveBytecode for now.Fix comment typos and miscategorizations.' id '9e73d37e-0e43-4238-b471-c1c27d605caf' date '7 August 2014' time '7:14:01.707294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.845' message 'Cogits:Implement genExtTrapIfNotInstanceOfBehaviorsBytecodefor 32 bit Spur.Eliminate classFloatCompactIndex and just useClassFloatCompactIndex directly.Simulator:Move the facade''s numSlotsOf: up.' id 'd9eb7c70-0744-4da6-b629-1df02ca17337' date '7 August 2014' time '5:57:03.496425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.844' message 'Fix bad bug in interpreter to machine code frame conversionon backward branch.  Old code would decrement brancheven if backward branch checked for events and did aprocess switch, potentially converting frames at arbitraryunmappable pcs, not just backward branches.  Neaten andcomment the code.  Neaten and update the pc mappingtests for multiple bytecode sets and for sets withextensions.  Change the default count to 40 from 10 toreduce the number of startup methods jitted.Implement genExtTrapIfNotInstanceOfBehaviorsBytecodefor SqeakV3.  And fix it and the interpreter''s version topop the value from the stack.Eliminate expensive asserts in Spur allObjects/alInstancesunnecessary in MarkObjectsForEnumerationPrimitives falseregime.Simulator:Make the DetailedInstructionPrinter multiple bytecode setaware.Fix bugs in the facades: don''t rely on host image for compactclass indices, answer more classes through splObj:, implementencoderClassForHeader:.Comment the facade and proxy classes; they are confusing.Nuke obsolete InterpreterForLongFormV3.' id '4ea8ab78-c8f6-4cf2-a165-23eb85dd66aa' date '6 August 2014' time '5:15:04.244228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.843' message 'Allow warnings to be treated as errors.' id '5b054eac-e59e-46bd-a440-cc5ce9f9622b' date '5 August 2014' time '9:55:00.224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.842' message 'Fix typo in initializeCTranslationDictionary' id '1355259a-aa6e-48eb-8348-f0890328e7a6' date '4 August 2014' time '7:10:02.102098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.841' message 'Spur:Fix two become bugs surfaced when adding/removinginst vars to/from Association, Binding et al.First, the class table must be scanned to ensure there areno forwarders to classes (much cheaper than the fullhierarchy walk to follow method dictionaries etc that wasdone).  Second, machine code methods that gain anew reference through become must get added tothe youngReferrers.  Add a new become effect flag,OldBecameNew that captures this and respond to it inCoInterpreter>>postBecomeAction: by adding all methodsto youngReferrers so that on the next scavenge all will bemade right.Fix GC of machine code, which must follow forwarders whendoign markAndTraceLiteral: and again add toyoungReferrers if following gains a new ref.  Refactoring ofmarkAndTraceLiteral: into markAndTraceLiteral:in:at: et alrequired.Fix assert in addFreeSubTree:.General:Support the alternate bytecode set header in all VMsto ease testing of multiple bytecode sets.  This meansmethods with the sign bit set have no primitive field anda larger num literals field, but no more.Fix longPrintOop: (actually printOopShortInner:) forglobal variable printing in face of new Environments.Cogit:Clean up adding to the youngReferrers by providingCogMethodZone>>ensureInYoungReferrers:.  Since therealways is room on youngReferrers, nukeroomOnYoungReferrersList, canLinkToYoungClasses andcaller code, simplifying ceSend:super:to:numArgs: et al.Fix assert in followForwardedLiteralsIn:Simulator:Fix debugStackPointersFor: for alternate bytecode sets.Add two Sista bytecodes to StackDepthFinder.Define Sista''s BytecodeEncoderClassName when definingits bytecode table.' id '6b9e05e0-8058-4d62-9349-faff621ab0e6' date '4 August 2014' time '6:38:01.830065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.840' message 'SpurBootstrap:Reduce use of bootstrap hack.Move assertVEPAES test into assertValidExecutionPointersto speed up singleStep simulation and hence the bootstrap.Simulator:Have VMCompiledMethodProxy>>encoderClass answerthose associated with the simulated image, not thoseassociated with the current system.Don''t print scavenge report if bootstrapping (again for speed).Sista:Implement part of the Squeak V3 class trap code.' id '2e1a90f6-f8c0-40d1-9af5-28d14899bdf2' date '31 July 2014' time '10:42:00.702359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.839' message 'Spur:Fix initialization of the heap-resident remembered set addedby VMMaker.oscog-eem.827.  It must be created /after/ oldspace is initialized.Sista:More work defining the Sista bytecodes inSistaStackToRegisterMappingCogit.' id '11079ac8-603b-476f-8f5f-a4b551d0421f' date '30 July 2014' time '7:41:01.633032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.838' message 'General:Fix slips in the new fetch/storeShort16/Long64 methodswhich expect a 0-relative index.  Fix failure to convertinteger to integer value in the revised primitiveShortAt[Put].Change the scanning for initial nils scheme in theStackToRegisterMappingCogit to answer the number ofpush nils in a bytecode, instead of whether the bytecodeis a push nil.  Refactor genReturnTopFromBlock intogenBlockReturn.  These changes accomodate Sista.Sista:Generate a few more bytecodes.Simulator:Fingers crossed, fix the inconsistent values in the ballooncode by making sure that primitiveShortAt: answerssigned values; the old code answered unsigned values.' id '5430ce8e-3e58-4a34-b27f-e769a981ee6a' date '29 July 2014' time '8:20:04.223130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.837' message 'Sista:Provide a SistaVM flag for <option: SistaVM> pragmas.Implement the inlined ops in callPrimitiveMethod for thecurrent Sista spec in StackInterpreter.Implement the SistaV1 bytecode table forStackToRegisterMappingCogit All:Rationalize the length functions, deleting byteLengthOf:,fetchLong32LengthOf: & fetchWordLengthOf: and providingnumBytesOf:, num16BitUnitsOf:, num32BitUnitsOf:,num64BitUnitsOf: and numBytesOf:.Provide fetch/storeShort16:ofObject:[withValue:] andfetch/storeLong64:ofObject:[withValue:].Recategorize ObjectMemory methods categorized asobject access in SpurMemoryManager as object access.Spur: provide unpinObject: for InterpreterProxy.' id 'e32a7e76-4a4d-48ae-adf6-28d22f64b157' date '28 July 2014' time '7:24:01.44816352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.836' message 'Define SimpleStackBasedCogit''s SistaV1 bytecode table.Correct a comment typo in ints NewspeakV4 table.' id 'f3944e9a-5f99-44d8-8318-4407e42deaa6' date '26 July 2014' time '10:33:01.777261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.835' message 'Sista:Implement extTrapIfNotInstanceOfBehaviorsBytecode.Needs fixes to inlining below.Fix slip in CoInterpreter>>ceCounterTripped: that wouldbreak Spur (classForClassTag: instead of classTagForClass:).Slang:Fix inlining of shared case code for cases where controldoes flow through to the end of the bytecode (i.e.extTrapIfNotInstanceOfBehaviorsBytecode).Simplify the shared code pragma allowing simply	<sharedCodeInCase: #destinationSelector>' id '4bf1a46a-22b3-4062-aafa-acba4fd5177a' date '26 July 2014' time '7:59:01.980425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.834' message 'Sista:Implement all of the missing SistaV1 bytecodes in theStackInterpreter except the class trap bytecode.Define the class trap selector''s SOA index.Make the undefined case error message more informativeand write it to the transcript.' id '56c11930-453f-42ad-bc3f-d21b2ff16c86' date '25 July 2014' time '8:00:04.10416352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.833' message 'Start adding the SistaV1 bytecode set to the Sista VMs.Make Slang provide a comprehensible error message whencertain bytecodes are as-yet-unimplemented instead ofcrashing horribly deep in interpreter dispatch inlining.Nuke a couple of the obsolete VMMaker subclasses.' id 'ca999c15-a8a5-449e-82b8-8b9d683b3e1b' date '23 July 2014' time '11:34:01.74032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.832' message 'Spur:More rationalization of the class table management postbecome.  Fix bug in assigning parameter 55.Fix printStringOf: (used in e.g. frame print) to not print crsthat would cause previous info to be overwritten.' id 'afcb9ff1-804f-4aae-b052-a709b5a26470' date '23 July 2014' time '12:37:01.391425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.831' message 'Spur:Fix bug with class table management and two-way become.Because two-way become may do an in-place become, obj1& obj2 in SpurMemoryManager>>doBecome:and:copyHash:may not be forwarded after the inner become.  Hence theyshould not be followed if not forwarded.  The bug manifestedas Object''s identityHash changing: superclass is the first slotin a class. Following an unforwarded subclass of object yieldsObject.  Setting the hash bits of the followed object smashesObject''s identityHash.Thanks to Stéphane Rollandin for finding the bug.' id 'c231d214-1763-4c79-9b58-a5bf3385b0c9' date '22 July 2014' time '7:40:01.620392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.830' message 'Revise markAndTrace: given that markAndShouldScan: isinlined within it (see Slang changes below).  Move theephemeron processing into markAndShouldScan: out ofthe now unused numStringSlotsOf:ephemeronInactiveIf:circumlocution.  Add activeAndDeferredScan: andnumStrongSlotsOfInephemeral: in place of the doublenegative inactiveOrFailedToDeferScan: and hence inline numStrongSlotsOfInephemeral:.Increase the traceImmediatelySlotLimit.  These changesplus the 2 repeats for compaction speed up global GCby at least x2.In the wake of the inlining changes below, splitlookupInMethodCacheSel:classTag: into it andinlineLookupInMethodCacheSel:classTag:, and use the inlineversion in internalFindNewMethod.Slang:Add support for inlining into the condition of ifTrue:/ifFalse:when it is marked as inline. Transform	expr1 ifTrue:/ifFalse: [^expr2]by inlining ^expr2 into expr1.  Transform	expr ifTrue:/ifFalse: [statements]by replacing ^boolean occurrences in expr with gotos.' id 'ad7e3584-5924-4500-be7c-ea7ebac3f71c' date '21 July 2014' time '7:35:01.090359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.829' message 'Add vmParameter 52 to answer the capacity of the roottable (in Spur a.k.a. the rememberedSet).Delete all the explicit initializing to nil in primitiveVMParametersince the array is instantiated normally (filled with nil).' id '001843e1-2851-457f-b750-16e46963fa47' date '19 July 2014' time '12:52:04.261032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.828' message 'Spur:Make sure to abort if the attempt to grow the rememberedset fails.  Try to grow by another 1k slots if doubling fails,then abort.Change the defaultEdenBytes to 4Mb.' id '54a0b096-54ef-4c86-a382-d413bf54329d' date '19 July 2014' time '12:32:00.781196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.827' message 'Spur:Move the rememberedSet into a pinned object in oldSpace.Allow it to grow on demand, starting at 1k entries, doublingon each grow.Allow the number of compaction passes to vary, 2 on GC,3 on GC for snapshot.Add vm parameter 53 to answer the number of segments.Slang:Add support for deny:, and implement it in VMClass.' id '22325940-3a8c-40fc-9331-a9c37c875bbd' date '19 July 2014' time '12:02:03.653 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.826' message 'Fix the ZipPlugin (InflatePlugin&DeflatePlugin) to no longerdepend on specific instance sizes for ReadStream andWriteStream which allows some leniency in redefining theseclasses.' id 'baaa71a3-d71b-4656-be88-ecc3e7b6afe5' date '18 July 2014' time '5:25:00.77616352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.825' message 'Spur:Fix bad bug in remapObj: that confused the test for old vsnew and hence tried to copyAndForward old objects.Fix bug in processWeaklings that could remember a weakobject twice.General:Fix compilation warnings in stringForCString:Add a warnpid variable that prnts the pid in warnings, usefulin debugging multi-image tests (i.e. magma).' id '038c31e2-d97d-4f1b-be2a-3908f6982b5f' date '18 July 2014' time '12:18:02.991 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.824' message 'Mark the methods used by globalGarbageCollect asinline: #never for profiling.Fix some Slang conflicting return type translation complaints' id '2f058f16-c0e9-4231-b14a-fe2dadb19735' date '16 July 2014' time '5:15:04.28132704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.823' message 'Reimplement the backward count in interpreted methods,storing the count in IFrameFlags, hence eliminating therequirement that the jump happens consecutively N times injust that method with no backward jumps in any other method.The Chameneos benchmark has this pattern and so twomehtods don''t get jitted.This eliminates lastBackwardJumpMethod & backwardJumpCount.' id '2d337398-d2dd-4715-9476-9a463c29efad' date '16 July 2014' time '12:55:03.391294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.822' message 'Rescue in-image compilation.Initialize numIRCs before checking for quick prims.' id 'ccc5a2c0-9c7d-4777-a4c6-ba28c0d02d80' date '16 July 2014' time '11:41:02.698098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.821' message 'Add support for not inlining in gcc under optimization (forprofiling).  Sort out the backward jump variables now we''vefixed global variable determination.' id 'a5ed6e52-7e25-4c02-878b-8de8dceeac7b' date '15 July 2014' time '4:37:02.012130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.820' message 'Rip out the forwardingCount: measurement code.  It causesbad performance regressions (due to failing inlines?)Put the handling of the cloning of cogged methods in theclone: implementations, removing it from the primitive.Add it to the pinning clone too.Add SpurGenerationScavenger''s api methods to Spur32BitCoMemoryManager''s.  Hence search for option:variables in the class pools of the interpreterClass andobjectMemoryClassSpecialize the store check trampoline generation.Move it down to the relevant object representations.Move setting of isRemembered flag to true intoSpurGenerationScavenger>>remember:.  InlinepossibleRootStoreInto: (given that remember: is /not/inlined.  Call remember directly from theceStoreCheckTrampoline, and hence haveremember: answer its argument.' id '783c4789-0cac-41f9-9b01-d1930e0fe4d7' date '15 July 2014' time '11:13:03.331294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.819' message 'Fix localization bug.  Variables in initialize methods were notconsidered references (cuz there are excluded).  This causedVMMaker.oscog-eem.816''s extraction of zero/false vars toStackInterpreter>>#initialize to cause nextPollUsecs to belocalized to checkForEventsMayContextSwitch:.' id '8ec2ee28-4740-4d74-9dce-9cc89e7604d3' date '14 July 2014' time '12:37:01.186392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.818' message 'Spur:Fix bug in scanClassPostBecome:effects: with new lazyselector following policy by... throwing it all away.The read barriers on method lookup (of the methodClassassociation in super sends, of the superclass link, ofmethod dictionaries, method dictionary arrays, selectorsand methods is cheap.  So replace scanning classes andmethod dictionaries in te class table post become withread marriewrs on methodClass, superclass and methoddictionary etc on lookup.The read barrier on an object from which we are going tofetch state (such as a class or method dictionary) isessentially free on modern machines because the classindex and the state very likely share a cache line, and theregister code for testing is so cheap compared to memoryaccess.  Further the read barrier on selectors is cheapbecause the method lookup cache is effective in reducingthe number of message lookups and because we don''thave to check for forwarding of nil entries.So nuke all the followNecessaryForwardingInMethod:machinery including the cmUsesMethodClass hack.Nuke scanClassPostBecome:effects:.Clean up, e.g. replace followNonImmediateField:ofObject:uses with followObjField:ofObject:.' id 'f4250127-68cd-42d7-babb-66f56974a8c8' date '11 July 2014' time '1:42:02.941392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.817' message 'The new selector-forwarding policy needs to deal withnil methodDictionaries.canPinObjects can be inlined.' id '0b8a838c-97bf-4732-abe3-fb55d4937989' date '11 July 2014' time '12:28:01.213196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.816' message 'Spur:Fix bugs in clone:; allocateSlots:... may fail and cloningcompiled methods still needs a store check.Fix become performance issue of following possiblybecommed selectors by adding a read barrier tolookupMethodInDictionary: et al.  This is much cheaper thanfollowing all dictionaries in the classTable post become.Control the policy switch with a class var in the hope thatan efficient eager solution can be found.Add stats that count the causes of followForwardedObject-Fields:toDepth: (used to track down the above issue).Make optional via a class var.  Move stringForCString: fromStackInterpreter to the object memories.Reposition ensureNoForwardedLiteralsIn: and replacecePositive32BitIntegerFor: with positive32BitIntegerFor:.Remove the assert check in isForwarded: to make sure it isinined.  Mkae sure possibleRootStoreInto: is not inlined.StackInterpreter:Extract the vars initialized to zero or false to an initializemethod from initializeInterpreter:.Slang:Fix option processing so that interpreterClass andobjectMemoryClass class vars can be tested (for theabove class vars).' id '33bf745c-6348-4ad4-9ad3-bec0373bacd4' date '11 July 2014' time '9:57:03.790425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.815' message 'Nuke the rest of the newInitializeBytecodeSet... methiods.These experiments have migrated into the production code.' id 'a13947a2-7c8a-400a-ba5f-043efb83746b' date '10 July 2014' time '8:55:04.149425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.814' message 'On Spur, move implicit receiver caches ou of code and intopinned objects on the heap (similarly to Sista counters).Gets e.g. -2% speedup in compiling a Newspeak file.Rename NewspeakMethod>>nextMethod to nextMethodOrIRCsand use it for both tasks.  Nuke SMM>>allocatePinnedCounters:in place of allocatePinnedSlots: and use this for both countersand IRCs.Add a hasIRC flag to CogBytecodeDescriptor and count implicitreceiver caches for their out-of-line allocation.Make the option: processing in shouldIncludeMethodFor:selector:cope with multiple option: pragmas.Nuke the newInitializeBytecodeTableForNewspeakV3PlusClosures.Can be resurrected later if the others ever get worked on.' id '65761a39-4d91-4bd4-bc2d-d3c514a33901' date '10 July 2014' time '8:51:02.372032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.813' message 'Fix comment for ceImplciitReceiverTrampoline.Correct expr -4 to expr - 4.' id '0d763517-77f2-44e3-a5d3-317d784734c8' date '9 July 2014' time '7:30:03.80116352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.812' message 'Fix bogus assert fail due to signedness.' id '9454793f-8770-42b7-9802-4c2a92b29f92' date '9 July 2014' time '12:33:01.042098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.811' message 'Spur:Fix bug in old space GC processing of weaklings.  Old codefailed to trace strong references in weaklings to weaklingsin markWeaklingsAndMarkAndFireEphemerons.  Make surenilUnmarkedWeaklingSlotsIn: can be inlined.  Bug shows upas crashes in Pharo Spur, Pharo making much more use ofweakness than Squeak or Newspeak.  MakeMove the scanning for young references in scavengerprocessing of weaklings into processWeakSurvivor:.Fix minor slips in allObjects & allInstancesOf: which shouldonly empty weaklingStack if marking.Fix a couple of storePointer:ofObject:''s being applied toobjStacks.Rename isReallyForwarded: to isUnambiguouslyForwarder:and add an assert to isForwarded: to catch accidentalapplications to free objects.Fix longPrintOop: for free referents.Slang:Assign complex expressions to loop variables in value:expansions.  Old code would replace variable with actualparameter.' id '96eb7a61-d68a-4114-8c1a-c0a7fad3232e' date '9 July 2014' time '11:49:02.50616352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.810' message 'Fix bug in nilUnmarkedWeaklingSlotsIn: which was notguarding the isForwarded: check with an isFreeObject: not check.  Optimizations, optimizations....' id 'a10a6172-0f6e-47a1-be39-cffd498c9661' date '8 July 2014' time '6:12:00.96032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.809' message 'On ARM the implciit receiver trampoline can use the LinkRegto access the inline implciit receiver cache.' id '4d6839cc-a316-4f78-a378-3bfaa4c72270' date '7 July 2014' time '3:38:01.837032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.808' message 'Cogit:Change implementation of the implicit receiver trampolineto cache the class tag, not the class object (thanks Ryan).Has a significant impact on Newspeak Spur performance.Refactor getInlineCacheClassTagFrom:into: intogetInlineCacheClassTagFrom:into: and add inlineCacheTagForClass:to support this.Change the V3 inline cache check to not shift the compactclass index (thanks Tim).  Saves a byte and an instructionfrom the entry sequence.Add the opcode for MoveRAb (but no support as yet).Interpreter:Finally rename ClassInteger to ClassSmallInteger.Plugins:Make primSizeField[Put] simulate.Simulator:Add some missing NewsqueakV4 instructions.' id '84bdf081-a2e8-4c84-b249-b140228e6636' date '7 July 2014' time '1:55:02.151196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.807' message 'Remember to make genSmallIntegerComparison:-orDoubleComparison: observe hasDoublePrecisionFloatingPointSupportin StackToRegisterMappingCogit. VMMaker.oscog-eem.806 forgot.Issue a prefetch for Sista counters after frame build.Slang/Cogit:Sketch, but do not implement yet, a hack to put primFailCodeand argumentCount together to save an instructioninitializing them.' id 'f18402a4-a840-471c-92db-c09d632b3152' date '7 July 2014' time '7:09:02.416065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.806' message 'Make genSmallIntegerComparison:orDoubleComparison:observe hasDoublePrecisionFloatingPointSupport (for ARM).' id '30171e00-68a3-43a3-bd72-fdb9494f9cb7' date '7 July 2014' time '6:11:03.15816352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.805' message 'Oops.  resetCountersIn: must of course be optional.' id '33a04610-ba5b-471e-847a-597e2045be6e' date '6 July 2014' time '10:35:03.020359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.804' message 'Cogit:Change the management of counters in Sista methods tohold the counters well away from code.  In V3 use mallocto allocate and free them (this means Sista V3 is notcurrently simulable).  In Spur, store them in oldSpace inpinned objects (hence Sista Spur simulates just fine).Nuke unused variables in Cogit hierarchy.Fix a few slips with the ceEnterCogCode => ceCallCogCodeputch in VMMaker.oscog-eem.802/tpr.803Spur:Fix bug in allocateSlotsForPinningInOldSpace:bytes:format:classIndex:and make sure answered object is actually pinned.  Hencefix pinObject: & primitivePin.Plugins:Fix access to the characterTable in the ThreadedFFIPlugins.Replace characterTable at: with characterObjectOf:, and inSpur, support wide characters.Fix divide-as-shift issue in BalloonEnginePlugin.SImulator:Fix offset of counters in CogSistaMethodSurrogates forSpur.Slang:Make the generateDivide:on:indent: check for the divide-as-shift issue pull in sqAssert.h.Add generateAllSistaConfigurationsUnderVersionControlconvenience.' id '8f232d31-fa50-4134-8556-da8fc12ab32d' date '5 July 2014' time '8:43:03.735130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.803' message 'Changes that get us to compiling primitive 3 and needing all the floating point ARM stuff worked on.Correct enilopmart used in activateCoggedNewMethod: avoids stack imbalance failure.Fix genPushRegisterArgsForNumArgs: to push the receiverresultreg even when there are no args, just like the ia32 does.Change to pushingthe substitue return address rather than putting it in the LR and leaving it to get smashed later.Correct genEnilopmartFor:  [and: regArg2][ and: regArg3] called: to pop into the PC when appropriate. LR just doesn''t do the job in this case.' id 'c45ecb48-3e6b-469d-9cb6-463e70ef2cce' date '3 July 2014' time '11:13:02.572392448 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.802' message 'Split the enilopmarts into those that are used in the contextof a call (entering code as if from a call) and those used inother contexts (converting interpreted method to machinecode method in loops, returning form interpreter methodto machine code one, etc).Implement the call enilopmarts correctly (we hope) for ARMwhere pushed ret pc must be popped into LinkReg.Add a PCReg abstract reg and use it to implement jumpingto popped top of stack by popping into PCReg (for ARM).' id '54ee6cf7-485a-41d6-8749-9a94d6288e69' date '3 July 2014' time '5:33:01.026 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.801' message 'Fix slip in creating the codeGeneratorToComputeAccessorDepth' id '9f41072d-884c-46b9-88d2-284f1f839881' date '3 July 2014' time '7:17:03.203261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.800' message 'Fix a minor inlining typing bug.' id '33fd7d74-ad59-446d-ac56-1e9c2eb4c089' date '3 July 2014' time '6:43:01.181098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.799' message 'Use a better variable name for the frameOfMarriedContext:temp to skirt an inlining bug.' id '6f964dbc-8fd4-4072-8fb1-c4fe44fb5e40' date '3 July 2014' time '6:33:02.904228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.798' message 'Sort VM methods by class first, selector second, to groupby coarse functionality (e.g. scavenger methods) for thebenefit of the VMProfiler.Access missOffset via a macro (very minor speedup).' id 'f47e2c22-fea0-4762-b689-8b295a59d8ac' date '3 July 2014' time '6:06:02.889228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.797' message 'Nuke a halt from testing the simulator...' id '28e6fe82-fa68-4b73-a714-e2481f350031' date '2 July 2014' time '7:49:02.734130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.796' message 'And make sure isSmartSyntaxPluginSimulator is marked asa simulation-only method.  Sigh...' id '037e61a6-d81c-42e5-bbcb-62adbd938f38' date '2 July 2014' time '7:07:01.519065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.795' message 'Spur:Implement forwarder following on primitive failure for side-ways calls from mahcine code.Fix LargeIntegersPlugin>>isNormalized: for forwarders, nolonger assuming that if its arg isn''t a SmallInteger it must bea large integer.  Squash an assert fail in lengthOf:format: onforwarders by using numSlotsOfAny:.Make sure a forwarder has an accurate slot count, bumping itto 1 if it was zero.Simulator:Fix Spur simulation of SmartSyntaxInterpreterPlugins with noexplicit simulator subclass.' id 'd77a504d-28ea-407a-9df0-097e6dbaaf06' date '2 July 2014' time '6:48:03.822 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.794' message 'Fix the shift for divide issues in the LargeIntegersPlugin.Add code to generateDivide:on:indent: to spit out checkingasserts if required.Change the SmartSyntaxPluginCodeGenerator to generatecode that ifdefs out the remapOop:in: rigmarole on Spur.' id '7fd23b24-d4aa-4291-996a-760b99e0d7e2' date '2 July 2014' time '3:40:02.892392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.793' message 'Fix inline cache for Characters in Spur.' id 'aa676593-2c7b-4ad7-92a5-9d1e27cb7377' date '2 July 2014' time '1:31:02.080294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.792' message 'Fix potential liveness of ReceiverResultReg across countingjumps by reloading ReceiverResultReg before returning fromthe trampoline through which ceCounterTripped: is called.' id '9d8d23c8-c855-48a6-8bdd-402765c01a99' date '1 July 2014' time '8:08:04.00432704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.791' message 'Rescue the non-Spur builds by makingaccessorDepthForPrimitiveIndex: a Spur option.Factor out the type machinery in generateShiftRight:on:indent:and use it to ensure generateSignedBitShift:on:indent: will notcast 64-bit vars to ints.' id '7d762755-99b7-46ae-8435-31b17f4f0e0c' date '1 July 2014' time '8:30:04.084392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.790' message 'Implement following forwarders on primitive failure inmachine code interpreter primitives (still have to implementthis for sideways calls of named primitives).Allow the JIT to not compile primitiveDoNamedPrimitiveWithArgsto avoid any potential complications.Rewrite all the semaphore installing primitives to fail if thesemaphore arg is neither a semaphore or nil instead ofassuming if its not a semaphore it must be nil, so as tofail and retry when semaphores are forwarded (as they arewhen Semaphore is redefined).Implement isSemaphoreOop:/Obj: in trhe object memoriesto abstract away the code.  Base Spur''s on the class indexof splObj: ClassSemaphore, avoiding the table lookup toderive the class.  Make checkForEventsMayContextSwitch:treat all its semaphores consistently.Have spur''s fetchClassOfNonImm: answer nilObj forforwarders to avoid assert fails.On Spur read barriers to primitiveSuspend andsynchronousSignal:''s myList access, because the processlist manipulation routines do no checking.Add assert checks for forwarders in the process listmanipulation routines.Abstract out the call machinery from compileTrampolineFor:-numArgs:arg:arg:arg:arg:saveRegs:pushLinkReg:resultReg:so it can be used by maybeCompileRetry:onPrimitiveFail:in implementing following forwarders on primitive failure inmachine code, and the Open PIC miss call.Have bytecodePCFor:cogMethod:startBcpc: map any pcbefore the stackCheckOffset to the initialPC, which appliesto primitives in progress.Nuke duplicated code in CoInterpreter class>>initializeWithOptions:Fix assert fails in updateStateOfSpouseContextForFrame:WithSP:and elsewhere with forwarders.Slang:Add FooInterpreter class>>primitiveClass so that accessordepths are checked for the right primitive implementation,CoInterpreterPrimitives in CoInterpreter, etc, not justInterpreterPrimitives.LargeIntegers Plugin:Fix a latent signed shift bug in cDigitSub:len:with:len:into:caused by VMMaker.oscog-eem.785''s eliminating thedivide-via-shift optimization.Simulator:Create the MessageSends for simulatedTrampolines insimulatedTrampolineFor: and hence eliminate the hack setupin generateTrampolines.Add a print rump C stack entry to the Cog utilities menu.All these changes allow Cog Spur to redefine Process and/orSemaphore.' id '1c0587fb-44ad-43f6-8bfd-2a0f91e21a59' date '30 June 2014' time '7:21:03.97216352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.789' message 'Fix slip in StackInterpreter>>actuallyFollowNecessaryForwardingInMethod:literalCount:that corrups the methodClassAssociation.' id '3a58fbfc-b349-47bd-9bd6-17b66722be2b' date '28 June 2014' time '11:34:04.067196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.788' message 'The sender checking in is[Non]IntegerObject: has served outits useful life.  It now gets in the way...' id '487e7744-7e06-4f41-a34d-f1c65b104594' date '28 June 2014' time '10:48:04.196065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.787' message 'Fix return types for positive[64/32]BitValueOf: in InterpreterProxy(& hence in sqVirtualMachine.[ch] soon).Use positiveMachineIntegerValueOf: to decode arg inprimitiveNewWithArg and ensure positiveMachineIntegerValueOf:is inlined there-in.' id '4b38ebc1-339f-4523-a9fc-047923108211' date '28 June 2014' time '7:45:03.262032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.786' message 'Fix prim return for compileInterpreterPrimitive: on RISCs.On return from interpreter prim, ret pc is in instructionPointerand must return to whence it came, which is the stack on CISCand the LinkReg on RISC.  Hence restoring the receiver regrequires different offsets in the two cases.' id '425c25e8-f3f6-4f06-b2eb-392c5da0ed44' date '28 June 2014' time '6:39:01.344392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.785' message 'Fix sign and overflow issues in instantiating larger objectsand determining the size of large instances.Rip out the UseRightShiftForDivide optimization.  It getsunsigned division wrong, and C compilers can and willoptimize this correctly.positive32BitValueOf: must answer a usqInt,positive64BitValueOf: must answer a usqLong.Fix some freeChunk accesses that usedfetchPointer:ofObject:.' id '39cb6f17-fd6b-4794-a7a2-91779a6fcee2' date '28 June 2014' time '6:17:02.051196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.784' message 'Rework the rotatable quick constant logic a little and clean up users.Fix concretizeMoveRXbrR to do byte not word loads.Fix concretizeConditionalJumpLong: to actually be conditional. Oops.' id '31d41aa3-9d3c-43fb-b1f6-9bb2f6df8165' date '28 June 2014' time '3:42:02.611032704 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.783' message 'correct mistaken callersaved reg stuffFix concretizedRetN to not over-bump the SP' id '0799fd6c-82b7-458c-af82-b10f9738a635' date '26 June 2014' time '9:16:03.511392448 am' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.782' message 'The method abort trampolines shouldn''t pop anything,especially now we have the pushLinkreg: arg to manage theLinkReg more easily.' id '0f40ec66-356f-4b59-9b04-c5904c7e9da1' date '26 June 2014' time '4:38:04.101294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.781' message 'Fix mixup of old & oyung spaces in primitiveVMParameter, andcomment some new parameters.' id 'e9e088bf-5c7f-468c-b51c-bf6de6ca6611' date '26 June 2014' time '3:03:03.738228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.780' message 'tiny changes to improve trace printing readability in ioLoadFunction*' id '00c7d818-3c36-4cf6-97ad-8950ed03d7a6' date '25 June 2014' time '6:54:00.86516352 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.779' message 'Fix some sign issues with free space tallying to allow Spur toshrink memory and answer via primitiveVMParameter heapsizes above 2Gb.Add longPrintInstancesOf:/longPrintInstancesWithClassIndex:for debugging.Fix in-image compilation given the checkAllocFiller putch.' id '5ba1d239-a296-47c9-83ad-6d0e0bcabcb4' date '23 June 2014' time '7:07:03.184261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.778' message 'But in the bootstrap the interpreter may not exist, so needto be even more careful checking checkAllocFiller' id '522b5601-cfb2-43cf-a4c2-a76e309ba206' date '19 June 2014' time '3:14:01.182130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.777' message 'Must init checkAllocFiller before initializeObjectMemory: inthe simulator.' id '997361bc-8bc7-4cd5-bd1f-d8af15db8cb2' date '19 June 2014' time '2:55:03.20332704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.776' message 'Add parameter 54 on Spur to answer totalFreeOldSpace.' id 'baaa78fd-2c0b-4cde-a247-4c45097f296e' date '17 June 2014' time '10:31:00.45232704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.775' message 'Rationalize the allocation check filler between V3 ObjMemand Spur.  Make it applicable only to plugin prims andoptional, via the checkAllocFiller flag.Add a prim failure code for this, PrimErrWritePastObject.Make the Cogit check and fail offending ext prims if the flagis set.Don''t fill new space with the alloc check filler if the flag isnot set.This is good for a -49% increase in the performance of e.g.	[1 to: 1000000000 do: [:i| {nil}]] timeToRunon Spur.Refactor numStrongSlotsOf:ephemeronInactiveIf: and inlineit in scavengeReferentsOf:, reusing the object format forthe isWeakling test.  Provide numStrongSlotsOfWeakling:for weakling nilling, and hence arrange that thenumStrongSlotsOf:ephemeronInactiveIf: is always non-nil.' id 'dd27f525-f775-49fc-8bf0-2463d78bfb97' date '16 June 2014' time '1:25:03.648032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.774' message 'Restore the accuracy of the comment in followForwarded:back to Igor''s original.' id '665ef9a5-4139-4f97-85c0-0d0df9eea422' date '15 June 2014' time '3:01:00.706261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.773' message 'Fix a couple of unicode formatting issues that may becorruptions that have crept in in older buggy Spur versions.' id '49d493b4-bfc6-4012-ad2c-8995602e7feb' date '14 June 2014' time '8:57:00.280228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.772' message 'Spur:Fix fillObj: signedness for objects straddling the mid-point of the address space (quickly affects linux).Similarly for routines in pigCompact, to get asserts correct.Fix printOopsFrom:to:. for objects up to endOfMemory.Nuke unused SpurMemMgr inst var var.Declare lastFreeChunk and firstFreeChunk correctly.Fix numberOfForwarders: and printForwarders: forisForwarded:''s blindness towards freeChunks.Comment isForwarded: to be clear on the issue.Have the segment manager pass to sqAllocateMemory-SegmentOfSize: the address of the first large enoughgap in the address space, instead of the address of theend of the first segment.  This allows e.g. linux to useMAP_FIXED and hence get past a 128Mb limit on mmapping.Cog:Fix an abort (relocating call to invalid address) ue to anover-zealous check in relocateCallBeforeReturnPC:by:.Since we relocate e.g. calls to primitives there can be noeffective range check there-in.' id 'c15ccff3-56a1-484d-af3b-0ee906a7a24b' date '13 June 2014' time '7:26:03.053 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.771' message 'Generate the XDisplayControlPlugin with the Cog conf.Fix a typo in a selector.' id 'aab62250-6fd1-4267-95f5-a270cf86aad7' date '13 June 2014' time '12:15:02.340359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.770' message 'Spur: Fix bugs in isValidFreeObject: & printFreeTreeChunk:' id '19543428-8aa0-4ff8-97ab-b4fa1a6724fb' date '12 June 2014' time '3:16:02.734065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.769' message 'And fix signed comparison in loop in checkTraversableSortedFreeList' id '7b5918e2-f856-4eca-975d-0f1e6904ed1d' date '11 June 2014' time '2:11:02.026098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.768' message 'checkTraversableSortedFreeList needs to be called throughassert; it is expensive.' id '9b465bed-0f83-48f0-baae-9fd7212183c1' date '11 June 2014' time '2:03:01.502294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.767' message 'Spur: fix some compilation warnings in the cointerp.' id 'b11544fd-09a4-4469-8ce4-3f2339f08d05' date '10 June 2014' time '3:42:02.811261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.766' message 'Add some convenience configuration generate methods.' id '3045c341-cfbf-494c-a7b1-fb29c26a7340' date '7 June 2014' time '3:06:02.212 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.765' message 'Remove some compilation warnings in cogit.c.Remember to update genActiveContextTrampolineLarge:inBlock:called:to the new genTrampolineFor: signature.' id 'ea6eeed7-03ea-4538-9d63-25f2e260f6b4' date '7 June 2014' time '3:01:02.685130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.764' message 'Correct some decls in genEnsureOopInRegNotForwarded:scratchReg:' id '74cab020-3391-46e3-9cac-b85303b8c1a4' date '7 June 2014' time '2:41:03.779294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.763' message 'Add a pushLinkReg arg to the core trampoline generationroutins.  This is true everywhere but in the nonLocalReturnand checkForInterrupts trampolines, which (on RISCs) writethe link reg to instructionPointer.Remove the callJumpBar: parameter; this is always true.Remember to save and restore the link register around thecall to ceCheckProfileTick in the primitive return machinery.' id 'bb0b3235-2b4e-4748-aa8c-e69463f849dd' date '7 June 2014' time '2:37:01.351065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.762' message 'Move BICCqR from CogRTLOpcodes to CogARMCompiler.It''s currently ARM-specific and there''s a mechanism forhandling processor-specific opcodes.Revert the ceCheckForInterrupts hack.  The pre-hack codeis correct.Streamline the genPrimReturnEnterCogCodeEnilopmart:But most importanty, fix CogRTLOpcodes class>>initialize toautomatically initialize the CogAbstractCompiler subclassesafter initializing its opcodes, so that the processor-specificopcodes are correctly initialized.  The simulator breaks ina visually interesting way (read most things continue to work)if not.' id 'ae2ff2b3-86a9-45a6-bab6-b009d27b1d99' date '7 June 2014' time '7:09:00.158294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.761' message 'Add a bunch of ARM instruction convenience methods, add a load more trap handling methods to get us well past ceSICMiss: and into IC futzing.' id 'abc7690f-c63b-4909-acda-9cfd1cbd4301' date '5 June 2014' time '11:53:02.34332704 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.760' message 'Streamline genExternalizePointersForPrimitiveCall' id '30219ee2-c0a5-4d81-b2c1-ef12a8b534fb' date '6 June 2014' time '5:39:03.017065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.759' message 'Include MULTIPLEBYTECODESETS define in interp.h to get itout of the build scripts.' id '988e84e2-8576-4edb-984a-98c755c8e2e8' date '6 June 2014' time '2:47:04.08516352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.758' message 'Add link reg pushing code to the PIC aborts that matches thatin the method abort.' id '3bc64804-8b12-4805-88ce-04abe88bde24' date '5 June 2014' time '11:04:01.406425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.757' message 'Fix a stupid slip in genSpecialSelectorEqualsEquals.The constant evaluation must remember to pop the simulationstack before it pushes the boolean result.' id 'c4908baa-712c-4cb6-a606-5bde992e9582' date '5 June 2014' time '10:38:02.103032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.756' message 'Oops.  Need a null genEnsureOopInRegNotForwarded:scratchReg:for Squeak V3.' id '34211eb3-ba7a-43fb-b007-12c94b1b4826' date '4 June 2014' time '5:30:02.907065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.755' message 'Spur:Implement unforwarding in inlined machine code #==.hence rewrite the /horrible/ StackToRegisterMappingCogit>>genSpecialSelectorEqualsEquals.Unforward method literals in cog:selector: to ensure that allexaminations of constants in the Cogit are of the actual objects.Have StackToRegisterMappingCogit>>genPushReceiverBytecodeuse ReceiverResultReg if it contains self.Speed up isForwarded: test by using the fact that theisForwarded class pun is a power of two.Fix a slip in an assert in unlinkSolitaryFreeTreeNode:.Comment out the checkFreeSpace check in copyToOldSpace:bytes:format:.Make the assert check in Spur32BitCoMemoryManager>>freeStart: more lenient to avoid bogus assert fails frommachine code allocations.Simulator:Bring in-image facade for spur up to date.' id '3557bde2-30d3-482c-89bf-4b9907ffa49b' date '4 June 2014' time '4:56:00.793392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.754' message 'Fix the abort sequence for RISCs.  The assert check on thesendMissCall requires that sendMissCall means thesendMissCall. But on RISCs we must push the link reg beforecalling it.  Hence we need a sendMiss label.Fix the offset of numCounters in the method surrogates tofix Sista Spur.' id 'd9c78dfc-173f-43b0-8568-52f5cfd95c05' date '3 June 2014' time '3:24:01.998130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.753' message 'Nuke obsolete method' id '7d4bb6a3-3f19-4383-8cbd-8ce3b97d75ee' date '2 June 2014' time '2:35:00.30616352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tty.752' message 'Remove ObjectiveCPlugin from this repository upon learning that it lives at squeaksoruce.com/ObjectiveCBridge2I am updating the BuildSqueakXYZCmakeImage*.st scripts to retrieve from that repository instead.' id '0de7fb38-1e84-4773-8df5-d79afb9b032a' date '2 June 2014' time '4:15:04.14032704 pm' author 'tty' ancestors ((name 'VMMaker.oscog-tty.751' message 'ported IOSPlugin from pharo.Verified that: CMakeVMMakerSqueak SqueakStackIPhoneConfig>>generateWithSources generated the source code in platforms/iOS/vm/src/plugins/IOSPlugin/' id '0358a4dd-2bc3-473e-9ad6-6fe8e66c2ff9' date '2 June 2014' time '3:46:02.360130816 pm' author 'tty' ancestors ((name 'VMMaker.oscog-tty.750' message 'Added ObjectiveCPlugin from pharo for use in CMakeVMMakerSqueak. While SVN Cog contains source code in:/platforms/iOS/vm/src/vm/intplugins/ObjectiveCPlugin/ObjectiveCPlugin.cThere is no Smalltalk class in VMMaker until now' id '74f36217-bbce-4997-81fd-0944f9bb7f35' date '2 June 2014' time '3:15:00.680065408 pm' author 'tty' ancestors ((name 'VMMaker.oscog-tty.749' message 'ClipboardExtendedPlugin added from changeset athttp://squeakvm.org/svn/squeak/trunk/platforms/Mac%20OS/plugins/ClipboardExtended/JMMExtendedClipBoardPlugin.1.cs' id 'b38bc9f8-523a-4862-b0c9-0e1d90bb786c' date '2 June 2014' time '1:29:03.499098112 pm' author 'tty' ancestors ((name 'VMMaker.oscog-eem.748' message 'Fix in-image compilation for the current VM.' id '097187de-f65d-42ff-b6a7-91f0fd069cea' date '2 June 2014' time '10:05:02.520196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.747' message 'In the indirection vector initialization peephole check that thestore temp index matches the indirect temp store index andaccept long store temp bytecodes.' id '488671d9-ac3b-4b24-8102-9a2623c7ce72' date '2 June 2014' time '8:04:01.818228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.746' message 'Implement a peephole in the Spur Cogit for an indirectionvector initialized with a single value  Avoid initializing theslot in the array to nil and instead initialize it with the value.Refactor setting byte1, byte2 & byte3 intoloadSubsequentBytesForDescriptor:at: for the peepholetryCollapseTempVectorInitializationOfSize:.No loner inline CoInterpreter>>pre/postGCAction: for VM profiling.Increase the number of trampoline table slots.Simulator:Fix CurrentImageCoInterpreterFacade for the new Spurinline instantiation code.' id 'cc4961d3-e629-4e28-b308-88eab314a8c9' date '1 June 2014' time '6:05:00.629228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.745' message 'and don''t forget genExtPushClosureBytecode' id '9ae88e74-1041-4ad2-be42-c2277e958b92' date '1 June 2014' time '11:33:02.283098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.744' message 'In Spur refactor closure creeation in the Cogit to not flushcopied values to the stack, assigning them direct to theclosure.  Generates much more compact code.' id '22b7a9e4-4046-41fd-a835-969d865245e0' date '1 June 2014' time '11:27:03.253196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.743' message 'Refactor closure creation in the Cogit to move it into theobject representations.  In Spur allocate and initialize theclosure inline.In Spur make sure to always use unsigned comparisons forallocation against scavenge threshold.Fix bugs in Spur object representation''s context creationtrampolines. Source and destination offsets for args werewrong. Destination offset for temps was wrong.  Loopcomparisons were wrong way round (CmpR:R: is weird).' id '92a02694-b094-4525-b2e2-c166faf67785' date '1 June 2014' time '10:05:00.626425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.742' message 'Delete the straggling cePositive32BitIntegerTrampoline inCogit that got moved to CogObjectRepresentationForSqueakV3.' id 'ed898ba8-2dfc-4c0f-9d9a-00633e988f59' date '31 May 2014' time '10:15:03.030130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.741' message 'Refactor context creation in the Cogit, moving it to theobject representations.  In Spur allocate the context in oneof four trampolines for block vs method and large vs smallcontexts.Use smallObjectBytesForSlots: to determine byte size fromslot size in the new Spur Cogit allocators.Fix simulation bug in whereIsMaybeStackThing:.' id 'f73b1214-56e1-4dde-a466-bad10d979d17' date '31 May 2014' time '9:54:02.638032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.740' message 'Fix slip initialized and: size > 0 => initialized and: [size > 0].' id '59d8582f-ae8e-4851-bf86-061851905203' date '31 May 2014' time '10:24:02.81032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.739' message 'Refactor ceCreateNewArray & cePositive32BitIntegertrampolines, moving them into the object representations asrequired (cePositive32BitInteger is only used in the Squeakobj rep).  In the Spur obj rep inline allocation in pushNewArraybytecodes.  This as a test case for allocating closures andcontexts in machine-code.Fix simulated call of checkSegments.' id '122f7bd7-99a3-48e6-856a-bd4a90cda75a' date '31 May 2014' time '10:17:00.706359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-dtl.738' message 'Remove unnecessary pushRemappableOop in primitiveUtcWithOffset' id '5911e4eb-32e9-4ecb-802a-b9bd422812de' date '29 May 2014' time '9:19:01.735294336 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-dtl.737' message 'Fix code generation for ThreadedFFIPlugin by ensuring that target directory exists, addressing failures in http://build.squeak.org/job/CogVM/ code generation test.Fix regression in primitiveUtcWithOffset, answer the correct local time offset.' id 'dd942895-9394-4192-aa6f-dc808c730053' date '29 May 2014' time '8:18:00.803392448 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-tpr.736' message 'Merge with -eem.735Add CogARMCompiler code to make ARM opcodes a bit easier to write (add:rn:, mov:rn: etc)Change the return to use LR instead of popping the return address from the stack - lots of side effects to fix up' id '52dd5233-dcb9-46a7-80ce-d69b874aa615' date '28 May 2014' time '9:47:00.520392448 am' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.735' message 'Spur:Fix management of lastFreeChunk during compaction(in sweepToCoallesceFreeSpaceForPigCompactFrom: andfreeUnmarkedObjectsAndSortAndCoalesceFreeSpaceForPigCompact).lastFreeChunk''s link was not being correctly terminated.Add asserts to chunk freers to check for free chunksoverlapping, which caught the compaction bug.Make sure that endOfMemory is immediately below thelast bridge.  This is where it was set when adding a newsegment, but on loading a snapshot it was mispositionedat the end of the last bridge.  Add a check tocheckSegments, and use it in a few more places.Eliminate bogus assert in sortedFreeListPairwiseReverseDo:.If free gets used then lastFreeChunk won''t point to it anymore.Nuke obsolete method (from old non-repeating compact).Cogit:Correct link register usage in various places.  e.g.enilopmarts, checkForInterrupts trampoline.  But especially,correct link register usage in the return sequencegenerators.  Since Tim and I agree that RetN: returns to theLinkReg, and no longer pops the return address from thestack,  genUpArrowReturn and genReturnTopFromBlockmust explicitly pop the saved return address into LinkRegbefore RetN:.  That means that all the RetN:''s in machinecode primitives will do the right thing, allowing these toavoid pushing LinkReg on entry.Simulator/Frame print:fix a typo, recategorize, add an accessor for assertVEPAES.' id 'ee13367a-8346-4ce8-a124-276cba680fc1' date '28 May 2014' time '5:46:02.34 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.734' message 'Spur:Fix bug in sortedFreeListPairwiseReverseDo:.  Post blockevaluation, free cannot be relied upon, so reconstruct theposition in the enumeration from prevPrevFree andprevFree before moving on.Cogit:Make sure genMethodAbortTrampolineFor: has the samelinkRegister code as genMethodAbortTrampoline.Simulator:Eliminate the cone inst var.  cloneSimulation is, of course,fork, so only the parent slot is needed.' id 'd6a50836-2b47-4425-a81b-07dcc902faaa' date '28 May 2014' time '7:45:01.073065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.733' message 'Use unsigned comparisons when testing if there''s sufficientheap space in readImageFromFile:HeapSize:StartingAt:.Remove break in CogVMSimulator>>ceSend:super:to:numArgs:.Monticello should really check for break methods on commit.Refactor cloneSimulation into cloneSImulationWindow andcloneSimulation.  Remember the clone and the parent.  Usethis to make the Spur GC take a clone and push it off thecliff every global GC to allow repeating GCs that hit bugs.Add an assert to check that all weaklinks are accessible(but the bug has already been found with the nextCorpseencoding bug).' id '6d38bb55-fe48-480d-a606-d577925a2785' date '26 May 2014' time '12:38:00.96832704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.732' message 'Spur:Fix traversal in sortedFreeListPairwiseReverseDo: when there is onlyone element in the sorted free list.Weak containers and ephemerons in new space must beprocessed after all strongly reachable objects have beenscavenged.  So when the scavenger reaches a weakcontainer or ephemeron it copies it to future space, leavingbehind a forwarding pointer in the corpse, but it does notyet scavenge its contents.  The corpse is used to constructthe list of scavenged weak/ephemeral objects.  Thecorpse''s forwarding pointer is already taken to point to thesurvivor.  Instead, the list is constructed by having a listhead variable, and linking the list through a value stored insome of the corpse''s unused header fields (format &identityHash).  0 marks the end of the list.  Of course thisdoesn''t work if an object is the first object in newSpace asthis offset will be computed to be zero, improperlyteminating the list!Fix this by adding one to the corpse offset and substracting 1 when decoding.Implement a simple policy to deal with the fact that typicallyheap growth happens during tenuring, not after a failedallocation.  If, after scavenging, the heap has grown by somefactor of its size at the previous global GC, do a global GC.Default the factor to 0.333333.Provide VM parameter access to this value:55	ratio of growth and image size at or above which a GC will be performed post scavengeAdd a printFreeChunks debugging utility that sweepsthrough memory instead of traversing the free lists.Fix the shadowed variable warnings in primitiveIsPinned &primitivePin.  Format the shadowing warning a little more carefully.Simulator:Move the halt on Spur global GC into globalGarbageCollect andnuke the subclass methods.' id '8390b0f2-ae2c-4fc6-9abf-41d6cefda0fd' date '22 May 2014' time '2:00:03.47116352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.731' message 'Spur:Implement primitives to get (primitiveIsPinned) and (un)set(primitivePin) per-object pinning.' id 'e19b7342-8c8a-4ad8-8acd-64a6c1a7544d' date '21 May 2014' time '3:44:03.554425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.730' message 'more typos :-/' id '721dc8e5-985a-41a1-8e5d-09d9095df7d8' date '21 May 2014' time '11:42:01.477098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.729' message 'Fix a typo to the segment deallocator, for consistency.' id '611ca439-fb89-4d43-a138-ebbd559c605a' date '21 May 2014' time '11:09:01.079294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.728' message 'Spur:Implement memory shrinkage.Check free space around SpurSegmentManagerprepareForSnapshot & postSnapshot.' id '706ecf52-7165-4829-bfb3-8a9ac4f29216' date '21 May 2014' time '11:01:02.22732704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.727' message 'Spur:Fix assert regression in allInsyances/allObject from introducingMarkObjectsForEnumerationPrimitives=false' id 'c4880b9d-5eff-44bc-8908-a6e831764659' date '20 May 2014' time '3:35:03.473065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.726' message 'Now Spur''s object representation implementsgenInnerPrimitiveMirrorNew[WithArg]: we needdefaults for the generic object representation' id 'b0fc7b91-c835-49e5-a4b2-4bdad9a39331' date '20 May 2014' time '2:59:00.275228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.725' message 'restrict the NoRegParms attribute to static functions in theinterpreter and/or cogit files.' id '801ca845-7d9b-480f-afb9-be5cbc72d74f' date '20 May 2014' time '2:31:02.121359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.724' message 'Slang/general:VMBIGENDIAN must *not* be defined during generation.  Itshould be taken from platforms/??/vm/sqConfig.h.  This shouldgo a long way to fixing Doug''s issues on PPC.Spur:Don''t mark on allInstances/allObjects.  Use a class var tomark the choice so we can turn it back on if desired.' id '30e942d9-0d06-42d3-8f9a-893dbdee37c2' date '20 May 2014' time '5:14:04.291228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.723' message 'and of course the MirrorNew prims are option: #NewspeakVM' id '7e7f66ea-1471-4c21-9040-bd4ba88fea7f' date '19 May 2014' time '7:01:03.922228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.722' message 'Fix regression in genInnerPrimitiveNew: caused by my gettingconfused with genInnerPrimitiveMirrorNew: and eating my owndog food losing the correction in all that noise :-/.' id '57748597-0064-4d5e-bbe6-c4b37b9adff6' date '19 May 2014' time '6:44:04.158425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.721' message 'Slang:In non-production VMs add an attribute to disable registerparameters (at least for GCC-compliant compilers), allowingall static functions to be called from gdb even in the -O1assert VMs.Newspeak:Delete unused misnomer for push outer bytecode.Spur:Split the check heap loop between newSpace and oldSpaceto improve leak map checking performance a little.VMMakerAdd the useful expressions to the do... menu if present.' id '0b57bb7c-ae00-4c31-8399-05cea9c1ce79' date '19 May 2014' time '6:01:03.036392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.720' message 'Newspeak Spur:Provide machine code primitives for instantiateFixedClass:(a.k.a. a 1 arg basicNew) and instantiateVariableClass:withSize:(a.k.a. a 2 arg basicNew:).Spur:Fix the assert in checkForAndFollowForwardedPrimitiveStateand add support for primtiive 218, primitiveDoNamedPrimitiveWithArgs.Multiple bytecode sets:
Usse class vars to define the per-bytecode setlongStoreOpcode instead of hardwiring the SqueakV3and NewsqueakV4 values.Use the new multiple bytecode set support to implementstack depth finding.  Nuke the now obsoleteNewspeakStackDepthFinder.Simulator:Provide missing Spur unalignedLongAt:[put:].Fix the new evaluating of the break block on everyinterpreted instruction when a breakPC is in effect.Misc:Fix formatting in genMethodAbortTrampoline.Nuke the obsolete CompiledMethod>>usesAlternateBytecodeSetoverride.Fix str:n:cmp: usage in printOopShortInner:.' id '0db9a001-37b2-4c1b-9aa8-0e661200853c' date '16 May 2014' time '5:24:03.008294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.719' message 'This *should* be a merge of the latest Eliot-cog with the latest tpr-ARM-cog. Hope it merged ok... and uploaded ;-)' id '25cb5d93-f8cf-4efe-874f-7f363c5b7a84' date '15 May 2014' time '1:52:02.726065408 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.718' message 'This *should* be a merge of the latest Eliot-cog with the latest tpr-ARM-cog. Hope it merged ok...' id 'c0771863-5b07-47cf-9067-dadac57750ae' date '15 May 2014' time '1:50:03.62116352 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.687' message 'save working state 15May2014' id 'cd209df8-6ac4-496d-834a-be431814af12' date '15 May 2014' time '1:34:03.79016352 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.686' message 'first set of ARM changes' id '72c4851a-69c6-411d-b150-a116686ee825' date '5 May 2014' time '5:58:03.588228928 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.685' message 'Make the FFI plugin generated files cross-platform.  Outputa skeletal SqueakFFIPrims.c which includes the relevantfleshed-out implementation.  Output the two currentimplementations to SqueakFFIPrims/{ARMFFIPlugin.c,IA32FFIPlugin.c}.Change the Squeak configurations to output both the IA32and ARM FFI plugins.  Omit the FFI from the Newspeak conf.Fix bogus assert-fail for aboutToReturn:through: send in thesimulator.' id '07bc1e83-6566-4de0-af79-d6c7874ffcdd' date '21 April 2014' time '12:36:03.400032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-djm.684' message 'Fix bug in pushing structures. All existing FFI tests now pass for ARM (at least on Raspberry Pi)!!' id '136d682f-3611-4807-8db0-003ffe98f06a' date '20 April 2014' time '5:47:02.791 pm' author 'djm' ancestors ((name 'VMMaker.oscog-eem.683' message 'Rename longLongAt:[put:] to long64At:[put:] and implement inByteArray.  Implement facade support for CogObjectRepresentationFor32BitSpur.Make sure that cog:selector:options: initializes CoInterpreter.These so that e.g.	StackToRegisterMappingCogit	genAndDis: SequenceableCollection>>#indexOf:startingAt:ifAbsent:	options: #(ObjectMemory Spur32BitCoMemoryManager)works.Bonne p e!' id '115116fc-aa8a-4fb5-acac-37a02b779983' date '20 April 2014' time '12:08:02.09016352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-djm.682' message 'ThreadedARMFFIPlugin- make progress on passing and returning structs but there are still outstanding bugs- 22/23 existing FFI tests pass, but there are many new tests yet to include to stress combined register and stack usage for parameter passing' id 'e7def840-4cc1-464d-a20e-29498ae5a99a' date '19 April 2014' time '5:59:01.032392448 pm' author 'djm' ancestors ((name 'VMMaker.oscog-eem.681' message 'VMMaker:Make the location of the source tree used by the configurations avariable.  This jives with the new image dir buildsqueak45image.shscheme.Move hex8 into the VMMaker package.' id 'c98fb038-0467-4bd9-9aea-1284afc12ffb' date '18 April 2014' time '11:58:02.654425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.680' message 'Fix a couple of slips in the Simulator;s context access methods.' id '4c5d6723-7644-4b44-92df-0af0ec9b453d' date '17 April 2014' time '3:31:02.870130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.679' message 'Slang:Rescue the SimpleStackBasedCogit by avoiding the conflictbetween the object representation''s numRegArgs and theCogit''s numRegArgs by renaming object representation''snumRegArgs to preferredNumRegArgs.Rescue running the Slang test workspace expressions beforeinitialization by adding guards in the relevant places.ThreadedARMFFIPlugin: delete an unused method to nukean Undeclared.' id '96f3797e-31e4-4c70-bd12-af82bff6fbe5' date '17 April 2014' time '3:03:03.489392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-djm.678' message 'ThreadedARMFFIPlugin- fix compile problem caused by ffiPushPointer:in:- fix problem mediating between registers and stack after marshalling first 8 byte integer to stack- support backfilling of float registers when marshalling a double leaves an empty register due to alignmnet' id '33f4c73e-5761-456b-a655-85ed057debfd' date '17 April 2014' time '11:34:01.814392448 am' author 'djm' ancestors ((name 'VMMaker.oscog-djm.677' message 'Remove stragglers.' id 'd4fdb96f-7984-46b8-9a72-7025d59ae1e0' date '16 April 2014' time '11:15:01.397294336 pm' author 'djm' ancestors ((name 'VMMaker.oscog-djm.676' message 'Filling in pieces of ThreadedARMFFIPlugin. This version of ThreadedARMFFIPlugin DOES NOT WORK (OR COMPILE). It is being captured to facilitate chasing of a potential bug in slang inlining. The only changes outside of ThreadedARMFFIPlugin are arm-specific macros in ThreadedFFIPlugin class>>preambleCCode, minor tweaks to ThreadedFFICalloutStateForARM, and cosmetic changes to ThreadedFFICalloutStateForPPC.' id '18df673d-875b-4fe9-9e0a-aa75fb44820c' date '16 April 2014' time '10:47:01.129032704 pm' author 'djm' ancestors ((name 'VMMaker.oscog-eem.675' message 'Define the Sista V1 bytecode table for the StackInterpreter.Include commented-out breakpoint code in simulator context access.Fix comment typos' id '62a9b7df-b999-4552-b597-4b766d97f919' date '16 April 2014' time '2:52:03.313392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.674' message 'Deal with the pc ambiguity of conditional branches followed bybackward branches (conditional branches map to the followingpc, backward branches to themselves) by providing and usingmcPCForBackwardBranch:startBcpc:in: when converting interpretedframes containing loops to machine code frames.  This eliminatesa bogus mustBeBoolean when converting interpreter loops in Sista.Change mcPCFor[BackwardBranch]:startBcpc:in: to answer theabsolute mcpc (as was commented) rather than the relative mcpc.This requires a 5-argument perform in mapFor:bcpc:performUntil:arg:.Refactor to add an isBackwardBranch argument to the functionperfomed in all clients.For performance, specify that mapFor:[bcpc:]performUntil:arg: areinlined, eliminating the perform/indirect function call.  This adds ofthe order of 3% to the size of a cogit.o''s text seg so is acceptable.Tweak Slang to accomplish the inlining.Fix a bug in printing frame flags (order was the wrong way around).' id 'eefd603d-9638-4ad8-99c0-4ee12e87d49d' date '14 April 2014' time '12:12:02.845196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.673' message 'Sista:We cannot back-up the machine-code pc in ceCounterTripped:because there isn''t always a send preceeding the jump (e.g. inand: [] and or: [] chains).  Instead, prevent subsequent countertrips (to reduce the number of necessary skipBackBeforeJumpsends in the image) by nilling out SelectorCounterTripped.The image-level optimization code will both restore the selectorand back-up the pc.' id 'a10ccba5-8338-4cc4-ae49-a11440780603' date '11 April 2014' time '12:37:02.599130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.672' message 'Implement the new Spur interpreterProxy API for ObjectMemory(of course pinObject: fails, and isCharacterValue: has a smallerrange).' id '21493732-2e31-4b57-a8ae-aa6e6a9e4c3c' date '11 April 2014' time '11:40:02.258392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.671' message 'Sista:Revise counter tripping so that ceCounterTripped: repositions thecontext''s pc after the send preceeding the conditional branch,instead of it being done by slower Smalltalk code (skipBackAfterJumpwhich for convenience may parse from the beginning of the method).Add the Sista configurations to gen all versions under ver ctrl.' id '49fb678b-0fe3-42cf-a276-c617f429951d' date '10 April 2014' time '11:37:01.624032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.670' message 'CoInterpreter:Garbage collect/remap the primTraceLog correctly.  If a GC happensver early in start-up the log circular buffer may not be full and theexisting code assumed it always was.Cogit:Fix an assert fail in mapFor:bcpc:performUntil:arg: (this forprimitiveClass where the class table reference can be the firstmap entry).Newspeak:Fix a bug in remapIfObjectRef:pc:hasYoung: with dynamic supersends which could compute an invalid target method.Rename pushExplicitOuterSendReceiverBytecode et al topushExplicitOuterReceiverBytecode et al.  These are not sends.Sista:Fix picDataFor: which must return integers or oops, never nil.Cope with doubleExtendedDoAnythingBytecodes which /may/ besends or not, and hence are problematic for gathering send data.Generate correct counting code for #==, which implies it can''t beframeless in Sista.Annotate the right address (the return address of theceMustBeBooleanFoo call) in counting genJump:if:.Sista now starts up a Pharo image and can gather send and branchdata for all methods.Simulator:Evaluate the cogit''s break block on each bytecode in theCogVMSimulator.Add missing ObjectMemory>>ioLoadModule:OfLength:.Cope more gracefully with not finding an image.' id '071bf6af-04c0-4256-b053-d66378b73d27' date '9 April 2014' time '12:15:00.343065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.669' message 'Fix bug in unlinkSendsOf:isMNUSelector: (primitiveFlushCacheBySelector)where old code could free the method of an active frame.' id 'bb746b04-e032-4c6f-9a28-e67a3987c898' date '8 April 2014' time '9:09:01.333392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.668' message 'Fix some speeling erreurs in the SistaStackToRegisterMappingCogitcomment.  Fix the annotating of the instruction following themustBeBoolean trampoline call in Sista''s genJumpIf:to:.' id '1d7c6ec0-1a6e-4a0b-8f6b-b0b937282745' date '7 April 2014' time '4:14:01.930294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.667' message 'Add Spur support for Sista (shorten:toIndexableSize: et al).Implement instantiation in picDataFor:into: in terms ofeeInstantiateClassIndex:format:numSlots:.Slang:Allow methods that are functional apart from an initial flag: send tobe inlined.  This allows e.g. rawSlotsOf: et al to be inlined in Spur.Add a Spur Sista configuration.' id '1a6d90d7-74e1-4519-9da1-d39c12321b2e' date '5 April 2014' time '12:57:01.96216352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.666' message 'Sista:Fix several bugs in the primitiveSistaMethodPICAndCounterDataprimitive.  Fix consistency between monomorphic and polymorphicsend tuples, always answering pc, class, method/selector.Fix collecting data from PICs with MNU cases.  Remove a stray halt.Make sure primitive fail points return. not continue on.Eliminate dead conditional branch elimination so that the send andbranch data collection is not confused by branches for which nocounting code was produced.Cogit: since the annotation arg is no longer used, refactortargetMethodAndSendTableFor:annotation:into: totargetMethodAndSendTableFor:into:.Simulator:Add missing asVoidPointer on methods.Add instantiateClass:indexableSize: for the facade.Provide a cog: entry point for in-image compiling a method.' id '647ff48c-1974-41d1-9b8f-678688bc79d8' date '4 April 2014' time '4:00:00.138425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.665' message 'Sista:Not understanding what I''m doing has caused confusion and delay.The return from ceCounterTripped: should indeed jump to the retryof the first counter decrement.  But the result comes in throughcResultRegister, which may be the same as TempReg which the codeuses to hold the boolean tbeing tested.  So TempReg should /not/ bereloaded with ReceiverResultReg.Remember to count the untaken branch in inlined special selector comparisons.Simulator:Change the prompt for the break block to present a template.' id 'bda8b202-c4ed-455a-aa43-e3135d74e79b' date '3 April 2014' time '5:15:00.37916352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.664' message 'Move two stragglers into the VMMaker package, as needed for thenew allInstances function in ObjectMemory.' id 'c3e36805-b678-46b9-92b2-dd015fa5c970' date '3 April 2014' time '10:30:01.301196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.663' message 'Fix pc-mapping for NewspeakV4.  Dynamic super sends should/not/ be annotated with IsNSSendCall, but wth the vanilla IsSendCall.This fixes a bug converting an interpreter activation of a methodwith a loop and a duynamic super send to a machine code frame.One more fix (addition to ByteArray) to fix in-image decompilation.' id 'b4c4ad18-808c-4afb-9ddc-80def5e01086' date '2 April 2014' time '7:15:01.839065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.662' message 'Fix in-image compilation (at least for ObjectMemory).' id '2b89547d-56bd-42fa-a1e9-06ef4f9bd5f6' date '2 April 2014' time '3:17:01.025032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.661' message 'Sista:Reload TempReg from ReceiverResultReg on return fromcounter trip, so that branch retry tests the right value.Add a primitive to reset branch counters in a method.Spur: abstract out the average object size calculation into its ownmethod (it''ll be needed for pig compact).Simulator:Fix sqFile:Read:Into:At: for stdout when stdoiut is the Transcript(Pharo startup indirectly tries to set line-end convention of stdout).Implement remapping in remapOop:in: (simulating a Sista imageresulted in a GC in one of the LargeInteger routines).' id 'e09e68b7-6224-4c07-acd0-ea1f7cf57370' date '1 April 2014' time '3:51:02.018392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.660' message 'Oops.  Remember to restore the simulation methods for the backEndcallerSavedReg mask refactor.' id 'f2990b8f-1efa-4ae8-9823-2c14986774b2' date '28 March 2014' time '12:36:01.358 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.659' message 'Fix compilation warnings in cogit.c by moving callerSavedRegMaskup to Cogit.c, accessing it in CogObjectRepresentation store checkvia a macro and eliminating the hideous copying of the backEndvariable (whose removal in CogObjectRepresentation was losingits type decl in Cog class>>declareCVarsIn:).' id 'cc4b5641-6415-4f25-a5ee-bffa61fbd6d9' date '28 March 2014' time '12:10:00.587294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.658' message 'Allow vmParameterAt: 26 put: 0 to disable the heartbeat itimer.' id 'e40c5fd5-9990-433f-bd76-2f8d0324e24f' date '28 March 2014' time '11:07:02.400130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.657' message 'Make primitivePathToUsing work on Spur also.Add ImmX11Plugin to generated plugins.' id '11ce8f75-e6b4-4923-8336-720d3da9acbd' date '27 March 2014' time '4:10:00.367228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.656' message '[New]ObjectMemory need to provide whereIsMaybeHeapThing:' id '03e04241-b10f-4620-9be5-99543d124412' date '24 March 2014' time '5:22:03.384196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.655' message 'Spur:Ugh, what a bug hunt.  Move the expungeDuplicateAndUnmarkedClasses:send from markObjects to globalGarbageCollect where it belongsand hence prevent allObjects and allInstancesOf from breaking theclass table.Rationalize all but one of the various sends of runLeakCheckerForFullGC:-excludeUnmarkedNewSpaceObjs:classIndicesShouldBeValid:to runLeakCheckerForFullGC:Fix printInstancesWithClassIndex: for simulation.Make SpurMemoryManager''s clas comment describe the class tableas it is, rather than as it might be (i.e. classTable pages /are/ strong).' id 'd6c00552-e909-49e0-a838-d6c3225dedda' date '24 March 2014' time '4:16:02.558130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.654' message 'Streamline copyAndForward: and forward[Survivor]:to: and clientsof setFormatOf:to: & setClassIndexOf:to:.' id '0b86152b-2ab0-40e7-a54b-b2abc4e53e64' date '21 March 2014' time '4:43:02.519261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.653' message 'Fix store check call from machine code which in Spur was showingthat ClassReg (%ecx, a caller-saved reg) was not being saved whencalling ceStoreCheck:.  This /could/ be the cause of crashes in theclang build (or at least one major cause).  It didn''t show in theclassic VM because the store check is simpler.Fix copyAndForward: to add tenured objects to weak and ephemeronlists if required.  Because the weak and ephemeron lists are threadedthrough forwarding corpses they can indeed refer to old objects,adn just cuz a weak/ewphemeron object is tenured doesn''t mean itdoesn''t need to be scanned post-scavenge.Relax the leak-check in Spur fullGC to allow invalid class indices atany point except after fullGC, at which point the classTable shouldhave been purged.' id '8ed77d78-2be2-4023-b767-7486dd43736f' date '20 March 2014' time '10:12:03.652032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.652' message 'Implement whereIs: to provide better debugging of weak containers.Allow inlining when parameters include structure accessors fore.g. isInFutureSpace: in whereIsMaybeHeapThing:.' id 'd044d1df-74db-4230-8670-4fcbc815e762' date '20 March 2014' time '9:39:01.361 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.651' message 'Prune youngReferrers amd flush icache after freeUnmarkedMachineCode. Protect byteSizeOfInstanceOf:withIndexableSlots: against integeroverflow.' id '4fc53472-12b1-487f-8620-d0fc2eff1662' date '19 March 2014' time '2:29:01.666196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.650' message 'Fix nilling of weak fields in old space.  The old space GC mustfollow forwarders just as the scavenger does.' id '600ed9be-7bc7-4ad0-9675-2ac9d3774b36' date '19 March 2014' time '12:41:04.094359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.649' message 'Spur: fix class table management for two-way become of classeswhen one has a hash and the other doesn''t.' id '1f3fad84-6f4c-4b09-bb0d-0713283421ca' date '19 March 2014' time '11:46:01.133065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.648' message 'Fix the regression in VMMaker.oscog-eem.647 which correctlyinferred types for kernel selectors but stopped correctly inferringtypes for api methods.Print (nil) next to the selector for cog methdos with a nil selector.Prune young referrers in followForwardedMethods.' id 'fc8c84dd-a94e-452e-afb0-25db6d9a00eb' date '19 March 2014' time '10:45:01.655359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.647' message 'Fix inferring types assigned from the kernel selectors, and hencecorrectly evaluate testBecome.Fix primitiveArrayBecome (the two-way become); it should /not/specify copyHash.  ObjectMemory ignores the copyHash flag when doing a two-way become, hence the wrong sense of the flag hadno effect.  Hence correctly evaluate testBecomeIdentityHash.Avoid remembering bit objects in inPlaceBecome:and:copyHashFlag:.' id '1dc11031-04d6-4682-b2a4-0a3cb99c2a2c' date '18 March 2014' time '6:58:00.69732704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.646' message 'Fix stack depth assert in ceSendAbort:to:numArgs:.Fix method access for assert in followForwardedFrameContents:stackPointer:' id '688bbdd2-e45e-4b9b-b332-2a5387116729' date '18 March 2014' time '5:09:00.70316352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.645' message 'In the interests of pushing the lemming over the cliff, mak theFilePluginSimulator correctly reopen its files after a snapshot,restoring them to their previous position, etc.' id 'ae96679e-8754-455f-9cf3-4cb0f631d85a' date '18 March 2014' time '2:16:02.143130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.644' message 'Add a flag to traceFlags so that stack depth is tested inceTraceLinkedSend:, instead of only unlinked sends.' id 'e798bf3c-ca76-49c5-9cd2-b9de38d00b7a' date '18 March 2014' time '11:26:03.028098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.643' message 'More simulation/debugging work.Make CoInterpreter>>printFrame: not mislead as to the number oftemps in a block activation.Make maybeCheckStackDepth:sp:pc: cope with the pc for an unwind-protect callback.Void the cached stack depths on any GC to avoid false assert-fails.' id '9fbc0481-828d-43dc-8c73-012d2e427a77' date '17 March 2014' time '5:17:01.477 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.642' message 'Mostly simulator work.Rationalize signed[32|64]BitIntegerFor:.Fix odd bytes calculation in Spur>>allocateBytes:classIndex:.Refactor the Spur leak checker so that references to garbage- collected classes are tolerated mid-way through GC but not beforeor after.Make primitiveSine etc simulate correctly when given Float nan asoperand.Make asPositiveIntegerObj simulate correctly.Fix screen update when large simulator windows are opened.Fix screen update in BitBltSimulation>>unlockSurfaces and deletethe bogus fullDisplayUpdate on every 1000 bytecodes.Fix access to the cmShiftTable in BitBltSimulation for negative shifts.Fix the unitSize asserts in loadColorMap for simulation.Fix simulation of primitivePixelValueAt[X:y:]Increment byteCount by microseconds in ioRelinquishProcessorForMicroseconds:so that microsecond clock advances (but this should be improvedby adding a separate microsecond clock).Rewrite checkIfValidObjectRefAndTarget:pc:cogMethod: to use thenew accessors, but the assert for a cacheTag is still wrong for Spur.Speed up StackInterpreterSimulator by adding a flag to control theuse of assertValidExecutionPointers on each bytecode, with a togglein the utilities menu.' id '617048ca-1069-454c-951e-2ab94c6d66de' date '17 March 2014' time '2:22:01.011 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.641' message 'Spur: Revise interface between GC and machine-code for Spur''sephemerons.  We can''t mark and free in a single pass withephemerons because a machine-code method reachable only fromthe stack could refer to something referred to from an ephemeron.So all machine code must be marked before freeing.' id 'c0305b66-db2d-45aa-8d25-267732aa1784' date '13 March 2014' time '5:40:00.638065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.640' message 'Now that Slang inline block support is better rewrite themachine-code scanning routines to use two new control structures,offsetCacheTagAndCouldBeObjectAt:annotation:into: &targetMethodAndSendTableFor:annotation:into:.Hence eliminate all the duplication between Newspeak and Squeakin teh scanning routines, such as markNSYoungObjects:pc:method:.Inline methodAfter: & roundUpLength: (the latter via a macro, sigh).Make CogVMSimulator>>ceStackOverflow: bump the byteCount by1k so the microsecond clock advances faster when in machine code.' id 'b52d099d-350b-40ce-8ef3-0bbf96ca7539' date '13 March 2014' time '3:29:01.072098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.639' message 'Update primitiveSizeInBytesOfInstance to work withCompiledMethods.' id '4e650b80-cb7f-46c0-9fd4-3dc205b1b262' date '12 March 2014' time '12:29:02.755065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.638' message 'Add primitiveAllInstances and modify primitiveAllObjects so thatboth will grow memory to guarantee their results.Modify Objectmemory/SpurMemoryManager>>allObjects &allInstancesOf: to answer the count of objects when they run out ofspace so that teh primitives can grow and retry.Change the time primtiives to access the time now, not the time asupdated by the heartbeat (but /don''t/ change the time basis forevent checking.  This for performance because use of gettimeofdayin e.g. stack overflow can be a signficant performance overhead.Move the simulated time implementations (ioSeconds et al) up toStackInterpreter to reduce duplication.Spur:Assert that the markStack and weaklingStack are empty at systemstartup and at start of GC (allInstancesOf: et al went though a buggyphase where weaklingStack was left full).Fix assert in popObjStack: now that isValidObjStack: checks slots inhiddenRootsObj.' id '4c01acdf-1273-4319-aef5-fd3591c3dbe9' date '11 March 2014' time '6:46:01.564 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.637' message 'Fix genSmallIntegerComparison:orDoubleComparison: (which liesbehind SmallInteger>>#= primitive 6) for Spur which hasimmediate Characters.' id '313e51e8-63ef-40f1-a824-c26eaa2b39b7' date '10 March 2014' time '4:51:01.61516352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.636' message 'Fix byteFormatForNumBytes: and hence fix the new version ofpositive64BitIntegerFor:.Make sure expungeDuplicateAndUnmarkedClasses: resetsclassTableIndex for nil entries.Eliminate duplication in generateEntire.Typo.' id '97945106-afaf-4c50-be03-a1806625c3b9' date '10 March 2014' time '12:19:02.60732704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.635' message 'Fix decoding the per-segment bridge span/seg size info on loadand successfully load a multi-segment Newspeak bootstrap image.Finally!' id 'd3e35b87-a79e-44a1-975b-549d6ae06743' date '9 March 2014' time '11:06:04.074359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.634' message 'Spur:Fix the reading of 0-sized bridges for adjacent segments on imageload.  Rename writeImageToFile: to writeImageSegmentsToFile:.Snapshot:  don''t use cCode: in writeImageFileIO and move thesimulatpr''s version up to writeImageFileIOSimulation to cut downon duplication.' id '6eba1357-7d48-41e2-b193-8bf6aa8d71c8' date '9 March 2014' time '10:35:00.079261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.633' message 'oops' id '8358808a-6e99-4c56-bae6-c492656d882c' date '7 March 2014' time '5:21:02.645 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.632' message 'Spur:Don''t write out empty segments on snapshot.Make various of the segment snapshot i/o rouitnes not inline fordebugging Newspeak bootstrap load crash.Make segmentContainingObj: avalable for debugging.Fix assert in inClassTableBitmapSet:.VMMaker:don''t trample on examplePlugins files.Report monticello version when blurbing to transcript.' id '3f0a0718-79cf-45e4-94fe-a0e6e87d19cf' date '7 March 2014' time '5:15:03.417228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.631' message 'Spur:Make sure adjustAllOopsBy: only sets bits in the classTableBitmapfor classes, not class index puns. Provide a free tree printer.Typo.' id '7865b135-ec18-4e75-afdd-3f2c9662b61b' date '6 March 2014' time '5:37:00.157196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.630' message 'Update generateAllConfigurationsUnderVersionControl.Typo.' id '8ca18389-543a-4847-958c-8e818a7e0900' date '6 March 2014' time '12:13:00.604196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.629' message 'Revamp primitiveVMParameter to avoid overflow in values such astotal heap size.  Make statProcessSwitch, statIOProcessEvents,statForceInterruptCheck, statCheckForEvents, statStackOverflow& statStackPageDivorce 64-bit to avoid wrapping.Make sure that positive64BitIntegerFor: will not cause a GC just aspositive32BitIntegerFor: doesn''t.' id 'b5baf46e-f728-459f-954f-c1c4aeb2abb4' date '6 March 2014' time '12:08:01.016130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.628' message 'Fix slip in objCouldBeClassObj:objectMemory rawHashBitsOf: objOop should readobjectMemory rawHashBitsOf: fieldOop' id '0984b1b6-9b3f-44a5-96fe-afc61f43c9a1' date '6 March 2014' time '11:09:00.985098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.627' message 'Fix startPCOrNilOfLiteral:in: (for scanForCleanBlocks) for newspeakaccessors in Spur.' id 'e34ab5ac-3db8-4b8d-8e5f-722905cea020' date '5 March 2014' time '2:28:01.34632704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.626' message 'Add eeInstantiateSmallClassIndex:format:numSlots: for afapallocation of small objects.' id '17970553-7e67-46a4-b329-ccce9e1c7ba3' date '4 March 2014' time '6:43:00.575130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.625' message 'Increase length limit in stringOf: to 128 characters for Spur boot-strap, and move it up to StackInterpreter.  Do same with openOn:.Use neater expression for determining pur size of large free chunkand add an assert to freeTreeNodesDo: to try and track downappearance of small chunk in free chunk tree.' id '75659976-9919-4e64-bf59-d5d83894396d' date '4 March 2014' time '2:22:03.535294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.624' message 'Spur: Instance printing should not print free chunks ;-)' id '7671143a-d3d3-45cb-b481-210d4d0c4073' date '28 February 2014' time '4:46:03.644392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.623' message 'Spur:Remember to invoke markAndTraceOrFreeMachineCode: inthe mark phase of full GC.Add classOrNilAtIndex: and use it in places where a nil return isunacceptable (fetchClassOf:, especially for isLKindOfClass: whengiven garbage in printOop:).' id '5d6a7bff-2bb3-4294-94d1-eaea186d01f0' date '26 February 2014' time '6:02:03.553228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.622' message 'Improve spread in Spur''s identity hash from 64% to 75%.Make primitiveSizeInBytesOfInstance accept 2 args in Newspeak forVMMirror.Try and fix initialization of ProcessorClass in Cogit.' id '7a33af68-b347-4a24-b960-e8755f7c49f3' date '26 February 2014' time '11:53:01.95716352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.621' message 'Use followForward: when accessing the elements of the array(s) inbecome, since there''s nothing that ensures uniqueness and/ordisjointness in the elements.  Hence explicitly filter-out an objectbecomming itself.' id '5b811028-86e2-4574-9163-5e47f4c7f3eb' date '24 February 2014' time '2:23:03.445294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.620' message 'Fix an assert fail in findSPOrNilOf:on:startingFrom:.Fix scanClassPostBecome:effects: for the bogus temp classes theNewspeak bootstrap creates.' id '0c6991e0-acb5-4250-84d8-cdeebfac41e9' date '19 February 2014' time '5:37:00.503032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.619' message 'Spur: Get obj stack swizzling correct.Add some missing simulation plumbing.' id '9cd188c5-a1b6-46c2-8408-99190a15f19f' date '18 February 2014' time '3:57:00.680098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.618' message 'Spur: Update firstFreeChunk correctly when it is allocated in thecompaction routines.Break out of the search loop sooner inallocateOldSpaceChunkOfBytes:suchThat:.Make the halt in globalGarbageCollect informative.' id 'db6b9128-3c54-41b7-b3d9-0063d6001b70' date '18 February 2014' time '2:28:01.342359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.617' message 'Merge with VMMaker.oscog-tty.616 & VMMaker.oscog-dtl.615.Recommit changes in misnamed .VMMaker.oscog-eem.615 et al:Make Spur snapshot avoid writing trailing free space in eachsegment to the image fileFix initialization of primitiveAccessorDepthTable during simulation.Use Smalltalk vm getSystemAttribute: instead of plain oldSmalltalk getSystemAttribute:Some musings on Spur compaction.' id '3683f3df-b4c0-4145-9b2c-758146d91de7' date '17 February 2014' time '12:19:01.908392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tty.616' message 'Started with a clean Squeak4.5-13675 RC4 image. Loaded VMMaker.oscog-dtl.615 etc.Filein VMMaker-InterpreterSimulation-Morphic category and classes.Merged in StackInterpreterSimulator changes required for event forwarding from VMMaker.oscog-tty.614Saved this to local repository.Copy this to live repository.' id '6cf1ed46-20ba-4278-b333-414f6b4ae39a' date '15 February 2014' time '4:06:03.365228928 pm' author 'tty' ancestors ((name 'VMMaker.oscog-dtl.615' message 'Use the equivalent #shallowCopy rather than #clone (Pharo compatibility).Update SmartSyntaxPluginCodeGenerator>>initializeCTranslationDictionary to comment out unused (planned but never implemented) code.Matches changes in VMMaker-dtl.341' id '2bd0f5e2-4cec-407d-8255-0af86a06561f' date '15 February 2014' time '1:09:04.051228928 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-eem.614' message 'Improve Spur''s identity hash LCG, eliminating the mod calc.Comment out the format collection code in the stakc simulator''sprimitiveNewWithArg.Fix 32-bit Spur''s genInnerPrimitiveIdentityHash:' id 'fd533002-1a4b-4bbe-a8bc-d1d8c82080ae' date '12 February 2014' time '1:59:00.739196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.613' message 'Make primitiveClone cope with variable args, cloning its lastargument.  This for the Newspeak VMMirror.' id 'a84d1f38-0c74-4f61-8e2a-f3c77262a9fb' date '10 February 2014' time '3:07:03.008196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.612' message 'Fix the at cache for wide strings in Spur given that Spur supportsthe String at:[put:] primitives on WideString.Fix isWordsOrBytesNonImm: to answer false for forwarders.Fix fixedFieldsOf:format:length: to fall through to an assert fail forforwarders.Prettify the primitiveAccessorDepthTable literal so I can see what''swhat.' id '54335642-7834-48fb-936d-b567fb9857b3' date '7 February 2014' time '11:07:01.595196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.611' message 'Fix slip in StackInterpreter>>postBecomeAction:.  Must followreceivers after every become (even if become effects flags are 0)since e.g. a becommed string can be the receiver in a super send,and so, because super sends don''t trap, must be unforwarded.Add some asserts to catch this error in *activateNewMethod &slowPrimitiveResponse.' id '83908c61-3751-4074-b6e6-e5283e45f50f' date '6 February 2014' time '5:34:03.693425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.610' message 'Make StackInterpreterPrimitives>>primitiveObjectPointsTo correctfor both Spur and SqueakV3.' id '1f5ba92f-b8cd-4144-8ebf-5cff693870ac' date '5 February 2014' time '7:21:02.22216352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.609' message 'Fix the generic primitiveClone for immediates.' id '2a0cbd3c-d667-47c5-8ec1-b8bcbe4680a1' date '5 February 2014' time '1:02:04.021196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.608' message 'Fix Spur''s changeClassOf:to:' id '121bef6b-4756-4027-bde8-b4eb972fa939' date '4 February 2014' time '4:56:01.524359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.607' message 'Following forwarders in Spur markAndTrace: requires a store check.' id '9be0d8dc-ed68-4f51-becb-f83ed96185bf' date '4 February 2014' time '3:40:04.033032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.606' message 'Demorgan CCodeGenerator>>shouldIncludeMethodFor:selector:so it doesn''t include undefined options by default.  This so thatprimitiveTestShortenIndexableSize stays in its ghetto.Make ObjectMemory>>allObjectsDo: use objectAfter: instead ofobjectAfterWhileForwarding:.  Introduce allObjectsDoSafely: to useobjectAfterWhileForwarding:.  Add a compatibility method to Sour.Use allObjectsDoSafely: where appropriate.' id 'd20e62c6-4468-4f78-91cb-8331c94a6ab7' date '4 February 2014' time '11:40:02.468196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.605' message 'Confine primitiveTestShortenIndexableSize to a TestingPrimitives ghetto.' id '8ccb5e9c-1a6e-455f-8a97-1c30cca3ea1a' date '4 February 2014' time '10:32:04.25032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.604' message 'Rewrite allocateLargestFreeChunk to skirt Slang limitation.' id '3dedfc9d-e8c2-47ea-bb78-5dde624ade77' date '4 February 2014' time '10:24:02.475392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.603' message 'and fix a snafu in the buildCodeGeneratorForCogit: refactoring.' id 'c1e131ed-4f5d-41fc-828a-f200c54a83b8' date '4 February 2014' time '10:07:01.381392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.602' message 'Refactor InterpreterPrimitives>>primitiveAllObjects to movecreation and enumeration into objectMemory.Improve ObjectMemory>>allObjects by using fact that allocatedobject is always last object in heap.Implement SpurMemoryManager>>allObjects.For this, implement small/largeObjectBytesForSlots:and hence move allocateSlots:format:classIndex: et al up intoSpurMemoryManager.Fix bug in simulator to find and compute the accessorDepth ofnamed primitives in InterpreterPrimitives.  Hence refactorcode generator creation for Cogit and Interpreter intomethods that allow the interpreter to be passed in as a parameterand class initialization avoided.Fix bad bug in Spur>>firstIndexableField: that shifted by wordSizeinstead of shiftForWord.  Change some uses of wordSize tobytesPerSlot.' id 'aa08ab50-de50-4af2-9572-cdf179427de2' date '4 February 2014' time '10:02:00.290065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-dtl.601' message 'Fix NewObjectMemory>>shorten:toIndexableSize: for large arrays (3 word header) and make it work for variable objects with fixed fields. Change return value to be number of bytes freed, to permit sender to check for success.Fix method comment in ObjectMemory>>lengthOf:baseHeader:format:Add primitiveAllObjects.Add primitiveTestShortenIndexableSize for testing shorten:toIndexableSize: from the image.Adapted from VMMaker-dtl.339.mcz' id '0074410d-1695-4af5-82f4-c74b52a35a9e' date '2 February 2014' time '2:50:02.563425152 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-eem.600' message 'Revert bogus assert change.' id '48f5953c-233c-4026-96a0-ffef9cea1c72' date '31 January 2014' time '4:54:01.772098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.599' message 'Remember to follow the specialObjectsOop during scavenges.Fix a typo in a selector.' id '3f317156-92ed-49c4-a5bd-81491c3489a2' date '31 January 2014' time '4:25:02.07416352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.598' message 'Eliminate declaratiosn for non-existent vars in ScratchPlugin>>primitiveFisheye' id 'b85d7330-2ddc-4d90-8592-4e37234f4ac2' date '30 January 2014' time '5:06:01.74616352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.597' message 'Fix markAndTraceStackPage: for Spur.  Stack references toforwarders must be followed before calling markAndTrace:.Fix eliminateAndFreeForwarders; it assumed that no forwarder canreference a new object after scavenge.  That''s not true due totransitive references.Fix SpurMemoryManager>>become:with:twoWay:copyHash: to followthe specialObjectsOop if it has been forwarded.Plugins (and the form print prim):Fix some egregious oop + 4 and oop + 8 references with the correctoop + BaseHeaderSize.Reduce the use of isIntegerObject:.  isWords:, isBytes:et al fail for immediates anyway.Use var:type: where appropriate and use symbols for ''char *'' et al.Replace some uses of cCode: ''aFunction(args)'' with a send of theequivalent albeit non-existent selector.  This may allow simulationat some point in the future.' id 'c9a71dd4-c394-4a8f-aa4d-a6d4dc3ff220' date '30 January 2014' time '4:31:02.868294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.596' message 'Fix the isValidSegmentBridge: assert for the last bridge.Add printLikelyImplementorsOfSelector: for help during debugging.' id '2fdbc6e9-ad25-4c1c-8125-0fa1f3a8dbb5' date '29 January 2014' time '5:21:02.073065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.595' message 'Fix PIC entry alignment in Newspeak VMs.  It''s been working so faronly because entry-point alignment covered up the bug.Allow more opcodes for the trampolines.  The implicit receivertrampoline is larger in Spur (alignment?  need to check).Relax the checkForLastObjectOverwrite to skp the word that may bewrittne to when the machine-code instantiation primitives hit thescavenge threshold.' id '918a4400-df96-4b55-bdee-cbf3576f27dd' date '28 January 2014' time '5:29:02.305392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.594' message 'Stabilize generation so that implicitly default options cause the samedead code elimination as explicit defaults.Generate CameraPlugin, ScratchPlugin, UnicodePlugin & WeDoPlugin.' id 'dc0cca0d-8f63-4da1-a647-94be0840104b' date '28 January 2014' time '2:42:02.47 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.593' message 'Fix Spur StackVM configuration.' id 'fca10aeb-7680-4292-9224-890680da8f9a' date '25 January 2014' time '12:23:02.735065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.592' message 'Fix regression in mapProfileState committed in VMMaker.oscog-eem.380.' id '98758c41-4bb5-4d45-87c9-77e5cf416120' date '24 January 2014' time '4:52:02.790392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.591' message 'Fix the regression in CoInterpreter>>validInstructionPointer:inMethod:framePointer:by accepting an instruction pointer pointing just before the firstbytecode in StackInterpreter>>validInstructionPointer:inMethod:framePointer:and reverting CoInterpreter''s method.Add some missing simulation redirects.Copy the filterPerfrmOf:to: hack to StackInterpreterSimulator.Don''t bother emitting plugins for the Newspeak stack VM.' id '2f605da3-babd-4f62-a19e-085c28cca416' date '24 January 2014' time '12:57:02.906130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.590' message 'Fix CoInterpreter''s validInstructionPointer' id '8f6d2060-b948-464c-89d9-341f775e8662' date '22 January 2014' time '4:55:01.608130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.589' message 'Fix snafu' id '9cec8b08-0811-4b7b-a2fb-2b3ad91579ad' date '22 January 2014' time '4:35:01.510130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.588' message 'Add missing ObjectMemory>>followObjField:ofObject:.Fix valid instruction pointer asserts for instructionPointer pointingat byte before first bytecode.Go some way to restoring in-image compilation which was brokenby VMMaker.oscog-eem.344/343''s revamp of simulator instantiation.' id 'd25a3958-3120-443b-a37e-d0611d81e833' date '22 January 2014' time '4:23:02.241130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.587' message 'Fix bug in Cogit>>unlinkSendsOf:isMNUSelector:, used byprimitiveFlushCacheBySelector.  The method could leave sendslinked to freed MNU PICs.  Looks like this only causes assert failures.Add abort check assert to relocateCallsAndSelfReferencesInMethod:Nuke unused method.  Fix a couple of typos.' id '3ae6428c-5746-4c6a-9125-c61345f80382' date '21 January 2014' time '3:24:03.928065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.586' message 'Spur (in simulating Newspeak bootstrap):Fix GC of classes, piggy-backing on classTableBitmap.  So renameexpungeDuplicateClasses to expungeDuplicateAndUnmarkedClasses:.Add some asserts to check that entries in the classTable are classes.Revise class table become management.  Don''t include methods in"unforwarded zone".  Hence add followObjField:ofObject: & fix bugin fixFollowedField:ofObject:withInitialValue:.Add a read barrier to fetching newMethod from a method dictionary.Add a read barrier to fetching a method dictionary from a class.Fix assert in addNewMethodToCache: to spot forwarded newMethod.Make primitiveFileDelete simulate.Copy Conterpreter''s systemAttributes support toStackInterpreterSimulator (so it can simulate the Newspeak bootstrap).Don''t inline any of the methods into fullGC.Nuke unused ObjectMemory>>enterIntoClassTable:.' id '2c68c161-bd12-4db4-b213-3643a7f7506a' date '20 January 2014' time '2:05:01.311294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.585' message 'Fix become on compiled methods in Spur.  followForwardedMethodsmust use isForwarded:/followForwarded: not shouldRemapObj:because the latter will confuse methods in newSpace for forwardedmethods. Rename the interpreter followForwardedMethods'' tofollowForwardedMethodsInMethodZone.In General:Fix some comment typos.  Better comment the closed PIC prototype.Add CogMethodZone>>printCogYoungReferrers.' id 'ffc9c619-e2b4-4432-977e-aba381f975ff' date '14 January 2014' time '3:37:02.93 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.584' message 'Spur:Fix swizzling on startup.  Enumerate up to freeOldSpaceStart, notendOfMemory.  Fixes startup of e.g. bootstrapped Squeak4.3 image.Beef up asserts in initializeFromFreeChunks: (for bootstrap).Fix isValidSegmentBridge: to not subtract header size from bridge.Fix assert in checkForAndFollowForwardedPrimitiveState.' id 'f8e3994b-6462-4df0-bc8e-c71034adf6aa' date '13 January 2014' time '5:36:02.482294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.583' message 'Allocate more newSpace for the SpurBootstrap launchSaved shortcutso the interpreter reserve bytes are accomodated.Fix superclass of VMSqueakV3BytecodeConstants (thanks tty).' id '0be513d3-c984-427f-a0e2-78bea8c85a26' date '13 January 2014' time '12:05:00.552425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-dtl.582' message 'Add SqueakSSLPlugin to VMMaker.Pragmatize the plugin''s primitives.SqueakSSLPlugin is a platform SSL interface for Squeak by Andreas Raab.The original source repository is at http://www.squeaksource.com/SqueakSSL. This is the original source from SqueakSSL-Plugin-ar.3 with category changed to VMMaker-Plugins.License: This project is covered by the MIT License:Copyright (c) 2010 Andreas Raab and ContributorsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.' id '652ff21a-50cf-4a20-a671-0a508079fc26' date '10 January 2014' time '6:08:01.778032704 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-eem.581' message 'Change ^nil to ^self in some logging routines to get return type void.' id '926531fd-20be-42b4-9332-015b90e6734f' date '10 January 2014' time '11:25:00.733065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.580' message 'Output accessor depth for external primitives in the form ofper-primitive signed chars named primitiveFooAccessorDepththat hold the depth for primitiveFoo.Check when outputting the primitive declarations that the real onesin StackInterpreter, ObjectMemory et al match those inInterpreterProxy.Fix the signatures of floatObjectOf:, positive64BitIntegerFor: &signed64BitIntegerFor:.  Pragmatize HostWindowPlugin>>shutdownModule.Nuke Object>>export:, Object>>inline:, & Object>>static:.  Thesecause confusion and delay (cuz they mask the fact that TMethodmay not implement them as expected).' id '751b08d4-d92e-440a-b3f6-cb2c76f52514' date '9 January 2014' time '3:35:02.429196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.579' message 'Commit the correct fix for primitiveWaterRipples1, which is simplyto add a space to <-2 to < -2, to avoid ambiguity.' id '77657577-de3f-4064-ab8e-652f89a84d73' date '6 January 2014' time '6:40:02.107392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.577' message 'Clean-up accessorDepth code for SqueakV3 VMs.Don''t include accessor depth in SqueakV3 vm''s named primitives.Do a better job of dead code removal with and: and or: chains.Don''t generate primitiveAccessorDepthTable in SqueakV3 VMs.Copy the hasSpurMemoryManagerAPI methods to the class-side.' id '8788f091-6817-480e-9bda-13ae360eeeb7' date '6 January 2014' time '1:53:03.927359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.576' message 'Make primitive accessor depth code translatable.Rename var:type:array: to arrayInitializerCalled:for:sizeString:type:.Add the missing simulation code for primitive accessor depth toCogVMSimulator.' id 'f4b652dc-67bc-4cf3-8b62-74bcbcbf01cd' date '6 January 2014' time '11:00:03.787032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.575' message 'Implement following primitive args to primitive accessor depth onprimitive failure in Spur.Implement simulator support for Spur primitive accessor depth.Fix assert in mapStackPages.  Can''t check for being married withSqueakV3 obj mem since when compacting it moves bodies afterupdating pointers.' id '3c41906f-dd7d-4298-9487-2a7089d19714' date '6 January 2014' time '10:00:02.111065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-dtl.574' message 'VMMaker 4.12.12 (VMMaker-dtl.334)Add Pragmatizer. Convert Scratch plugins to pragmas. Changes to generated code are cosmetic, e.g. variable names and ordering.Conversion script:converter := Pragmatizer	on: ''VMMaker''	selectors: #(#export: #static: #inline: #returnTypeC: #var:declareC: #var:type: ).converter classes: { CameraPlugin . ScratchPlugin . WeDoPlugin . UnicodePlugin }.converter pragmatize.' id 'a3e2af5e-2cc7-4c7f-9b72-8c6b2cd28a0f' date '4 January 2014' time '2:16:00.460228928 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-eem.573' message 'Implement "accessor depth" of internal plugin primitives for Spur.The accessor depth is how much state to traverse to check for failuredue to lazy forwarders.  Scheme analyses the parse trees of primitivemethods and computes depth automatically.Hide the per-primitive depth after the primitive name entry inthe exports table, hence maintaining compatibility between "classic"and Spur, and allowing generated plugin files to continue to beshared.Cache the depth in the unused sessionID slot in the primitive 117tuple.Add some simple equivalence comparison for TParseNodes (whichare compared by identity for #= & hash).Don''t merge with tpr.571 or dtl.572 yet.  These mistakenly includethe experimental changes in eem.566.' id 'ac60f615-ad3b-4d47-96c4-b941027dcd2d' date '3 January 2014' time '6:31:04.121032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.570' message 'Fix references to memory for use-a-structure configurationsto match the change made to ObjectMemory class>>mustBeGlobal:in VMMaker.oscog-eem.547.' id '193cb05d-73a5-4efa-833f-126ca02695d8' date '24 December 2013' time '8:55:02.684392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.569' message 'Fix Spur''s machine-code identityHash primitive for Characterreceivers.  Refactor into the conventional cogit/objRep splitgenPrimitiveFoo/genInnerPrimitiveFoo.  Nuke the now-unusedisHashSetOnInstanceCreation.Fix Spur''s machine-code == & ~~ primitives for potentiallyforwarded arguments.Implement machine-code primitives for Character>>value andSmallInteger>>asCharacter/Character class>>value:.' id '84f8b41f-92bf-41d2-9927-6c7e3d3e4272' date '24 December 2013' time '7:56:02.293392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-dtl.568' message 'Check for valid bitmap in primitivePixelValueAt aka BitBltSimulation>>primitivePixelValueAtX:y:Fix provided by Nicolas CellierReference Mantis 7799' id '527f0c71-198d-4adf-804c-53c6842e9124' date '21 December 2013' time '11:50:02.140392448 am' author 'dtl' ancestors ((name 'VMMaker.oscog-eem.567' message 'Commit the takeaways, which are thata) 4 byte entry-point alignment is as good as 8-byte on Core i7b) the older backward-branching for immediates entry-point codeis significantly faster for non-immediates and because we expectmost SmallInteger code to be performed in-line it is better to prefernon-immediate send performance.N.B. None of this would be an issue with 30-bit immediates.' id '88799310-3943-4468-b8ee-4c007e7f98e7' date '20 December 2013' time '3:47:03.091098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.565' message 'Rescue the Stack VM by refactoring the snapshot bereavement codeto be CoInterpreter-agnostic.  Give CoInterpreter its own methodcache print routine for the same reason.Change some mistaken uses of methodLabel in the Cogit to backEnd.' id 'aa89a317-26e5-404d-aaff-e2433a344379' date '20 December 2013' time '11:10:00.698261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.564' message 'Make the instantiation primtijevs fail for format 7 (forwarded format)and name this for use as the format of immediate classes.Include both variants of the get class tag code in the Spur obj rep.' id '70d96811-1a51-4f85-9f12-cb5a3ba8a8bf' date '17 December 2013' time '5:41:00.852228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.563' message 'Avoid including the instrucitonPointer in the context when marryingthe top frame during divorceAllFrames for voidVMState....If:.(how did this ever work??).Fix bogus assert failure in checkIfValidObjectRef:pc:cogMethod:.' id '3116fc1b-f9a5-45f5-bc7e-4b5c68ec8247' date '16 December 2013' time '3:41:01.12316352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.562' message 'Generate better code for Spur''s getInlineCacheClassTagFrom:into:.Refactor followNecessaryForwardingInMethod: to only compute theliteral count once and, in Cog, to use the cmUsesMethodClass flagto avoid following methods without a super send anyway.Avoid following methodClass if not an Association (e.g. Newspeak).Fix SpurMemMgr>>firstIndexableField:' id 'c612f6db-7bbc-4c69-86e4-65b2a90de879' date '13 December 2013' time '12:48:03.498228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.561' message 'Fix swizzling of Spur objStacks on start-up.  Spur now snapshotsand resumes.  Beef up the objStack asserts and printing to identifymy prior malfeasance.Add some interpreter proxy plumbing to SpurMemoryManager.Simplify StackInterpreter>>arrayValueOf: (isWordsOrBytes:already filters-out immediates).Change ensureMultiThreadingOverridesAreUpToDate to the newtrunk initPattern:return: from initPattern:notifying:return:.  If thisbites you just implement initPattern:return: on Parser supplying nilas the thing to notify.' id '13467880-93b9-4137-9bbc-7ebfd22436ab' date '12 December 2013' time '2:36:02.81232704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.560' message 'Also have to swizzle along the chain of free objStack pages.Print value of topX field when printing objStacks.' id 'db9cf7fa-a7d7-4b48-9e9d-32c8d43e330f' date '11 December 2013' time '4:29:02.96216352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.559' message 'Fix snafu in markAndTraceObjStack:andContents: that spun markingfirst free page.' id '91b925f5-c776-4549-82a7-d10b0853e0f7' date '11 December 2013' time '3:46:00.026261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.558' message 'Fix freeChunk swizzling on load (next address link''s value istransitory, being valid only during fullGC.Fix SpurMemoryManager>>defaultEdenBytes.Fix setting of scavengeThreshold in simulation (avoid fractions).Make CogVMSimulator>>openOn:extraMemory: more likeStackInterpreterSimulator>>openOn:extraMemory:.Spur snapshot now functional, at least in simulation.' id 'ef7afd3b-c404-472c-a05a-9d9c6d905052' date '11 December 2013' time '2:58:03.363425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.557' message 'Spur:Fix bug in swizzleObjStackAt: that was stopping a snapshot starting.More assert checks in free tree enumeration.Fix new space enumeration assert for image bootstrap.Fix bug in freeChunk print method & add a free list printing method.' id '5837253f-a896-43ac-bcc6-816e923030e7' date '11 December 2013' time '1:43:01.861359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.556' message 'Refactor snapshot to avoid the duplicate context berveavement pass.voidVMStateForSnapshot => voidVMStateForSnapshotFlushingExternalPrimitivesIf:' id 'c0ead074-8810-42cf-8e82-fbcf0a958348' date '11 December 2013' time '10:19:04.229065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.555' message 'Rescue compilation of the "classic" VMs by making sure the relevantforwarding code is considered dead code.' id '9b99d897-eecb-4b11-97c9-7f7a75c7d8b0' date '10 December 2013' time '5:22:01.875425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.554' message 'Get the Spur obj enumeration asserts right.  There should beno free or bridge objs in new space.' id 'a666e7e4-245e-4e8a-9536-3aefd4509f47' date '10 December 2013' time '4:08:03.97032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.553' message 'Fix a bug in BitBltPlugin>>lockSurfaces.Fix Spur genInnerPrimitiveAtPut:.Fix bug in followForwardedMethods (add cogMethod toyoungReferrers, not its bytecoded method).Add development-time-only asserts to check that jumps don''t havetheir targets assigned more than once.Fix assert-fail in old space enumeration.  Requires that free chunksbe marked as having at least 1 slot.' id 'e5f0c922-4c60-4124-9366-5f9492795a67' date '10 December 2013' time '3:37:02.105261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.552' message 'Implement machine-code at:put: for strings (64) and objects (61)for Spur, although 61 is disabled (not yet working).Add support for MoveR:Xbr:R: to CogIA32Compiler.Refactor genStoreSourceReg:slotIndex:destReg:scratchReg: intogenStoreCheckReceiverReg:valueReg:scratchReg: for the at:put:store check.' id 'd9a4ccd9-8b55-4220-b356-053cf0de2d9d' date '9 December 2013' time '6:56:01.671130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.551' message 'Fix bug in StackToRegisterMappingCogit>>generateEnilopmartsthat set up the pic entry enilopmarts incorrectly with 2 reg args.Refactor numRegArgs to defer to the obj rep.Rename executeCogMethodFromLinkedSend:withReceiver: et al toexecuteCogMethod:fromLinkedSendWithReceiver: et al.Fix the bogus memory layout assumptions in senders oflookup:for:methodAndErrorSelectorInto:.Don''t use cogit numRegArgs > 0 and: [...] to allow Slang to do itsdead code removal thang.Do a better job of decorating the recent instructions report.Make CogObjectRepresentationForSpur use 2 reg args.' id 'f898f520-c8dd-4413-8282-f13bbf1e0438' date '9 December 2013' time '2:34:01.426032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.550' message 'Include api methods in conditional expr dead-code removal code.Rewrite CoInterpreter senders of numRegArgs given they can nowbe handled by dead code removal instead of clunky old cppIf:ifTrue:.Include the classIndex in the longPrintOop: class output.Fix comments and and remove duplicate alignment in bothcompileOpenPIC:numArgs: methods.Fix comment in genSendTrampolineFor:numArgs:called:arg:arg:arg:' id '16788219-a25c-487e-bdff-d01a799e4550' date '9 December 2013' time '7:21:00.727359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.549' message 'Fix allocateSlots:format:classIndex: to not chew into the interpreterreserve.  That''s only for allocateNewSpaceSlots:format:classIndex:.Fix enumeration of newSpace objects to be in addfressSpace order,survivor space first, eden second. This allows printObjectsFrom:to:to determine the start of a newSpace object correctly.Fix the store check on SpurMemMgr>>clone:.Add cmUsesMethodClass flag and use it to reduce use of followForwardedLiteralsIn: in CoInterpreter''sfollowNecessaryForwardingInMethod:.Make makeBaseFrameFor: call followNecessaryForwardingInMethod:.Add StackToRegisterMapping2RegArgsCogit although it is decidedlynon-functional at the moment.' id 'd2a4f1c3-8b11-4e93-9ad1-3e3ab35bbddd' date '8 December 2013' time '3:42:01.031261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.548' message 'Spur:Rename handleForwardedSendFaultForReceiver: tohandleForwardedSendFaultForReceiver:stackDelta: to skip the returnpc when handling send faults in machine-code sends.Fix followForwardedObjectFields:toDepth: to follow only pointerfields in compiled methods.The system runs.  Am able to compare changes in Collectionspackage given all the Character method changes now Character isimmediate.' id 'eac3c43b-073b-4ad1-8520-3849a8d914da' date '7 December 2013' time '2:37:03.36432704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.547' message 'Rename handleForwardedSendFaultFor: to handleForwardedSendFaultForTag:.Add handleForwardedSelectorFaultFor:.  Implement forwardingfault handling in ceSend:super:to:numArgs: et al and rewritethe handling in ceSendFromInLineCacheMiss: to match.Abstract out the method following in handleForwardedSelectorFaultFor:and override in CoInterpreter to follow the cogMethod.Follow forwarded methdos in the method cache post-become.Rename genEnsureRegNotForwarded:scratchReg: togenEnsureObjInRegRegNotForwarded:scratchReg: and use toimplement forwarder following in Cogit special selector #==(and rewritten lit var access).   Comment forwarder following ingenGetClassObjectOf:into:scratchReg:instRegIsReceiver:Fix Spur''s couldBeObject: to filter-out 0 (for closed PICs).Fix printOopShortInner: to print forwarders (for frame printing).Print how much space is missing when thescavenger eden limit - freeStart > coInterpreter interpreterAllocationReserveBytesassert fails on scavenge.Slang and clients:Fix dead code elimination in if exprs when there expr is just a singleboolean-constant-returning send.Refactor var:type:array: in terms of arrayInitializerCalled:for:type:.Fix decls of memory, heapBase & labelCounter so they''re not hackedas static.  Make cePositive32BitIntegerTrampoline & eFlushICacheprivate.' id '5a0db750-d6a5-4742-b20a-e35ecb43ab38' date '7 December 2013' time '1:39:02.854392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.546' message 'Rename the three genConvertFooToBarInScratchReg:''s togenConvertFooToBarInReg:' id 'd745c2ec-3cc8-4612-9ff5-0c85fe771ced' date '6 December 2013' time '2:53:00.944294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.545' message 'Ghhhaaa' id '36659c65-ab43-4cb4-8f2f-9fecfadfa4d9' date '6 December 2013' time '2:35:02.974130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.544' message 'Mo'' mo'' mo'' betta.' id '05bcbc40-679b-4d4e-ab31-a68b833a2b81' date '6 December 2013' time '2:30:01.41016352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.543' message 'Mo'' mo'' betta...' id '460f2b89-5b70-49d3-8fc6-cbaaf02eb6a3' date '6 December 2013' time '2:20:03.594228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.542' message 'Mo'' betta automation for generating VMs.' id 'e3b3cd61-d781-4934-bc89-dcf72256eb95' date '6 December 2013' time '2:13:00.664294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.541' message 'More automation for generating VMs.' id '36c98389-c272-4d87-8a91-f7351a903087' date '6 December 2013' time '2:01:03.382196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.540' message 'Fix setting of endOfMemory on load in SqueakV3 VMs.' id 'dad5722f-20ac-4d1a-af92-4bad5cf49199' date '6 December 2013' time '1:48:03.779359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.539' message 'Slight streamlining in followForwardingPointersInStackZone:, plusfixing followjng of frameMethodObject vs frameMethod inmachine-code frames.' id 'b6a1dcf2-b6e4-4e22-9430-c660b115800b' date '6 December 2013' time '1:31:02.394196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.538' message 'Fix translation of var := TStmtList so that the value of the laststatement is assigned, not the first.Fix the concatenation of the assert-failure reason inisValidObjStackPage:myIndex:firstPage: so that it works in C.Remove the assert in updateRootOfObjStackAt:with: so that theintermediate state of a partially followed objStack is not reportedas an assert-failure.Add a print routine for pages of an objStack.[ All to fix broken assert code :-) ]Slang:Generate the CoInterpreter *before* the Cogit so that theobjectMemory and interpreter classes have initialized *before* theCogit is generated.  Otherwise the Cogit can be generated with valuesfrom the wrong interpreter/objectMemory.' id '6b6d8ba7-4913-4563-9d01-da880441f843' date '6 December 2013' time '11:25:02.894294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.537' message 'Fix ObjectMemory''s isForwarded:/isOopForwarded: macros.' id '16e0cc2f-0c26-4d21-b1bf-1dde0d99b08b' date '5 December 2013' time '3:13:04.089294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.536' message 'Fix local vs global var conflict.' id 'c021f329-3f3a-469b-a838-24e74c1be39c' date '5 December 2013' time '11:52:01.266 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.535' message 'Fix bounds check in Spur machine-code String at:.add print call stack of frame to utilities menus, andprintCogMethodsWithPrimtiive: as api and utilities menu.Make SpurMemoryManager>>lookupAddress: a little safter.' id '7b0d92a3-e58b-49ac-b91f-a69db5b70f20' date '5 December 2013' time '11:28:01.474392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.534' message 'Fix to: loops with unsigned limits hence if limit is unsigned and zero,avoiding the overflow resulting from i <= (limit - 1).Change printAllStacks to enumerate heap for suspended processeslast, and to use class indices on Spur, and to follow potentiallyforwarded fields.Fix assert in segment writing.Add missing stub for followNonImmediateField:ofObject: in ObjMem.' id 'f9804193-9d68-4cac-b3be-178c55da6b52' date '5 December 2013' time '9:48:00.319261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.533' message 'it runs.Fix bounds checking in CogObjectRepresentationFor32BitSpur>>genInnerPrimitiveAt:.Simplify primitiveShortAtPut (isWordsOrBytes: filters-outimmediates anyway).Add shortAt:put: to the Spur simulators.' id '596ae385-70cc-4593-98e9-244920c6d7d2' date '4 December 2013' time '7:43:03.331 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.532' message 'Nuke all NonInt: forms in favour of NonImm:.  I depend on thecorrective abilities of the compiler ;-).' id '6fdc596d-9f99-4e53-87ab-622cf233bc5f' date '4 December 2013' time '5:28:02.555261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.531' message 'Fix type of theIP in CoInterpreter>>makeBaseFrameFor: which wascausing mis-identification of machine-code pdcs in contexts.Refactor validStackPageBaseFrames into validStackPageBaseFrame:asnd use latter in makeBaseFrameFor:''s asserts to speed-up debugVM.Refactor followField:ofObject: into fixFollowedField:ofObject:withInitialValue:and provide a non-immediate and an ecumenical version.Add SpurMemMgr>>findStringBeginningWith: & printMethodReferencesTo:.Add more debugging to inferTypesForImplicitlyTypedVariablesIn:.' id '0593611a-d3b2-4c75-a08d-742f5d8f27cd' date '4 December 2013' time '5:14:00.041392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.530' message 'Fix bad bugs in Spur machine-code instantiation prims and accessscavengeThreshold as a constant.  Rename the accessor togetScavengeThreshold for slang.Indicate ceReturnToInterpreterPC in CoInterpreter frame printing.Make CogMethodZone>>freeStart a macro to give unfetteredaccess to the memory manager''s freeStart in gdb.Add printInstancesOf: to SpurMemMgr.Make printMethodCache translate so as to include it in the real VM.Simulation:Provide a simulation-only register map print for making sense ofmachine code.Fix printing of characters, avoiding printing wide characters to avoidfilling the transcript with ?''s.Fix instruction printing regression.' id 'cb1992ae-2118-40a3-9cee-8c9c89fcc30a' date '4 December 2013' time '3:07:00.506196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.529' message 'Fix implicit typing of variables assigned the result of an <api>method.Refactor compactCompiledCode: to compactCompiledCode to getthe null header initialized correctly.Replace the simulation code in asciiDirectoryDelimiter withsomething that will work for both FileSystem and FileDirectory.' id '0a395bcc-3dda-4e68-ad96-437e32f03339' date '2 December 2013' time '5:25:00.386228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.528' message 'Implement forwarding send faults from maqchine code and updateCoInterpreter''s extant send fault code to match StackInterpreter''s.Refactor and rename StackInterpreter>>followField:in: intoObjectMemory/SpurMemoryManager>>followField:ofObject:.Implement forwarder following in makeBaseFrameFor:.Nuke InterpreterStackPage''s LargeContextBytes and refer toLargeContextSize directly (to eliminate a source of initializationbugs).Fix adding a segment which is contiguous with another.  Bridgesmust be able to have zero length and hence have either 64-bit or128-bit headers.  Simulator changed to allocate segmentsalternating between ajacent and disjoint.Fix isScavengeSurvivor: in the Cogit (use isReallyYoung: to filter-outcog methods).Fix bug in allocateOldSpaceChunkOfBytes: which cauised failure toallocate correctly-sized solitary tree node.Fix bug in fillHighestObjectsWithMovableObjectsFrom:upTo: causingfilling of highestObjects to burst its banks.Comment, categorization, returnType fixes and <api> marking.' id '65840335-f6a4-4105-8afa-1b612a90e414' date '2 December 2013' time '2:07:00.444359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.527' message 'In Spur compaction, fix the edge case of firstFreeChunk beingallocated but the start of the object being different from the startof firstFreeChunk.Move finding the new firstFreeChunk intofillHighestObjectsWithMovableObjectsFrom:upTo: and nukefindFirstFreeChunkPostCompactionPass.Fix the fence-post error in insertSegmentFor:.Fix the asserts in addSegmentOfSize:.' id '6effc8b0-7b1d-445b-b154-af4f89653734' date '27 November 2013' time '1:24:00.839196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.526' message 'Implement following of potentially forwarded literal variables in the Cogit.' id 'f9b89c93-d691-49b9-a39c-2de1201b301a' date '26 November 2013' time '6:03:00.087196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.525' message 'Correct detachFreeObject: given that freeChunkPrevIndex is notmaintained.  Nuke all uses of freeChunkPrevIndex.Fix dumb bugs in SpurMemoryManager>>assimilateNewSegment: &allocateOldSpaceChunkOfExactlyBytes:suchThat:.Change totalFreeListBytes to check that list nodes in the tree havea null parent.Correct and then comment-out the delay wakeup code in CogVMSimulator>>primitiveSignalAtMilliseconds.' id '6e1e8f4a-3f4c-4aef-87cc-ad1016a9dbf8' date '26 November 2013' time '5:38:03.923196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.524' message 'Modify eliminateAndFreeForwarders to coalesce forwarders withfree space.  Fix bugs in unlinkFreeTreeNode:withSiblings: &addToFreeTree:bytes: (failure to clear prev and set parent).Add some analysis/debugging routines to print uncoalesced freechunks and potentially compactible objects.' id '8795596f-5c5e-44de-9a9f-926f991d208b' date '26 November 2013' time '12:44:02.03016352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.523' message 'Fix bug in fUOASACFS that was causing it to not collect large freechunks for sorting, and hence resulting in compact moving almostno objects.Fix assert in SpurCircularBuffer>>reverseDo:, found now that thereis compaction occurring.Resurrect exactFitCompact and fix its exit condition.Add some isFreeObject: asserts.Add clone VM to the CogVMSimulator utilitiesMenu:.' id '1e6e967d-05a9-413a-9b22-5d5907ecfb5a' date '26 November 2013' time '9:50:03.85716352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.522' message 'Fix evolutiuon of send site linked to closed PIC into site linked toopen PIC to enforce invariant that cache tags of sites linked toopen PICs are selectors; this for checkIfValidObjectRef:pc:cogMethod:''scache tag checks.Fix caxche tag checks in checkValidObjectReferencesInClosedPIC:for Spur via CogObjectRepresentation>>inlineCacheTagsMayBeObjects.Fix compilation of Spur''s cogit.c by marking wordSize <api> nowthat wordSize is not handled specially by CCodeGenerator.Add some subclassResponsibilities to CogObjectRepresentation.' id '4fd1d094-9a41-41df-b776-1989665951d5' date '25 November 2013' time '6:23:00.21116352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.521' message 'Simplify the setHeapBase:memoryLimit:endOfMemory: logic inCoInterpreter>>readImageFromFile:HeapSize:StartingAt:.Revers eth eill=considered decision to output wordSize asBytesPerWord in VMMaker.oscog-eem.363.Fix a compilation warning in followForwardingPointersInStackZone:.' id '083a987f-b44f-4765-a2fb-48b2fe95d0f0' date '25 November 2013' time '4:43:03.689392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.520' message 'Undo the mistake of attempting to place the code zone betweennewSpace and oldSpace.  Avoid scavenging Cog methods, which asimple bounds check would judge as being young, by havingSpur32BitCoMemoryManager>>isReallyYoungObject: filter-outCog methods and copyAndForward: using isReallyYoungObject:.Fix linking for new classes in Spur by having Cogit>>canLinkToYoungClassesdispatch to the objectRepresentation.  Hence include the methodZonein the objectRepresentation''s inst vars.' id '15712719-732a-4659-bf8a-6272bc059cc5' date '25 November 2013' time '2:50:00.632359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.519' message 'Commit a costly mistake before undoing the damage.  If the codezone sits between newSpace and oldSpace then isMachineCodeFrame:et al need two boundary checks, > newSpaceLimit & < oldSpaceStart.If the code zone sits beneath newSpace then copyAndForward: needs two boundary checks, < newSpaceLimit & > newSpaceStart.  SoIIABDFI implies reverting to the code zone being beneath newSpace,and fixing copyAndForward:.  Tube.  3 days. Ouch.Change Spur''s primitiveFullGC to answer the byte size of the largestfree chunk, which is what is needed to know whether a new segment isneeded.  Add primitiveSizeInBytes[OfInstance] so the image doesn''thave to assume anything about header sizes.Fix checkMaybeObjRefAt: to filter-out the 0''s from unused methodparameters in closed PICs.Fix a return-type conflict in printOopShortInner:.Slang:Fix Integer << Integer to cast to 64-bits if the shift overflows 32-bits.' id 'ac72e5fd-c896-42c5-acee-19a8df8047d0' date '25 November 2013' time '1:05:00.77132704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.518' message 'Make sure dead code is not removed from plugin sources (if they''reshared they can''t be prematurely optimized).Fix compilation of Cog Spur VM.Remove extraneous type decl from threadSchedulingLoop:.Do a better job at generatign integer literals for flags.Simple solution for endless ergeneration of exampleSqNamedPrims.h.' id '47baf85e-eb07-401d-b604-8eeb30c62952' date '22 November 2013' time '6:32:01.346032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.517' message 'Move the defines for BaseHeaderSize BytesPerWord BytesPerOopout of interpreter, cogit or plugin source and into interp.h, and fixgenerateCPtrAsOop:on:indent: to print BaseHeaderSize symbolicallyso that plugin source can be safely shared.Reorder the memory regions in Spur to put the code zone betweennewSpace (low) and oldSpace (high).  Hence avoid two range checkswhen scavenging.  If the codeZone is below newSpace thencopyAndForward: must check for both <= newSpaceLimit and >=newSpaceStart) to filter-out cogMethods.  Add a checkMemoryMapassert to various SpurMemMgr classes and check it on scavenge.Replace several uses of startOfMemory by the relevant start and fixrelated asserts.  Add oldSpaceStart and use in place ofnewSpaceLimit in the relevant places.  Add isOldObject: and use inbeRootIfOld:.Place the guardPage below newSpace in Spur.Change simulateCogCodeAt: et al to use the new run/single-stepprimitives that allow the read-only/executable range to be originedat other than zero.  Needs Cog-eem.122 to be able to simulate.Refactor recording simulated instructions into recordProcessing.Add those primitives to the processor alien plugins.Simplify generating machine-code new/new:/newMethod byintroducing an UnimplementedPrimitive error and nukingimplementsNew et al.Nuke addressCouldBeObjWhileScavenging:.Fix bug in inferTypesForImplicitlyTypedVariablesIn: that would striplewading u form explicitly typed vars such as unsigned char over.JFK RIP.' id '14ff7126-70ec-4cc4-9f55-70256e6a3d35' date '22 November 2013' time '3:23:02.670228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.516' message 'Collapse mapObjectReferencesInMachineCodeForIncrementalGC/Scavengeonto mapObjectReferencesInMachineCodeForYoungGC.Provide a nice abstraction for simulating addressOf: (addressOf:put:).Fix absent super call in Spur32BitCoMemoryManager>>assimilateNewSegment:.Hence check free space after adding a segment.Include the mark bit in SpurCoMemMgr>>nullHeaderForMachineCodeMethod.' id 'dc21e654-f5d1-4272-9ab9-548f244fdecc' date '19 November 2013' time '1:35:02.595392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.515' message 'Make the Spur Cog VM compilable, marking the relevantSpurMemMgr methods <api>, and implementing missingCogObjectRepresentationForSpur methods.Rename CogObjectRepresentation>>remapObj: to remapObject: toavoid conflict with Objmem/SpurMemMgr>>remapObj:.Add SpurMemMgr>>isYoungObject: and use it and isYoungObject:appropriately.Fix checkOkayFields: given that Spur objects don''t directly refer toclasses.Fix uninitialization of newTargetMethodOrNil & errorSelectorOrNilin ceCPICMiss:receiver:.Add an analysis routine and support to Cogit to check that indeedsuper sends don''t have their selector rewritten when linked.Rewrite markLiteralsAndUnlinkIfUnmarkedSend:pc:method: &markLiteralsAndUnlinkIfUnmarkedSendOrPushImplicit:pc:method:so that markAndTraceLiteral: is only invoked with literal args andcacheTagIsMarked: is only applied to cache tags.  This allows Spurto answer true for cacheTagIsMarked:.' id '168ec040-51cd-4d3d-9b60-7dc3a981beaa' date '18 November 2013' time '7:06:03.100294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.514' message 'Make sure BaseHeaderSize is defined in the Spur cogit.c.Fix some type errors (tenuringThreshold needs to answer sqInt).Fix safePrintStringOf:.  Can''t have followForwarded: in an expression.Bring Spur32BitMMLECoSimulator up-to-date.' id 'f0432404-2a48-4dfd-8d71-05ce4ddfe6e7' date '18 November 2013' time '10:53:03.908228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.513' message 'Fix slip in addToFreeTree:bytes:.Slang:Add a configuration for the Spur Cog VM.Eliminate translation-time errors and warnings for the Spur Cog VM.Improve error reporting for inst var masking for dtl''s jenkins build.Don''t raise a confliuct error when adding a method override in asubclass.Abstract away filtering implicit non-argument inst vars intoCCodeGenerator>>instVarNamesForClass:.' id 'be833738-0c93-4c1a-8f13-d4c083687ffa' date '17 November 2013' time '3:08:00.132065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.512' message 'A Ferrari commit? A power-of-two commit? :-)Change endOfMemory to include last bridge (too hard to get thememory size right otherwise).Change the enumerators to use endOfMemory instead of freeOldSpaceStart (which I''d like to get rid of sometime).Move isValidSegmentBridge: to SpurSegMgr.Include segLimit in SpurSegInfo printing.Finally the shootout tests run to completion.' id 'e67f6750-242d-43e3-8a3b-681b3b617e38' date '16 November 2013' time '8:46:00.056228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.511' message 'Check-point cmmit prior to changing endOfMemory to be just pastthe last bridge.  This for fixing the bug which is the last freeChunkending past the last bridge, not at the last bridge.Fix Integer>>asUnsignedInteger for simulation when printingframes in the StackInterpreter (which are negative there-in).Add explicit bootstrapping inst vars to the StackInterpreterSimulatorand Spur32BitMMLESimulator now that there is a segment during thebootstrap.' id '2a9dbb56-4151-4ebd-a674-e445ed58b0c8' date '15 November 2013' time '5:04:00.371098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.510' message 'Reduce C compilation warnings for the Spur Stack VM.Fix bug in SpurMemMgr>>countMarkedAndUnmarkdObjects:.' id '70117c0d-28a7-4703-a044-cab26cfffe83' date '13 November 2013' time '1:55:02.158130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.509' message 'Fix the bootstrap now that sufficientSPaceAfterGC: will grow.Change (we hope) all oop comparisons into self oop: o isFoo: lforms.Comment typo.' id '1f030e9c-8603-4588-8ad9-b3a935699fae' date '12 November 2013' time '4:47:03.21132704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.508' message 'Add an assert to check that free chunk subdivision works correctly.Fix the issue of integer variables assigned unsigned values butcompared against zero, but forcing these to be unsigned.  Affectse.g. longPrintReferencesTo:.' id '55fa33b3-25f2-4d01-b2c2-02a5a5228bf7' date '12 November 2013' time '2:39:01.519425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.507' message 'Keep bridges marked in notePinned:, called in fUOASACFS.Support growth in sufficientSpaceAfterGC:.Add a segLimit accessor to simplify segment code.Add Integer>>asUnsignedLong for simulation.' id '0cc40be1-4ec6-4be1-823f-4d7ed85aed05' date '12 November 2013' time '11:45:01.849 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.506' message 'Allow more wriggle room in the scavengeThreshold(eden bytes / 16 instead of eden bytes / 64).Declare freeListsMask unsigned so that <= bit comparisons work.Do a better job of dead code removal, accepting constantcomparisons.Make SpurMemMgr>>objectAfter:/Before: <api>.Nuke a duplicate declareCAsOop:in:.Fix type decl for Spur64BitMemMgr>>rawNumSlotsOf:' id 'd08a5441-9507-473d-9dad-412d7702ae96' date '11 November 2013' time '9:44:02.213 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.505' message 'Reduce duplication in the enumeration routines by implementing theallFooObjects routines in terms of the allFooEntities routines.Add an assert to the enumerators checking that each header word isnon-null.' id '88ffddab-2c49-4887-8487-faab5b6c10cc' date '10 November 2013' time '3:12:03.969130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.504' message 'Spur:Fix checkStackIntegrity to check that frame contexts are married totheir frames.  Add an assert to mapStackPages to check that framecontexts are married to their frames post remap.Refactor runLeakCheckerForFullGC: into checkHeapIntegrity: &runLeakCheckerForFullGC:excludeUnmarkedNewSpaceObjs: to allowleak-checking after mark phase when in news space only markedobjs should be scanned for refs.Fix nasty boundary condition where chunks of size 1038 bytes in32-bits, or 2048 bytes in 64-bits require a double header eventhough their number of slots is < numSlotsMask.  Also requires thataddFreeSubTree: uses bytesInObject: not numSlotsOfAny:.  So usebytesInObject: in sizeOfFree: also.Fix resetAsEmpty to reset first, and use it infillHighestObjectsWithMovableObjectsFrom:upTo:.Bump size of remembered table to 64k emporarily to get shootouttests to run.  The remembered table needs to move to the heap andbe growable.Call growOldSpaceByAtLeast: when copyToOldSpace: fails to be givenold space.Fix slip in [check]OkayOop: checking that double-header objs havea saturated slot count in the overflow word.Second pass in eliminateAndFreeForwarders needs to useallOldSpaceEntitiesFrom:do:.Check for young obj in remapObj: needs to apply to all args, notjust forwarded ones.Fix assert in storePointer:ofFreeChunk:withValue:.  Consequently,add and use storePointerNoAssert:ofFreeChunk:withValue: inswizzleFieldsOfFreeChunk: to avoid assert-fails on image load.Fix slip in unlinkSolitaryFreeTreeNode: when removing last node.Both isWidowedContext: & checkIsStillMarriedContext:currentFP:must cope with forwarding in Spur.  Also the check for themethod object matching is superfluous.Include page in printing of frames on in use stack page list.Real close.  ShootoutTests runAllToTranscript runs twp cases beforecrapping out in GC.' id '0c8604fd-5734-4097-a9a8-68958c3c506f' date '9 November 2013' time '1:35:02.580098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.503' message 'Fix bug in initFreeChunkWithBytes:at: which caused objectenumeration to break or objects with 254 slots.Fix bug in freeUnmarkedObjectsAndSortAndCoalesceFreeSpacethat forgot to set a freed unmarked object free.Rename bestFitCompact to firstFitCompact (that''s what it''s doing)and use the same refill-objects approach as exactFitCompact.Relocate firstFreeChunk after each compaction pass.Don''t bother breaking out of the loop to return the result in allocateOldSpaceChunkOfBytes:suchThat: et al, & rememberto return the found chun in allocateOldSpaceChunkOfBytes:suchThat:.Abandon exactFitCompact as compaction policy for global GC; itdoesn''t work well in image use (worked well in image bootstrap).Revise marking to correctly initialize stack page tracing andmark the hiidenRootsObj and freeListObj correctly.Remember to mark metaclasses in markAndTraceClassOf:.Add symbolic constants for stack page tracing.Implment comparison for CArray (for testing freeLists).' id '42e2a34e-13cc-4324-8eaa-7a6df5a1fd01' date '8 November 2013' time '1:33:00.173130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.502' message 'Handle the class table pages correctly re marking.  If class table pagesare strong they should be marked, not marked and traced, in orderto mark only reachable classes.Make sure the simulator and the stack VM agree on heap size onlaunch for Spur.' id '7071af43-79fc-4d30-855c-89cd6dc77fd5' date '7 November 2013' time '9:58:03.282098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.501' message 'Refactor (pop)storeLiteralVariable in the StackInterpreter so that allsuch bytecodes use storeLiteralVariable:withValue:.  Put breakpointsin the simulator''s pushLiteralVariable: & storeLiteralVariable:withValue:to catch forwarded objects.  This for debugging restarting prims thathave failed because of forwarded args.Use ^self in the clients (and in itemporary:in:put:) now that Slang cancope.Spur:Revise (and refactor) markAndTrace: so that- pure bits objects are not pushed on the stack- classes of objects are traced- checking for immediates, pure bits and weakness is done in markAndShouldScan:- class processing uses the classTableBitmap to expunge duplicate entries.Remove the bogus postCompactScanClassTable call fromglobalGarbageCollect.Add followForwardingPointersInScheduler and use it post-become.Refactor the all*Object*Do: methods to use isEnumerableObject:.Change the classIsItselfPun so that such objects answer true toisEnumerableObject:.Make sure that allocateSlots:format:classIndex: is inlined and thatallocateSlotsInOldSpace:bytes:format:classIndex: andeliminateAndFreeForwarders are not.Provide class side utilities to show the class puns and the formats in order.Add the missing longPrintReferencesTo:.Fix printOopShortInner: for simulation.Mimic the free space determination in sqMacMain.c inthe simulator''s openOn:. [N.B. this fails to mimic because ofbugs in or around readImageFormatFromFile:StartingAt:.Slang:Fix generation of asserts within struct classes inshouldExcludeReceiverAsFirstArgument:.' id 'b9cdef67-871c-409e-8dd8-75c807a82d67' date '6 November 2013' time '4:43:04.123359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.500' message 'Fix fetchPointer:ofObject: assert for forwarders and free objs,followForwardedObjectFields:toDepth: for CompiledMethods, andforwardSurvivor:to: for tenured objs.Remember to invoke the method that scans the class table postcompact.Fix bug in markAndTrace: with objs indexed from mark stack(could get caught in an infinite loop).Fix several bugs in SpurCircularBuffer.Fix bug in exactFitCompact.Fix BalloonEngineSImulation by ensuring that workBuffer is initializedwith 0s not nils.Global GC appears functional.' id '72bc8825-af12-430c-96ad-be11ea0330a2' date '5 November 2013' time '4:00:00.904228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.499' message 'doh...' id 'f45b31f0-3fe3-4706-8fde-a339bb89f94f' date '2 November 2013' time '2:37:00.413098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.498' message 'Add the compression prims to the Newspeak VM''s ZipPlugin.' id '429d3a33-5318-4130-addb-342eaffe0c23' date '2 November 2013' time '2:09:02.837261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.497' message 'Rescue the translated primitives by adding the missingremoveFinalReturnIn: to statementsFor:varName:Work-around Slang limitations with the new shouldBeTenured:; markit as <inline: false>.' id 'e1a38963-1741-4d75-99ae-af7006087d85' date '2 November 2013' time '1:59:01.147130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.496' message 'Fix global GC bug where stack pages containing marked contextswere being freed.  Bug was that objects marked in newSpace werenot being unmarked after GC.  Add a DontTenureButDoUnmarktenuring policy to unmark newSpace objects.N.B. perhaps this should be used *before* the GC.  But for now, withno incremental GC, we don''t need to.Fix nasty bug in MessageNode>>asTranslatorNodeIn: that leftextra arguments in args for ifTrue:, and: et al, and hence confusedthe new nilOrBooleanConstantReceiverOf:.Fix markAndTraceStackPages: to iterate while next page is untracedrather than unreached.Mark setTraceFlagOnContextsFramesPageIfNeeded: as <inline: false>;we won''t need multiple copies.Add some frames-on-page printing utilities.' id 'f0401045-f2f7-470e-9940-3535be9c0334' date '2 November 2013' time '12:12:03.730425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.495' message 'Rescue plugin generation by removing final ^self & computing rettype in VMPluginCodeGenerator>>compileToTMethodSelector:in:.Also, checkedDeclarationAt:put:in: needs to look at definingClass''sinst vars for translated plugins.Move harmonizeReturnTypesIn: from TMethod to CCodeGenerator soVMPluginCodeGenerator can override to map #void, #sqInt to #void.Eliminate several extraneous variable declarations in plugins.' id '860b7241-00b7-446d-bb17-e217178e55c8' date '2 November 2013' time '12:06:02.903 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.494' message 'Improve dead-code elimination to exprs like false or: [false].' id '85c763bf-2961-4872-becd-77a7ca626a8a' date '1 November 2013' time '8:24:00.412 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.493' message 'Revise TStmtListNode>>stream:endsWithAnyOf: top work around abug in UTF8TextConverter>>nextPut:toStream: which avoidsline-end conversion.Move or remove teh references to Debug in enterCogCodePopReceiveret al to prevent the Debug VM from aborting.' id 'd37e2bf0-ffed-4789-be4e-2aa8a9630e47' date '1 November 2013' time '5:29:03.02816352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.492' message 'Cope with char, short et al as return types, promoting them to #sqIntin harmonizeSignedAndUnsignedTypesIn:.Remove several extraneous type decls for missing vars.Fix conflicitng return types in dispatchConcretize by declaring it void.Put commas between conflicting types in the report.L:ine up the return under the statement when mapping ^expr toexpr; return; in void methods.' id 'f0d31c8c-9e93-4d77-ae6e-4e853a7d0d38' date '1 November 2013' time '3:18:02.996065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.491' message 'Fix roomToPushNArgs:; the Cog VMs can be more lenient becauseof the use of a stack instead of contexts.  SimplifyprimitiveDoNamedPrimitiveWithArgs.Add missing NewObjectMemory>>badContextSize: so that theVM doesn''t use SmallContextSize.Integrate VMMaker-dtl.328.Integrate Nice''s improved SmallInteger generated primitives thatsupport int x float comparison.Fix compactCompiledCode: for simulation.Slang:Do not generate dead code by default.  Fix the trailing ; issue forsome sends.' id 'e480c63b-0653-4b07-97bb-82eff9db8854' date '1 November 2013' time '1:43:03.722261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.490' message 'Remember to free untraced stack pages after the mark phase.Include flag bits in SpurMemMgr>>printHeaderTypeOf:.Fix longPrintOop: to print string contents.Fix return type conflicts in commonAt: et al.Fix printActivationNameFor:receiver:isBlock:firstTemporary: forno method class (which can be reported as nilObj), and nuke unusedprintActivationNameForMethod:startClass:isBlock:firstTemporary:.' id '7355becb-538e-4ed9-b13e-adc433688443' date '1 November 2013' time '11:06:02.580130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.489' message 'Remember to follow forwarders in obj stacks ineliminateAndFreeForwarders.Change ensureRoomOnObjStackAt: to only set the mark bit on a newpage, as old pages should already be marked.Remove the unused accessors for markStack and ephemeronQueue.Add an invalidObjStackPage inst var and a beefy assert tostorePointer:ofObjStack:withValue: for debugging.Check mark state in isValidObjStackPage:myIndex:Collect obj stack GC into markAndTraceObjStacks,followForwardedObjStacks & validObjStacks.Rename updateRootOfObjStack: to updateRootOfObjStackAt: &updateRootOfObjStack:with: to updateRootOfObjStackAt:with:for consistency/comprehensibility.GC seems to run...' id '46b91af3-49f9-4110-8271-4ca4c04bd0b6' date '31 October 2013' time '9:55:00.64732704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.488' message 'Mark some of the new methods <inline: false> for debugging.Actually dereference the field index in markAndTraceWeaklingsFrom:.Nuke unsent nilUnmarkedWeaklingSlots: (C conflict withnilUnmarkedWeaklingSlots).' id '1c22fbbe-334d-4740-8b2e-ac953396f93c' date '31 October 2013' time '6:07:00.202228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.487' message 'objStack:from:do: must be marked <inline: true> to gen code.' id '6160c3a0-aef1-4e52-bbe7-052d13dbe0aa' date '31 October 2013' time '5:43:03.960294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.486' message 'The penny drops.  One cannot combine the unmarking sweep withthe weakling nilling sweep.  Doing so ends up removing live objectsif they are unmarked before the weakling referrer is reached.  Soadd a weaklingStack obj stack to hold all reachable weaklings andmodify markAndTrace to push weaklings onto the weaklingStack.Modify ephemeron processing to nil weaklings.Add objStack:from:do: which allows incremental enumeration of anobjStack, even as it grows during enumeration.Rename the big kahuna to fUOASACFS.Refactor push:onObjStack: into noCheckPush:onObjStack: for thead-hoc testObjStackDo test.  Add emptyObjStack:.Refactor flushMethodCache to flush the at cache instead of requiringa separate send.  Add flushMethodCache to preGCAction: if usingthe SpurMemMgrAPI.Fix a slip in isValidObjStack:.Eliminate some extraneous type declarations.Hack the grow & shrink thresholds so the GC doesn''t try to shrinkmy test image.' id '5f2d1eba-c707-41f7-8c97-f2b477779101' date '31 October 2013' time '5:39:00.90332704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.485' message 'Fix ordering of removal of final return and recording of declarations.i.e. move them from TMethod>>inferReturnTypeIn: toCCodeGenerator>>inferTypesForImplicitlyTypedVariablesAndMethods.Don''t do them more than once.  Pass in code generator to both toallow logging of errors.  Check that recorded declarations are forextant variables.  Correct a few methods in which this wasn''t true.Refactor the return typer determination into addTypesFor:to:in:so it can recurse.  Add support for some arithmetic ops.Add asVoidPointer convenience and use it in several mem:cp:y:/mem:mo:ve: contexts, as welkl as to replace clumsiercCoerceSimple:''s.Force the type of all entries in the primitive table to be void inStackInterpreter class>>preGenerationHook:.' id 'dcfdd894-4f6c-4efe-bf1d-9ec24984d622' date '31 October 2013' time '9:58:00.215 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.484' message 'Deal with the issue of typing variables that get assigned the result oflongLongAt: by adding rudimentary type inference, determining thetypes of implicitly-typed local variables from assignments in theparse tree.  This in turn forces adding type inference of return typessince types propagate from sends through assignments to variables.The code is orchestrated by CCodeGenerator>>inferTypesForImplicitlyTypedVariablesAndMethods.  TheremoveFinalSelfReturn & recordDeclarations processing ispostponed to the type inference phase.Add kernelReturnTypes to CCodeGenerator to hold the return typesof longAt: et al.  Add implicitReturnTypeFor: implementations forthe Spur classes.Deal with the issue of optional use of interpreter proxy protocol,as in FilePlugin>>primitiveDirectoryDelimitor''s use ofcharacterObjectOf:, by adding an option: scheme that can evaluatee.g. atLeastVMProxyMajor:minor:.  This is used to ifdef assignmentsto the local function pointers in a plugin.  See e.g.InterpreterProxy>>characterObjectOf:.  Dispatch to theobjectMemoryClass to simulate some of the new protocol.Abstract out the option: pragma processing intoCCodeGenerator>>shouldIncludeMethodFor:selector:.  Use itto correctly filter the export api.  Add a vmMaker inst var toCCodeGenerator to avoid the silly use of exceptions to get hold ofthe current VMMaker, at least in the code generator.  Still need torefactor additionalSelectorTables & requiredMethodNames to takethe CCodeGenerator as an argument.  Change allcreateCodeGenerator implementations to set the VMMaker.Mostly drop, but in some cases add, returnTypeC: pragmas now thatreturn types are inferred in most circumstances (still don''t inferthrough ifTrue:ifFalse: or through arithmetic, i.e. infer only throughdirect return.Change some ^nil occurrences to ^self occurrences to avoidmultiple return types.Fix slip in mapObjectReferencesInMachineCode: and provide a stubmapObjectReferencesInMachineCodeForScavenge.Fix super expansions to eliminate bogus self; statements beingintroduced from the implicit ^self at the end of a method.Refactor the stack page tracing management, abstracting outinto initStackPageGC and using this in the scavenger.' id '3e476e6f-ab05-4256-b992-f12a827f20ed' date '31 October 2013' time '12:52:00.476228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.483' message 'Fix bug in eliminateAndFreeForwarders that forgot to free the lastrun of forwarded objects in the final sweep.' id '2b2db56c-c062-41fe-81fa-f872365cde4f' date '29 October 2013' time '6:57:03.678196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.482' message 'Integrate the mark phase of SpurMemMgr''s global GC with thestack page tracing scheme.  Refactor markAndTraceAndMaybeFreeStackPages:into markAndTraceUntracedReachableStackPages &freeUntracedStackPages to enable this.Add purging the remembered table and a final scavenge toeliminateAndFreeForwarders.  Refactor the core scavenge invocationinto doScavenge: to enable this.Fix StackInterpreter>>checkStackIntegrity which was tracing theinstruction pointer.Change printing of leaks in checkStackIntegrity to include the FP.Add transcript output to the simulators to show global GC progress.Fix off-by-one bug in findSelectorOfMethod:.Fix printActivationNameFor:receiver:isBlock:firstTemporary: foranonymous methods (doits).' id 'cb608c2f-ceb9-41c7-8785-5b451860535c' date '29 October 2013' time '6:42:02.317196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.481' message 'Call a misfit a misfit.  Just because it doesn''t fit in doesn''t mean it''s a failure.' id 'aa1f9c6c-b888-4ef6-9ca2-8f765256b7f9' date '29 October 2013' time '12:43:02.105032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.480' message 'Fix freeListsMask maintennance in allocateOldSpaceChunkOfExactlyBytes:[suchThat:].Fix determining new object address when copying and forwardingin exact/bestFitCompact.Refactor postBecomeScanClassTable so it can be used by thecompaction phase if required.' id '4266bc01-d2d8-498a-875f-cb14d99cf5c1' date '29 October 2013' time '12:32:02.695392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.479' message 'Fix bugs in allocateOldSpaceChunkOfBytes: &allocateOldSpaceChunkOfBytes:suchThat: (incorrect freeListsMaskmaintennance).Make sure eliminateAndFreeForwarders follows specialObjectsOop.Fix slips in sortFreeListAt: & unlinkSolitaryFreeTreeNode:(ofObject: => ofFreeChunk:).markAndTraceStackPage: should use isImmediate: not isIntegerObject:' id 'fa519ded-1bce-42c3-87b0-3cd3b14c1dd8' date '25 October 2013' time '9:22:02.442 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.478' message 'Fix bad bug in Slang translation of ifNil: which was outputting 0 forthe non-nil side instead of the receiver.Implement some missing nodesDo:parent:''s.Make some of the methods in the scavenger <inline: false> for debug.Count tenures in the scavenger (move statTenures there from SMM).Move initialization of tenuringProportion to where it''ll be executed in C.Move asserts from addTo[Weak|Ephemeron]List: intosetCorpseOffsetOf:to:.Fix ancilliaryClass collection for CoInterpreter but introducingisAcceptableAncilliaryClass: hack.Move defs of GCModes to StackInterpreter class and add aGCModeScavenge.  Use this to avoid attempting to shrink memoryafter a scavenge.  Rename all postGCAction imps to postGCAction:.Fix vmProxyMinorVersion to bump to 13 with Spur.Restore the scavengeInProgress and: [self isInFutureSpace: address]clause to addressCouldBeObj: so we can print objects during scavenge.Hard to debug otherwise.  Make the space determiners (isInNewSpace:et al) use oop:isGreaterThanOrEqualTo:andLessThan:.Count compaction passes in best/exactFitCompact.  Answer this asstatCompMoveCount.  Eliminate some stats that are never going to becounted in Spur.  Collect relevant stats in fullGC.Mark some methods as <api> for the VM proxy when minor ver = 13.Filter-out primitives with <option:> pragmas that evaluate to false.Modify primitiveVMParameter to answer scavenge stats for params9 & 10 (inc GCs & inc GC ms) in Spur.' id '15a1d83f-0c88-4af2-afce-eed621d27ac6' date '25 October 2013' time '7:31:02.261032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.477' message 'Fix shift in headerForSlots:format:classIndex:; needs to be long long.Make a few vitals inlined.Fix off-by-one in printOopShortInner:.Relax restriction in isFunctional of return type being sqInt tobeing any of sqInt, usqInt, sqLong or usqLong.C Spur VM runs up to the end of the first scavenge, when it triesto shrink memory.' id 'b29f70be-1ead-4893-8f3c-f39b3d189a87' date '25 October 2013' time '12:57:02.661359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.476' message 'Fix cascades to structs.  Can''t copy a struct and update the copy.Must take the address of the struct and indirect through it.  Thiswas causing C not to update the first segment''s segStart.Fix SpurMemoryManager>>startOfMemory for C regime.Make a few methods non-inline for C-level debugging, etc.Make the primitive table creation code filter-out option: primitiveswith the wrong option:.Fix renaming of declarations and hence don''t remove methodswith declarations from the inlinable methods.' id 'b85d6f3c-f210-480d-883f-fbcc1be321d5' date '25 October 2013' time '10:50:00.625392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.475' message 'Revise and complete compaction (to the extent that the generated Ccompiles and links).Make highestObjects a SpurCircularBuffer, which itself is added.Change some arg vars to avoid shadowing warnings.Change some return types to #void to avoid self appearing.Add some <inline: false> to avoid inlining in whiles etc.Fix Slang for transformation of ifNotNil: (ifNil:ifNotNil: was handled).Fix Slang for inlining non-struct accessor methods of struct types.Fix Slang for invoking non-struct accessor methods of struct typeswith struct receivers (as opposed to pointer-to-struct receivers).Fix shouldExcludeReceiverAsFirstArgument: to filter-out structfields that are implicit variables (i.e. aSpurCircularBuffer manager).Rename some isFoo: aCodeGen selectors to isFooIn: aCodeGen forconsistency.typos.Spur Stack VM now links.' id '2dfcdc5a-bfbf-4797-8dae-eebe54a1ebbe' date '24 October 2013' time '4:05:03.177196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.474' message 'Transform e ifNotNil: [:v|...] into v := e. v ifNotNil: [...] in TMethodcreation so as to enable the allocateOldSpaceChunkOfExactlyBytes:suchThat:send in exactFitCompact to be inlined.Add an <inline: true> pragma to said method to force it to beinlined.Add generateValueAsArgument:on:indent: to allow theacceptanceBlock to be correctly expanded in the ifs in said method.Fix swizzleObjStackAt: to answer the obj stack swizzled.Fix TStmtList printing with arguments are nil.' id '64efc673-34ea-49e3-b97a-9bab48706160' date '22 October 2013' time '4:11:03.874425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.473' message 'Make sortedFreeChunks a temp of fUONUWSASACFS.  HencerebuildFreeTreeFromSortedFreeChunks =>rebuildFreeTreeFrom:.Fix basic operations and asserts and for obj stacks(tested by making obj stacks small).Fix addFreeSubTree: to update parent link.Provide allocateOldSpaceChunkOfExactlyBytes:suchThat: forexactFitCompact.  Implement exactFitCOmpact in terms ofhighestObjects.Fix checkHeapIntegrity to cope with obj stacks.Shrink inFreeTreeReplace:with: to do more in its loop.Remove some obsolete compaction code.PRovide VMClass>>str:cat:' id '309f7322-d09f-4c20-b826-b5b4c4a48529' date '22 October 2013' time '10:59:03.745392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.472' message 'Make rebuildFreeTreeFromSortedFreeChunks sort the lists off eachtree node in the free tree for compaction, highest address for thenode, followed by a list from low to high.Requires freeTreeNodesDo: to update its notion of the node fromits block.  This in turn requires Slang to handle outputtingan assignment whose value is a value expansion correctly, movingthe assignment to the last statement of the value expansion.speeling errars, coallesce => coalesce, detatch => detach.Now ready to implement bestBitCompact & exactFitCompact properly.' id '88a5a8b4-a29f-43fd-9a4e-ff5319cf5c4d' date '21 October 2013' time '1:19:02.407359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.471' message 'Implement rebuilding the free tree after sweep.  RefactoraddToFreeList:bytes: to extract addToFreeTree:bytes:.Fix reverseSmallListHeads.Use the iterative freeTreeNodesDo: for totalFreeListBytes.Add a containsPinned flag to SpurSegmentInfo and update it insweep.  Also add a preferredPinningSegment to the seg mgr forclustering pinned objects, when we get to it.' id '51970cea-207a-46a1-85a3-b1296656e2df' date '21 October 2013' time '10:09:03.740294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.470' message 'Simplify the sorting sweep.  Throw away all free lists.  Link largechunks through sortedFreeChunks and add small chunks to theirfree lists, reversing the small lists post sweep.Still have to implement rebuilding the free tree.  But free space issorted.' id 'f2c1d9b6-9136-4c2f-872e-7744f8d1b580' date '20 October 2013' time '6:39:02.13332704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.469' message 'Rethink the sorting of free space for exact-fit compact post globalGC.  Since the sweep to free unmarked objects is linear through oldspace it can also sort free space.  SofreeUnmarkedObjectsAndNilUnmarkedWeaklingSlots =>freeUnmarkedObjectsNilUnmarkedWeaklingSlotsAndSortAndCoallesceFreeSpace (glup ;-) ).Make sure that bridges are marked so they won''t be freed infUONUWASACFS.Add freeChunkPrevIndex to link next nodes to their precedessorsso that free chunks can be quickly removed during coallescing.Implement an iterative freeTreeNodesDo: so that Slang can inline theblock arguments to it.Refactor the code that removes a tree node inallocateOldSpaceChunkOfBytes: et al, out intounlinkSolitaryFreeTreeNode:Still have to reverse small list heads post-sweep and account for free space properly.' id '9a1b817f-2cee-487a-8c07-6444e28a16aa' date '20 October 2013' time '5:15:02.648359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.468' message 'Remove an unused recursive method (stackValue:ofObjStack:put:).In Slang, prevent inlining of recursive methods.' id 'c604e6e0-398e-423c-b37d-478eca3fedf3' date '18 October 2013' time '6:02:03.076261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.467' message 'Rewrite obj stacks to eliminate the awful double indirection so thatboth the mark stack and ephemeron queue can be stored in inst varsof SpurMemMgr.Simplify markAndTrace: so that it has less duplication and actuallyhandles large objects correctly.Remember to mark the freeLists object.Implement freeing unmarked objs and nilling weak fields postscan-mark.  Implement ephemeron processing.Add bounds checking to SpurMemMgrSimulator''s fetchPointer:methods.Replace metaclassSizeBits with metaclassNumSlots and correctclass name printing methods to avoid a bounds violation when applied to e.g. nilObj.Some isIntegerObject: => isImmediate:''s in CoInterpreter tracemethods.' id 'e8811a02-2211-46ed-9535-f48c5397ecc0' date '18 October 2013' time '4:44:01.499196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.466' message 'Commit a barely functional markAndTrace: using a mark stack.Introduce an obj stack datatype, a stack composed of pages thatgrows but does not release memory back on shrink (when should itdo that?).  Use this for the mark stack and the ephemeron queue.Add SpurContiguousObjStack and use it for the unscannedephemerons during global and/or incremental  gc.Re-categorize the GC methods to group global, scavenging andincremental GC together.' id 'dc4753dd-5258-42e3-9e41-35f8f037cd01' date '17 October 2013' time '5:32:03.22916352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.465' message 'Add room for a small number of hidden roots for things like theephemeron queue to the class table root object.  Hence renameclassTableRootObj to hiddenRootsObj & classTableRootObj: tohiddenRootsObj:.Fix bugs in allocateOldSpaceChunkOfBytes:, ofObject: =>ofFreeChunk:, when adding back into root both children can be null.Change call of sqAllocateMemorySegmentOfSize:Above:AllocatedSizeInto:to use end of first segment as minAddress instead ofnewSpaceLimit.  Hopefully will play better with mmap et al.Fix comment in initializeSpecialObjectIndices.' id '76822de3-f107-4e28-93d6-f49bfdf3bbb8' date '17 October 2013' time '6:59:00.15016352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.464' message 'Slang: only output VM_LABELs in interpret.' id '83064fda-58cb-45ea-b816-0fffd26ff50f' date '16 October 2013' time '4:47:02.101392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.463' message 'Don''t assume new segment is above all other segments.Fix arg count bug in primitiveGrowMemoryByAtLeast.Add assimilateNewSegment: to avoid overriding so muchin Spur32BitCoMemoryManager & hence nuke itsgrowOldSpaceByAtLeast:.Add a fudge factor (2 * baseHeaderSize + bridgeSize) togrowOldSpaceByAtLeast: and round p the request to a power-of-two.' id 'd0c77ca3-8fb8-41d8-886b-f40fa4555b88' date '16 October 2013' time '4:30:02.949359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.462' message 'Implement heap growth by allocated segment in Spur:Add SpurSegmentManager>>addSegmentOfSize:,	SpurMemoryManager>>growOldSpaceByAtLeast:,	sqAllocateMemorySegmentOfSize:Above:AllocatedSizeInto:&	InterpreterPrimitives>>primitiveGrowMemoryByAtLeast.Initialize growHeadroom & shrinkThreshold in SpurMemMgr.Fix slips in collapseSegmentsPostSwizzle.Simplify scavengeReferentsOf:; the halt couldn''t happen.' id '0a25a2ac-0a88-48d3-9300-17cd4c915f57' date '16 October 2013' time '2:05:00.099425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.461' message 'Update class table entries post two-way become.  class table entriesmust correspond to class identityHashes, so swapping is needed ifnot copyHashFlag.  Rename ...become:with:... to ...become:and:.Simulator successfully implements e.g. Morph addInstVarName: ''foo''' id 'b9156f41-92ae-4136-9d68-6ca927322513' date '15 October 2013' time '5:05:03.429098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.460' message 'Add classTableBitmap and numClassTablePages to SpurMemMgr.classaTableBitmap used to expunge duplicate entries from classtable, and eventually to GC classes.Enter used class indices into bitmap when swizzling and expungeduplicate entries there-after.Make primitiveForceTenure a SqueakV3ObjectMemory option (for now).Nuke unused isImmediateObject:.Update SpurMemMgr''s class cmment with more accurate designinfo, as well as adding new inst var descriptions.Rename isClassInClassTable: to isInClassTable:.Fix SpurMemMgr>>initialize to init the right part of extraRoots.' id '8deb49e7-9138-443d-9650-a99a3daf0963' date '15 October 2013' time '4:16:01.266294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.459' message 'Add extraRoots and implement doBecome:to:copyHash:.' id 'd2ffc89b-e4ff-4404-902d-bc687cf089b6' date '15 October 2013' time '10:01:00.236425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.458' message 'Define isGrey:,isImmutable:,isMarked: bits.Define newSpaceRefCountMask.Rename isInRememberedTable: to isInRememberedSet:.Implement [check]OkayOop: (with addressCouldBeObjWhileScavenging:for support).More missing protocol.' id 'fa66f078-056e-4da5-8926-9c2bf3f64282' date '15 October 2013' time '9:28:02.777196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.457' message 'More protocol added to SpurMemoryManager.More primitives marked with <option: #SqueakV3ObjectMemory>.Time to desist...' id 'c4aa88bc-7af4-4cfe-94e4-c79f485a488d' date '14 October 2013' time '8:22:00.83716352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.456' message 'Fix bad bug with generation.  Make sure vm classes are initialized*before* adding pools in VMMaker>>buildCodeGeneratorForInterpreter:.If not, BaseHeaderSize can have the wrong definition from a previousgeneration, e.g. 8 from a Spur generation.Also move initializeObjectHeaderConstants earlier inObjectMemory/SpurMemoryManager>>initializeWithOptions:, andadd some asserts to initializeObjectMemory: to try and catch themis-translation if it reoccurs (I know, horse has already bolted...).Eliminate a couple of bogus nextLongFrom:swap:''s fromreadImageFromFile:HeapSize:StartingAt:.Make primitiveClipboardText, primitiveInvokeObjectAsMethod &signed32BitIntegerFor: use Spur instantiation when available.Make primitiveFullGC do an incrementalGC only in classic ObjectMemory.Implement Spur[NBit]MemoryManager>>changeClassOf:to:Add more missing protocol to SpurMemoryManager.Add support for truncateTo: if arg is an integer power-of-two.Add struct type support for addressOf:.Make addMethodFor:selector: cope with a missing VMMaker (forexperimenting with TMethods).Merge with VMMaker-tpr.326.More isPointersNonInt: => isPointersNonImm:.Slang:Do a nicer job with empty ifTrue:ifFalse:''s in MessageNode>>asTranslatorNodeIn:.Now prepareMethodIn: uses nodesWithParentsDo: can do a neaterjob transforming caseOf:''s & dispatchOn:''s into switch statements.i.e. nuke replacements dict and dead transformSwitchExpression: call.' id 'ac6bc9a3-b3f4-4576-9164-4d60eebd8544' date '14 October 2013' time '6:31:02.558425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.455' message 'Harvest any initializations of localised inst vars and add them to themethods into which they''re localised.' id 'aa5d9a84-c8f8-4bea-b3c6-3871153f8238' date '14 October 2013' time '10:54:01.083228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.454' message 'Eliminate compilation errors from Spur interp.c:Make Slang infer type of result of at: so that struct deref of e.g.segments doesn''t require a typed temp.When inlining blocks rename and remember their labels so that ifmultiple copies are inlined (as in Spur''s allObjectsDo:) each copygets its own labels.Remember structClasses in CCodeGenerator for emitCTypesOn:.Filter-out initialize methods in addMethodFor:selector:.Make VMClass>>initializeMiscConstants addSqueakV3ObjectMemory to options if not Spur so thatprimitiveRootTable[At] is excluded in Spur.Make Slang emit if-then-else chains for caseOf:''s used in ifs (forshouldBeTenured:).  Needs nodesWithParentsDo:.Declare the scavenger''s space and remembered set inst vars.Rename tenuringThreshold inst var to tenureThreshold to avoidmasking.Ditto, rename some bytesInObject temps to bytesInObj.Get return types of scavenger''s space accessors right.Add a shrinkThreshold inst var, but don''t implement anythingmeaningful yet.Add SpurMemoryManager/SpurSegmentManager/SpurGenerationScavenger translation support (declare vars,ancilliary classes & implicit var names).Replace some sends of class with sends of touch: (and sends oftouch with touch:).Rename SpurSegmentInfo>start to segStart (avoids conflict).Change scavengeReferentsOf: to cope with a forwarder to animmediate created via becomeForward:.Pass in tenuring criterion to scavenger as parameter of scavenge:.Abstract the memory size vm parameters intonewSpaceSize, oldSpaceSize & totalMemorySize.Simplify the various shouldGenerateTypedefFor: methods.Neaten interp.h in writeVMHeaderTo:bytesPerWord:.Turn off inlining of addTo[Weak|Ephemeron]List to neatencopyAndForward:, and of freeObject: and objectAfter: forinitializeObjectMemory:.Add forwardSurvivor:to: to avoid store check.Change some var := expr ifTrue: [...] ifFalse: [...] toexpr ifTrue: [var := ...] ifFalse: [var := ...] to get past Slang limitations.Eliminate some or:or: uses.Eliminate comeFroms in scavenger simulator.Slang:Emit integers that look like bitmasks in hex.Add declareCAsUSqLong: convenience.Add nodesWithParentsDo: & nodesDo:parent:.Rename cascadeVariableNumber to extraVariableNumberto allow it to be used to derive the switchVariable forif-then-else chaines caseOf:''s.  buildSwitchStmt: =>buildSwitchStmt:parent:.' id 'a0291c46-546b-463d-90d2-ce37fd841eae' date '14 October 2013' time '9:03:01.322425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.453' message 'Oops.  Some stragglers.   Now gcc3x-interp.c is generated forStackInterpreter + Spur.' id '1510990d-a971-41cc-8a66-bc65a160454a' date '11 October 2013' time '5:19:00.840294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.452' message 'Add a configuration for a StackInterpreter+Spur VM.Make StackInterpreter + Spur translateable:- make BlockNode>>isPotentialCCaseLabelIn: not barf on   [self arrayFormat] -> [...] et al- the usual class-side translation horrors added to   SpurMemoryManager and subclasses- rename some args to avoid warnings about shadowing- Move the sender selector checking in isIntegerObject: et al down  into the simulator subclasses.Round the CogVMSimulators heapBase to allocationUnit so thescavenger initializes correctly.Eliminate the bogus second initialization of obejctMemory inCogVMSimulator>>openOn:extraMemory:.Fix the assert in checkIfValidObjectRef:pc:cogMethod: since open piclinking can leave the selector unchanged in rare circumstances.Replicate the clasas-side fixes for intializationOptions inStackInterpreterSimulator in CogVMSimulator.' id '1a0629f1-a8f6-4b4f-a0ab-0b93fe63cde0' date '11 October 2013' time '5:12:04.063196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.451' message 'An incendiary commit!! :-)Refactor snapshotCleanUp to extractbereaveAndNormalizeContextsAndFlushExternalPrimitivesfor the bootstrap which doesn''t want to GC before snapshotting.Fix the StackInterpreterSimulator window border.  Harmonize thecode with CogVMSimulator.Rename markAndTraceMachineCodeForIncrementalGC tomarkAndTraceMachineCodeForNewSpaceGC, &leakCheckIncrementalGC to leakCheckNewSpaceGC.Assert-check there''s enough reserve on scavenge.Initialize classTableIndex when setting classTableRootObj.Fix setting up free space in the bootstrap.Swizzle the fileds beyond the stack p[ointer in contexts on start-upvia adding lastPointerOfWhileSwizzling:.remember to set-up new space variables on image load(initializeNewSpaceVariables).Make computeTenuringThreshold cope with a flushed futureSpace.Spur now loads an image and can evaluate 3+4 (needs Cog-eem.114 or later).' id 'b5e6b999-d2ef-4257-8624-97aab4e0c555' date '11 October 2013' time '3:18:00.332065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.450' message 'Fix swizzling:- search the segments in reverse order for the first segment whose  start is less than or equal to the oop.- add an assert set in adjustSegmentSwizzlesBy: and cleared in  collapseSegmentsPostSwizzle that checks that swizzling is done  only while the swizzle info is valid (numSegments reflects the num  of segs in the image, not in the loaded system).- swizzle the freeLists before collapseSegmentsPostSwizzle.' id '86e607b5-0e72-4bf7-bda3-064b59b40267' date '11 October 2013' time '9:48:01.048425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.449' message 'Reimplement segmented loading to eliminate the bridges by readinga segment at a time, instead of reading entire heap in one go andfreeing bridges after the fact.Refactor image reading into ObjectMemory et al>>readHeapFromImageFile:dataBytes:.Make SpurMemoryManager>>setEndOfMemory: cut backfreeOldSpaceStart if required for the bootstrap snapshot.Make printNameOfClass:count: et al cope with a nil classNameIndexfor pre-initialization debugging (i.e. of just swizzled images).Bootstrapped image loads but doesn''t launch.  6th element infreeLists is invalid.  Ho hum...' id '6e6aa8be-c134-4a8b-9911-0e97fa4055cd' date '10 October 2013' time '5:44:00.123196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.448' message 'Commit incomplete Spur image loading at a decision point.  Do weload the image in one go and free the bridges in between segments,or do we read the image a segment at a time and squeeze out thebridges?  The issue is that if bridges are freed they must be at least3 allocation unts long, whereas if they don''t have to be freed theycan be two allocationUnits long.Change the image loaders (both real and simulated) to- tell objectmemory what the firstSegmentSize is- use newSpaceBytes instead of edenBytes, alloing Spur to include  survivor space sizes.- use memoryBaseForImageRead instead of startOfMemory so Spur  can read heap above newSpace.- use sq:Image:File:Read: in place of cCode: ''sqImage...''Change the simulated loaders to use getLongFromFile:swap: &getShortFromFile:swap: since it was confusing to have to usenextLongFrom:swap: & nextShortFrom:swap: as the get... ones didn''tadvance the file pointer.Refactor numSlotsOf: into rawNumSlotsOf: and overflowSlotsOf:.SpurSegmentManager parses segments in the loaded image,computing segment sizes and offsets and building up segment info.adjustAllOopsBy: asks the segment manager to swizzle.Also have to swizzle free chunks and the freeLists object.Revert initializeOldSpaceFirstFree:; the segment manager creates thelast bridge.Nuke unused oopOfObjectStartingAt: & overflowSlotsMask.' id '772830f8-5ae6-4601-8cc1-e576d1dd6cbb' date '10 October 2013' time '12:23:03.435196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.447' message 'Refactor sends of setEndOfMemory: & setMemoryStart: from imageread/open (real vs simulated) into setHeapBase:memoryLimit:endOfMemory:and reverseBytesInImageso that Spur can initialize itself coherently.Tweak writeImageFileIO to use sq:Image:File:Write: instead of cCodestring, and fix use of timesRepeat (Slang doesn''t handle this cuztoo hard to add the iteration variable).Refactor scavenger initalization for standard simulator launch.Replace 2 & 7 with meaningful message names.Rescue generation of both Stack and Cog VMs:isPotentialCCaseLabel needs to be cleverer.Filter-out isNonArgumentImplicitReceiverVariableName: inst varsin addClass:.Avoid complaining about subclassResponsibilities as conflicts.Add subclassResponsibility as a meta error to CCodeGenerator.Fix CoInterpreter>>addNewMethodToCache: to have same arg nameas StackInterpreter''s method.Implement CoInterpreter>>followForwardedFrameContents:stackPointer:.genInnerPrimitiveNew* are now subclass responsibilities of CogObjectRepresentation.Tidy up objectMemoryClass & objectRepresentationClass (move toclass side, with imnstance side methods in VMClass).Fix SimpleStackbasedCogit>>ancilliaryClasses.Add ObjectMemory>>followForwarded*:Mark format constants <api>.Add #Spur to initializationOptions in VMClass class>>initializeMiscConstants.Fix printTypedefOn: for alignment using BaseHeaderSize.64-bit method surrogates regenerated as side-effect of generating VMs.' id '044e4325-2db5-46a4-9a8d-a762ec8e004c' date '9 October 2013' time '8:11:01.74032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.446' message 'Define Spur imaeg format version number, using 2r10000 flag as perDTL''s prescription.' id '7370bf0f-d413-4466-9958-47a808675189' date '9 October 2013' time '12:03:03.773032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.445' message 'Implement writing the segmented Spur image to the snapshot file.Update class comment of SpurMemoryManager to describe recentlyadded inst vars.Update comment of LittleEndianBitmap>>byteAt:put:.' id 'b08bb261-b9d0-45fc-b81f-43c1b12d7352' date '9 October 2013' time '11:15:03.78716352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.444' message 'Make the simulators write snapshots by deleting theirprimitiveImageName implementations which only get, not set,and implementing imageName[Get|Put]:Length: & imageNameSize.Make SecurityPlugin>>secCanRenameImage answer somethingsensible during simulation.Fix bugs in LittleEndianBitmap.Fix objectHeader: in the CogMethodSurrogates (needed for codecompaction to work).Hack NewObjectMemorySimulator>>storePointerUnchecked:ofObject:withValue:to disable the check when nilling contexts in snapshot.' id '1e751c1f-c5c0-4c30-85f1-5f8ef8bf71e1' date '9 October 2013' time '9:11:03.947 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.443' message 'Fix terrible slip in remapRemapBufferAndExtraRoots which causesremapBuffer contents not to be remapped.' id '4e2052f0-eb89-438c-a109-ed213ba6d592' date '8 October 2013' time '4:58:00.638065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.442' message 'More uses of allObjectsDo: in place of presumptious open-coded loop.' id 'e65a62ab-94da-4d61-934d-e60a36da3791' date '8 October 2013' time '3:20:03.557425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.441' message 'Initialize a SpurMemoryManager''s SpurSegmentManager.Initialize the end-of-segment zero-sized bridge.Provide covenient initializers for segment bridge headers.Add wordSizeClassPun & wordIndexableFormat abstractions forfree lists & bridges that vary from 32- to 64-bit.Fix bug in, and simplify allocateOldSpaceChunkOfExactlyBytes:.get the terminology right; sionara isSegmentSpanningFakeObjectPun ;-)Rename convertFloatsToPlatformOrderFrom:to: toconvertFloatsToPlatformOrder (args unused).Recategorize the puns.' id '3ace9016-94ec-4db2-85a0-ef1e4589f5d2' date '8 October 2013' time '3:01:00.745261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.440' message 'Move freeLists to heap, immediately following trueObj.Make freeLists size of a machibe word. 98.8% of objects are <= 31allocationUnits in size in the 32-bit VM.  So making freeListsMask64-bits doesn''t make sense.  Best keep it in 32-bits and have it fitin a register.' id '6c650edc-83c9-42c3-bd6f-f22edc1304ed' date '8 October 2013' time '10:36:03.271359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.439' message 'Work in progress towards Spur snapshot & load.Add rawNumSlotsOf: to answer slots in first word.  Usein relevant places, in particular hasOverflowHeader: usedin compaction sketches.Add a couple of compaction sketches (cuz they''re far fromfinished), bestFitCompact & exactFitCompact.  Uses instvar sortedFreeChunks & sortFreeSpace.Add isPinned:/setIsPinnedOf:to: for segment bridges.Refactor oldSpace enumeration into allOldSpaceObjectsFrom:do:.Add allocateOldSpaceChunkOfExactlyBytes: &consequently fix bugs in allocateOldSpaceChunkOfBytes:.Update checkFreeSpace to check validity of freeListsMask.Rename become arg checkers to containsOnlyValidBecomeObjects:[and:]and have them check for pinned objects.Add PrimErrObjectIsPinned.Update comment in headerForSlots:format:classIndex:.In particular descripe ref counting remembered tablepruning.Add SpurSegmentManager, in particular its class comment,and add SpurSegmentInfo.' id '23869400-1665-400b-bb7c-27c07aa2fa21' date '8 October 2013' time '9:03:01.295032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.438' message 'Implement machine code primtiiveNewWithArg for Spur, arrayFormat,byteFormat & longFormat.Add comments to StackInterpreterSimulator>>primitiveNewWithArgwhich, if uncommented, collect dynamic frequencies of classes andclass formats for basicNew: et al.' id '19319f8f-986d-4563-b5ce-18b2f686fd0c' date '4 October 2013' time '6:09:01.767065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.437' message 'Step back from the brink of implementing scaled indexed addressing.' id 'f67bff18-3b85-4a8d-8ad6-8773ed870777' date '4 October 2013' time '2:56:02.190359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.436' message 'Put num operands of an AbstractInstruction in NumOperands classvar, to ease changing if adding scaled indexed addressing.Frivolously remove some double period statement separators..' id '224a0465-0692-4fb7-afd4-3e247f01bca5' date '4 October 2013' time '2:25:01.33032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.435' message 'Avoid forwarding when obtaining classIndex or classObj inmachine code by adding instRegIsReceiver: instRegIsReceiver togenGetClassObjectOf:into:scratchReg:(instRegIsReceiver:).Update StackInterpreterSimulator>>writeImageFileIO: to matchCogVMSimulator.  Simplify two putLong:toFile: implementations.' id '0c12fb89-e1e8-4428-8d8f-a18236386c12' date '4 October 2013' time '2:06:02.708098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.434' message 'Add a tenuring criterion, allowing tenuring by age (default) or class(for initialInstanceOf:/nextInstanceOf:).' id '6b0dc242-e4e1-4d22-be6e-29b360b1e82a' date '3 October 2013' time '9:20:02.173228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.433' message 'Implement CogObjectRepresentationFor32BitSpur>>genInnerPrimitiveNew:.Recategorize the format definitions so there''s a convenient list of them.' id 'a3ae4b63-36dd-4fef-918a-5f92b009851a' date '3 October 2013' time '5:28:00.845196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.432' message 'Get the allocation generator names right.Refactor common code into compileFallbackToInterpreterPrimitive' id 'db07559d-7249-42dd-b3ea-046593a6b23a' date '3 October 2013' time '2:39:02.322 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.431' message 'Remap *prim*Equivalent* to *prim*Identical*.  == is not equivalence :)Add framework to primitive table & objectRepresentation forimplementing basicNew, basicNew: & newMethod:header: inmachine code.' id 'b08726c3-49b7-40b1-852e-6e895e8f070f' date '3 October 2013' time '2:27:02.905 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.430' message 'Add forwarding code to InterpreterPrimitives>>primitive[Not]Identicaland bytecodePrimEquivalentFix machine code genPrimitiveIdentityHash failure; failure shouldcall the interpreter primitive to assign the hash.Make machine-code double primitives deal with Spur having morethan one immediate type.More protocol added to CogObjectRepresentationFor[NBit]Spur.Fix logging in CoInterpreter>>commonSend to use lkupClassTag.Print a method''s primitive if it has one in printCogMethod:.*Don''t* check stack depth in ceTraceLinkedSend:. The call isn''t at asuspension point.Get CogVMSmulator>>ioRelinquishProcessorForMicroseconds: toincrease byteCount so delays can actually fire when idle process isrunning (simulator derives time from byteCount).Add dumpPrimTraceLog to utilities menus.Fix checkIfValidObjectRef:pc:cogMethod: to correctly check supersends (added uncheckedEntryAlignment for completeness).Send print: to coInterpreter in the validity checking routines(meaningful when simulating).Correct Cogit>>sendTrace:''s comment.Change Spur''s variable class instantiation to allocate objects withmore than the max fixed fields worth of slots in old space.  Avoidsclogging up new space with huge bitmap objects.More is(Non)IntegerObject: => is(Non)Immediate:.genGetCompactClassIndexNonIntOf: => genGetCompactClassIndexNonImmOf:.Cogit+Spur bootstrap now genuinely evaluates 3+4 (before it wasinterpreting due to 1st-level method lookup cache bug).' id '8cc48bd0-58e0-4492-a5ca-84f53f03de37' date '3 October 2013' time '1:49:00.884425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.429' message 'Oops.  get shift direction right in creating immediate characters.' id '1593bea6-2881-4bea-a21f-8798f236b654' date '3 October 2013' time '1:00:01.60416352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.428' message 'Fix method surrogate offsetOf: methods.  These now need to takebaseHeaderSize into account.Fail genPrimitiveIdentityHash if obj rep says 0 is not a valid hash and0 is the hash.Fix genInnerPrimitiveAt: & genGetSizeOf:into:formatReg:scratchReg:abortJumpsInto:.They were stomping on the numSlots intermediate result.Implement genInnerPrimitiveStringAt:.  Easy with immediatecharacters :-).Change genGetClassObjectOfClassIndex:into:scratchReg: to open-codeclass table indirection and nuke ceClassAtIndexTrampoline.Change shouldAnnotateObjectReference: to not annotate theclassTableRootPage which will never move, being immediately afternil, false & true.Move the register mask c=utilities up to Cogit.  They can be usefulin making run-time calls when caller-saved regs need to be saved.Add CallRT:registersToBeSavedMask: to do this (not used).Add BadRegisterSet error to allow routines to ask for a differentcombination of registers in certain circumstances.  Use this ingenPrimitiveClass.Add a cr between successive prints when printing both insts and regs.Change shortPrint: to print variable bindings as Associations.More addressCouldBeObj: => addressCouldBeOop: asserts.More is(Non)IntegerObject: => is(Non)Immediate:.Bootstrap now way off base, hitting the idle loop before drawing thescreen.' id '480331f4-5272-4a17-8ba8-0abe8035a8b7' date '3 October 2013' time '12:53:03.665359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.427' message 'I am a bozo!  lookupMethodNoMNUEtcInClass: adds to cache anyway!Revert the relevant ceSend: methods.Add more CogObjectRepresentationForSpur.  Change genPrimitiveIdentityHashso that memory managers (such as Spur) can use 0 as anuninitialized identityHash and call the interpreter prim if uninitialized.' id '15aece3d-713b-4408-938b-597a7d88854e' date '2 October 2013' time '5:31:01.202065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.426' message 'Several of the ceSend: lookup and bind routines should addsuccessful lookups to the 1st-level methodCache.Implement CogObjectRepresentationFor32BitSpur>>genInnerPrimitiveAt:.Add a couple fo accessors to CogVMSimulator for bootstrap and/ordebugging.' id '1be04936-02a2-40ae-8c57-bab042496204' date '2 October 2013' time '3:55:01.48332704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.425' message 'Implement CogObjectRepresentationForSpur>>genInnerPrimitiveSize:.Nuke a debugging halt.' id '0be2679f-a6b8-48d0-8ef2-27eb9b1f04fa' date '2 October 2013' time '1:07:02.05316352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.424' message 'Fix adding entries to the method cache (hash needs to use classTag,not classObj).Make scavenging flush the atCache (plumbing for ObjectMemory isthrough mapPointersInObjectsFrom:to:, so not obvous).Add routines to print mehtodCache & atCache.Cogt+Spur now halt long before 3+4 when trying to compileprimtiive size.' id '04c70bb8-9f13-4744-b63f-c48f34a1b961' date '2 October 2013' time '11:47:02.609425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.423' message 'Add blockAlignment to formalize block entry encoding in native pcs.Move the ceStoreCheckTrampoline inst var into CogObjectRepresentationand implement generateObjectRepresentationTrampolines so Spurcan add ceClassAtIndexTrampoline.More protocol added to CogObjectRepresentationForSpur.More addressCouldBeObj: => addressCouldBeOop: asserts.More isIntegerObject: => isImmediate:.Cogit+Spur now evaluates 3+4.' id '1a75a970-d33c-4e87-af67-87928d11facf' date '2 October 2013' time '9:56:01.71932704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.422' message 'Fix bad slip in CoInterpreter>>mapVMRegisters.Fix alignment of fake block headers.  Use	self AlignmentNops: (methodZone roundUpLength: 1)instead of	self AlignmentNops: (self sizeof: CogBlockMethod).Refactor genPushReceiverVariable: to eliminate genSSPushSlot:reg:.Get ceNewArraySlotSize: to use faster Spur allocation.More protocol added to CogObjectRepresentationFor[NBit]Spur.Make checkIfValidObjectRef:pc:cogMethod: distinguish betweenlinked and unlinked sends.Clue SpurMemoryManager>>checkHeapIntegrity into CogMethods.Do some plumbing work for heapMapAtWord:[Put:].More isIntegerObject: => isImmediate:,isNonIntegerObject: => isNonImmediate:.Bootstrap proceeds to first compilation of something containingspecial selector class.' id 'b892d1f0-5b73-4fe6-9cc6-5ac122276de6' date '1 October 2013' time '6:00:00.977 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.421' message 'Refactor the Cogit code to allow interfacing with Spur.Modify VMStructType''s accessor generator to allow an offsetexpression.  Modify CogBlockMethod class>>instVarNamesAndTypesForTranslationDo: to use either Spur''sor ObjectMemory''s header in a CogMethod.  ModifyCogMethodSurrogate to include a baseHeaderSize inst var so thatfields are correctly offset w.r.t. the object header at the front of aCogMethod.  Parent CogMethodSurrogate with VMClass and arrangethat its class side has initializationOptions, hence objectMemoryClassand hence baseHeaderSize.Regenerate most of CogMethodSurrogateN & CogBlockSurrogateN''saccessors to use the baseHeaderSize offset, and moveobjectHeader[:] to CogMethodSurrogate.  Make objectHeaderanswer signed values and remove the signedIntFromLong sends inclients.Fix startPCOfMethod[Header]: and fix several instruction pointerbounds checking asserts so that both of these are not confused bythe different header size.Refactor entry code generation to allow CogObjectRepresentationForSpurto generate the mask of SmallIntegers to occur before entry, allowinga jump-free common case in the inline cache check.Add CogObjectRepresentationForSpur & subclasses andimplement some of the translation protocol, including spiffyconcise entry point code.Fix a few assert: isIntegerObject: and addressCouldBeObj:''s toassert: addressCouldBeOop:''s.More isIntegerObject: => isImmediate:,isNonIntegerObject: => isNonImmediate:,isArrayNonInt: => isArrayNonImm:.Fix CoInterpreterMT class>>initializeMiscConstants to not setCOGMTVM to true unless COGMTVM is in initializationOptions.Change the rumpCStackAddress to be aligned on a 64-byteboundary.  Eases Spur simulation in the funky bootstrap testingsetup.Add longLongAt:[put:] to LittleEndianBitmap for Spur header access.Add Spur32BitCoMemoryManager to hold all the Cogit-specificstuff in the memory manager.  Move all the accessors that hackaround the CoInterpreter/ObjectMemory split refactoring up intoSpurMemoryManager to avoid duplication.Nuke CogObjectHeader.  Struct access would have been nice butsoooo sssllllooooowwww to ssssiiiimmmmmuuuuullllllaaaatttteeeee.' id '2b23b17a-be58-4e9b-ace2-d72abbc88c9c' date '1 October 2013' time '3:15:01.191098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.420' message 'Move the initialization optionsDictionary into the initializationOptionsclass variable of VMClass.  Rewrite the initialization routines thataccess options to take them from the inst var.' id '1453e450-7e86-4412-81a9-a20e91c5fc44' date '30 September 2013' time '1:24:00.41016352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.419' message 'Handle forwarded message selectors in send fault processing.' id 'c200c5ad-4e63-4a11-8f12-91986fc1781b' date '30 September 2013' time '12:20:02.345425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.418' message 'Adjust scavengeLoop for the ephemeron processing condition.No ephemerons should be fired until no new objects have beenremembered.Change the weak & ephemeron list organization to useallocationUnits instead of slots.  Limits newSpace to 1Gb ;-).Write more on the algorithm in the class comment.' id 'd211154e-57c3-4f27-a6a2-e913d290ee2d' date '30 September 2013' time '11:57:00.057261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.417' message 'Fix ephemeron processing.  Any ephemerons reached duringscavenging should be copied to future space.  Therefore theircontents must not be scavenged if their keys are as yet unreached.So replace numStrongSlotsOf: withnumStrongSlotsOf:ephemeronInactiveIf:.Further, move forwarding through ephemeron keys intoisScavengeSurvivor:, and make ephemeron assert inscavengeReferentsOf: more accurate. Ephemeron must be eitherinactive or on the ephemeronList.Use numFixedSlotsOf: instead of numStrongSlotsOf: inprocessWeakSurvivor:.Fix tenuringThreshold computation,    (pastSpace size * (1 - tenuringProportion)not pastSpace size * tenuringProportion.Provide some debugging conveniences.' id 'e868c34a-af52-4474-bf0f-f4a52dafd767' date '29 September 2013' time '12:03:00.772228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.416' message 'Add ephemeron support to the scavenger.  As yet incorrect becausemy test only fires a single ephemeron and it should fire two.Refactor the corpse list machinery to allow access to offsets forlist removal in scavengeUnfiredEphemeronsOnEphemeronList.Note that StackInterpreter>>fireEphemeron: isshouldBeImplemented.' id '5fb57fd2-e594-480f-b24c-1a329abd76bd' date '27 September 2013' time '4:22:01.693032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.415' message 'Implement weakArray processing in the scavenger (plus a skeletonfor ephemeron processing).' id '73fb10dc-25ce-427c-b0ad-976524bc2941' date '26 September 2013' time '5:20:03.909098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.414' message 'isWeakNonInt: => isWeakNonImm: (for Spur)' id 'a208fc7a-c1bd-4ae9-98ab-2a81e5d238fa' date '26 September 2013' time '2:38:00.65632704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.413' message 'Fix allocateOldSpaceChunkOfBytes: in two waysa) to not create slivers of 1 allocationUnit long wnen taking storage    from the tree (already handled the lists).b) to nil the parent pointer of nodes stitched back into the root    (this was a baaad bug)Provide allFreeObjectsDo: and isValidFreeObject: to check ammountand validity of free space.Fix bug in SpurMemMgr>>clone: that misremembered.Add assert to SpurGenerationScavenger>>remember:.Change the assert in ensureBehaviorHash:.More safety in SpurNBitMemMgr>instantiateClass:indexableSize: forthe instSpec fall through case.Refactor fillObj:numSlots:with:; it differs between 32 and 64 bits.Sionara initPastSpaceForObjectEnumeration.Fix send printing in commonSend now the VM uses lkupClassTag.Use runLeakCheckerForFullGC: in loadInitialContext instead ofinternals.Fix simulator initialization of pluginList to include anonynous emptyentry for the VM itself.Fix heap map''s byteIndex calculation (!!).Nuke unused objectIsOld:.Now bootstrap can run a test for weak arrays and ephemeronsthrough to failure (no support for weakness or ephemerality in thescavenger yet).' id 'c9d2ca92-5900-4492-8e52-0ad86af3530f' date '26 September 2013' time '11:55:00.583425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.412' message 'Sionara the explicit noAtCache at:[put:] machinery in CoInterpreternow that the atCache is confined to the interreter''s special selectorat:[put:] bytecodes.Add some missing subclass responsibility implementations to SMM.Add primitiveMakeEphemeron for testing.' id '6b66ad04-58bc-4be6-8790-cb2f11fc34e8' date '25 September 2013' time '12:18:03.276294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.411' message 'Fix assert in eeInstantiateClassIndex:format:numSlots:.Bootstrapped Spur image now evaluates 3+4.Fix assignment of memory in sqGrowMemory:By: in obj mem sims.Nuke unused methods in interpreter sims (now memory is accessedonly by objectMemory).' id 'b0984765-98da-4a23-9bf3-abb88371db54' date '25 September 2013' time '12:32:01.928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.410' message 'Fix bug in SpurMemMgr>>allocateOldSpaceChunkOfBytes: so it won''ttry to create slivers of size 8 byets when splitting free chunks.Fix nonIndexablePointerFormat to answer the right value.Explicitly comment the result guaranteed to be young property ofthe eeInstantiate* routines.Implement allocateNewSpaceSlots:format:classIndex: for SpurMemMgr& implement its eeInstantiate* routines using it.Adapt createActualMessage: to Spur (fast alloc given class indices).Eliminate padding from shortPrintOop:' id '44528c31-6609-4ea6-8817-4935e5166568' date '25 September 2013' time '12:05:03.49332704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.409' message 'Fix wrong index bugs in allocateOldSpaceChunkOfBytes:.Implement removing interior nodes from the free tree there-in.Bootstrap of startreader image now hits assert failure when tryingto free an 8-byte sliver, instead of corrupting the free space lists.Refactor the oldSpace allocation chain to avoid duplications ofbytesInObject: and/or objectBytesForSlots: calculations.Abstract out free space check to its own method.Add (more) asserts to some free space routines.' id '00fb78b3-11aa-450f-ba56-3eb8c3f9f082' date '24 September 2013' time '5:13:01.183392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.408' message 'Implement tree reorganization on removing an interior node of thefree chunk tree.  Plus fix the tree traversal which was nonsense.Add an assert to allocateSlotsInOldSpace:format:classIndex: to checkthat totalFreeOldSpace is maintained correctly.Remember to set the identityHash in the copy when scavenging.More protocol.' id 'd156deea-74a3-4c80-8a1c-b7ead517f77f' date '24 September 2013' time '3:03:03.627425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.407' message 'Comment SpurGenerationScavenger' id 'dc40b325-054d-4337-8d8b-a6402f3845ad' date '24 September 2013' time '1:26:00.317294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.406' message 'Fix the scavengeLoop for the mapInterpreterOops call.  mIO cancause objects to be copied and forwarded /and/ remembered (iftenured) so the termination condition is nothing forwarded /and/northing remembered, hence previousRememberedSetSize must berecorded before sending mIO.Fix objectBytesForSlots:; ot forgot to include the forwarding slot inempty objects.Fix allocateOldSpaceChunkOfBytes: to use freeListsMask (<= not >=).Fix instanceAfter: (use of objOop after the fact).refactor objectAfter:limit:, it differs slightly between 32 & 64 bits.Make printNameOfClass:count: accet a nil class (as answered byclassAtIndex:).Simulator:Implement cloneSimulation for debugging.  Allows e.g. rerunning thesame scavenge in the clone for repeatibility.Simplify the window quitBlocks now I know about containingWindow.' id 'fa4c2477-036c-424e-9c73-f4e4c8a9bd3f' date '23 September 2013' time '2:38:04.167261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.405' message 'Refactor SpurMemoryManager and the 64Bit & 32Bit subclasses inthe light of longAt:[put:] accessing 64-bits in the 64-bit system.Fix termination condition in scavenge loop to accomodatemapInterpreterOops (move mapInterpreterOops next toscavengeRememberedSetStartingAt:).Fix SpurMemMgr>>initializeOldSpaceFirstFree: for the bootstrap''sdual use (create, then launch).Fix a slip in allocateOldSpaceChunkOfBytes:.Add a simulator subclass to the scavenger and add a nicepre-scavenge halt for debugging.  Also collect corpse->forwardedinfo for debugging.' id '85f4af17-796e-433f-afc4-aeecc29cfd1a' date '23 September 2013' time '9:40:03.100196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.404' message 'Repair the SistaStackToRegisterMappingCogit.  Major fix is toreimplement SistaStackToRegisterMappingCogit>>mapFor:bcpc:performUntil:arg:after framelessness changes.Also make sure that ObjectMemory>>remapObj: is not <api>.Fix some slips (e.g. missing period in StackInterpreter>>snapshot:).Make sure that InterpreterPrimitives>>primitiveBehaviorHash cutsback the stack by argumentCount for use by Newspeak VM mirrors.Nuke unused longFormatForNumBytes:' id 'fae95a07-0615-4c4d-99d8-b515df1e9464' date '23 September 2013' time '9:04:01.043294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.403' message 'Flush new space on someInstance/someObject' id '1dd82aad-7f17-40d8-b728-2499d03969df' date '22 September 2013' time '12:08:00.489294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.402' message 'Implement low space handling and space queries to SpurMemMgr.Maintain totalFreeOldSpace in a variable.Rewrite primitiveIncrementalGC to interface to Spur.Fix assert in iframeInstructionPointerForIndex:method:BytesPerWord => BytesPerOop in initialPCForHeader:method:' id '1609c567-42bc-4442-8d9e-ab5df5c7d4ca' date '22 September 2013' time '9:12:02.62032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.401' message 'Fix stupid slip in SpurMemMgr>>hashBitsOf:, answer what''s set!!Add size and nicer contents printing to longPrintOop:Skip separators in promptHex:' id 'd0d762fc-2668-4ebc-b4a3-047bb4899a53' date '21 September 2013' time '8:48:02.060425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.400' message 'Make the Inflate/DeflatePlugin simulate.Simplify loadColorMapShiftOrMaskFrom: & others; isWords:,isBytes: et al check for immediates already.Add printHexnp: for unpadded hex printing & use in longPrintOop:.Add a print stack call stack to print less stack :)' id '3481cf9c-80d0-47db-b5c4-07102f7ea255' date '21 September 2013' time '7:46:00.592196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.399' message 'A few isIntegerObject:''s => isImmediate:''s in primitives.More protocol.The Spur VM now draws its first window!!' id '89f8fefe-b59d-42d7-9c11-7f848d0e5131' date '20 September 2013' time '6:28:00.473425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.398' message 'Add remap buffer support.More protocol.  Spur VM gets to first bitblt.' id '64814c0c-d38d-4665-9e06-a93bdc68cc80' date '20 September 2013' time '3:44:01.817294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.397' message 'weakArrayFormat can also have fixed inst vars.  You learn somethingnew every day.Add format printing to longPrintOop:.Fix isIntegerObject: for debugging (add #on:do:).' id '52862ea4-1375-4ead-852f-2e65e2941a26' date '20 September 2013' time '3:03:00.766228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.396' message 'Fix bad slip in scavengeLoop.Use allObjectsDo: in a few more places in the StackInterpreter. Refactor snapshot: & snapshotCleanUp so GC is in snapshotCleanUp.Allocate class table pages in old space.Provide freeObject: for the bootstrap.' id '6d9e04e6-367a-4daa-997f-4c425f786153' date '20 September 2013' time '2:34:04.07916352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.395' message 'Fix bug due to use of startOfFreeChunk: which assumed all freechunks have a two=word header.  Easier to keep them like normalobjects with an optional overflow size depending on slot size.Consequently, make startOfObject: accept any kind of object.More protocol.  Bootstrap now continues until out-of-memory (cuzboostrap doesn''t allocate enough).' id 'eb6732e4-5b88-48f9-b18c-1b613f234197' date '20 September 2013' time '10:16:00.574 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.394' message 'Rewrite send fault logic to do a 1st-level method lookup cacheprobe after handling the send fault.  rename the handler tohandleForwardedSendFaultFor:.Implement SMM>>byteSizeOf:.Change the interpreter proxy API to include characterObjectOf:and use it in FilePlugin>>primitiveDirectoryDelimitor.Nuke unused method.' id 'ecd45400-0d67-4c39-9c8b-3210cf96a58b' date '19 September 2013' time '4:41:01.855294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.393' message 'Replace eeInstantiateSmallClass:sizeInBytes: witheeInstantiateSmallClass:numSlots: and implement in SpurMemMgr.Implement SpurMemMgr>>isClassOfNonImm:equalTo:.' id '89054bad-ac17-46e1-916f-9728d3774f3e' date '19 September 2013' time '2:39:04.09616352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.392' message 'Abstract remapOop:in: away fom specific GC types (Spur will havethree) and add ObjectMemory/SpurMemMgr>>statNumGCs to sumthem.Nuke initFreeChunkWithSlots:at: and use freeChunkWithBytes:at:in init.  Also type it correctly (allow > 31 bit sizes).followForwarded: needs to cope with immediate targets given 1-waybecome. Fix slip in innerBecomeObjectsIn:to:copyHash:.Refactor SpurMemMgr>>lengthOf:baseHeader:format: tolengthOf:format:Add more protocol to SpurMemMgr (due to simulating abootstrapping squeak image).StackInterpreter>>stackObjectValue: uses isImmediate:' id 'b795dbfe-8802-4301-96d4-ce2e941b740d' date '19 September 2013' time '1:16:02.738228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.391' message 'Make followForwarded: follow chains, after Igor''s example on myblog.Make initialInstanceOf: answer nil on failure, to match instanceAfter:Give the generation scavenger a larger remembered set.  Should bemoved to old space to live on the heap.Implement SpurMemMgr>>flushNewSpace.Fix bug in scavengeReferentsOf: to answer if referrer has newreference after copying referents.Switch order of space enumerations in allObjectsDo:.  Dubiousl  Willrevisit.  e.g. allInstances and allObjects primitives are safer.Fix SpurMemMgr>>clone: for immediates and byte objects.' id '99df045e-7d77-463e-821c-084a05ac2491' date '18 September 2013' time '6:17:04.114359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.390' message 'Fix odd bits calculations in instantiation primitives.Fix class table page allocation (fill the puppy with nils).Split store/FetchPointer:ofForwardedOrFree: intostore/FetchPointer:ofForwarded: etc.Use the freeListsMask (note rename) when allocating.Get singleStep to run the atEachStepBlock.' id '9a457234-c19a-4674-a6cf-44c247cfa544' date '18 September 2013' time '1:58:03.871294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.389' message 'Merge fix for http://bugs.squeak.org/view.php?id=7247 inVMMaker-tpr.325.Make objCouldBeClassObj: accespt classes not yet in classTable(they may contain forwarding pointers).Comment typo.' id 'f512174f-1d31-4863-8ace-a710b4ae527a' date '17 September 2013' time '6:07:01.988359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.388' message 'Move the zeroing of stackPage to zeroStackPage to provide adebugging hook.Fix Spur??BitMemoryManager>>instantiateClass:indexableSize: formissing weakArrayFormat.Fix shortPrint: for immediate characters.' id '92fbeee7-a269-41b1-bb01-9a970c4a50fa' date '17 September 2013' time '4:54:00.130294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.387' message 'Fix Slang inlining snafu in lengthOfMaybeImmediate: inVMMaker.oscog-eem.385.' id 'd2d5432c-1689-4794-b72f-e92dd1ff9e6e' date '17 September 2013' time '1:58:02.752359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.386' message 'Implement SpurGenerationScavenger>>copyToOldSpace:.Add searching the oldSpace free tree (incomplete) to allocate space.Fix bug that assumed start of free chunk was same as free chunk oop.Correctly initialize freeOldSpaceStart and correct allOldSpaceObjectsDo:.Implement objectBefore: & objectAfter:Fix comment speeling roers' id 'baeb0345-a41a-4c3a-823e-24de21382feb' date '17 September 2013' time '1:51:00.325294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.385' message 'Streamline the sendBreak:point:receiver: monstrosity and make itaccept immediate selectors.' id 'b410257e-4d71-461d-b00a-e244c049477c' date '17 September 2013' time '1:37:04.079098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.384' message 'Fix store check in inPlaceBecome:and:copyHashFlag:.  Bootstrap nowgets as far as wanting to tenure obejcts during scavenge, 2801rehashes in.Fix lastPointerOf: enumeration and checking for remembering inSMM>>checkHeapIntegrity.Refactor possibleRootStoreInto:[value:] to lose unused param.Make fetchClassofNonImm: more lenient so class table pages canbe printed.' id 'f038e5ef-a20a-41e7-9ac6-7881b5fd4ad8' date '16 September 2013' time '11:20:03.710359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.383' message 'Implement the heap leak check for SpurMemoryManager.Requires e.g. ennumeration of the remembered set.Recategorise a few leak map methods to debug support.Make sure leak map methods are sent to the right receiver.Fix scavenging of the rememered set in the presence of forwarders.These are roots referred to from oldSpace objects and can''t beeliminated.Fill-out sufficientSpaceAfterGC: with stats gathering and interpreterinteraction.Refactor post-become class scanning and use the method whenentering a class into the class table (to ensure nothing along thelookup chain is forwarded).Get rid of the unused twoWay: keyword in the inner become loops.Make the tests for objects in newSpace more accurate (using e.g. pastSpaceStart instead of pastSpace limit.Support one-field forwarders in numPointerSlotsOf:.Have the VM follow the methodClassAssociations of methods to avoid forwarders in the super-send path.Summat still wrong wit'' treadle tho, as first send after t'' scavenge falls flat on ''t'' face, like.' id '09738444-85f0-4b23-bf27-4253c31df086' date '16 September 2013' time '5:04:02.43432704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.382' message 'Fix smashing of nil in initSpaceForAllocationCheck:.Make shouldRemapObj:/remapObj: cope with forwarding pointersthat are not part fo the scavenge itself.' id 'd7f6c692-a74c-4576-b156-0f379bd25d9a' date '16 September 2013' time '9:09:02.83416352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.381' message 'Fix bugs in SMemMgr bytesInObject: and startOfObject: thatmishandled objs with overflow sizes.Mate scavenger to mapInterpreterOops by implementingSMemMgr>>shouldRemapOop:/Obj: & remapObj:, marking remap:as shouldNotImplement for debugging.Remove memory inst var and add futureSurvivorStart to SGenScav.Implement copyToFutureSpace:.Add protocol that gets past first scavenge.Reorder SGenScav>>scavenge to get tenuring threshold computedbefore spaces are exchanged.Send mapInterpreterOops in 1st iteration of  scavengeLoop.Add following of oldSpace forwarded objects to scavengeReferentsOf:.Hack addressCouldBeObj: until scavenger is solid.  Don''t excludefutureSpace objs for now.' id '5428e835-7d04-4336-a9d0-3e7fe0de090e' date '16 September 2013' time '12:35:01.96416352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.380' message 'Refactor	(objectMemory isIntegerObject: oop) ifFalse:		[oop := objectMemory remap: oop]into	(objectMemory shouldRemapOop: oop) ifFalse:		[oop := objectMemory remapObj: oop]which suits the scavenge also and avoids a lot of writes.Move the remapping of the remap buffer and extra roots into[New]ObjectMemory (called from mapPointersInObjectsFrom:to:).Refactor mapInterpreterOops so it can be used in subclasses viasuper (factor out remapCallbackState).Interface the scavenger to coInterpreter.' id '88501329-fc68-48b0-aa14-c41c106b71bd' date '14 September 2013' time '11:37:02.06216352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.379' message 'Get Spur to correctly initialize the scavengeThreshold post bootstrapor all hell breaks loose when nil is overwritten ;-).Bootstrap now tries to scavenger 2822 objects into the rehash phase.Add the start of scavenging VM state, prior to refactoring all	(objectMemory isIntegerObject: oop) ifFalse:		[oop := objectMemory remap: oop]into something like	(objectMemory mustRemapOop: oop) ifFalse:		[oop := objectMemory remap: oop]which can suit the scavenge also and avoid a lot of writes!!' id '1fc32990-4889-468f-ad1e-bc6054d9175d' date '14 September 2013' time '9:24:00.789359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.378' message 'Improve the message send forwarded object trap, scanning thecurrent frame and receiver.Change becommedPointerObjects to becomeEffectsFlags and setthem appropriately.  Implement class table scanning.Add VMSpurObjectRepresentationConstants and keep the flagsthere-in.Recategorize the become methods, api vs implementation.Change the isForwardedObjectClassIndexPun so it can''t be confusedwith SmallInteger''s classTag.Beef up printActivationNameFor:receiver:isBlock:firstTemporary: inface of forwarded objects.Add a vm parameter to answer stackPage bytes (#66).' id '8324b3df-0dc1-4ebe-bbbf-d9eb6ca929c3' date '13 September 2013' time '5:57:00.316 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.377' message 'Fix VMPluginCodeGenerator>>emitCTypesOn:.  Thanks nice!' id '4c84e32f-62e2-4712-b4bb-9212531ddbb6' date '12 September 2013' time '2:21:04.278130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.376' message 'Add a much more in-depth discussion of the become read-barrierto the Spur design.  Commit to implement segmented old spacegrowth & shrinkage.' id '3e5eddd4-ce8b-417c-a14c-3ff4b293a353' date '12 September 2013' time '12:33:01.824196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.375' message 'Restrict at-cache to bytecodePrimAt[Put], eliminating it fromprimitive[String]At[Put].  Undoes need for fix in VMMaker-oscog.44of 7 January 2011:	"Fix leaking of objects into the atCache due to	 ceSend:super:to:numArgs:''s use of executeNewMethod	 without always setting messageSelector."This renders messageSelector and lkupClass ephemeral, since theyare live only during message lookup and becausecreateActualMessageTo will not cause a GC these cannot changeduring message lookup.Hence eliminate them from markAndTraceInterpreterOops: &mapVMRegisters.Make stObject:at:[put:] cope with immediate characters.  In-linecommonAt:[put:], stObject:at:[put:].  Inline install:inAtCache:at:string:into bytecodePrimAt[Put] for stringy optimization. and hence improveStackInterpreter performance, e.g. on a 2.2GHz Intel Core i7 MacBook Pro	StackVM as per VMMaker.oscog-eem.282 with at-cache in commonAt & commonAtPut	ShootoutTests runAllToTranscript	#(3173 3995 4521 4014) (times; smaller is better)	#(3199 3976 4380 3979)	#(3142 3981 4374 4033)	1 tinyBenchmarks	''303497332 bytecodes/sec; 25808732 sends/sec'' (rates; bigger is better)	''304761904 bytecodes/sec; 25786444 sends/sec''	''304038004 bytecodes/sec; 25609522 sends/sec''	[(PackageInfo named: #Compiler) methods do: [:mr| mr actualClass recompile: mr methodSymbol]] timeToRun!	1636	StackVM as per VMMaker.oscog-eem.374 with no at-cache in commonAt & commonAtPut	but stObject:at:[put:] inlined into commonAt & commonAtPut & install:inAtCache:...	inlined into bytecodePrimAt[Put].	ShootoutTests runAllToTranscript	#(2641 3775 3852 3618)	#(2634 3745 3840 3610)	#(2639 3755 3849 3713)	''511488511 bytecodes/sec; 28038218 sends/sec''	''512000000 bytecodes/sec; 28143923 sends/sec''	''512256128 bytecodes/sec; 28143923 sends/sec''	[(PackageInfo named: #Compiler) methods do: [:mr| mr actualClass recompile: mr methodSymbol]] timeToRun!	1410Add assert to adjustAllOopsBy: to check for forward progress andeliminate bytesToShift = 0 guard in adjustFieldsAndClassOf:by:.Fix assert in Spur32BitMMLESimulator>>byteAt:put:.Fix bug in shortPrintFrameAndCallers: (filter-out base frames).' id 'ea59eba6-47d1-41a9-bfd3-6e05deee8d05' date '12 September 2013' time '11:02:02.368359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.374' message 'Implement enterIntoClassTable:.Rewrite commonVariable:at:put:cacheIndex: to be efficient withimmediate characters.Sdd printing of hash to longPrintOop:.I notice that	''hello'' copy at: 1 put: (Character value: 256); yourselfhash disastrous effects.' id 'e7f877e9-5f76-41da-85e9-872da59c1a2e' date '11 September 2013' time '10:34:04.135130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.373' message 'Fix slip in addNewMethodToCache:.Add the forwarding check to message lookup failure.Simplify ceDynamicSuperSend: by going back a bit.Comment typos.' id 'b7535476-3c27-4058-9641-dcb2f73d1664' date '11 September 2013' time '9:43:01.230098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.372' message 'Introduce the classTag abstraction that allows Spur to useclassIndices as cache tags in the first-level method lookup cache(and hence, soon, follow forwarding objects), while keeping thingsunchanged for NewObjectMemory.The new abstractions are	classForClassTag: => noop in NME	classTagForClass: => noop in NME	fetchClassTagOf: => fetchClassOf: in NME	fetchClassTagOfNonImm: => fetchClassOfNonImm: in NMEAdd a mustn''t-be-forwarded check to numSlotsOf: and addnumSlotsOfAny: for unchecked access to free and forwarded objs.Fix shortPrint: for forwarded objects.' id '2f3d9e40-4644-4c04-bd31-b2e675d52efc' date '11 September 2013' time '7:40:02.331294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.371' message 'More become support for Spur.- Forwarding objects in scavenger and stackZone.- in-place and out-of-place two-way become.- checking for not being forwarded in storePointer:/fetchPointer:.- reserve a format for forwarded objects so become: does not have  to nil the body of an object, and the GC will only follow the 1st ptr.Fix SpurMemoryManager>>lastPointerOf: and its usage in become.Fix the validInstructionPointer:inMethod:framePointer: assert.Fix use of BytesPerWord in ObjectMemory>>containOnlyOops:[and:].Fix StackInterpreter>>printOop: et al for forwarded objects andcompiled methods.Fix assert in mapStackPages.' id '4f274df7-d2dc-44e7-baba-9421d3fdbbd6' date '11 September 2013' time '2:04:02.900261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.370' message 'Implement hashing for Spur.  Split hashBitsOf: into rawHashBitsOf:.Implement Lehmer''s algorithm (for now).Use ensureBehaviorHash: in instantiation routines.Add classTableIndex.Put the survivor spaces below eden for tenuring.  EliminatenewSpaceStart.Add SpurMemMgr>>isContextHeader:' id 'b42d44b7-3f55-465e-80d5-d609a89ec601' date '11 September 2013' time '7:43:03.251065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.369' message 'isContextNonInt: => isContextNonImm:' id '241c133a-a1ac-4866-9ecc-50d6fb075dd6' date '10 September 2013' time '10:52:00.292 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.368' message 'Add missing case for arrayFormat to instantiateClass:indexableSize:.Include arrayFormat in isIndexableFormat:' id 'efaf3f91-544f-4f65-bd73-eeb67f2889f6' date '10 September 2013' time '10:48:04.07632704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.367' message 'Implement pushNewArrayBytecode in terms of new instantiationapi.  Hence fix > 0 assert in eeInstantiateClassIndex:format:numSlots:.Add pastSpaceBytes and simplify accordingly.Bootstrap executes 2113 bytecodes, but appears to fail an Array basicNew:.' id '09afa7c7-ad24-4cc7-bb80-7104da4b97c6' date '10 September 2013' time '6:17:04.120196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.366' message 'Add a plausible, but probably not final, version of tenuring and thetenuringThreshold to teh scavenger.Add float support to Spur32BitMMLESimulator.Implement eeInstantiateMethodContextSlots:.' id '5e95754d-997a-428e-a9e0-d294a7a7a21b' date '10 September 2013' time '5:48:03.381130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.365' message 'Fix bug in SpurMemoryManager>>lengthOf:baseHeader:format: for32-bit bit-indexable objects.Make primitiveBeCursor use objectMemory baseHeaderSize et al.Simplify StackInterpreter>>isFloatObject: now ClassFloatCompactIndex is required to be non-zero.' id '204f4b62-3c38-42d8-bab5-2f8d04c98f79' date '10 September 2013' time '4:03:01.11732704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.364' message 'Implement store check and hence define isRemembered bit as bit 29.Impement SpurMemoryManager>>eeInstantiateClassIndex:format:numSlots:.More isIntegerObject: => isImmediate:.Spur image now runs to primitiveBeCursor (1929 bytecodes in mytest image), which fails.' id '2a628f01-d6c9-449e-83a4-f5a861f30d46' date '10 September 2013' time '3:42:03.982032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.363' message 'Implement eeInstantiateClassIndex:format:numSlots: forObjectMemory and use it in float, large integer and (if possible)closure creation.Eliminate bytesPerWord in favour of wordSize (Smalltalk wordSize isthe model here).  wordSize is shorter.  However, still generateBytesPerWord for wordSize since e.g. mpegtype.h has a parameternamed WordSize.' id 'aa44129c-c899-45d7-a314-f545a91cbdde' date '10 September 2013' time '2:49:04.043228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.362' message 'Fix bug in linear search of method dictionaries.Remove most, if not all, uses of naked integers for formats(e.g. 4 => objectMemory lastPointerFormat).Restore lastPointerFormat of ObjectMeory to 4 from 5 (reserved fork ephemerons).Remove badly-named StackInterpreter class>>patchInterp:' id 'f10a8564-4eb4-40f7-acc9-2b1b863c6971' date '10 September 2013' time '11:44:03.299228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.361' message 'rescue primitveObjectPointsTo: which needs isPointersFormat:' id 'c32af2f0-b2d9-43f9-b11d-ea4313a7ac14' date '10 September 2013' time '10:07:02.217359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.360' message 'Fix duplicate send printing in StackInterpreter.StackInterpreter + Spur execute first 270 bytecodes/28 sends.' id '160bd684-d30a-4718-8add-a74cc19d13a8' date '9 September 2013' time '5:51:01.508392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.359' message 'Eliminate most if not all integer format numbers in favour ofsymbolic consants such as indexablePointersFormat.Implement SpurMemoryManager>>instantiateClass:indexableSize:.Move isIndexable: to ObjectMemory.Replace isInstanceOfClassCharacter: with isCharacterObject: and putit in ObjectMemory & SpurMemoryManager (yet to fix completelycommonVariable:at:put:cacheIndex: which is written to expect thevalue inst var yielding a SmallInteger).Fix (Foo)InterpreterSimulator>>openAsMorph to cope with amissing image name.' id '40208f59-0823-4cea-a81a-98e6d484dc8a' date '9 September 2013' time '5:04:04.082228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.358' message 'More isIntegerObject: => isImmediate:''s.Add isIntegerValue: for the 32-bit system.' id 'acc3e8f6-b86d-4fe3-b487-09082c0a82b7' date '9 September 2013' time '2:00:00.106098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.357' message 'SpurMemoryManager:	Implement instantiateClass:.	Implement checkForLastObjectOverwrite.	Introduce hasSpurMemoryManagerAPI and rewrite	primitiveNew to switch-hit.Move StackInterpreter''s [check]oopHasOkayClass: to ObjectMemory(methods know about class format).Refactor CurrentImageCoInterpreterFacade so V3-specific stuff is inCurrentImageCoInterpreterFacadeForSqueakV3ObjectRepresentation.' id '2539f153-2471-4667-a8b7-2a49344be2a2' date '9 September 2013' time '12:31:00.393392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.356' message 'Remove unnecessary = from VMObejctProxy printing.' id '5c7c40bd-09ec-4ebc-9ad9-6bc7d4423935' date '9 September 2013' time '10:39:02.273359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.355' message 'Implement classIsItselfClassIndexPun for instance-specific behavior.Define isSegmentSpanningFakeObjectPun.' id 'abc761d5-9502-4f4b-9c3a-6482da435a09' date '8 September 2013' time '1:54:03.630065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.354' message 'Move classNameIndex uo to StackInterpreter.Fix erroneous non-immediate assumptions in addressCouldBeClassObj:' id '4bea1550-abc0-4737-b97d-dc24cba3a366' date '7 September 2013' time '1:15:01.041130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.353' message 'Add some accessors to StackInterpreterSimulator so the Spurbootstrap can interpret code in the image to be bootstrapped.' id 'd557aea8-f45b-4dc2-8a4a-22b5fc74952e' date '6 September 2013' time '2:10:03.542261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.352' message 'Update SpurMemoryManager''s class comment.  Improve write-up oflazy become.  Add a sketch of a possible incremental compactionalgorithm.  Add a sketch of a possible segmentation scheme thatappears not to have any segments.' id '9830d0ef-017d-4e8a-b370-2cd26c4b911d' date '6 September 2013' time '10:45:03.811359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.351' message 'Add primitives for encoding and decoding immediate characters.Base VM knowing whether immediate characters exist or not on CharacterTableIndex being nil or not.' id '46f2620a-7a44-4fb9-98c7-ffa9ee43f01f' date '5 September 2013' time '4:53:00.551425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.350' message 'Replace explicit enumeration by inlined allObjectsDo: now thata) Slang inlines literal blocks, andb) Spur has a segmented memory, preventing simple enumeration.Remove C code from printOopShortInner: so that it''s inlined as requested.' id '10d870ce-a680-45bb-a981-a55a5f6dfe9f' date '5 September 2013' time '3:09:03.974 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.349' message 'Fix a bad bug with Spur''s identityHash (was assigning the classIndex!!).Add more protocol (e.g. is:instanceOf:compactClassIndex:).Fix more printing code in the interpreter to useaddressCouldBeObj: et al, instead of explicit between: startOfMemory and: freeStart.Add StackInterpreter inst var methodDictionaryLinearSearchLimit toallow an un-rehashed image to run.' id 'bdefa809-bedc-4e5d-ae05-854c29e3dfde' date '5 September 2013' time '2:21:00.118359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.348' message 'Rename fetchClassOfNonInt: to fetchClassOfNonImm:.Recast SpurMemMgr''s isImmediate: et al in terms of self tagMask.Fix various printOop:''s in StackInterpreter to useaddressCouldBeObj: to test for correct alignment and avoidassumption that objects are between startOfMemory and freeStart.' id '8ba1e038-9d98-46af-b40a-1c663bad8df1' date '4 September 2013' time '5:27:00.805032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.347' message 'Initialize the scavenger.  Use scaenger eden limit as the allocationlimit, instead of the erroneous use of newSpaceLimit.  Rewrite thescavenge methods to use SpurMemoryManager''s api.Implement isYoung: and use it in the store check.Implement oldSpace and newSpace enumeration via objectAfter:limit:.Add more protocol to SpurMemMgr (e.g. isContext: et al).' id '20e17c9c-68ab-4d89-9f35-f6f0f0bf4642' date '4 September 2013' time '2:13:04.027294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.346' message 'Fix bug in transferTo:[from:] passing wrong stackPointer tomarryFrame:...Move StackInterpreter/NewObjectMemory et al away fromSmall/LargeContextSize to Small/LargeContextSlots for Spur.Add more protocol.  Bootstrap gets into initial marryFrame:.' id '4eed4dd7-7283-4f8b-82f1-53e3aeb6a98e' date '3 September 2013' time '5:47:03.33232704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.345' message 'Add more protocol to SpurMemoryManager.  Bootstrap launch nowgets to goodContextSize: in StackInterpreter>>loadInitialContext:.This now needs a change to the base code since Large/SmallContextSizeincludes baseheaderSize, and SpurMemoryManager baseHeaderSize~= ObjectMemory baseHeaderSize.Start replacing some is(Non)IntegerObject:''s with is(Non)Immediate:,specifically in StackInterpreter>>isSingleContext:.Make sure all initializeCompactClassIndices initialize all compactclass indices ;).' id 'f2561367-9c5d-4639-826b-6957ffa55c9f' date '3 September 2013' time '3:04:03.108425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.344' message 'Move all the tortured class initialization logic from the simulators''initialize methods to the simulators'' instance creation methods.Spur bootstrap now correctly initializaes the compact class indiceswith those for SpurMemoryManager, not NewObjectMemory.Add a little more protocol to SpurMemoryManager.Fix comment typo.' id '9e4df594-7952-4318-aaa8-a088bbc78de0' date '3 September 2013' time '1:50:00.600130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.343' message 'Rename CogMemoryManager et al to SpurMemoryManager et al.Move the compact class indices to VMSqueakClassIndices fromVMSqueakV3ObjectRepresentationConstants.Move initializePrimitiveErrorCodes up to VMClass.Add some class-side initialzation to SpurMemoryManager.Bootstrap gets as far as StackInterpreter initialization where itstumbles over the static objectMemoryClass initialization inStackInterpreter>>initializeInterpreter:.  This must be rethought.' id '6f6c27c0-0b82-465c-8748-de54cdacc724' date '2 September 2013' time '6:20:01.52632704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.342' message 'Add oldSpace freeList support (still no allocInOldSpace).Rename slotSize to numSlots to avoid confusion with misnamed slotSizeOf: (should be elementCountOf:).' id 'a317db9c-c8be-424e-800c-8525d0bfe8fa' date '2 September 2013' time '4:14:00.695130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.341' message 'Add more initialization post-bootstrap, including separate freespace in old space.Add CogMemoryManager>>lastPointerOf: et al.Move assignment of stackPages into computeStackZoneSize andsimplify clients.' id '0185fd6f-6cba-49fd-9f4f-5a9c4965f53e' date '2 September 2013' time '1:24:03.809392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.340' message 'More of the bootstrap.Fix various endianness slips in header access.  Need at some stageto construct CogMemoryManager32BitsLE et al and separate outthe endian-specific code.  For now just flag: #endianness.Assign nil, true, false & specialObjectsArray.   Leave room fornewSpace and codeSpace in the initial heap so we can launchthe bootstrap immediately.' id '302ce24d-f89a-46d0-9734-aa7c34dce91a' date '1 September 2013' time '8:44:01.999130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.339' message 'Fleshing-out of CogMemoryManager so that a first bootstrap of animage''s objects (*) to the new format can be completed.  Thebootstrap is in the Cog package.(*) this does not include compiling different versions of methods forthe new format, behavior hash management for the class table, orimmediate characters.Add 32-bit & 64-bit subclasses of CogMemoryManager.Abstract out unalignedAccessError.Remove the unused ClassCompiledMethod and ClassProcess.Fix comment typo.' id '043d571b-d2cc-4e0b-b297-4358a4cf6801' date '31 August 2013' time '12:13:04.199130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.338' message 'Update design sketch for new memory manager.' id 'a86a388d-5360-4a47-981d-f71be697a5f8' date '29 August 2013' time '12:08:01.921032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.337' message 'Merge RePlugin fix forhttp://bugs.debian.org/cgi-bin/bugreport.cgi?bug=710375http://bugs.squeak.org/view.php?id=7785(pcre_info => pcre_fullinfo)' id 'e4a462c4-c9fe-4edc-8e0e-9b24d8569396' date '28 August 2013' time '10:51:00.760392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.336' message 'Fix prim arg count for primPCREExecfromto' id 'fb558e5a-0363-4ff5-b152-ee56c92427f1' date '26 August 2013' time '11:48:00.98432704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.335' message 'Fix snafu in unpairedMethodList maintennance during codecompaction.  Must only examine CMMethods.' id '02e5ae48-52a4-4324-9b6d-887f45be6a12' date '23 August 2013' time '11:52:01.777359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.334' message 'Fix snafu in CogMethodZone>>removeFromUnpairedMethodList:which can create an infinite loop in code compaction.' id '7fbb9957-2619-46fe-acff-d1afd6e470fe' date '22 August 2013' time '2:32:00.971294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.333' message 'Fix cogit.c for non-Newspeak by marking the unpaired method listmethods with <option: #NewspeakVM>.' id '84da9cb8-7f30-4cb7-b4fb-239a11f63b54' date '22 August 2013' time '8:59:03.18216352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.332' message 'Fix snapshotting in the Newspeak VM.  Make removing from theunpaired method list cope with somethign not on the list.' id 'f7cb4758-7c5c-4617-89dc-9527ab2ee66b' date '21 August 2013' time '7:21:00.715196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.331' message 'Speed-up Newspeak significantly (e.g. -28% in one compile-intensive benchmark)by maintaining unpaired methods (compilations of anonymous accessors) on alinked list instead of searching the entire method zone.Do this by adding a NewspeakCogMethod and surrogates that add a nextMethodfield.  Update surrogate accessor generation so that accessors can answer andreceive surrogates and nils.  Also add a nop before the dynSuperEntry so as tochange its alignment now that (in the Newspeak VM) CogMethod has changed sizein gaining a field.Send fetchClassOf: to the right receiver inexplicitOuterReceiver:withObject:withMixin:Slang: fix various bugs in header and typedef generation so that only one CogMethodtypedef is produced.' id '37d2e4b0-2f37-4e2d-8313-c63637785e59' date '21 August 2013' time '7:00:00.067294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.330' message 'Refactor ancilliaryClasses and ancilliaryStructClasses to pass inoptions to allow selecting different classes as required.i.e. collapse ancilliaryClasses and ancilliaryStructClasses ontoancilliaryClasses: optionsDictionary.  This also requires changingrequiredMethodNames and exportAPISelectors to take options too.(this is prior to adding a NewspeakCogMethod class for maintaininga list of anonymous methods).Simplify CoInterpreter class>>exportAPISelectors: by marking a fewmethods as <api>.Eliminate CogStackPage, collapsing it onto InterpreterStackPage(it only has a class side).Use temporaryCountOfMethodHader: instead of tempCountOf: inSimpleStackBasedCogit>>compileFrameBuild (header is in hand).Reimplement CCodeGenerator>>structClassesForTranslationClasses:to keep the sort stable (ChangeSet superclassOrder: is a stable sortbut structClassesForTranslationClasses: used a set).' id '836f976a-35fa-404c-aa5a-c4af1c58852f' date '21 August 2013' time '2:20:01.011228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.329' message 'Set the inBlock variable in scanBlock and scanMethod.  Change theargument to the needsFrameFunction to be the stack delta.Change genSpecialSelectorClass''s needsFrameFunction toneedsFrameIfStackGreaterThanOne: which better handles e.g.TextColor>>dominates: other ^self class == other classthan needsFrameIfFollowsSend:.' id '5bf1ecce-8cdb-48fd-bc66-b41b4cff2efe' date '17 August 2013' time '7:06:02.623065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.328' message 'Reinstate the new framelessness now that the problem is found tobe the genPrimitiveClass bug.' id 'd9a4d11d-3a72-437e-b617-92de227ffdde' date '17 August 2013' time '2:40:03.328032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.327' message 'Fix StackToRegisterMappingCogit>>genPrimitiveClass for case wherenumArgs > 0 (must use other than ReceiverResultReg, e.g. objectClass:).Improve register usage in genSpecialSelectorClass.Save & restore methodOrBlockNumTemps in compileBlockBodies for symmetrywith needsFrame & methodOrBlockNumArgs.Fix disassembly of methods with blocks (avoid printing block dispatch twice).Delete CoInterpreter class>>initialize; it breaks the simulator.Fix disassembly of e.g. Character literals when using in-image compilation.Slang: fix formatting of WhileForeverBreakIf loops.' id '29b87ba8-cc32-406e-9698-6c022ab7abbd' date '17 August 2013' time '2:30:00.88132704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.326' message 'Snafu.  The experimental initializers need to use needsFrameIfFollowsSend:.' id '0ae2d369-8cd0-4bdf-9f5b-a360e942dad8' date '16 August 2013' time '1:39:00.210294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.325' message 'Fix disassembleMethod:on: for frameless blocks.Update in-image facade for refactored context inst var checking.' id '9b61ee96-d09f-4314-beb9-a589bd69eed9' date '16 August 2013' time '11:27:00.021359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.324' message 'Fix CurrentImageCoInterpreterFacade for running in-image teststhat enumerate over many methods.' id '9a823c96-a04e-41a7-b61f-3e5723096cb1' date '16 August 2013' time '11:12:00.705196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.323' message 'Add some class initializers so the in-image compilationworks wthout first having to run the VM simulator.Tweak startPCOrNilOfLiteral:in: to filter-out arrays from itscheck for closure literals.Revert the new framelessness back to experimental status(problem not yet identified but e.g. debugger is broken).Comment typos.' id 'db5479c8-21ae-460d-912c-66acdf16c850' date '16 August 2013' time '10:09:00.308 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.322' message 'Tweak frameless inst var store to avoid a register copy from Arg0Reg.Upgrade CurrentImageCoInterpreterFacade to cope with the scan forclean blocks.' id '15da84de-4866-48ae-b478-c2c96002c5eb' date '15 August 2013' time '11:50:01.217065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.321' message 'Add Cogit support for clean blocks by scanning literals looking forBlockClosures on the current method.Refacor Cogit>>compileCogMethod: so thatSistaStackToRegisterMappingCogit''s version is no longer needed.' id '6134e40b-c38c-41ec-8f31-64a7f1c002b3' date '14 August 2013' time '4:29:01.96 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.320' message 'Add a prevBCDescriptor to the StackToRegisterMappingCogitscanners.  This enables needsFrameIfFollowsSend:.Avoid spilling in frameless methods (now that pushTempVar can beframeless and hence inst var setters such at setX:Y: are nowframeless) by adding needsFrameIfFollowsSend: used for specialselectors #class & #==.Make the new frameless regime the default.  Hence nuke the experimentalgenerator initializers.' id '543f6d09-e921-41db-955f-b2a6942817cb' date '14 August 2013' time '2:08:00.587065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.319' message 'Avoid compiling frameless methods with stack depth > 1.  This is acrude way of avoiding the spilling issues in e.g.TextColor>>#dominates: other	^ other class == self class	Better way to follow.' id '2f166f6b-54bc-4eba-b688-182c0d0fff11' date '14 August 2013' time '11:42:03.546261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.318' message 'Make primitiveObjectAtPut fail if changing the header word and thenew header has a different literal count.  Avoids crashing the VMwhen inadvertently changing the header, as a Newspeak bootstrapdid recently.Implement frameless inst var store from arguments, so e.g.Point>>setX:Y: is frameless.  Needs heavy testing so not yetthe default.' id '8925d5a6-c7d2-41a7-b776-b1d53ec31cfc' date '13 August 2013' time '5:48:00.214261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.317' message 'Remove debugging instrumentation accidentally committed.' id '18267235-d270-4acf-8626-28095c535f32' date '1 August 2013' time '12:48:02.155425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.316' message 'Correct several uses of literalCountOf:, using LiteralStart insteadof 1, and BytesPerOop instead of BytesPerWord.Correct some uses of #== to #=.Prune the isNode:substitutableFor:inMethod:in: search for calls atasserts.' id 'db273bad-0d96-4432-9470-f4c21d785531' date '1 August 2013' time '11:54:00.115228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.315' message 'Copy 314 transferTo:from: fix to CoInterpreterMT.Fix become for cog methods that are not paired with theirbytecoded methods (e.g. Newspeak accessors).Eliminate dead code around contextInstructionPointer:context:.Eliminate duplicate methodClass asserts in ce*(Send: and simplifysome in code compaction & code freeing.Don''t inline freeStackPage:Slang:Revise the inlining change.  Global vars passed as parameters mustnot be read after any non-trivial call.Use CCodeGenerator>>isAssertSelector: to check for all assert: calls(these are not inlined).  hence fix assert:l: uses.Add some more inlining selector breakpoint checks.' id 'edf4f6ec-fb34-404f-a50a-f3690c4f6dbb' date '31 July 2013' time '3:32:01.040425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.314' message 'Fix bug in transferTo:(from:) when doing a code compaction whenensuring there is a machine code method when switching to aprocess whose context has a machine code pc.Add an assert to commenceCogCompiledCodeCompaction to catchthe actual bug (pushing the instructionPointer twice).Improve inlining via inlineSend:directReturn:exitVar:in: by refactoringargAssignmentsFor:args:in:''s innards.  Now global variables areinlined if they are only read within the code being inlined.Implement warningat in term of warning so one only has to rememberto set a breakpoint in warning, not both.' id 'e8cba0d1-78b9-4058-820f-62d6e02e180b' date '29 July 2013' time '3:13:00.436392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.312' message 'Add tracing of GCs and code compactions to primTraceLog.' id 'c3721341-0803-4acd-aa1e-48ab09aca8e3' date '25 July 2013' time '4:51:01.71 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.311' message 'primitiveTerminateTo needs one more assertValidStackedInstructionPointers:' id '1532d343-6ca3-4722-acfd-f56c1f3cc306' date '25 July 2013' time '11:06:03.146392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.310' message 'Fix some assert:s that should be assert:l:s' id 'd05bf462-ca3e-4094-9350-b57f667e30ec' date '25 July 2013' time '10:06:02.587359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.309' message 'The Peugeot commit.Use assertValidStackedInstructionPointers: in primitiveTerminateTo.Fix the assert to use framePointer when on current page andinstructionPointer ~= 0.Fix assertValidStackedInstructionPointersIn:line: usage incommenceCogCompiledCodeCompaction.Simplify relocateCallBeforeReturnPC:by: and elide bogus use ofsignedIntToLong there-in.Add a guard to findClassOfMethod:forReceiver:.' id '2ee24067-8c61-4855-b4b3-4bb419b4fe7f' date '24 July 2013' time '12:34:01.508130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.308' message 'Add an assert that checks all the instructionPointers in all stackpages.  Use the assert in code compaction.  (tracking down a rarecrash at Cadence).Fix the assert in CogIA32Compiler>>relocateCallBeforeReturnPC:by:that was being triggered by relocating calls toceSendFromInlineCacheMiss: in open PICs.Do this by making simulated addresses +ve, i.e. putting them in thetop of the bottom half of the address space, not the top of theaddress space, to clear their sign bits.Beef up the assertValidExecutionPointe:r:s:imbar:line: assert forinterpreted frames (i.e. check savedIP if pc is ceRetrnToInterpreter)' id '66681ccb-5127-4525-a519-55ee71410844' date '23 July 2013' time '5:20:02.19832704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.307' message 'Fix simulation of ImageSegmentTest by using correct receivers, andby fixing the cast to char * in FilePlugin>>primitiveFileRead.  ChangeFilePlugin>>primitiveFileWrite to match.Rename kernel: and builtin: to isKernelSelector: and isBuiltinSelector:.Add cCoerce:to: and cCoerceSimple:to: to kernel selectors.Make simulator check for last object overwritten after callingfunctions through dispatchFunctionPointer: and handleCallOrJumpSimulationTrap:.Add checks for writing past freeStart to byteAt:put: and simulatedstorePointer:ofObject:withValue: et al.Delete a number of bogus reverseBytesFrom:to: implementations infavour of ObjectMemory>>reverseBytesFrom:to:.Move printMemoryFrom:to: to NewObjectMemory.Fix overriding base in promptHex:' id '737feb1e-5228-463a-8f3e-0f55f10fc3c9' date '19 July 2013' time '11:12:01.945228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.306' message 'Add an assertValidExecutionPointers to the front side of processswitch.Restore the simulator after adding the MaxStackAllocBytes limitcheck to allocateOpcodes:bytecodes:ifFail: by adding sizeapproximations for CogAbstractInstruction et al.Make cppIf:ifTrue:[ifFalse:] accept a symbol, thereby restoring thesimulator after Tim''s ENABLE_FAST_BLT changes.' id 'ef4dab92-e348-4081-8041-92ae24d73bea' date '18 July 2013' time '12:07:04.25832704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.305' message 'Limit the ammount of space the Cogit will stack allocate when compiling.This limits the maximum number of bytecodes in a method that theCogit will compile.  Currently set at 1.5Mb of stack space from empiricaltests of alloca on Mac OS X 10.6, linux 2.6 & Windows XP.Merge initializeCompilationWithConstantsOptions: intoinitializeMiscConstantsWith:.' id 'ca4b6f0d-e113-4cd5-b859-527f897bd29b' date '17 July 2013' time '2:02:03.660425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.304' message 'Make deferStackLimitSmashAround:[with:] answer true so it can beinvoked in an assert and hence be optimized out in a non-assert VM,hence optimizing away assertValidExecutionPointe:r:s:imbar:line:.' id '79d06b10-06eb-49bc-a33a-a36bd68ab3c2' date '17 July 2013' time '12:25:00.931032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.303' message 'Add assert:l: and asserta:l: which take line numbers.Refactor assertValidExecutionPointe:r:s:imbar: to take a line numberand supply it to assert:l: et al, for more informative assert failures.Use sqLowLevelMFence in deferStackLimitSmashAround:with: et al.Refactor preambleCCode emission so that a comment indicating itssource is generated.' id '99b81fe2-3c89-43bb-8a2c-2541842da7e0' date '16 July 2013' time '3:45:02.789261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.302' message 'Fix bug when assigning to some context inst vars from generatedmethods.  Add accessors to document the context inst var accessscheme.Fix a compiler warning comparing an error code in cog:selector:' id '2ac39432-ac54-4584-964e-b129c90792f4' date '12 July 2013' time '3:52:01.857130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.301' message 'Faster bitblt integration, pt 1.Add #define switch for use of new code - ''ENABLE_FAST_BLT''.makefile related stuff still to come.Also fix bug in VMMakerTool.' id 'df2e88d5-5589-4cc2-b52d-3069e8d746a3' date '21 June 2013' time '6:54:02.621294336 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.300' message 'Fix type errors in the Cogit that prevent the Cogit working whencompiled with clang.  Specifically void * pointers are not comparable.Make sure that fetchPointer:ofObject: & isIntegerValue: are declaredin cointerp.h.' id 'b52f5f3d-b4e2-4bfb-ba9a-a6b55c71a8d3' date '21 June 2013' time '4:34:00.130294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.299' message 'Fix bad performance regression that on certain platforms (linux)results in all send misses causing a discarded PIC creation followedby a slow hash lookup.' id 'e51057f5-4de2-4c2b-82ce-844d130e2f33' date '14 June 2013' time '4:47:02.750228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.298' message 'Change the VMProfileLinuxSupportPlugin to follow symlinks,answering pairs of module name, dereferenced symlink or nil.' id 'da5c90a8-14fa-4f7a-a58f-40f16337392c' date '10 June 2013' time '6:12:00.946228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.297' message 'Fix 3 (!!) bugs in primitiveDLSymInLibrary' id 'cb5c5783-9e64-4e06-ac22-1303b40171e9' date '10 June 2013' time '1:57:03.614032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.296' message 'Fix bug in eden filling/object overwrite checking.  must use unsignedvars in the fill loop.' id 'ca2924d5-7bfb-4690-a7ce-9ec8d2222043' date '6 June 2013' time '12:35:03.142261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.295' message 'Cast primitiveUtcWithOffset in terms of a new ioLocalSecondsOffset' id 'cb649291-541e-4d32-8b85-bf22a4449a51' date '5 June 2013' time '1:04:03.944098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.294' message 'add VMProfileLinuxSupportPlugin to configurations' id '9f0fd793-5a49-476d-9a76-c84180415334' date '5 June 2013' time '12:22:04.110228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.293' message 'tweak VMProfileLinuxSupportPlugin''s class comment' id '1aa1e0a0-8883-4493-b0eb-226057aaabe3' date '5 June 2013' time '12:11:02.266032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.292' message 'Add a plugin to support the VMProfiler on linux (now Steve Reeshas told us how to get proper thread priorities on newer linuxes).' id '5dd88aa9-3dbc-4c32-be81-398516000a13' date '4 June 2013' time '5:39:01.811425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.291' message 'Fix typo in SQ_USE_GLOBAL_STRUCT_REG.Insert batshit insane C macro double expansion lunacy to make use of -DUSE_GLOBAL_STRUCT_REG=r6 convert to register struct foo * foo asm("r6"); in final code.This does now build a Raspbian vm with global reg var for the pointer to the global struct. Doesn''t seem to be any faster though. :-(' id 'ec89405f-12f5-4a55-98f7-b246fcbec660' date '15 May 2013' time '6:08:02.276 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.290' message 'Clean up some global struct code;- remove need to build separate sources to accomodate use of register global ptr to struct- clean up recording/testing for use of global struct in methods- define USE_GLOBAL_STRUCT_REG to use the global struct reg; right now machine factors require a different define for each machine/OS. Maybe this can be improved' id '31707f84-deff-4c57-8d55-df4e7407682f' date '15 May 2013' time '1:05:02.378425152 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-tpr.289' message 'USe asmLabel: false pragma to stop asm lables being put into floatValueOf and safeObejctAfter so that gcc -o3 doesn''t fuck up; it tends to put the label in twice for some reason and then complains about that. Typical...' id '522ae12f-76a5-465d-9b22-0a418d901ad2' date '14 May 2013' time '3:19:03.426 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.288' message 'Fix typo in NewObjectMemory>>freeStart to repair USE_GLOBAL_STRUCT=1 regime.' id 'fe94950e-9d0b-4da7-ae1b-6a0700c87a88' date '10 May 2013' time '1:52:01.546065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.287' message 'Fix mistaken use of MFrameSlots in StackInterpreter>>interpreterAllocationReserveBytes.Some asserts in the allocation routines to attempt to catch what appeared to have been a compiler bug.Use addressCouldBeObj: in oopHasAcceptableClass:.' id '11b3f2a0-e1f5-47f5-b57e-52c93081cefe' date '6 May 2013' time '2:57:01.420294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-dtl.286' message 'Replace broken primitiveUtcWithOffset with a version that works.' id '8be237d9-7812-4792-9723-90f9cff0c2e9' date '4 May 2013' time '11:29:03.76216352 am' author 'dtl' ancestors ((name 'VMMaker.oscog-eem.285' message 'Eliminate some excessive use of push/popRemappableOop[:]in the SocketPlugin.  Use addressOf: instead of cCode:.' id 'cb7737d2-7959-4494-ba87-9be6e6f1226b' date '12 April 2013' time '3:14:01.52316352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.284' message 'Add Callback LIFO ordering support to the new-style Callback returnprimitives.  Fix some compiler warnings.Fix typos in RiscOSVMMaker' id '4f939b96-e07b-4888-9880-d2e9465edbe3' date '10 April 2013' time '4:03:01.729032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-tpr.283' message 'Make it work for RISC OS; simple changes to use the RiscOSVMMaker class, not do the gnuify step, use RISC OS tolerabel filenames etc.Also fixes apparent bug for all platforms in VMPluginCodeGenerator>>emitCCodeOn:doInlining:doAssertions:' id 'd2f9d806-1112-4c6e-a21d-3228b51fa2e8' date '10 April 2013' time '12:59:03.611 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.282' message 'Slang: Fix SmartSyntaxPlugin support method affected by the fixesfor generating to:by:do: loops in VMMaker.oscog-eem.279.' id '6c2f2048-555b-4d37-a9eb-4d9252acf3b9' date '3 April 2013' time '4:14:00.503196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.281' message 'Cogit: Fix *HORRIBLE* yet ancient bug with the CogObjectRep.Both CogObjectRepresentationForSqueakV3>>couldBeObject: &CogObjectRepresentationForSqueakV3>>shouldAnnotateObjectReference:used signed comparisons for oops and so once the heap sizepushes oops into the upper half of the address space constantoops in machine code were no longer being updated by the GC.StackInterpreter: reqrite the login for printing methods so thatprinting the frame of a bad receiver won''t seg fault.' id '64be55df-6421-4087-a712-5c07419806c7' date '3 April 2013' time '3:27:02.058 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.280' message 'Add primitivePathToUsing which mimics the PointerFinder and can hence be used todebug it.Remove unnecessary forceInterruptCheck in NewObjectMemory>>become:with:twoWay:copyHash:.(heartbeat does this for us).Fix bug in assert in NewCoObjectMemory>>restoreHeaderOf:to:.Slang:Move SmartSyntaxPluginTMethod>>oopVariable: to TMethod.' id '8caedff8-7423-4f1d-a007-19ea906a098b' date '3 April 2013' time '3:19:00.980032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.279' message 'Slang:Fix translation of to:by:do: loops so that the limit is not re-evaluatedon each iteration if it may have side-effects.As part of this change make TMethod locals a Set, and sort only whenemitting locals.  Alas this causes a number of methods to change.' id '300e6a42-3856-465e-bd25-d3026399ab6c' date '31 March 2013' time '5:12:03.402196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.278' message 'and include the correct AioPlugin (UnixAioPlugin)' id '7fdfd7e4-1e18-4a12-92e3-832126e924a5' date '22 March 2013' time '1:16:01.195392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.277' message 'Include SqueakSSLPlugin in the configurations.' id '23bfa9b8-fad8-4d7a-b0e8-e84cdd7e67d4' date '22 March 2013' time '1:06:04.173196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.276' message 'Cogit:Stop reporting EncounteredUnknownBytecode with an error message.Fix slip in ceSICMiss: that didn''t link new PIC if an MNU case.Better document the calling conventions.Add an assert to genGetImplicitReceiverFor:forPush: that checksthe appropriate use of the IsNSSend annotation.Fix simulation bug in CogMethodSurrogate>>nextOpenPIC.Slang:Nuke unused InterpreterSimulationObject.' id '52d03a8f-11ec-4454-9c4a-ea1c383f339a' date '21 March 2013' time '4:43:00.401294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.275' message 'Remember to flush PushImplicit/SendAbsentImplicit caches onglobal cache flush and flush cache by method.  Fix comment forflush-cache-by-method workhorse.  Streamline the code.' id '69d4c949-ec25-4846-a014-417705bb4611' date '19 March 2013' time '9:27:02.31232704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.274' message 'Fix PC-mapping for NewspeakV4.  Absent receiver sends must notbe maped twice, once for IsNSSend and once for IsSend.  Sointroduce class vars that state whether instructioon set usesPushImplicitReceiver (NSSendIsPCAnnotated is true) orSendAbsentImplicit (NSSendIsPCAnnotated is false).' id '559311c1-938a-409c-9ee4-e17fb0e2b85f' date '18 March 2013' time '5:58:00.608294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.273' message 'Integrate VMMaker-dtl.302:A WordArray parameter in the parameter list of a primitive declaration should be declared as (unsigned *) not (usqInt *) in the generated C code. Fix WordArray class>>ccgDeclareCForVar: code generation and provide a unit test.Also remove redundant type declaration in HostWindowPlugin>>primitiveShowHostWindow:bits:width:height:depth:left:right:top:bottom: which was an ineffective attempt to work around the code generation bug.Cogit in-image tests:Fix the facade now that absent-receiver inline caches aredisassembled prettily.Allow supplying VM config options to pc-mapping tests.Put VMClass defaultIntegerBaseInDebugger in a class var for quickflipping between decimal and hex.' id '0a8e74b7-9351-45ea-b8a3-56969530c62e' date '18 March 2013' time '1:20:02.757392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.272' message 'Fix unknownBytecode processing to leave pc at unknown bytecode.Fix case of process switch to an interior frame.Fix some assert function signatures in the stack vm.Use symbols for types instead of strings in stack page funcs.' id '8f4167f2-5bf0-4d90-9b7f-5355c741c68f' date '8 March 2013' time '3:33:01.637 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.271' message 'Integrate VMMaker-oscog-EstebanLorenzano.235.- it is possible to build stackvm again' id '8943dd74-9b0c-4423-b878-187204349978' date '8 March 2013' time '1:04:02.982261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.270' message 'Fix the become issue where methods that are identical are failingthe code test because their penultimate literals are different objects.Add a flag "cmUsesPenultimateLit" to jitted methods, stealing bitsfrom stackCheckOffset (which was way larger than needed).Shrink stackCheckOffset to 12 bits (still an order of magnitude largerthan needed) and add an error check on assigning it.Also add a check for max method size (2^16-1 bytes) and refuse tojit a method that generates too much code.When comparing code, use the cmUsesPenultimateLit flag to decideif comparison includes penultimate lit or not.This is mildly insane, but the VM really doesn''t know about thepenultimate literal and it shouldn''t depend on knowing it can beignored.  Note that the CoInterpreter knows about the last literal;it uses this in supersends.  With this hack, Pharo''s condenseSourcesworks.Fix simulation of primitiveMillisecondClockMask.' id '014f0153-bb02-49b7-b544-d8f3ac2deef6' date '1 March 2013' time '5:10:00.456359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.269' message 'Fix bug in primitiveClone/cloneContext: that causes the copy to be aword short.Move isContext: to ObjectMemory where it belongs.Implement the heap map check for simulation, plus a test class.Implement mem:mo:ve: for simulation.Use isPointerNonInt: and isContextNonInt: in a few places.' id '49173296-5145-4de1-a2d9-defc8579acc6' date '28 February 2013' time '1:19:02.32916352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.268' message 'Merge VMMaker-dtl.301.  Add IncludedMethodsTest to VMMaker-Tests.' id '5fdf7a63-1080-44b2-985d-0850b60cbbc3' date '26 February 2013' time '10:39:03.534359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.267' message 'Implement unknownBytecode.  Send unknownBytecode to theactiveContext on unknown bytecode if the selector is in thespecialObjectsArray.Reuse the index reserved for the Sista counter tripped selector asthis has yet to see the light of day.' id '8b17ccab-cf2b-4810-8e9a-ac9571eafef5' date '21 February 2013' time '11:09:03.806130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.266' message 'Support one-way become on cogged methods that have the samecode, for e.g. Pharo''s setSourcePosition:inFile:.  Add error checks fortwo-way becomming cogged methods, becomming married contexts,and for freeing any of these during become.Refactor freeObject: and restoreHeaderOf: to allow subclasses toadd their error checks efficiently (i.e. avoiding fetching baseHeadermore than once).Bring endPCOf: out of simulation-only land for code comparison.Make assert in rawHeaderOf:put: accept forwarding.Tiny speed-up in using byteLengthOf: instead of byteSizeOf: in cogit.Add asLong to CCodeGenerator andthere-by  eliminate printfwarnings in reportMinimumUnusedHeadroom.  Eliminate warningin instVar:ofContext:put:.Add asserta: to functions not inlined to get neater printing ofasserta failures.Nuke obsolete Cogit>>byteAt:put:.' id 'ee4e0b6e-91a8-432c-847b-132d682bc79b' date '20 February 2013' time '3:47:02.176032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.265' message 'Fix bug in assigning pc which can cause stackPage to not be mostrecently used.Minor cleanups:Move InterpreterPrimitives primitives that use framePointer and/orstackPointer down into StackInterpreterPrimitives.Eliminate obsolete 64-bit check in primitiveBeCursor.Improve class comments for VM simulators, including current launchinstructions.Include the AioPlugin in Squeak Cog VM generation.Fix short frame printing (eliminate an exc=tra newline and use hexfor receiver).' id 'c8c5b4d1-706a-4eb6-ad85-566811e2b239' date '20 February 2013' time '9:36:00.077392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.264' message 'Fix snapshot primitive failure in the StackVM and Cogit.  Theprimitive should fail, not merely return the receiver.  Also if inCogit, need to back-up instrufiton pointer on failure.Make reportMinimumUnusedHeadroom more informative (also printavailable headroom).Back out of named SerialPlugin primitives (comprehensiveplatform support is lacking).Fix simulation of forceInterruptCheck when snapshotting.Fix simulation of writeImageFileIO: when image file is not writable.Fix generateSqueakStackVM.' id '64e76092-8af7-449f-9188-e65f3bd1f08d' date '5 February 2013' time '6:37:04.14932704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-lw.263' message 'refactored the minimization of immediate 12bit valuesadded send site updates' id 'bf23be20-f2a7-1040-a675-76e097a7f431' date '3 February 2013' time '6:09:00.952392448 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.262' message 'updated numberOfSaveableRegisters to reflect the correct number of registers saved in genSaveRegisters: 0.compileFrameBuild expects lr to be pushed before the frame pointer. This is done now.' id 'e873534c-eaea-3e44-b57c-66c588bed675' date '2 February 2013' time '12:10:02.568098112 am' author 'lw' ancestors ((name 'VMMaker.oscog-eem.261' message 'Merge with VMMaker.oscog-lw.260, but put push of link registerwhere I think it should go in trampolines.Move determination of the ammount of headroom to the platform inosCogStackPageHeadroom (in the various sqFooMain.c files).Provide a routine to monitor the ammount of unused headroom,which requires the stack memory be zeroed before use.  Assumethe platform will provide a -reportheadroom flag for enabling thereport.  Provide primitiveMinimumUnusedHeadroom for in-imageaccess.Add some asserts to check that a page''s frame pointer is alwaysin range (setHeadFP:andSP:inPage: already did this).Implement some missing prototypes in InterpreterProxy.  Add acomment to preDeclareInterpreterProxyOn: to eyeball all prototypes.' id 'eeb310a3-23e0-41f6-8a92-5749b798e623' date '30 January 2013' time '5:12:02.346228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-lw.260' message 'reverted all the changes done which were based on the implementation of RTLOpcode Call as (push {pc}, BL)added abstract register LinkRegchanged trampolines as suggested on mailinglistadded assert in callTargetFromReturnAddress' id '6ee6c419-5fb3-e34f-ac21-e2051a2076cd' date '30 January 2013' time '9:38:03.891032704 am' author 'lw' ancestors ((name 'VMMaker.oscog-eem.258' message 'Fix becomeForward: when the rootTbale overflows.  There were twobugs here.  One is that initializeMemoryFirstFree: used to clear theneedGCFlag so if the rootTable overflowed noteAsRoot:headerLoc:''s setting of the needGCFlag would be undone after the sweep.The other is that rooitTbale overflow was indicated byrootTableCount >= RootTableSize which could be undone bybecomeForward: freeing roots which need to be removed fromthe rootTable.  At some point in becomeForward the rootTable wouldfill but at a later point a root would be freed, causing the table tobecome not full.The fix is two fold.  1. Add an explicit rootTableOverflowed flaginstead of relying on rootTableCount >= RootTableSize.2. move the clearing of the needGCFlag to the GC routines.Remove unnecessary senders of needGCFlag: false, and removethe accessor.As a side effect rewrite primitiveRootTable in terms of a newObjectMemory>>rootTableObject.  Remove the rootTable: accessor.Implement checkAllAccessibleObjectsOkay &checkOkayInterpreterObjects: (used to debug the above).Fix NewObjectMemory initialization to set freeStart at the sametime as setting endOfMemory.  This allows load-time scans andassert code to use freeStart instead of endOfMemory.Simplify markAndTraceStackPage: ; since the two implementationsare distinct they don''t need to contain the isCog if-then-else.Implement NewObjectMemory>>shorten:toIndexableSize: so thatthe last object is correctly shortened (cut back freeStart).  Refactorthe allocation check filling code intomaybeFillWithAllocationCheckFillerFrom:to:.Make longPrintOop: print the class oop.Fix bug in printCallStackOf:currentFP: for widowed contexts.Use fputs for print: instead of printf.' id 'da1433f1-de50-475f-be33-f462b300a2ea' date '18 January 2013' time '11:01:01.59716352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.257' message 'Fix snafu in last stack page  hanges (last two parameters to stackpage init funcs are unused) and simplify.Integrate the named serial primitives plus Luc Fabresse''s latest fix.' id 'cc766916-2d42-4637-b147-e37206b7c669' date '16 January 2013' time '10:38:02.948228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.256' message 'Rewrite the stackLimit computation after a moment of clarity.  Allowthe system to reduce the space for frames by up to an 1/8th.Make sure there''s at least as much headroom as asked for.  Thischanges the stack page size from 4096 to 2048 and much reducesthe interpreterAllocationReserveBytes.Don''t round up interpreterAllocationReserveBytes to a power of two.Simulator:Initialize numStackPages to the default for experimenting withstackPage dimensions.Implement ioRelinquishProcessorForMicroseconds: inStackInterpreter a la CoInterpreter.In internalFindNewMethod use splObj: SelectorDoesNotUnderstandinstead of sloooow self stringOf: messageSelector.' id 'bfea3efd-4e81-4e85-922e-cf4f58ee5d64' date '16 January 2013' time '8:37:02.971065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.255' message '[New[Co]]ObjectMemory:Fix freeing of objects for becomeForward:.  Remove freed youngroots from the rootsTable.  Filter freed objects pointet to from theextraRootsTable (because these locations can change it is wrongto remove entries from the extraRootsTable).Abstract away use of the RootBit into isYoungRoot[Header]:StackToRegisterMappingCogit:Fix marshalling of absent receiver sends.  The items beneath thearguments (and to-be-pushed receiver) must be spilled beforethe receiver is pushed.Improve code quality for numArgs > numRegArgs sends whenreceiver is not a spill and there are no uses of ReceiverResultRegamongst args.  e.g. now avoids loading ReceiverResultReg from stackin code such as 1 with: 2 with: 3 .' id '51e53ec1-8caf-41f6-9293-1088ef4b82d8' date '12 January 2013' time '6:28:02.743294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.254' message 'Fix becomeForward: so that objects whose references are deleted arefreed and can no longer be resurrected via allObjects or allInstances.Make primitiveIdentityHash pop all arguments, for Newspeak VMMirrors.Simulator:Fix stack depth assert checking for NewsqueakV4 methods.  Absentreceiver sends have a different stack delta to normal sends.Make disassembly display and skip oops in implicit receiver caches.Fix off-by-one limit check bug in disassembleMethodFor:.Provide a filter on perform: to allow the simulator to avoid runningunsimulateable primitives/start-up code such asObjectiveCAlien class>>startUp:.Fix detauledSymbolicMethod: for Newspeak methods containingabsent receiver sends.Make priomptHex: accept C hex constants.' id '74e6a299-691e-4f7d-986c-1a7d3d0ec02c' date '11 January 2013' time '7:05:03.029261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.253' message 'Implement absent receiver dynamic super send bytecode in the JIT.This was an oversight from implementing absent receiver send.Refactor the dynamic super send code to accomodate the new send.' id '4a3ac3fb-d367-478b-ad95-ad3bb8b6216f' date '10 January 2013' time '3:26:03.577 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.252' message 'Issue 117.  Fix primitiveRemLargeIntegers.The result should be negated iff receiver negative.' id '50d6c392-d32d-49a5-9251-32ad9c299572' date '8 January 2013' time '6:08:01.272196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.251' message 'Give primitiveRemLargeIntegers primitive # 20.' id 'beb7dbb2-ac3b-4628-8fca-330de6592c00' date '7 January 2013' time '2:33:02.970065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.250' message 'Improve absent receiver send marshalling to only shuffled currentlyspilled args.Revert rush-of-blood-to-the-head change to ceImplicitReceivertrampoline, but use Arg1Reg rather than Arg0Reg.Fix (old) bug in ssAllocateRequiredRegMask:upThrough:that would flush entire stack if allocating any register.' id 'e0de5572-7682-4c5e-b5a0-ca2f32cf0c81' date '7 January 2013' time '1:30:02.395196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.249' message 'Implement absent receiver sends in the Cogits.Refactor pushImplicitReceiver into genGetImplicitReceiverFor: andclients and use genGetImplicitReceiverFor: for absent receiver sends.No longer use Arg0Reg in ceImplicitReceiverTrampoline.Fix CurrentImageCoInterpreterFacade for Newspeak methods.Fix initialization of COGMTVM for simulation.' id 'f55f4646-2800-4e27-b885-c25b0eddd43e' date '7 January 2013' time '9:40:01.33732704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.248' message 'Fix snafu in revised build info generation.' id '325b96ad-3c25-438e-af36-04a93839f195' date '3 January 2013' time '1:48:00.334392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.247' message 'Integrate directed shift changes from cog issue 111 that affect theCoInterpreter and Cogit.Refactor Monticello build info so that plugin classes can override.Make the trnalsated primitive plugins include info from theirprimitive supplying classes.' id '16558e1b-de42-458d-a01d-6f2230d165b7' date '3 January 2013' time '1:34:02.377228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.246' message 'Integrate changes from VMMaker-dtl.293 which use >> & << shiftsin place of slower bitShift: code in plugins.' id '1e176c89-522a-4632-ba15-e12f800d1022' date '2 January 2013' time '5:53:03.297359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.245' message 'Add width failure cases to BMPReadWriterPlugin read & write 24Bmpprims.Use ClassByteString var in preference to ClassString var.' id '3b27b42f-4c48-40b7-8261-2f05e76d11f2' date '2 January 2013' time '5:44:02.233228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.244' message 'Restore Cogit wanting COGMTVM to be determined oncommand line.  Probably broke in VMMaker.oscog-eem.218' id 'c9625bb4-bc55-4b75-942c-084c12ea9648' date '2 January 2013' time '12:03:01.88932704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.243' message 'Integrate issue 112.  Add ULL suffix to > 32 bit integer literals.Add a test for integer literal generation (doesn''t yet test negativevalues).' id '72a4a123-e10e-4d32-90dd-0b74014f02d3' date '2 January 2013' time '11:34:00.603065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.242' message 'Cog issue 115.  Fix FFIPlugin/ThreadedFFIPlugin unsignedShortAt:' id '239a00e7-4aed-4e7b-b564-0088b6af5dd0' date '2 January 2013' time '10:34:03.456294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.241' message 'Correct the const declarations in the Cogit.Comment the MULTIPLE_BYTECODE_SETS vm parameter #65.' id '8ddbe9c0-6584-4c40-82c8-8e48a1dcf02a' date '20 December 2012' time '4:32:00.785392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.240' message 'Back out of the wrong-headed attempt to give compact class indicesto long header objects in changeClassOf:to:, and comment why(markAndTrace: reuses header type bits and depends on compactclass and size fields to reconstruct type bits after traverse).Consequently fix isClassOfNonImm:equalTo:compactClassIndex: soit will still accept long-header objects that are insances of compactclasses but don''t have a compact class index.Clean-up accesses to the compactClassesArray so that they gothrough the compactClassAt: where appropriate.Use the short-hand class determinators such as isInstanceOfClassFloat:in place of the long-winded is:instanceOf:compactClassIndex:.Move the determinators to InterpreterPrimitives where they arebetter-placed (but should eventually end up in Objectmemory andsiblings).Remove obsolete use of cCode: ''magnitude >> 32'' in the integerconversion routines signed64BitIntegerFor: et al now that Slanggenerates the correct cases for right-shift.Eliminate the compactClassTable accessor.  CompactClasses and splOb:are both in scope in CogObjectRepresentationForSqueakV3.Override sweepPhase in NewObjectMemory and hence eliminateinitializeFreeBlocksPreSweep.Fix off-by-one error in okayOop:.Make longPrintOop: print header type info.Make allAccessibleObjectsOk answer a result.Don''t inline loadInitialContext for gdb breakpointing convenience.Declare some constant variables as const in the Cogit.Simulator:Fix several sends to be to objectMemory, not self.Make the storePointer: overrides bounds-check index.Remove several obsolete overrides in StackInterpreter simulatorsof methods now moved to ObjectMemory and subclasses.Add printCallStackOf: menu access.Add print of freeStart to GC overrides.Add a printMemoryFrom:to:.Implement vmProxyMajor/MinorVersion so that simulation can stillload plugins in new plugin interpreterProxy api access regime.' id 'f72e2cd1-8b0e-45af-acd7-06ba9bbc2a50' date '20 December 2012' time '12:21:03.98 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.239' message 'Third time lucky.  Fix bug in changeClass:from: so that if receiver haslong header and class is compact, receiver still gets compact classfield set, not cleared.  No matter what header an instance has, if itsclass is compact it should have the compact class index set.' id '3087e16d-bf3c-4fdc-b2ec-14791deff66f' date '18 December 2012' time '10:35:01.592130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.238' message 'Restore ThreadedFFIPlugin wanting COGMTVM to be determined oncommand line.  Probably broke in VMMaker.oscog-eem.218' id 'a3d10eab-6079-4c91-99f6-3dcf58d1446f' date '17 December 2012' time '11:33:04.195261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.237' message 'Once again fix bug in changeClass:from: so that if receiver has longheader and class is compact, receiver still gets compact class fieldset, not cleared.  No matter what header an instance has, if its classis compact it should have the compact class index set.' id '208e5eb6-429e-447b-9caa-dbf379192cf8' date '17 December 2012' time '10:38:02.030359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.236' message 'Fix bug in changeClass:from: so that if receiver has long header andclass is compact, receiver still gets compact class field set, notcleared.  No matter what header an instance has, if its class iscompact it should have the compact class index set.' id '009ced90-5c50-461c-8550-f7eca297fa09' date '17 December 2012' time '10:16:02.312359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.235' message 'Fix doubling of include file declarations in plugins (now plugincode is generated an exctra time to extract usedf functions wemust avoid adding headers twice in emitCHeaderOn:).Provide a hook, InterpreterPlugin class>>exportBuildInfoOrNil, forbuild info comments as in the UnixOSProcessPlugin.Make constant generation look for method var and return types soas not to nuke types introduced as #defines viaaddConstantForBinding: (again a la UnixOSProcessPlugin).EMit constants more carefully, not converting defs that contain acomment into C literals, again so that UnixOSProcessPlugin candeclare FILEHANDLETYPE et al.Add all headers through addHeaderFile[First]: so that warnings canbe issued aboud multiple defs etc.Fix MNU handler for missing NullStream protocol as per trunk4.3.Nuke a duplicate include in VMProfileMacSupportPlugin.' id '954df856-3f83-498c-9735-6cd3777ba9c7' date '14 December 2012' time '12:40:03.50216352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.234' message 'Fix semicolons appearing after the #endif on expanding expandDereferenceInterpreterProxyFunctionTable' id '66acafd1-cad0-4f20-b786-ab8f48201d82' date '13 December 2012' time '3:58:01.833130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.233' message 'Change translation of symbols so that they are translated directlyand one does not need to use #asSymbol.  This for e.g.self cppIf: #''SA_ONSTACK'' defined ifTrue: ...The relevant changes to the code generator are	BlockNode>>isPotentialCCaseLabel	CCodeGenerator>>cFunctionNameFor:	CCodeGenerator>>cLiteralFor:	CCodeGenerator>>cLiteralFor:name:	CCodeGenerator>>generateFlag:on:indent:	CCodeGenerator>>initializeCTranslationDictionary	TConstantNode>>printOn:level:	TParseNode>>allCallswith this convenience method added:	Symbol>>definedAll the others are corrected uses with the #asSymbol dropped.' id '8720e836-68d5-48bd-a664-5d39a9e2e211' date '12 December 2012' time '12:22:03.297228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.232' message 'Merge LargeInteger primitive fixes from VMMaker-dtl.286 andtests from VMMaker-dtl.289.' id '9ecffa1b-c204-4dbd-b148-79e209e6470a' date '11 December 2012' time '5:47:02.441359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.231' message 'Rename misnamed internameIsMutable: and internalIsImmutable:to isOopMutable: and isOopImmutable:.  Affects sqVirtualMachine.c,but only part of api used in Newspeak VMs.' id '3222a519-8cd5-4e1a-9689-6534df290217' date '11 December 2012' time '4:41:01.041098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.230' message 'Fix stackPage headroom calculation in CoInterpreter.  Was gettingthings backward.  This increases the stack page headroom by 62%from 1564 bytes to 2532 bytes.  Shootout benchmarks unchanged,so reduction in frames per page is not an issue for typical code.This should result in fewer crashes on linux where the dynamiclinker, if it kicked in during a signal handler, could cause a deepcall chain at interrupt time and trample the start of the adjoiningstack page.Use self alloca: nbytes over cCode: ''alloca(nbytes)''' id '735cb4f0-6d2a-4916-bbd0-cd517917da4e' date '11 December 2012' time '3:16:00.850130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.229' message 'Streamline ObjectMemory>>instantiateClass:indexableSize: (hdrSizeand header3 change together).Optimize the debug VM by making startOfMemory a macro thatanswers heapBase instead of a method.Improve stack page printing, and make stack trace printing morerobust (findClass/SelectorOfMethod:forReceiver:).Make temporary:in:put: et al answer their values. For stObject:at:put:.Remove dead code in TMethod (typedByPropagation).make jumpTable size err message more explanatory.typos.' id 'd0568065-8deb-4e6e-8c98-798d0983ef52' date '11 December 2012' time '2:03:00.123425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.228' message 'Change generation of plugin code so that internal plugins call VMroutines directly and external plugins call through their own localcopies of the function pointers in InterpreterProxy.  External pluginscopy the InterpreterProxy functions to their local copies insetInterpreter:.Fix a couple of prims in BalloonEnginePlugin that had variables calledisArray which now clash with the funciton of the same name.Add the ImmX11Plugin.Change implementations of stObject:at:put: to return their value, tomatch the declaration in InterpreterProxy.Delete some obsolete code in SmartSyntaxPluginCodeGenerator(emitLoad:asBooleanValueFrom:on: et al).Add a class to test consistency between *Interpreter(Primitives)implementations and InterpreterProxy implementations.  Thesediffer because void result functions are still declared as sqInt resultfunctions in InterprerterProxy/struct VirtualMachine.' id 'd0ee0b3a-efb3-4092-a37d-b6dfd1036b49' date '11 December 2012' time '1:56:00.15832704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.227' message 'Not so fast...  Its a pointer type, not a struct type.' id '3b0a509e-7c27-4289-9194-29efc7936437' date '30 November 2012' time '3:59:02.260294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.226' message 'typo.' id '55513140-771d-4f43-931c-b61a61832d23' date '30 November 2012' time '3:54:02.666392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.225' message 'Fixes for cog issue 109, base frames and CallPrimitive, and mergewith VMMaker.oscog-lw.224.Cogit:StackToRegisterMappingCogit, cog issue 109.Fix pc mapping for popped folded constants as in, e.g. 1-1.  Need tocheck for annotateUse on popping a stack descriptor.Fix a typo in generateNewspeakRuntime.CoInterpreter:Fix makeBaseFrame: for methods with CallPrimitive that get restarted.e.g. on:do:.  We could make the CallPrimitive bytecode check forbeing at the start of a method, but I have decided, for strictness, tomake executing CallPrimitive an error for the moment.  This meansthat thater we could use it to embed primitive calls in the middle of methods.Refactor inverse pc mapping check and make StackInterpreter''sand CoInterpreters makeBaseFrame: closer.Streamline once again activation sequence to make setting method(actually bytecodeSetSelector) faster and on primitive failure toincrement pc past CallPrimitive before checking for err code store.Make ensureMethodIsCogged: answer the cogged method, again forefficiency.Add tracing of stack overflows.Fix bug in printing of bytecode addresses in long/printOop: onCompiledMethods.Fix bug in printStringOf: so that it prints ... when truncating.Add missing case to isNullExternalPrimitiveCall:.Streamline long/printReferencesTo:.Simulator:Make startInContextSuchThat: return on error, allowing one toproceed past a failure to find a suitable context on startup.Slang:Fix bug in super expansion to avoid renaming arguments.  Onlylocals should be renamed to avoid conflicts.  Arguments are shared.Improve formatting of code for cppIf:ifTrue:.' id '222bea80-06c8-4893-b1e1-d191688f36e6' date '30 November 2012' time '3:00:01.01816352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-lw.224' message 'my image couldn''t compile TMethod>>removeFinalSelfReturn as it was delivered with commit 220. This small change fixed it for my system.' id 'a51717bf-aca8-3447-b4cc-24b24b75d804' date '30 November 2012' time '10:13:03.75732704 am' author 'lw' ancestors ((name 'VMMaker.oscog-eem.223' message 'Make sure primitiveIndexOfMethod:header: is inlined as was theolder primitiveIndexOfMethodHeader:.Add more info to logging and remove ceCheckForInterrupts''s falsedependency on interpreter vars.' id '62151b21-ad34-403a-b5a0-63d83c023cdd' date '26 November 2012' time '5:07:03.64816352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.222' message '<blush>oops</blush>' id '9255d122-7216-4700-8ead-493416ce0cf6' date '26 November 2012' time '4:04:02.151294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.221' message 'Slang:Write the generator to the transcript to help remember what''s been done.' id '6154db02-9e04-4941-88ca-8201d7713110' date '26 November 2012' time '4:02:04.138392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.220' message 'Slang:Deal with ^self''s when inlining e.g. ADPCMCodec>>nextBits:put:.Don''t coerce results if return type is void.Make CCodeGenerator>>addMethodsForPrimitives: usecompileToTMethodSelector:in: for creating TMethods.Fix a bug in shift generation when casting a type that doesn''t includea variable name.Add support for asUnsignedLong cast (longs being guaranteed tobe large enough to contain a pointer).Make external plugin generation log only when pliugin is generated.Do not elide final ^self if it is explicit.Plugins:Fix some warnings.Cogit:Rename jumpTargetAt: to the more accurate jumpTargetPCAt:.' id '47ddca03-a770-4fe1-8ac8-ca9ecff907d3' date '26 November 2012' time '3:30:04.13432704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.219' message 'Use "var := expr. expr ifTrue:" in rewritten instantiation prims toregain inlining of sufficientSpaceToInstantiate:indexableSize:.' id '2f9005ca-b06d-4bfc-ae65-c6be901a999a' date '21 November 2012' time '12:22:03.755392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.218' message 'Revert to Esteban''s CCodeGenerator>>emitCConstantsOn: whichforces def of BytesPerWord in all plugins.  Mine also definedMULTIPLEBYTECODESETS in all plugins which is wrong but thankfullyobsolete.' id 'aea72579-80d2-40c0-9866-80fe8d3488fc' date '20 November 2012' time '4:50:03.253130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.217' message 'Hide extA, extB & bytecodeSetSelector from vanilla VMs, now thatthe code is neater in using cppIf:ifTrue:[ifFalse:].' id '8d1d7d80-fce3-4a84-9f8f-b07f482d81f7' date '20 November 2012' time '3:31:00.179425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.216' message 'Remove obsolete `entry'' from the list of C reserved words.DeflatePlugin has a variable called entry.' id '204e1409-e5aa-4ba1-8cde-50abacf98c78' date '20 November 2012' time '11:29:02.078032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.215' message 'Make instantiation primitives pop arguments, not assume arg count,for Newspeak.  Make them answer error codes, and streamline,avoiding using self success.' id '91c4320a-7127-4488-8997-7aff2e49ee37' date '20 November 2012' time '11:18:03.10832704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.214' message 'ThreadedFFIPlugin:Fix bug with not attempting to run GC enough times for COGMTVM tofreeze arguments.Fix bug in ffiCall:ArgArrayOrNil:NumArgs: not checking for an error case.Simulators:Add setBreakCount to other simulators also.Slang:Track variables in nested cppIf:ifTrue:[ifFalse:]''s so that both arms ofnested occurrences aren''t duplicated (code is less confusing).Simplify TMethod>>exitVar:label:.Neaten up spotting duplicated code in cases by avoiding generatingasm labels when printing cases for duplication tests.  Also avoidsincrementing the asm label counters unnecessarily.Comment nodesDo: implementations to be bottom-up.' id '4bf85ad2-0e8f-4dc1-8fa1-7d6369f5fb10' date '19 November 2012' time '5:54:00.611130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-lw.213' message 'Merged back in the ''set break count'' changeIn my image, there is no method #setBreakCount, so I used the block version also used eg. one line below.' id 'efc971b1-5d38-f24e-ba68-7e43ca9201c8' date '19 November 2012' time '10:38:01.443 am' author 'lw' ancestors ((name 'VMMaker.oscog-eem.212' message 'Complete multiple bytecode set support plus NewsqueakV4 bytecode set.Main change apart from bytecode set is to move the primitive index from a CompiledMethod''s header into a callPrimitive: bytecode, and use the bits to expand the num literals field to 16 bits, adding a "has primitive" field to the header.VMClass:Change generateNewspeakCogVM & generateNewspeakStackVM to generate VMs with MUTLIPLEBYTECODESETS.StackInterpreter/CoInterpreterAdd bytecode table for NewspeakV4. Rename shortConditionalJump to shortConditionalJumpFalse.  Rename bytecodePrimBlockCopy to bytecodePrimSpecialSelector24.  Make sure non-inlined special selector bytecodes (e.g. bytecodePrimDo) no longer assume argumentCount.Refactor primitiveIndexOfMethodHeader: to primitiveIndexOfMethod:header: to allow extraction of prim index from callBrimitve: bytecode.  Likewise callers of primitiveIndexOfMethodHeader:, e.g. canContextSwitchIfActivating: => canContextSwitchIfActivating:header:.Move fetchNextBytecode after setMethod: in commonCallerReturn so that bytecodeSetSelector is correct on fetch.Abstract out block creation from block creation bytecodesAbstract out detecting the prim err code store in method activation routines.Abstract out backwards branch event checking from backward branch bytecodesConsolidate the simulated bytecode implementations that override out-of-order fetchNextBytecode using cCode:inSmalltalk: and delete the simulated ones.Add process switched from to process switch trace.Add bytecode address and header print to longPrintOop: (and bytecopde address to printOop:) for compiled method.Fix printing oop twice for invalid oops in printOop:.Change a few ~~''s to ~=''s.Fix some receivers self => objectMemory.Change some users of BytesPerWord to BytesPerOop (e.g. internalPop:).Use Objectmemory>>booleanObjectOf: where aprpopriate.Add ImmediateTagMask & SmallIntegerShift and initialize them in initializeImmediates.  Use for testing the V4 "has primitive" header flag.Implement Newsqueak/Newspeak absent receiver sends in the StackInterpreter (but not yet in the KIT) in terms of shuffleArgumentsAndStoreAbsentReceiver:.Add index 65 to primitiveVMParameter to answer a boolean indicating if the VM supports MUTLIPLEBYTECODESETS and hence understands the new alternative CompiledMethod header format.  If the VM answers nil it does not understand the new format.  If i answers false it does, but does not implement an alternate bytecode set.SimulatorProvide startInContextSuchThat: to allow avoidance of as-yet-untimulateable Newspeak image startup.Junk old symbolic method printing and use VMCompiledMethodProxy to defer on image''s symbolic printing.Add RelativeDetailedInstructionPrinter to allow comparing stack depths in methods with different bytecode sets. Refactor stack depth checking and add it to ceCheckForInterruptsFix allObjectsDo: to use freeStart as limit, not endOfMemory.Move promptHex: up to VMClass and fix it for negative numbers.Provide a set break block... dialog.Fix couldBeFramePointer: for StackInterpreter (negative stack pointers).Add ioLocalMicroseconds for Newspeak simulation.Cogit:Add NewsqueakV4 bytecode generators.Add extension bytecode handling to all relevant scan, compilation and map traversal routines.  Change signature of span and branch distance routines to take number of extensions.  Make byte0 include bytecodeSetOffset.Make genSpecialSelectorComparison cope with extensions on following conditional branch.Change block descriptor format (ceClosureCopyDescriptor: argument) to increase range of num args and numCopied with V4 bytecode.Eliminate generation of unnecessary long store code for prim err code, given that prologue already stores it.Abstract out block creation bytecode size, push nil detection and push nil bytecode size, and firstSpecialSelectorBytecodeOffset.Add the bytecode table initializers for NewsqueakV4 and clean-up all bytecode table initializers and generatorTableFrom:.Eliminate isBackwardBranch and isBranch from CogBytecodeDescriptor and use spanFunction instead.Move initializations in initializeMiscConstantsWith: around so that MULTIPLEBYTECODESETS et al are not zeroed when initializing the JIT after initializing the CoInterpreter.Fix pc mapping tests so they''re more efficient for in-image methods.  Fix several bugs, add new methods and simplify CurrentImageCoInterpreterFacade for multiple bytecode sets. Make tests check bc & mc selectors match.Rename traceLinkedSends to more general traceFlags.Add options: to in-image cog:selector: to allow testing MULTIPLEBYTECODESETS jitting.In disassembly, print bytecode pc next to annotation, and include selector in mapRePluginEliminate some iuses of cCode: inSmalltalk: which were disabling inlining.Slang:Change sharedCodeNamed:inCase: so that one can supply a bytecode rouitne name instead of a case index, e.g. sharedCodeNamed: ''commonReturn'' inCase: 120 => sharedCodeNamed: ''commonReturn'' inCase: #returnReceiver.Make bytecode switch generation scan for duplicate cases to avoid duplication in MULTIPLEBYTECODESET form.  Do so by refactoring bindVariableUsesIn: to bindVariableUsesIn:andConstantFoldIf:in:.  Constant-fold so that currentBytecode bitAnd: mask looks the same even if currentBytecode differers by multiples of mask + 1.Emit code at end of case as an expression.  Include goto nodes in this.Make gnuifier insert an assert at start of interpret that checks that the breakTable is the rigth size for MULTIPLEBYTECODESETS.Improve formatting of comments in TParseNode, etc.Fix bug with while creation that changed code generated if generated a second time.  This made it easier for switch generation to detect shared cases.Fix inlining of pointerForOop: et al by adding them to kernel: selectors.  Eliminate warning in allocateMemory:minimum:imageFile:headerSize: using pointerForOop:.  Use allocateMemory:minimum:imageFile:headerSize: in StackInterpreter>readImageFromFile:HeapSize:StartingAt:.Add breakSrc/DestInlineSelector for better inlining debugging.' id '845ad894-9bd6-460c-a858-0aaf8f01f4a4' date '18 November 2012' time '4:52:01.673 pm' author 'eem' ancestors ((name 'VMMaker.oscog-lw.211' message 'fixed a bug in the VMSimulator:breakCount can now be used' id 'bd23351a-d76f-984a-8c13-4a102aedb17d' date '17 November 2012' time '11:08:02.666065408 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.210' message 'because of the new call implementation, adapt #isCallPreceedingReturnPC' id '825aedb9-4486-c84d-bedd-87b09fa9fb62' date '17 November 2012' time '10:09:03.73116352 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.209' message 'included the changed call implementation:instead of using BL directly, push the jump back address first, to comply with CoInterpreter expectations' id 'f46008f0-431e-8b4d-8d3e-5a4d7a1e5089' date '17 November 2012' time '7:16:01.764425152 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.210' message 'fixed problem with wrong jumping offset:	when including a push instruction, we also need to compute the offset differently' id '8e9623e2-6a1a-b143-b93f-9198b43cafd3' date '17 November 2012' time '6:52:02.32232704 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.209' message 'Branch of VMMaker including LR push changes' id 'dac53fec-b0f2-7743-9ca5-0c5a645e821a' date '17 November 2012' time '5:55:01.072392448 pm' author 'lw' ancestors ((name 'VMMaker.oscog-eem.208' message 'Cogit: Call a spade a spade.  Rename bytecodePointer to bytecodePC.' id '97c8f02b-309a-4c65-80eb-644a640ca60d' date '2 November 2012' time '10:53:01.82116352 am' author 'eem' ancestors ((name 'VMMaker.oscog-lw.207' message '- added a class comment to the ARMCompiler- added CArg0Reg-CArg3Reg register numbers to ARMCompiler class.- moved Temp, Class, Result and RISCTempReg from r0-r3 to r7-r10, because then we don''t have to save them when calling back to the Interpreter (they are callee saved). Subsequently, we needed to update the tests.- Reimplemented genPassConst and genPassReg to reflect the correct ARM ABI, and not IA32 ABI.' id '052f916f-09bd-754b-80f8-2473b0654afb' date '24 August 2012' time '8:15:02.033261632 pm' author 'lw' ancestors ((name 'VMMaker.oscog-eem.206' message 'Rename compileProlog to compileAbort.' id '01f091ac-8e0a-4e7c-86ff-ba89dd10fafd' date '22 August 2012' time '10:46:01.601065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-lw.205' message 'depending on the configuration of the disassembler, ldmfd or push is returned.' id 'db76622e-2954-de47-b65e-026a6286a843' date '18 August 2012' time '2:31:02.085130816 pm' author 'lw' ancestors ((name 'VMMaker.oscog-eem.204' message 'Integrate primitiveUtcWithOffset and add David Lewis'' implementationof 64-bit usec prims to Interpreter (since they conflict with thosein InterpreterPrimitives).' id 'c98d555c-fbda-404f-9ebe-0a4e0c6dc800' date '16 August 2012' time '12:53:00.155065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.203' message 'Emit comments on blocks (TStmtList).Add another enumerator for TParseNode.' id '7f3eefb4-e338-4309-9ea9-4f45ab13f03e' date '14 August 2012' time '7:12:02.593294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.202' message 'Eliminate some warnings in cointerp using gcc.Fix the Gnuifier (register decls need to include the register keyword).Expand cppIf: at translation time if the xpression is a variable in theoptions dictionary, to cut down on e.g. noise ofMULTIPLEBYTECODESETS expansion of fetchNextBytecode..' id '3222e5fb-4b4b-4f71-b66a-10728b2fdf3d' date '14 August 2012' time '4:31:02.285425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.201' message 'Make sure youngReferrersList has room for every method sincebecome/cache implicit receiver can cause any method to gain ayoung reference.  Do so by counting methods in the zone.Refactor type name manipulation to moveextractTypeFor:fromDeclaration: from TMethod to CCodeGenerator.Rename CogMethodZone>>zoneLimit to freeStart.Fix assert in interpretMethodFromMachineCode.Fix return type of jumpTargetAddress & longJumpTargetAddress.Fix simulation of rewritePrimInvocationIn:.Nuke unused methodBytesFreedSinceLastCompaction method.' id '56cdd078-6771-401a-8bed-68402a0e283d' date '13 August 2012' time '6:30:00.983228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.200' message 'Fix another ^self slip uncovered by VMMaker.oscog-eem.196 fix.' id '5a8e1270-adca-4f75-9712-0c0deda989d2' date '10 August 2012' time '4:47:02.78816352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.199' message 'Rename parameter to eliminate translation-time warning.' id '1b0cff66-2042-49a7-ae74-5fa119256732' date '10 August 2012' time '2:09:02.546 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.198' message 'Make overflowing the youngReferrers list a hard error (appears tohappen quite often in Newspeak code).Clarify remapNSIfObjectRef:pc:hasYoung:.' id '03c8603b-bb83-42f6-8e04-a161f808aace' date '10 August 2012' time '1:58:03.62132704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-lw.197' message 'Fix of #concretizeConditionalJumpLong:.Refactoring of computeMaximumSize, with the goal to be translatable to C.' id '083108ce-456b-f845-be3e-9178a073a073' date '9 August 2012' time '9:20:03.75316352 pm' author 'lw' ancestors ((name 'VMMaker.oscog-eem.196' message 'Fix generation of CogAbstractInstruction typedefs now there aremultiple concrete subclasses.Eliminate a few warnings by setting return type of startOfMemory.Fix bug in inliner with leaf methods.  Fix ^self slip uncovered by fix.Elimnate unnecessary blocks around first args of cppIf:ifTrue:...' id '01753d70-0311-46ec-a06b-a8be6d8697fb' date '8 August 2012' time '2:36:04.293196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-lw.195' message 'Changed runCmpRdRd to allow compiler without FP support to skip this abstract test.Fixed two bugs in connection with conditional jumps, which make the three abstract conditional jump tests green.' id '688e3bfe-33cb-a74f-a6df-a41bee506615' date '8 August 2012' time '2:41:00.119359744 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.194' message 'Results of a nice pair programming session with Eliot.- Changed nopsFrom:To: to padIfPossibleWithNopsFrom:To:, because on arm, a nop is 4 byte long. Therefore, on IA32, this is padded with nop, on ARM, all 4byte chunks are filled with nop, the rest is zero-padded.- Changed the addressSpaceMask, because ARM (without Thumb) can only jump to 4-divisible addresses.- Refactored printStateOn: to accomodate for register names which are not part of RTLOpcodes- Fixed bugs in the jump-construction in ARM. When you want to reset the state, go back as far as #cog:selector:. There, the state is reset and you can step into the generation, if needed.' id 'c7f87bb5-3022-db47-9d6b-76fa8f5b2d13' date '7 August 2012' time '8:54:01.661359744 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.193' message '- added some more concretize methods, namely some move methods with multiplication (e.g. MoveRXwrR), and LoadEffectiveAddressMwrR- added tests for PrefetchAw, MoveCwR and PushR. MoveCwR is used in half the opcodes, whenever there is a word-constant. Therefore testing was important.- changed the preamble of Call, because for call, there should not be sane address checks.' id '930a01b6-2f8b-9b4e-b8c2-a1357af8276c' date '1 August 2012' time '2:00:02.49416352 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.192' message 'Implemented all the methods used when initializing the Simulator for any of the Stack organizations. Now the debugging begins.' id '78ce4bd7-8218-dc4e-9469-0c6ac53a8ced' date '31 July 2012' time '5:24:00.367065408 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.191' message '- added the shift opcodes- added AddCqR and SubCqR, which test for negative immediates, which allows the compiler to exchange Add r0, r0, #-2 to Sub r0, r0, #2 and thus saves 4 instructions, 16 byte- changed all the remaining AbstractInstructionTests test cases to allow multiple single stepping- added NegateR test as another place of documentation for the NegateR opcode (twos complement, not ones)- extracted the offset computation which is the same in all the different concretizeConditionalJump methods. Unfortunately, the computation includes a constant, which might get the address to overflow. In the image, this would result in a large integer, while in C, this would result in a negative number. Therefore, the methods signature is weird (CogAbstractInstruction>>computeJumpTargetOffsetPlus:).' id '646aea3c-a1b4-ab40-a9e6-46861b3c0aa2' date '31 July 2012' time '3:46:00.717228928 pm' author 'lw' ancestors ((name 'VMMaker.oscog-eem.190' message 'Document RTL opcode condition code assumptions.Remove obsolete genWriteCResultIntoReg:.Rewrite runAddCqR: to eliminate numberOfStepsIn:.' id '9184763d-c605-432b-b73e-8a3029eca4c8' date '25 July 2012' time '11:26:04.182196223 am' author 'eem' ancestors ((name 'VMMaker.oscog-lw.189' message 'Refactored all the data operations implemented so far and unified them. Subsequently added all the misssing data-operations (except for MUL, because that has a special format).Refactored the different load word operations to ARMCompiler>>at:moveCw:intoR:. Operations which can be implemented using the lowest byte of that word as offset may just write those numbers twice, or rather change just the upper bits of the last instruction, which specify the actual instruction.Added a test for the Add operation and made the AbstractInstructionTest>>testRunAddCqR &AbstractInstructionTest>>testRunAddRR green.Added "TODO" comments to those places in my code, where I am not sure about using extract method refactoring.' id 'b89b77ba-e03f-fb45-bb5f-ca55b387ee00' date '25 July 2012' time '7:14:02.657228928 pm' author 'lw' ancestors ((name 'VMMaker.oscog-lw.188' message '- Added STMFD and LDMFD opcodes to the ARMCompiler. FD refers to Full Decrementing stack, which should be the normal one.- added class variables for the conditional codes 0-14. They are used with the conditional jumps- introduced c:t:o:s: in an attempt to help illustrating the internal structure of ARM-opcodes and step (a small step) away from long constants. The problem is, that the type is 3 bit, therefore it''s not as good as I hoped for. But still...- added genSaveRegisters, where is genLoadRegisters?' id '0713a475-a782-614e-ab93-464cf9b1da16' date '25 July 2012' time '12:25:02.833098112 am' author 'lw' ancestors ((name 'VMMaker.oscog-eem.187' message 'Allow the opts dictionary to select the CogAbstractCompiler class.Use cCode:inSmalltalk: to collapse the integerObjectOf: &isIntegerValue: implementations down to a few.' id 'c8ef3fdf-8bac-484b-95c4-7234902bc88f' date '18 July 2012' time '5:34:02.22932704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.186' message 'Replace CogAbstractInstruction''s NumberOfRegisters andMachineCodeSize class vars with accessors.  Provide commentedsubclass responsibilities for these and genSaveRegisters.Eliminate IA32-specifics from CogARMCompiler>>dispatchConcretize.Add a rump CogARMCompiler>>genSaveRegisters for Lars to implement.' id '39e5f171-8ca8-4a8b-9430-bd393687a156' date '17 July 2012' time '3:22:01.801196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-lw.185' message 'Added multiple functions which are called when starting the simulator. The simulator still does require more methods.Pulled up genAlignCStackSavingRegisters:numArgs:wordAlignment:,because the ARMCompiler implementation would have been the same except for the constant. Added that constant as NumberOfRegisters to AbstractInstruction.' id '6f27e321-2227-2540-8b08-0e6a2cea3a99' date '17 July 2012' time '10:38:03.549130816 pm' author 'lw' ancestors ((name 'VMMaker.oscog-eem.184' message 'Parameterize Cogit creation with the ISA to use for Lars Wassermann''sARM work (!!!!).Add some ill-considered fluff about instance-specific behaviours inthe new object representation.' id 'dc778ede-e64d-4e6c-8d51-53a93e5f80de' date '11 July 2012' time '10:59:02.785196224 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.183' message 'Fix the simulated memcpy which used strncmp and hence stopped ata null byte.' id 'b044afd7-a1c6-4f20-ae81-96ceffa744e7' date '4 July 2012' time '6:25:01.27832704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.182' message 'Make arrayInitializerCalled:for:type: create literal string initializers,not arrays of characters.Convert embedded carriage returns in string literals into \n''s.' id '57f7399d-992c-49ef-8f0d-258d1b70027c' date '29 June 2012' time '6:09:01.49116352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.181' message 'Check for variable name clashes with C reserved words.Comment touch:' id '37760187-3a5c-4411-9352-754a4782fa29' date '29 June 2012' time '1:05:00.052196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.180' message 'Use workaround for broken Squeak4.3 progress exception whengenerating VM source.' id 'd742fc84-467e-47f9-be9e-4ba2dfa74d88' date '28 June 2012' time '9:04:02.604130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.179' message 'Fix str:n:cmp: implementation for short strings' id '1d88b152-8a22-4ca4-a96d-06022751a128' date '27 June 2012' time '8:23:02.744130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.178' message 'Fix receiver if isBytes: in printOopShortInner:.Include inst var offset in longPrintOop:.Make doesNotUnderstand: redirection warnings more informative.' id '8a31722d-f528-4495-bcf0-33544f9c93af' date '27 June 2012' time '8:14:03.004392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.177' message 'Add internalStackValue:put:.Comment the purpose of the prim response routines.' id '4d05e29b-763c-451f-9354-f5f0cef201a1' date '27 June 2012' time '12:25:03.819065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.176' message 'Some nicer syntactic sugar for determinign instances of Array ByteString Character and Float.' id '6bd2ee1f-4fbf-4172-8f57-1b7b5d7aa05c' date '26 June 2012' time '3:33:04.061228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.175' message 'Warn about api methods being removed.Move stringForCString: up to StackInterpreter.' id 'a4adf9bf-b651-46c9-babd-bcc27b62d599' date '26 June 2012' time '1:02:02.571228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.174' message 'Comment some return implementations.Make the array initializer creator non-static (clients can prepend"static" if required).Make frame flags printing more concise.' id '28bc956b-53cc-4f7c-a763-09fb8a576071' date '26 June 2012' time '12:28:01.609228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.173' message 'Fix simulator dev MNUs for unimplemented methods.' id 'abe6a6dd-40dd-4e34-98b2-ae778d5f7e03' date '26 June 2012' time '9:40:03.236228928 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.172' message 'Finish moving add of bytecodeSetSelector to fetchNextBytecode frominterpret.  Various simulation print/debug routines need to changeor revert.' id 'c6173744-0587-45bd-9e94-4f7996c90e47' date '26 June 2012' time '9:27:01.027098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.171' message 'Fix super expansions once again.  Eliding the final return is ok, butit means ReturnNode needs to add it back in.  Further, AssignmentNodewould need to do something special for super expansions withreturns at other than the last statement, so raise an error if seen.Move add of bytecodeSetSelector to fetchNextBytecode frominterpret so that e.g. dispatch in sqGnu.h doesn''t have to duplicateoffset by bytecodeSetSelector.' id 'c7fe70ad-ea30-4ba0-9645-a4060894480e' date '25 June 2012' time '7:52:03.199065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.170' message 'Fix super expansions of the form e.g.	ok := super foo.	...	^okParameterise primitive table generastion (for multiple primitive tables).Fix a send of remapOop:in: in the LargeIntegersPlugin.' id 'e776e9dc-4b1c-4857-b356-91910024d9c8' date '25 June 2012' time '2:10:01.061098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.169' message 'Add support for in-line literal array constants (currently ByteArrayonly).  gen code of form	 { static type aLiteralArray = { .... };		var = aLiteralArray;	 };for e.g.	var = self cCoerce: #[...] to: ''unsigned char *''Add a cutesy development-time MNU for redirecting to cogitand objectMemory if in a doit only.' id '932f0574-1b33-407c-8eb7-130fac92ab8d' date '24 June 2012' time '4:41:03.953392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.168' message 'Rename metaclassSizeBytes to metaclassSizeBits.Nuke unused shortPrintRelative:.' id '9735eb86-c5f3-405e-a4e2-0788c5eca335' date '24 June 2012' time '12:11:00.440032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.167' message 'Fix but in changeClassFrom:to: if receiver is a compact classinstance with a large header.Restore ye olde object printing style.Use bitClear: instead of wrong-for-64-bits bitInvert32 to clearseveral bit fields.' id '89fa3b26-2b31-41ee-861c-68062ff3e443' date '23 June 2012' time '7:36:01.93132704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.166' message 'Nuke bogus strlen: siumulations.  The one in VMClass is the true one.' id '3cf5bdaf-bad3-46dd-9836-33e806128aa1' date '23 June 2012' time '5:15:02.545065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.165' message 'Nuke tempCountOfMethodHeader: in favour of temporaryCountOfMethodHeader:.Refactor frame marriage to allow subclasses to specify saving of temps.' id '4e4f16aa-51e6-4806-8764-613b5d38d7df' date '23 June 2012' time '2:18:03.724228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.164' message 'Add shortPrintOop: to printReferencesTo:.  Fix cascade  transformationfor same.  Add addrtess offset to bytecode printing in printOop.' id '4d03e08d-186b-4360-8d3b-8d14d8c7db82' date '23 June 2012' time '11:23:02.726032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.163' message 'Fix warning due to wakeHighestPriority changes.Add abstractions for setting frame context and frame has context flag.Set all unused StackInterpreter frame offsets to #undefined in CoInterpreter.Fix asking to close the VM window twice.Ask before nuking the transcript.' id '886d6e40-a3f6-4483-bdfc-f71a846f0737' date '21 June 2012' time '1:41:03.577098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.162' message 'Make wakeHighestPriority filter-out zombie processes (to fixNewspeak/Glue crash).Describe a heap walking scheme for the new object representation.Fix typos and var name/method clashes.' id '36d9eb65-b5ba-4cf1-bb28-a02cb0d35e49' date '21 June 2012' time '10:38:03.29832704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.161' message 'Integrate ipv6 socket prims.  Fix a typo.' id 'd9d960b4-9f66-43a2-9d90-4fb58d541adc' date '7 June 2012' time '12:13:03.946359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.160' message 'Avoid assigning to a block argument in inlineCaseStatement-BranchesIn:localizingVars:Fix a comment.' id 'c9667f5a-0f6f-464a-99a7-d4ef8e7821b0' date '5 May 2012' time '3:33:01.70916352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.159' message 'Plugins:Fix ThreadedFFIPlugin''s preambleCCode for Pharo''s mingw config.Merge fix for JPEGReadWriter2Plugin (http://bugs.squeak.org/view.php?id=7691)Merge with VMMaker version s of plugins	JPEGReaderPlugin,	KlattSynthesizerPlugin	Matrix2x3Plugin	Mpeg3Plugin' id 'cbf7f95a-6fe2-4578-898e-47afb8524be4' date '2 May 2012' time '11:42:01.075130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.158' message 'Describe 60-bit immediate float format in CogMemoryManager.Decompose methodUsesAlternateBytecodeSet: into something thattakes a methodHeader.Slang:more robust test inliningSimulator:Replace some references to Transcript with coInterpreter transcript.' id '43778e3f-147b-4e94-aed1-1dbe8dbd58fa' date '21 April 2012' time '1:27:02.71232704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.157' message 'Stack/CoInterpreter/Cogit:Implement proper bounds checking for byte access to compiledmethods.  Raise errors for accesses outside initialPC to size.Simulator:Nuke an old breakpojnt method in the simulator.' id '9a11acbe-4a62-43ce-81de-934f351598cc' date '17 April 2012' time '11:08:00.662392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.156' message 'CoInterpreter:Provide a thorough flush primitive for CompiledMethods that discardsall machine code and makes sure that any contexts using the methodhave bytecode pcs.  Primitive #215 (same as 116 in the Stack VM).This is much slower than 116 (flushCache) since it has to enumerateover all heap contexts.Provide an xray primitive for CompiledMethod that answers if amethod has machine code, and if so if it''s machine code is frameless,and/or refers to a young object.  No primitive number.  Used to testthe above.Make printOopShort: print Association keys.  Useful forlongPrintOop:, and hence printReferencesTo: etc.Nuke theFP ~= framePointer assert in externalDivorceFrame:andContext: since both clients are careful enough to either avoidor deal with this case.Slang:Avoid annoying objectRepresentation already removed warnings ongeneration.Reformat some Slang code in trying to understand mis-inliningof [inlinedSend] whileTrue.  [I know, IIABDFI, but sometmes one has	to format to read and comprehend].Collapse generateWhileForeverBreakFalse/TrueLoop:on:indent:methods  to one taking a parameter.' id 'f03602f8-cb8a-4ae7-9a2e-921b5b77cf01' date '12 April 2012' time '6:35:03.010294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.155' message 'Refactor bytecode table initialization in the Cogits to mimic initializationin the Stack/CoInterpreter.  Refactor Cogit class initialization so thatonly the concrete class need be initialized.' id '09dcf403-f832-4bee-9665-6a3b9dfdeb11' date '6 April 2012' time '3:59:00.584 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.154' message 'Fix bad conceptual bug with become on methods.  Unlike full andincremental GC, the reference from a Cog method to its methodobject must not be remapped since they''re two halves of the sameobject.' id '5cbb57c7-0a54-4b7e-848c-1f292759f1fa' date '3 April 2012' time '1:42:00.802 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.153' message 'Fix header file generation for bytecodeSetSelector.Make sure BytesPerOop is initialized in initializeWithOptions:.Add longPrintReferencesTo:.Search for configurations in package extensions to VMMaker.Comment fixes.' id '8ace2909-a8c0-4bcf-8274-55850a71487d' date '31 March 2012' time '1:36:03.302359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.152' message 'Fix tricky context state bug that can cause crashes in the GC.Contextpart>runUntilErrorOrReturnFrom: may pop the last argument.Hence if a frame is married in this state its spouse context won''t haveits last argument slot initialized.  If later the frame is divorced and thearguments are not updated the last argument slot can be left with thisuninitialized slot and ... bang.The sloution is to update arguments as well as stack contents whendivorcing.  This is good also becausde it removes the VM''s assumptionthat method arguments are read-only, and that''s only enforced by theSmalltalk bytecode compiler, not by the bytecode.' id 'd39d62b0-45ca-4621-8f67-e3981bbe1875' date '3 March 2012' time '12:46:18 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.151' message 'Various clean-ups in debugging VM crash (fixes to follow).Provide checkedOkayOop: et al for checking (no fatal error).Correct some receivers in simulation (objectMemory vs coInterpreter).Provide shortPrintFramesInPage:' id '04f1d165-afc5-4f65-8b65-3be15e84b11d' date '3 March 2012' time '12:31:04.070294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.150' message 'Disable filling of the weakRoots table during fullGC.Move the boinds check to the point of insertion.' id 'f2172fad-371a-4789-a4e6-cae3c679bcd2' date '28 February 2012' time '4:38:02.982196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.149' message 'Fix assert failures in mapVMRegisters due to new multiple bytecodeset support.Report remappable oop and weak root table overflows as errors.Make the default VM generation scripts methods.' id '48257b02-cacd-4cc2-b747-c9e6df6e2530' date '28 February 2012' time '10:15:02.63 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.148' message 'Make multiple bytecode sets code cope with nilling of method duringinitialization, GC, etc.' id 'bb53aa60-4173-48ed-874b-dc0ff5a48992' date '20 February 2012' time '11:41:02.383294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.147' message 'Fix code egneration for the var: #bytecodeSetSelector declareC: ''#define bytecodeSetSelector 0'' hack hack.Perhaps var: #bytecodeSetSelector declareC: ''const int bytecodeSetSelector = 0'' is better?' id '9ebc4007-56c3-4a6d-8eec-a3de3e08a1fe' date '20 February 2012' time '9:55:03.663032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.146' message 'Support for multiple bytecode sets.  The sign bit of a method''sheader can select an alternative bytecode set.  This is implementedby adding 256 to currentBytecode when dispatching.  The overheadis avoioded for slow machines using macrology.  But in tests on afast MacBook Pro adding the offset can actually be faster becauseother effects dominate dispatch performance on modern machines(e.g. code placement).' id 'b6c14447-ad5d-4a58-8479-63e47d215c0b' date '19 February 2012' time '11:42:04.046261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.145' message 'Nuke obsolete SoundGenerationPlugin primitives.  SGP gets itsprimitives from AbstractSound translatedPrimitives.' id '7f3d6fd8-ce44-45ac-82f8-d0ed70d6f188' date '18 February 2012' time '5:45:00.971 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.144' message 'Make primitiveObjectAtPut fail if used to store other than aSmallInteger into the method header.' id 'bafb8042-095a-42f3-9058-ee7bd133da50' date '16 February 2012' time '2:24:04.09232704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.143' message 'Better error message for inability to thread.' id 'a6a2d0c7-ce82-480a-8ba9-58f96628dd82' date '12 February 2012' time '2:49:00.65732704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.142' message 'Load function pointer early in ThresdedFFIPlugin''s invocationchecking sequence.  This must come early for compatibility with the old FFIPlugin.  Image-level code may assume the functionpointer is loaded eagerly.' id '5b4312fa-5b57-4639-b12d-a45e13e5bbdc' date '1 February 2012' time '5:51:00.028425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.141' message 'Add some coverage analysis to check for unimplemented opcodesin the Cogit.  Implement AndCwR & OrCwR in CogIA32Compiler.' id '8dc3fa63-a227-4a8b-9f98-ba759064d001' date '24 January 2012' time '2:49:02.473130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.140' message 'Stop the backward jump compilation variables being localised tointerpret.  If this happens the unoptimized debug VM can behavevery differently to the optimized VMs.Use definedAsMacro in tryToInlineMethodsIn: instead of accessingproperties directly (i.e. as other senders of definedAsMacro).' id '2487009c-2c13-4609-b89e-77f0e195f433' date '9 December 2011' time '4:15:03.137032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.139' message 'Replace bogus fix for frameless foo: arg instVar := instVar code genbug (apparent failure to pop spills on frameless return), with correctfix, which is not to flush the top of stack when pop/storing receiverand/or temp vars.  i.e. ssFlushUpThroughReceiverVariable: &ssFlushUpThroughTemporaryVariable: skip the entry at simStackPtr.' id 'c2849383-9768-4948-b9b2-a5c22d482b07' date '18 November 2011' time '9:38:00.927098112 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.138' message 'Fix frameless foo: arg instVar := instVar code gen bug (failure to popspills on frameless return).Correct receivers of noAssertMethodClassAssociationOf: forsimulation (starting up a Newspeak image).Bring CurrentImageCoInterpreterFacade up to date for simulation.Bring NewCoObjectMemorySimulator up to date for simulation.Make Alien plugins simulate data manipulation calls.Use more hex printing in frame/oop printing.Log time without milliseconds.' id 'f9a63bdf-7bbc-4ae5-9634-ecd6fd814c9d' date '17 November 2011' time '4:02:03.96532704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.137' message 'Fix primitiveContextAt[Put] for non-contexts (ContextPart subclassesother than MethodContext including BlockContext).  stObjectAt[Put]could fail so args should be popped only on success.  Fixes failuresin ClosureCompilerTest>testSourceRangeAccessForBlueBookInjectIntoas of VMMaker.oscog-eem.118.Add convenient shortPrintFrame:AndNCallers: for debugging.' id 'fbe64d98-6b1a-4c5b-b3f3-d2b1091406dc' date '9 November 2011' time '11:26:01.54332704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.136' message 'Fix error codes for at: and at:put: primitive so that for non-indexableobjects they fail with #''bad receiver'', not #''bad index''.' id 'c62e0f35-616c-4547-b4e7-46765111b6a9' date '7 November 2011' time '11:20:04.22532704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.135' message 'Filter-out attempts to create MNU pics with new selectors.  FixesSt ane Rollandin''s crash of 21/10/2011:	[((Compiler new evaluate: (''Beuh'' ifNuk: [yo]))		on: Error       		do: [:ex | ex description]) printString] fork' id '1c85e5ef-0fe8-4a1e-9421-ff0d53845fba' date '25 October 2011' time '11:21:03.578065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.134' message 'Fix remaining bug in context access fixes of VMMaker.oscog-eem.119.stObject:at: and stObject:at:put: need to use stackPointerForMaybeMarriedContext:not fetchStackPointerOf:, since the context''s stack pointer may be stale.Fix send trace printing.  Interpreter sends need also to be printed.(A better fix is probably to redo sendBreakpoint: but this will serve for now).N.B. this reassigns the sendtrace flag values.Add primitiveNotEquivalent with prim # 169.Merge with VMMaker-oscog-dtl.125/VMMaker-oscog-EstebanLorenzano.124for the BytesPerWord generation fixes.' id 'a0d46c48-3d9a-43f9-a769-51f31ce120e9' date '19 October 2011' time '10:36:04.198032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.133' message 'Tiny performance tweak to bytecodePrimMultiply.Added findStringBeginningWith: debugging facility.' id '1ca6557f-8901-4791-8473-e2c09d25bbf3' date '7 October 2011' time '3:56:02.755392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.132' message 'Fix yet another slip in Cogit>>lookup:for:methodAndErrorSelectorInto:for cannotInterpret: cases.  Fixes Mariano''s crash as of 2011/10/03.' id 'bd35186a-b5f6-490a-ad8b-2a9c487674fa' date '4 October 2011' time '7:41:03.327261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.131' message 'Make a couple of comments more honest.' id '7a963469-105d-4374-9162-62c6dbd745f4' date '3 October 2011' time '2:20:04.142032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.130' message 'Slang strikes again.  #interpret => #interpret asSymbol.' id '1460ba33-1ef5-45e4-a761-45df38a32de5' date '3 October 2011' time '2:13:02.568359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.129' message 'Deal with some realities in the minValidCallAddress checking code.At least on Mac OS under gcc -O, gcc will reorder code so thatprimitiveFail comes before interpret.Also firm up the signatures of rewriteInlineCacheAt:tag:target: &rewriteCallAt:target:.' id '1b6f9029-666c-4ca4-b58c-9973784bb7ba' date '3 October 2011' time '2:02:00.779261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.128' message 'Fix regression in object-as-method/cannot-interpret for single andpolymorphic inline cache misses (lookup:for:methodAndErrorSelectorInto:).Fix formatting bugette in context printing.' id '314823f6-cd6c-468f-9183-843b558f630b' date '27 September 2011' time '5:43:03.402392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.127' message 'Fix MNU PIC creation not to answer an error code to the interpreter.This is the demon call 0x00000013 bug.' id '35927684-7e1e-4ff8-ad9f-90ecec7bb9a0' date '23 September 2011' time '1:44:02.970032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.126' message 'Cogit:Fix cPICEndSize mis-computation caused by using rounded-upclosedPICSize.  Compute cPICEndSize and /then/ round-up closedPICSize.Fix for simulation callTargetFromReturnAddress: asserts in relocation calls.' id '6af3249f-6c5c-4e1b-8a69-f59e542154c5' date '22 September 2011' time '6:02:00.215196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.125' message 'Cogit:Add callsite link/relocate checks to catch the call 0x00000013 MNUcallsite relinking bug.Reduce the size of the simStack to something proportional toLargeContextSize.CogMemoryManager:Use a 5-bit format field to encode all of indexability, weak/ephemeron,hence gaining a bit.' id '539c10db-ab19-4fc7-ada1-4ffae6463ed1' date '21 September 2011' time '3:24:04.190130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.124' message 'CoInterpreterMT:Fix an assert failure/thread state issue with threadSwitchIfNecessary:from:.Make willingVMThread return highest priority thread wanting ownership.Interpreters, as part of CogMemoryManager work:Nuke assertClassOf:is:compactClassIndex: in favour ofis:instanceOf:compactClassIndex: et al.  (Next step is to hide compact classindices in ObjectMemory, by implementing isFloatOop:, isFloatNonInt: etc).Refactor various float conversion routines to call the core floatValueOf:	method.Eliminate a SLang warning in compactClassAt:.Elsewhere, as part of buildup to changing semantics of translating symbols:Fix the one use of #Symbol => C string in initializeExtraClassInstVarIndices where#Array was expected to translate to "Array".Convert type sends to pragmas in various pragmas.CogMemoryManager:Transcribe David Ungar''s generation scavenger into Smalltalk.' id '6dc066ca-29ab-4d2f-b988-60cc2c425779' date '9 September 2011' time '5:34:01.628032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.123' message 'Cog:Refactor, moving isContextNonInt:, instSpecOfClass:and sufficientSpaceToInstantiate:indexableSize: to ObjectMemory.Fix the 1Gb allocation bug, Use formatOfHeader: instead of raw foo >> 8 bitAnd: 15.Fix gcc compiler warnings in getStackPointer and printOop.' id '9c524903-b0c7-46a8-a37a-5dfda6fcd1f3' date '6 September 2011' time '4:36:03.373359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.122' message 'Slang:Fix bug in generaitng code for builtins, specifically integerObjectOf:.In an interpreterProxy send, the receiver should be elided only forthe kernel builtins that do memory access, not for interpreterProxy''sprotocol.  SO builtin: => kernel: & builtin:.Refactor the sizeof: code so that e.g. self sizeof: aByteArray answersthe size of the byte array (i.e. alignedByteSizeForClient: => alignedByteSizeOf:forClient:).Cog:Move noInlineTemporary:in: from CoInterpreter to StackInterpreterRemove the undef of halt following includes of sqAssert.h.sqAssert.h should not implement halt.  This will temporarily breakbuilds until sqAssert.h is updated.Make Cogit''s halt: invoke warning, not error.' id '3dcdc732-75f6-4bc4-934c-9d76770dfbb4' date '5 September 2011' time '10:08:01.256130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.121' message 'Cogit/CoInterpreter: eliminate some compiler warnings.' id '8561f7f7-973d-4e7a-bf2d-5ae21509b2c5' date '22 August 2011' time '4:55:00.355065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.120' message 'Cogit:Put in a hard check that the number of opcodes allocated is sufficient.Bring the in-image compilation facade up-to-date.This was done to check that compiling primitive at: doesn''t generatetoo many opcodes now the interpreter primitive is caled on failure.' id '7b52067f-d52d-4a27-99ee-d5cd6639f3a2' date '22 August 2011' time '10:28:04.278392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.119' message 'CoInterpreter/StackInterpreter:Fix object accessing prims (at:, at:put: & size 60, 61 & 612) for contexts, becauseprimitives  60-62 are used for the mirror primitives in ContextPart (object:at: et al).Fix now obsolete, but still used primitiveContextAt et al (primitives 210, 211 & 212)to be varargs, since these might also be used from mirror primitives.  Pull thetemporary:in:[put:] code into a non-inlined wrapper to avoid bloating the commoncase.Cogit/CogObjectRepresentationForSqueakV3:Fix genInnerPrimitiveAt: & genInnerPrimitiveSize to fail for context receivers.Fix genInnerPrimitiveAt:, genInnerPrimitiveStringAt: & genInnerPrimitiveSize tocall the interpereter primitive on failure, to get the error code (not yet avoidingthe call if the method doesn''t use the error code; one thing at a time).Add symbolic constants for accessing instSpec/formatOfHeader:.  Make theseand their analogues for compact class index access macros.Slang:Fix TStmtListNode as-expression output for the forst or: in InterpreterPrimitives>primitiveSize.' id 'dedbaf07-59d6-4a97-b10a-af8a7f631287' date '19 August 2011' time '1:57:02.540098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.118' message 'Fix bug in checkIfValidObjectRefAndTarget: for the Newspeak VM.Fix assert uses of methodClassAssociationOf: tonoAssertMethodClassAssociationOf: in cases where a CogMethod''sobjectHeader may be invalid (i.e. during relocation).Fix some local variable name conflicts with globals.Add a longPrintOop: that printOopShort''s pointer fields.In the Newspeak VM hook up an anonymous method with one of itscogged forms if its original cogged method has been freed.Make the leak checker a little more informative.Use super for CoInterpreterMT>>loadInitialContext.' id '3b55b5fa-083b-4528-acc2-bb5f7aa1a3fe' date '17 August 2011' time '4:40:03.736130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.117' message 'Cogit:Fix bugs described in the "[Pharo-project] Troubles with #flushCache and #run:with:in:"thread http://lists.gforge.inria.fr/pipermail/pharo-project/2011-July/050858.html.The PIC machinery wrongly treated invoke-as-method sends as MNUs.Closely related, finally fully implement PIC MNU cacheing where, by calling a specialabort, a PIC is able to record that a gven selector is an MNU for a particular class.Speeds up a simple MNU benchmark by 33% (with more performance the deeperthe receiver''s cass hierarchy is).Refactor method cache flushing''s interface with the Cogit.  If doesNotUnderstand: isever redefined all closed PICs with MNU cases must be discarded.Change type of JumpLong: and JumpRT args for fewer casts.Comment typos (cePushImplicitReceiver => ceImplicitReceiver).CoInterpreter:fix receivers in primitiveClone.  Fix assert failure in cloneContext: by avoidingObjectMemory>>clone:.refactor printOopShort: and use this in new printMethodDictionary(Of), andalso in findString.Slang: Fix translation of $'' which needs to become ''\''''.' id 'a21465f6-8cd9-4284-8638-c30d5de21ce9' date '16 August 2011' time '2:31:00.507359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.116' message 'Improve validation checks for super expansion.  Args need to bevariables that have the same names as corresponding args in supermethod.  Fix two cases of disagreement (luckily this affects onlyassert code so no need to rebuild production VMs).' id '401abad7-7558-4242-8311-b5c362e31a58' date '9 August 2011' time '12:04:04.137425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.115' message 'Slang:Fix messageReceiverIsInterpreterProxy: to exclude builtins (byteAt: et al).Fix pluginClassesUpTo: which used to always answer a single class.' id '9e410250-c808-4f95-a591-ef67d54f978e' date '8 August 2011' time '11:26:03.456261632 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.114' message 'CoInterpreter: fix bad bug with primitiveClone of a compiled method.The clone should be an uncogged method irrespective of the state ofthe receiver.  Symptoms include rare crashes in become: duringMethodDIctionaryTest which copies a test method.  Fix by adding aversion of primitiveClone to CoInterpreterPrimitives.  Also change thelastPointer*: methods use of literalCountOf: so the code is inlined.Remove the now unnecessary overrides in newCoObjectMemory andadd an assert to headerOf: to spot stale references to cog methods.Cogit: Fix potential bug in become: with cogged methods.  Sincebecome can cause an object to gain a new reference cogged methodsthat gain new references must be added to youngReferrers.  Do thisby replacing inFullGC with gcMode and having a separate code pathfor remapping machine code for become.  Add pre/postBecomeActionmethods to handle the necessary housekeeping.Slang: builtins sent to interpreterProxy still need to be invoked oninterpreterProxy, i.e. interreterProxy->foo, not just foo.  Indentstatement lists emitted as expressions for readability.' id 'c9755705-e606-4e32-92f1-228c68774f30' date '7 August 2011' time '12:37:01.304196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.113' message 'Cogit: Refuse to jit noContextSwichValue until the relevant entryoffset has been computed.' id '14a788ee-4796-42f0-8d5f-13ec19ffe511' date '28 July 2011' time '10:45:01.193 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.112' message 'Newspeak Cogit:Add missing incremental GC code for implicit receiver cache.Fix markLiteralsAndUnlinkIfUnmarkedSendOrPushImplicit:pc:method:for empty cache.Cogit:Remove C compiler warnings in addressIsInFixups: & methodFor:.Slang:Fix bug on inlining that would redefine method arguments (seeTMethod>inlineFunctionCall:in:)Consequently correct some CoInterpreter methods which wereaccidentally getting the right signature.Also use TMethod>declarationAt:put: in more places.CogMemoryManager:Add an initial CogObjectHeader class.' id 'efadaaf2-156f-49df-95df-ea610c02b6b2' date '26 July 2011' time '3:15:00.016065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.111' message 'Fix bug in remapNSIfObjectRef:pc:hasYoung: implicit receiver sendcacheing.  If cachew tag or value are young method must remain inyoungReferrers.Fix comments in integer conversion routines.  Its not a compiler bug,but it is undefined behaviour in C.Fix some typos in CogMemoryManager header.Add an initial object header class for the new object representation.' id '119eefd3-e409-4891-9741-ae7fa472607e' date '25 July 2011' time '11:27:00.09916352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.110' message 'Introspection to the rescue.  Fix generating bogus defines forSTACKVM, COGVM, COGMTVM et al using >> and literalsDo: ;)' id '3a1a55cd-2400-49d1-9252-f056b7d19af2' date '21 July 2011' time '3:40:02.281032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.109' message 'Fix ffiSupportsCallingConvention: which wasn''t doing anythingsensible.Reolace uses of == for object comparison with = since in simulationoops may be large integers and hence fail for == and succeed for =.' id '15132349-f464-4cfe-8200-20a6d6b201d3' date '21 July 2011' time '2:36:03.352999999 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.108' message 'Nuke ReentrantFFIPlugin in favour of ThreadedFFIPlugin, usingcppIf: COGMTVM to select threading-specific code.  This so thatthere only needs to be one SqueakFFIPrims.c for the reentrant(non-threaded) and threaded FFI plugins.  This is a much easierfix than somehow allowing the two files to exist side-by-side inthe file system.' id '06af30e4-7c67-4259-88dc-8ee2a10499c4' date '21 July 2011' time '1:45:02.278196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.107' message 'Fix generation of cogit.c for MT VM.  It must not define COGMTVM.' id 'e97a2dd5-e1e7-4281-bb49-cb97be511631' date '20 July 2011' time '10:40:00.60016352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.106' message 'Merge BitBlt rule 41 changes from IgorStasenko.96.Fix loop bounds bug in initializeExtraClassInstVarIndices.' id '5e185229-3c2a-4912-a60f-e2a42fa627cb' date '19 July 2011' time '3:36:03.301032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.105' message 'Work around C compiler optimization bug with max negative valuein signed32BitValueOf: (fixes AlienSunit tests).Add vmParameters 70 & 71, the interpreter proxy major and minorversion numbers.Make CoInterpreter & CoInterpreterMT generate the same interp.hby defaulting COGMTVM to 0.  The two differing was insane.Speed up primitiveFail by using the primFailCode not trick.' id '79234f80-ee6a-404c-9e5c-2134e3b76463' date '18 July 2011' time '4:43:03.161098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.104' message 'Cogit:Fix ceImplicitReceiverFor:receiver:class: cache write to add method toyoungReferrers if eithe rthe class or the mixin are young.Change receiver of various longAt: and longAt:put: from coInterpreterto objectMemory (the ultimate destination).' id '3ca0990a-ad74-44f1-bd92-a8be337813a1' date '15 July 2011' time '6:46:03.019294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.103' message 'Cogit: StackToRegisterMappingCogit Newspeak bytecode support.Move endPCOf: from CoInterpreter into Cogit and use the bytecodetable to determine it.Rename cePushActiveContext[Trampoline] to ceActiveContext[Trampoline]since there''s no push in the StackToRegisterMappingCogit.Simulator: Add a NewspeakStackDepthFinder to check NewspeakStackToRegisterMappingCogit-generated code.' id '35c0fb21-5a12-4d75-99de-d55a76fde39f' date '14 July 2011' time '5:49:00.173130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.102' message 'Move inline cache probe for implicit receiver nto the trampoline,avoiding the slow interpreter cal for the common case.  Impliessupporting object references in the generated run-time since theclass fetch accesses SmallInteger and the compactClassTable.Fix NewObjectMemory>>lookupAddress: for Newspeak images(use thisClassIndex and classNameIndex from simulated image, notfrom simulating image).Fix parenthesizing in ? : with single statements.' id '3f0d76c6-2e4c-464d-9b74-0b56caaf0eb6' date '14 July 2011' time '1:11:00.075 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.101' message 'Another couple of option: NewspeakVM.' id 'dd839613-bebe-47f7-94a8-1bf3667f253f' date '13 July 2011' time '12:56:03.003032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.100' message 'Sigh; generateNewspeakRuntime must of course be option: NewspeakVM' id '0f2efd1e-0fd4-4544-b32b-91a0b38c6354' date '13 July 2011' time '12:29:03.19732704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.99' message 'IA32ABI Alien plugins: Make accessor primitives fail for null-pointers.Fix compilation of StackToregisterMapping assert VMs (isQuick: ->isQuickPrimitiveIndex:).Simplify some cppIf:''s to eliminate generated braces.' id '3a15adab-a4d3-49c1-82a1-6ed02b158658' date '13 July 2011' time '11:14:01.629130816 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.98' message 'Fix return from ALien callbacks on Stack/Cog VMs.  The instruction-Pointer must be pushed and the page''s head frame pointers set sincewe''re returning from the page to the callout context.Make the Alien plugins use the new returnAs:ThroughCallback:Context:callback return plumbing for the older primReturnFromContextThroughreturn primitive.Implement majorVersion and minorVersion for the interpreter proxyand get the Alien plugins to test for minorVersion >= 12 (the newplumbing).' id '120a176d-c5ad-4b31-829d-2236efbb9278' date '12 July 2011' time '1:32:01.706 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.97' message 'Fix a missed trick in internalExecuteNewMethod (we know we''re inthe interpreter here).Add C stack alignment asserts to the callback entry-points.' id 'e5a88d4c-b638-4228-8a1d-39d5af02c8d8' date '11 July 2011' time '12:42:02.626130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.96' message 'and ceExplicitReceiverTrampoline passes its argument inSendNumArgsReg.  Doh!' id 'b9686449-0418-4b93-b40f-40049e108776' date '7 July 2011' time '2:48:02.035392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.95' message 'Cogit:push explicit outer send receiver is a 2 byte bytecode (doh!)' id '50e172c1-9923-4c81-a69e-7ab4f0eee0af' date '7 July 2011' time '2:18:02.792359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.94' message 'A nt-very-good checker for missing #asSymbol slips.' id '822402e5-3f77-4920-829f-9b4791abdc78' date '6 July 2011' time '5:55:00.513294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.93' message 'Sprinkle more <option: #NewspeakVM> pixie dust to avoidNeewspeak contagion creeping into the standard VMs.' id 'a811c33a-a695-452b-9090-e0984e33c100' date '6 July 2011' time '3:32:01.428065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.92' message 'CogVM: allow cogMethods to refer to bytecoded methods without the bytecodedmethods having to refer back, for Newspeak anonymous accessors.  Since inlinerelinking/unlinking machinery needs cog metods to have correct selector andsicne accessors shared between classes using various selectors the VM can''tdepend on accessor methods having the right selector.Fix bug in ceSICMiss: for dynamic supere send relinking.  Use receiver arg, notobject at wrong offset on stack.Fix bug in computeEntryOffsets.  Compute dynSuperEntryAlignment.Fix bug in genDynamicSuperSendBytecode.  Anotate the send as IsNSSendCall.Fix bug in incrementUsageOfTargetIfLinkedSend:mcpc:ignored:.  UseoffsetAndSendTableFor:annotation:into: to get offset.Fix bug in remapNSIfObjectRef:pc:hasYoung:.  Remap the mixin slot.Fix bug in methodClassOf:.  Don''t assume methodClassAssociation is non-nil.Move a few more interpreter/object memory methods into the <api>.Slang:When generating code for the interpreter or cogit also collect the api methods ofthe dual so that CCodeGenerator>>selectorReturnsPointerToStruct: can answercorrectly for methods invoked in the api.' id '8e895f7e-f712-4117-8e8a-cbc8ebf37b00' date '6 July 2011' time '2:41:01.74416352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.91' message 'Fix slip in ceSICMiss: that popped too much in dynamic super sends.Refactor implicitReceiverFor:mixin:implementing: so receiver isfetched correctly in machine code and interpreter.Refactror declaring of interpreterVersion.Results in apparently functional StackInterpreter Newspeak VM.Add a send breakpoint for push implicit receiver.' id 'd5a27862-3af2-4716-b40e-acfc86943ae7' date '4 July 2011' time '3:04:02.557294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.90' message 'Slang:Fix translation of statement lists in context of ? : .Cogit:Fix remove inst var typos die to inst var renames.Fix assert.Cog Interpreters:Informative printing for Aliens.' id 'efb3c8a3-db33-4387-b560-49b3d9f04cde' date '30 June 2011' time '4:18:03.963425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.89' message 'Make sure STACKVM''s interp.h includes NewspeakVM define if appropriate.Fix shortReversePrintFrameAndCallers:for null framePointer.  If erroron startup (eg. bad required compact class indices) platform errorhandler will attempt to dump a null stack.VMMaker:Check for generation being required after creating code generator toensure correct initialization.' id '36670f7a-02f4-4cc2-85c1-491c954095d3' date '29 June 2011' time '12:15:00.316032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.88' message 'Slang: fix TAssignmentNode for as argument (enclose in parentheses).VMMaker: provide option: method tag to filter-out ceDynamicSuperSend:to:numArgs:.Eliminte cogit: method tag in favour of <option: #SomeKey>' id '364d19cb-0842-41b5-bf54-bbd79b230bf6' date '28 June 2011' time '11:02:03.970359744 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.87' message 'Cogit:Implement genDynamicSuperSendBytecodeImplement unalignedAt:[put:] in CogAbstractInstruction & subclasses.Rename the explicit/implicit receiver trampolines to eliminate "Push".Fix C compilation of the Newspeak Cogit VM (at least on WIndows)' id '5587fcb2-10cb-409d-9ebb-cdbd66bd910a' date '27 June 2011' time '7:17:01.232130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.86' message 'Integrate Igor''s fix from http://code.google.com/p/cog/issues/detail?id=46.Modify to use #= instead of #== (important in the simulator)' id '9fa2ae33-553f-4e81-b8d8-45c5ba299256' date '27 June 2011' time '4:09:01.16616352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.85' message 'Cogit:Implement GC update and unlinking of pushImplicitReceiver anddynamic super sends.Implement dynamic super sends and push explicit outer.' id 'ddb80040-b647-4723-a62b-313ff83eb733' date '27 June 2011' time '3:48:00.385 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.84' message 'Cogit/CoInterpreter:Fix implementation of cePushImplicitReceiverFor: (support unalignedaccess - but only in simulation; what about translation??).Fix typo for fetchClass: in dynamicSuperSendBytecodeSimulator:Provide unalignedLongAt:[put:] and a test.Nuke  couple of unsent methods.' id '65d3d0e0-a9bb-4d56-ad24-df44e8dc0e37' date '25 June 2011' time '2:42:02.040294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.83' message 'Simulator:Eliminate duplication of byteAt:[put:], shortAt:[put:], fetchFloatAt:into:et al in simulator hierasrchy by always sending to objectMemory.Provide disassembleCodeAt: which does trampolines and methodsCogit:Fix typo bug in cePushImplicitReceiverFor:' id '800edb16-ae6e-4126-a375-b7a065715af2' date '25 June 2011' time '12:59:02.805196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.82' message 'Cogit:Implement Newspeak pushImplicitReceiver compilation.Implement Cogit side of dynamicSuperSend:- Make dynamicSuperSend entry-point alignment different from   send and superSend aligments.- generate the trampolines- fix offsetAndSendTableFor:annotation:into: for dynamicSuperSendVM:Fix symbolicMethod: for Newspeak bytecodes.Slang:Fix cppIf:ifTrue: for simulation (must return values)Plugins:Fix typo in FilePlugin>>fileRecordSize (slippery Slang)' id 'a5c2b2b1-450c-403b-824b-e4c75907b284' date '24 June 2011' time '8:30:01.585 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.81' message 'Cogit:Add IsNSSendCall for mapping Newspeak dynamicSuperSends.Refactor processing sends and mapped pcs in the method map toinclude IsNSSendCalls in the Newspeak VM.  UseoffsetAndSendTableFor:annotation:into: to assign offset and sendtable for linked sends using block for multiple return values pattern.Slang:Implement beta reduction for literal blocks sent value[:value:*] forinlining offsetAndSendTableFor:annotation:into:.Implement an asSpecified form of inlining where only methodsmarked <inline: true> are inlined.Fix expansion of cppIf: in expression contexts.Have define nodes print their name, not their value.Misccomment typos and fix to class name in openCogMultiWindowBrowser' id '63e1eab1-b44b-462e-ae5c-f2fc5bbcda4b' date '24 June 2011' time '10:14:01.355065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.80' message 'Initial Newspeak support in StackInterpreter.Add support for conditional compilation so that CoInterpreter canbe generated optionally with Newspeak support.  Can''t do this withinheritance, but could do it with mixins, hence for now this hack.FooInterpreter class>initialize => FooInterpreter class>initializeWithOptions: aDictionaryand initializeMiscConstants => initializeMiscConstantsWith: optionsDictionary.VMMaker options: pairs provides access to these options, hence e.g.	VMMaker		generate: CoInterpreter		and: StackToRegisterMappingCogit		with: #(NewspeakVM true IMMUTABILITY false)		to: ...and	CoInterpreter initializeWithOptions: (Dictionary newFromPairs: #(NewspeakVM true)).	CogVMSimulator new openAsMorph; runUse e.g. self cppIf: NewspeakVM if... and self cppIf: COGMTVM if... as appropriate.Add Newspeak bytecodes to StackInterpreter.Refactor FilePlugin simulation into FilePlugin to eliminate duplication of code in various interpreter simulator subclasses.Provide strncpy strcpy and strcmp implementations in VMClass for simulation.' id '0f62b9a2-0aef-4d39-8077-32f53b6e0e39' date '22 June 2011' time '5:27:04.232392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.79' message 'Use methodReturnValue: where appropriate in Alien plugins fornewspeak-style VMMirror argumentCount shenanigans.Clean up the Newspeak primitive table a little.' id 'd1cc45e3-9cc0-4399-a644-2bacab32b83b' date '19 June 2011' time '3:15:04.287196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.78' message 'Fix interp.h header generation.  Only Interpreter classes should beinvolved.' id '412444c6-36dc-48be-b5cd-a6ebc4ade0bb' date '16 June 2011' time '2:35:03.275392448 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.77' message 'Modify interp.h generation so that it includes defines for VM_PROXY_MAJOR & VM_PROXY_MINOR.  Seehttp://lists.squeakfoundation.org/pipermail/vm-dev/2011-June/008460.html.Add NewspeakVM and IMMUTABILITY to VMBasicConstants to allowcppIf: chicanery to harmonize NewspeakInterpreter code with otherVMs.' id '5ff1c24c-6347-4766-a661-f7f0d3f3db99' date '16 June 2011' time '1:59:00.745 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.76' message 'Fix primitiveChangeClass and primitiveAdoptnstance in the NewspeakVMto allow changing the class of the receiver to a compact class sinceone can always set the class field to a class even if that class is acompact class; one just ends up with a non-compact instance of acompact class.  Of course, the other way around can''t work withouta become:.' id '3ff12599-c75e-4b1d-ae5d-3eb3fc3c9263' date '15 June 2011' time '1:03:02.594065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.75' message 'Provide generate:and:to:platformDir:including:.  Commentgenerate:to:platformDir:including: correctly.' id 'e1bb08e3-482d-4bfd-a416-d203d9fe4c57' date '7 June 2011' time '5:02:00.868425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.74' message 'And of course all VMs could use a 4 argument primitiveExecuteMethodArgsArray.Harmonize the implementation.  Includes an untested one forInterpreter.' id 'a5f3613b-64bd-404a-982e-3528889c1d07' date '7 June 2011' time '3:21:02.765 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.73' message 'Newspeak''s VMMirror requires a 4 argument primitiveExecuteMethodArgsArray.' id '8ef988bb-d4c8-479d-a4d8-75f1ddc5f248' date '7 June 2011' time '11:11:04.178 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.72' message 'Fix sendInvokeCallbackContext: GC bug.  Cannot separatejustActivateNewMethod from fetchContextRegisters: if there couldbe a GC in between since IP is updated relative to method, notnewMethod.Add optional send and prim tracing to Newspeak VM (helped trackdown above bug).Merge with VMMaker.oscog-dtl.71 for Montgommery fix.Fix VMMaker''s plugin selection so that all plugins selected if platformis ''Cross''.Classify unclassified memory access methods.' id 'dcc88b7d-4b47-4bf1-8400-d1c6499e87d2' date '6 June 2011' time '1:45:00.475228928 pm' author 'eem' ancestors ((name 'VMMaker.oscog-dtl.71' message 'Montgomery multiplication bug fix from <http://lists.squeakfoundation.org/pipermail/vm-dev/2011-June/008350.html>Date: Sat, 4 Jun 2011 00:29:37 +0200From: Nicolas Cellier <nicolas.cellier.aka.nice@gmail.com>To: Squeak Virtual Machine Development Discussion <vm-dev@lists.squeakfoundation.org>Subject: [Vm-dev] BUG in Montgomery multiplicationRecent addition, montgomery multiplication, has a bug:it fails to correctly take last carry into account...You can see it with this example (if you have the Smalltalk mock up) :| m mInv a b |m := 15485863.mInv := 256 - ((m bitAnd: 255) reciprocalModulo: 256).a := 8826019 digitMontgomeryTimes: 8826019 modulo: m mInvModB: mInv.b := 8826019 naiveMontgomeryTimes: 8826019 modulo: m mInvModB: mInv.self assert: a = bCorrect result is given by naive mock up : 10626344The primitive gives a wrong result.I attach a correction for the LargeInteger plugin (and for theSmalltalk mock up too).Sorry for uncomplete tests.Please, update VMMaker ASAP.Nicolas' id 'f888ab51-e5b6-48f9-b48b-30f92e61ee50' date '4 June 2011' time '1:27:00.519425152 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-eem.70' message 'Make pruneUnreachableMethods transitive (to eliminate all theNewspeak immutability methods from the non-Newspeak VMs).' id '36b63465-1b05-401f-bcb2-f9cae49422b8' date '2 June 2011' time '12:41:02.462065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.69' message 'Move the inIOProcessEvents switch code back into each ioProcessEventsimplementation, since various platform code calls ioProcessEvents,not just the interpreter.' id 'fd9c171e-3731-4093-912d-ad8fefb4800c' date '1 June 2011' time '4:45:00.55716352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.68' message 'Add NewspeakInterpreter to this package.  Needs rev 2384 or betterof http://www.squeakvm.org/svn/squeak/branches/Cog.  Move somemethods up from NewObjectMemory to ObjectMemory.Merge with VMMaker.oscog-dtl.58/59/64/67.Fix potential bug in Cogit''s primitiveFlushCacheByMethod (must flushat cache).Move some context-specific primitives to StackInterpreterPrimitivesfrom InterpreterPrimitives.Streamline booleanCheatTrue & booleanCheatFalse (no need todecrement localIP and refetch byte).Drop use of CrLfFileStream.Fix arg count bug in BalloonEnginePlugin>>primitiveAddPolygon.Add Mac VMProfiler support plugin, but call it VMProfileMacSupportPlugin.Add STACKVM, COGVM & COGMTVM as simulation-timeconstants (not just interp.h constants) and use them to selectcorrect stack direction for Alien callout prims in IA32ABIPlugin.Make sure movement fiunctions in IA32ABIPlugin cope with backwardscopying (e.g. use memmove over memcpy).Add InterpreterPrimitives>>signalNoResume: for callbackserialization.Limit simulation screen size to 2/3 of the actual screen.Provide VMMaker class>>makerFor:and:to:platformDir:including:for more predictable plugin generation.Move some Object VMMaker-translation extensions down intoVMClass.Reorganize all moduleName and prepareMethods plugin methods tosame protocol.Minor formatting of VMMaker generation-time errors and warnings.Use literalAt; in place of literals first.' id '1fd12e1a-c0b3-4d41-91bb-26f029240bfe' date '31 May 2011' time '1:47:02.485196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.743' message 'Fix snafu in cloneContext:.' id '3682a52e-2759-4cea-855e-cbabf9dd7ed2' date '26 April 2011' time '5:46:02.616392448 pm' author 'eem' ancestors ((name 'VMMaker-eem.741' message 'Implement shallowCopy (primitiveClone) and copyFrom:(primitiveCopyObject) correctly for contexts.' id '0bb32a0a-d661-4905-9dcd-773be27e0b51' date '26 April 2011' time '10:22:01.291294336 am' author 'eem' ancestors ((name 'VMMaker-eem.740' message 'CogVM:	Fix includesBehavior:ThatOf: for nil superclass.  Fixes FFI for	images that don''t have Alien installed.	Fix primitiveFlushCacheByMethod for objects-as-methods' id '3bc54245-f148-4436-91f8-fa30847dfca3' date '30 March 2011' time '11:08:02.162065408 am' author 'eem' ancestors ((name 'VMMaker-eem.738' message 'Fix removeQwaqPlugins to not remove thrwaded FFI plugins (doh!)' id '06645c46-5be9-4417-9f28-761d88601cbd' date '16 March 2011' time '10:59:02.314425152 am' author 'eem' ancestors ((name 'VMMaker-eem.736' message 'Simulator needs to simulate with primTrace enabled (as per production)' id 'a0182697-3785-4395-92bd-0c21bca0ca13' date '16 March 2011' time '10:16:00.677425152 am' author 'eem' ancestors ((name 'VMMaker-eem.735' message 'Fix removeThreadSubsystem.  CogVMSimulator needs to inheritfrom CoInterpreterPrimitives, not CoInterpreter.' id 'dc957be2-135d-4948-948c-0a244a4bad21' date '11 March 2011' time '6:30:03.703425152 pm' author 'eem' ancestors ((name 'VMMaker-eem.734' message 'Actually /use/ the ceSend: => ceSend:/ceSendAbort: refactoring!Doh!' id 'cf815676-05e1-44d8-be7f-62138a99b532' date '11 March 2011' time '10:58:00.177294336 am' author 'eem' ancestors ((name 'VMMaker-eem.732' message 'Fix compileOpenPICPrototype openPICSize bug.  Need to use a realselector to compute the right map size.' id '9763a367-cfc4-4ef6-9ef5-64c77255c398' date '6 March 2011' time '6:07:00.300392448 pm' author 'eem' ancestors ((name 'VMMaker-eem.731' message 'StackToRegisterMappingCogit:	Fix bug with storeRemoteTemp (e.g. StarMorph initialize in Cuis	3.x) which causes a stack off-by-one.	Rename merge:afterReturn: to merge:afterContinuation: and	revamp merge code to treat byte ode following an unconditional	branch the same as after a return.	Add spill tracing.Fix simulation of primitiveScanCharacters (send slotSizeOf: to objectMemory).' id 'a090576c-cc07-42a3-9847-e5057f4024d6' date '6 March 2011' time '5:50:02.68216352 pm' author 'eem' ancestors ((name 'VMMaker-eem.728' message 'Minor cleanups for recent blog posts:	Refactor ceSend:super:to:numArgs: pulling abort support out to		ceSendAbort:to:numArgs:	Rename activateInterpreterMethodFromMachineCode to		interpretMethodFromMachineCode	Remove unused linkSends: flag.Mske printProcsOnList: & printProcessStack: part of the VM api fordebug printing.Typos, use of splObj: instead of direct specialObjectsOop access' id '2a402e08-0733-4543-8408-ec053d592a2c' date '6 March 2011' time '9:13:02.225392448 am' author 'eem' ancestors ((name 'VMMaker-eem.727' message 'Fix super expansion when super expression is returned.  i.e.final return should only be elided if subclass method doesnot return the result of the super send.' id 'ddd40ec5-cf16-45d0-876f-d465abbddd04' date '22 February 2011' time '5:07:03.97532704 pm' author 'eem' ancestors ((name 'VMMaker-eem.726' message 'Slang: eliminate final explicit returns in super expansions since thesecan cause premature exit, failing to execute code in the subclassmethod.typo' id '43e02c62-a9e0-437f-8dac-bd880d4863b5' date '22 February 2011' time '4:23:03.147196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.725' message 'Sista code genrator now compiles and runs for a short time (seemsfine in the simulator).cogit: macro allows excluding Sista-specific code from the CoInterpreter.Support for shortening objects (for shortening the Array result ofprimitiveSistaMethodPICAndCounterData).Support for sigusr1 stack dumping.' id '873e0b5d-57b8-4fde-9e7d-574e24c085b7' date '22 February 2011' time '3:20:00.69032704 pm' author 'eem' ancestors ((name 'VMMaker-eem.724' message 'CogMTVM source.  Minor refactor/rename for SistaStackToRegisterMappingCogit.Sista = Speculative inlining Smalltalk architecture.IsMethodReference/annotateMethodRef: => IsAbsPCReference/annotateAbsolutePCRef:CogMethodSurrogate hierarchy now holds cogit and clients defer to cogit to createthe CogMethodSurrogate determined by the Cogit, so that SistaStackToRegisterMappingCogitcan add a numCounters field to its CogMethod variant.Slang:Add a cogit: pragma to eliminate Sista-specific methods whengenerating a non-Sista VM. (but what about prim table?)' id '0c82b2c4-248a-4fb6-9f8e-3714a8450e0a' date '19 February 2011' time '9:26:04.013228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.723' message 'Typo and redundant code in genSpecialSelectorComparison.Make genAndDis: take a doit string or a method.Define CogSimStackEntry''s inst vars in house style' id '7c13242a-a0b0-4fb2-a85a-431686fe9c6e' date '9 February 2011' time '1:23:04.293228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.722' message 'Implement cannotInterpret: hook in the JIT.  Refactor JIT MNU handlingso that lookupMethodNoMNUEtcInClass: can answer the splObj: indexfor the selector to use to lookup failure (doesNotUnderstand: orcannotInterpret:).' id '3ba23962-c51b-4eea-a50c-042138f3c785' date '8 February 2011' time '5:42:02.044130816 pm' author 'eem' ancestors ((name 'VMMaker-eem.721' message 'Simulator cleanups (make simulated objectBefore: answer 0 on failure).print oop... & print frame... on the utilities menu.printop: prints fields of word objects.' id '899ccc4d-ca21-45a9-957e-c6a6f568dba1' date '8 February 2011' time '5:30:02.19116352 pm' author 'eem' ancestors ((name 'VMMaker-eem.720' message 'Fix primitiveExternalCall''s simulation version; specifically disablingMatrix2x3Plugin, because it broke bezier subdivision.' id 'faa9a216-cc39-42ac-b775-7040fa146f9b' date '8 February 2011' time '5:21:02.320425152 pm' author 'eem' ancestors ((name 'VMMaker-eem.718' message 'Move the genExternalizePointersForPrimitiveCall andgenLoadCStackPointersForPrimCall to the front ofcompileInterpreterPrimitive so thata) reg args are pushed before any calls, andb) ceCheckProfileTick is run on the C stack.The first fixes the StackToRegisterBasedCogit''s crash when profiling.The second is safer than running it on a Smalltalk stack page.Fix simulation of the profling machinery (to debug the above).' id 'c3e429ed-65e8-4a61-b9fa-942d17f47702' date '3 February 2011' time '7:37:02.165392448 pm' author 'eem' ancestors ((name 'VMMaker-eem.717' message 'Fix mapping for backward branches which must of course map tothemselves, otherwise the VM can break out of loops prematurely.' id '98b71aa5-3304-4c7c-aae7-d0a442841f86' date '3 February 2011' time '6:38:02.359032704 am' author 'eem' ancestors ((name 'VMMaker-eem.715' message 'Bring StackInterpreter generation up to date (less labelling, vmCallback).zero instuctions on recompiling block after numInitialNils mis-estimation.More methods for the in-image facade for compiling quick prims.' id '707ba1f8-c822-4204-82b6-1c7e7af64117' date '30 January 2011' time '6:49:04.265228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.714' message 'Both Cogits	Fix pc mapping once and for all.  Tests allow compiling all	methods in current image and testing all mapped bcpcs and	mcpcs map and map ack correctly.	Fix bad bug with jump fixups that caused some fixups to be	missed (error in the index used to define the range of valid	fixup adresses).StackToRegisterMappingCogit	Fix bug in addBlockStartAt:numArgs:numCopied:span: that	caused one block entry to be omitted when some block was	recompiled due to initialNil misestimation.	As part of pc mapping fixing add an annotateUse flag to	sim stack entries so that the eliminated send in a folded	constant still gets a pc map entry.CoInterpreter	Fix bug in checkLogIntegrity for an empty log.	Safety in activation printing (for backtraces etc).	SImulator	Run quitBlock on closing simulator window.' id 'e6521634-c406-479a-bf0f-23271ac0c930' date '28 January 2011' time '3:04:00.484032704 pm' author 'eem' ancestors ((name 'VMMaker-eem.713' message 'StackToRegisterMappingCogit:	Fix bug in repeated block compilation for initial nil handling.	Repeated attempts to insert the same block start are filtered out	instead of repeating all block inserts (which doesn''t work).	Fix bad bug in frameless block entry.  Don''t use	initSimStackForFramelessMethod:!	Add a target fixup for a conditional jump even if it is a jump on	true or false since the simStack must still be valid for merges.	Nuke as-yet-unused merge state in CogSSBytecodeFixup.	Add a subclass using image facilities to compute numnitialNils	correctly to compare against repeated block compilation.CoInterpreter:	comment an apparently unsent method to stop me from deleting it' id 'e166964b-d792-42f1-8492-e9c7962ed446' date '22 January 2011' time '1:04:02.059392448 pm' author 'eem' ancestors ((name 'VMMaker-eem.712' message 'Fix StackToRegisterMappingCogit being confused by initial pushNilsin blocks that provide parameters rather than initialize temps bytracking stack depth and recompiling if the depth is wrong at the endof the block.  Do this by refactoring compileMethodBody intocompileEntireMethod et al.Fix atCache leakage for super sends in machine code by assigningto lkupClass (since commonAt:[put:] use lkupClass to filter-outsuper sends).Simulator fixes and tidyups.' id '1e2d9558-ede0-48ae-9e07-bcd368d4c823' date '18 January 2011' time '10:12:02.805196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.710' message 'More cleanup.  Remove need to redefine CogVMSimulator>>initializewhen removing thread subsystem. Comment typo.' id '971dc03d-8a71-46d2-94df-2dad570a57a1' date '15 January 2011' time '10:04:03.038098112 am' author 'eem' ancestors ((name 'VMMaker-eem.709' message 'Cleanups.  Remove the unused register-saving stack page classes.Rename retained classes (CogSimpleStackPage => CogStackPage etc).Nuke unused method and an unused inst var.Make sure EagerInstructionDecoration isn''t reinitialized.' id '34744a1f-ebd7-4f47-a77a-c3c5d19df068' date '15 January 2011' time '9:06:03.44 am' author 'eem' ancestors ((name 'VMMaker-eem.708' message 'Interim fix for & and | usage in genSpecialSelectorArithmetic (i.e."don''t do that").Safer frame printing via sprinkling of couldBeFramePointer: pixie dust.Update the CogMemoryManager class comment new GC/obj repdesign with the results of recent vm-dev discussion on lazy becomeand pinning.' id '684c06bd-d894-436b-96b1-0684a03a6fde' date '12 January 2011' time '12:32:03.51516352 pm' author 'eem' ancestors ((name 'VMMaker-eem.706' message 'Correct typedef generation for CogBlockMethod padding hack.' id 'ba89663d-05f7-4f28-bc61-bb33014e6767' date '9 January 2011' time '2:31:00.184261632 pm' author 'eem' ancestors ((name 'VMMaker-eem.705' message 'Change the representation of CogBlockMethods to solve issuesmatching blocks in bytecoded methods to their correspondingCogBlockMethods.  Replace the CogBlockMethod objectHeader fieldwith a 16-bit offset to the home method and a 16-bit startbcpc field.Add comprehensive testing of bytecode to machine-code pcmapping, including matching blocks.' id 'cdf0c259-1d1f-445c-9f3c-be07381acf8e' date '9 January 2011' time '2:05:03.443425152 pm' author 'eem' ancestors ((name 'VMMaker-eem.704' message 'Fix liveness of ResultReceiverReg over calls to ceContext:instVar:value:.Fixes an mnu in privRefresh.Fix leaking of objects into the atCache due to ceSend:super:to:numArgs:''suse of executeNewMethod without always setting messageSelector.Fixes "BooleanArrayUser new loop" bug.Fix simulation stack off-by-one in genStorePop:MaybeContextReceiverVariable:.More agressive store-check elision (elide for nil, true & false, not just immediates).Support for more agressive frameless optimization, but not deploted (cuz it''s broken of course).Simulator tweak (setBreakSelector menu entry) & fixes (get decoration testright, add a stireInteger: forwarder).' id '87cfa24f-a70a-45df-8a20-8686b655d2d2' date '7 January 2011' time '5:33:02.132 pm' author 'eem' ancestors ((name 'VMMaker-eem.703' message 'Eliminate some warnings in the CoInterpreter.Stop attemptToSwitchToMachineCode: being inlined to fix apparentoptimization bug at -O2 on linux gcc 4.1.2.' id '8074c778-e8f2-4c29-a7ee-2fd8f096f825' date '2 January 2011' time '2:30:03.536425152 pm' author 'eem' ancestors ((name 'VMMaker-eem.702' message 'Fix rounding bug causing underestimate of openPICSize andresultant hard crashes.' id 'c702f5e5-e423-403d-97e6-a78d7ee61057' date '1 January 2011' time '2:25:02.521196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.701' message 'Fix a bug with bytecode to pc mapping being confused by framelessblocks which caused a crash when converting an interpreteractivation of Cogit class>>generatorTableFrom: to machine code.In the SRMCogit mark the conditional jump following #== as deadcode and elide it.Fix SimpleStackBasedCogit compilation by ifdeffing out the body ofenterRegisterArgCogMethod:at:receiver: and addding dummyregisterMaskFor:... defs.Fix an assert for objects-as-methods in activateInterpreterMethod...Fix gnuification for the change that moved a funciton''s opening { toa newline.' id '3be7bf23-d4d8-406a-ae90-35c689dfd875' date '1 January 2011' time '11:52:04.09732704 am' author 'eem' ancestors ((name 'VMMaker-eem.699' message 'Rescue some lost class comments.' id 'd6fd23b4-5b4b-408f-8587-c4fa572a565a' date '27 December 2010' time '6:45:01.242228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.698' message 'Declare reenterInterpreter properly.Remove anothe rplugin and an inconvenient CroquetPlugin method.Slang: allow commenting of globals with "private" so they aren''twritten to the export api header.' id '6f145795-1fa1-4da2-b1e4-b5ec79c01b7c' date '27 December 2010' time '10:44:03.50416352 am' author 'eem' ancestors ((name 'VMMaker-eem.695' message 'MCPackage not PackageInfo; doh!' id '09683646-af8b-4ea8-afbc-643d16dc7883' date '26 December 2010' time '10:48:03.281261632 am' author 'eem' ancestors ((name 'VMMaker-eem.694' message 'PackageInfo class>>named: takes a string or woe betide you.' id '88c51dff-455e-47ac-9d2b-93d4c9fc926a' date '26 December 2010' time '10:37:00.24916352 am' author 'eem' ancestors ((name 'VMMaker-eem.693' message 'Replace the hack for declaring VMCallbackContext.  Add a new filevmCallback.h and use opaque type for sqVirtualMachine.h.Remove WebAuth and PNGLib plugins and mark package dirty whenremoving threaded components.' id '777e9626-51c6-45a1-8163-21854eef73b7' date '26 December 2010' time '10:29:01.592 am' author 'eem' ancestors ((name 'VMMaker-eem.692' message 'Use the right transferTo:from: in backing out of the callbackEnter:change.' id '69f8f8a8-944b-42a5-8f41-f78aed5ae117' date '25 December 2010' time '7:13:00.323359744 pm' author 'eem' ancestors ((name 'VMMaker-eem.689' message 'SHould also nuke initialEnterSmalltalkExecutive and the switch maintainer.' id '60544d12-5fb9-449b-b876-3070631f2e5e' date '25 December 2010' time '4:46:01.081098112 pm' author 'eem' ancestors ((name 'VMMaker-eem.687' message 'FIx a regression that dropped the multi-threaded override update.Fix the override write once and for all (??)' id 'b249dc12-95cc-4c89-b5c2-332bece5d47f' date '25 December 2010' time '4:36:02.242294336 pm' author 'eem' ancestors ((name 'VMMaker-eem.685' message 'RumpCStackSize needs to live in CoInterpreter.ChangeSet knows how to order arbitrary classes.' id 'e0abb3a5-0df6-406c-b879-fb50de794965' date '25 December 2010' time '3:24:03.70632704 pm' author 'eem' ancestors ((name 'VMMaker-eem.684' message 'Remember to nuke the ThreadedFFIPlugin classes when nuking the thread vm.' id '90eea50b-447c-4d0a-abe4-b2aeb3655eb8' date '25 December 2010' time '3:08:03.849425152 pm' author 'eem' ancestors ((name 'VMMaker-eem.683' message 'New callback support for the ReentrantFFIPlugin' id '1b767632-e780-4820-9fc5-f8e6fe8ef36c' date '25 December 2010' time '3:00:02.69 pm' author 'eem' ancestors ((name 'VMMaker-eem.681' message 'Reorganize cogThreadManager access for ease of thread vm removal.Provide a utility to remove threaded vm.' id '1d1de01f-2f14-43c4-acaf-d3202d381b64' date '25 December 2010' time '2:27:03.220228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.680' message 'CogVM:New StackToRegisterMappingCogit that produces significantly more efficient and more compact code.Benefits mostly for microbenchmarks.  e.g on 2.66 GHz Core i7 MacBook ProSimpleStackBasedCogit: [1 to: 100000000 do: [:i|]] timeToRun 691StackToRegisterMappingCogit: [1 to: 100000000 do: [:i|]] timeToRun 192192 - 691 / 6.91 -72%SimpleStackBasedCogit: 0 tinyBenchmarks ''753495217 bytecodes/sec; 64769127 sends/sec''StackToRegisterMappingCogit: 0 tinyBenchmarks ''931756141 bytecodes/sec; 128157989 sends/sec''931756141 - 753495217 / 7534952.17 -24%128157989 - 64769127 / 647691.27 -98%Cope with ContextPart>runUntilErrorOrReturnFrom: popping off temp vars (whichkills the stack-to-register mapping code scheme) by falling back on the interpreter(ensureContextIsExecutionSafeAfterAssignToStackPointer:).Attempt to jit on interpreted backward branches (default is 20 backward branches in the same method.Fix off-by-one stack bug on mustBeBoolean handling and move the add of true or false to restore thenon-boolean into the now pair of trampolines.Don''t bother to annotate nil,true & false as object refs.  So what if these can''t be becomed?  (Can alwaysvoid code zone if needed).  Best not to waste cycles on these.Activate sends from ceSend... run-times via executeCogMethod for better handling of primitivesand object-as-method handling.  Fix bug in executeNewMethod evaluation of quick primitives; i.e.pop and return the result of externalQuickPrimitiveResponse.Rationalize instVar:ofContext: calls so they all cope with the full range of inst var indices.Beef up printing of frames (cope with finding te top frame more reliably) and liberally use ensureCrin Smalltalk-only code for more legibility.Guard against integer messageSelector & newMethod for SmallInteger selectors & object-as-method.CogMTVM:New Alien callback scheme with all state bundled up in a single struct whose address is the sole callbackarg (and hence truly cross ABI), and longjmp returning return type code, avoiding 64-bit issues.  Bug fixes to own/disown for callbacks when VM is not owned.Add inIOProcessEvents to avoid reentry (for native GUIs) and also better autorelease pool managementon Mac OS X.Add primitive to disable ioProcessEvent call for native GUIs (works by setting inIOProcessEvents negative).Support disowning the VM on relinquishProcessor for threaded callback access.Tracing of thread switches and callbacks.Slang:Merge the ''static struct foo'' declaration of the VM struct.Provide a generation entry-point that allows one to specify the concrete Cogit to use.Add cppIf:ifTrue:[ifFalse:] and use it where appropriate in preference to poor cPreprocessorDirective:.VMStructClass cleanups:	Don''t add VMStructClass inst vars; they''re just accessors and don''t pollute.	Allow identcical struct accessors from different classes to co-existMake sure selector translations use asSymbolAllow horrible declareC: ''#if .. '' convolution for vars of type jmp_buf.Rationalize the pointer-to-struct machinery moving it to VMStructClass and Cogit.  Support structvariables as well as pointer-to-struct variables.Allow translation of super sameSelector, and ^super sameSelector.Simulator:Check stack depth at sends (to debug StackToRegisterMappingCogit) using StackDepthFinder.  Alsoprovides DetailedInstructionPrinter for symbolic printing with stack depth.  Use in symbolicMethod:.See also VMCompiledMethodProxy.Partial fix for simulation of FFI calls (functionForPrimitiveCallout).Add a test of pc-mapping for all methods in an image.Add entry-points for compiling a method in the current image by a concrete Cogit.See CurrentImageCoInterpreterFacade.Short-cut evaluation of tracing trampolines to speed-up simulation.In general: usual compiler warning fixes, typos and unused code removal.' id '794a0b29-214f-4c6f-ae9b-5518b0e29e36' date '25 December 2010' time '1:29:01.300294336 pm' author 'eem' ancestors ((name 'VMMaker-eem.677' message 'CogMTVM:	first "successful" Mac file dialog invocation using asynchronous	callbacks for file filtering and result collection ("successful"	because it follows a null pointer after printing the result).  Fix is	that willingVMThread must answer other than the owner.	Fix bug slip in tryLockVMToIndex: setting vmOSThread to wrong	type (should be an osThread not a vm owner index).	Add ClassByteString as a more accurate alias for ClassString.	Add new interpreter proxy support: cStringOrNullFor:,	sizeOfAlienData: & startOfAlienData: for callback-based File Dialog.Slang:	Add support for translating ifNil:ifNotNil: et al.	Modify function header to put the opening ${ on a new line (a	crutch I lean on for finding the start of the enclosing function)' id '4ebd6e44-9c0a-41a8-9cef-53c480e7b41a' date '2 November 2010' time '2:35:01.637359744 pm' author 'eem' ancestors ((name 'VMMaker-eem.676' message 'snafu.  No ifNil: support in Slang as yet.' id '30d13f14-853c-4083-bfac-c145d6356125' date '26 October 2010' time '2:59:01.820032704 pm' author 'eem' ancestors ((name 'VMMaker-eem.675' message 'In the MTVM move the abort on no runnable processes test intotransferTo:from: from wakeHighestPriority.  This allows transferTo:from:to check for a thread waiting to own the VM before it aborts.  Factor outthe thread-switch longjmp code intoreturnToSchedulingLoopAndReleaseVMOrWakeThread: (gulp).Provide symbolic constants for longjmp to interpreter & longjmp tothreadSchedulingLoopSlang, relax super expansion restrictions so CoInterpreter>transferTo:from:can invoke super transferTo:.' id 'f8e9990a-7ffd-4e7d-bcb2-e48975ad536b' date '26 October 2010' time '2:48:02.382359744 pm' author 'eem' ancestors ((name 'VMMaker-eem.674' message 'Fix trailing garbage after undef in interp.h' id '7dbc088d-e5f0-4979-ae98-d767ad553776' date '24 October 2010' time '10:09:03.847294336 am' author 'eem' ancestors ((name 'VMMaker-eem.673' message 'Fix snafu in VMMaker-eem.666.  Added a signalExternalSemaphoresto callbackEnter: (correct) but followed it by a test for ~~ instead of ==.' id 'd1addb33-5fc7-47e9-a2f6-40dc2215fc4a' date '23 October 2010' time '7:25:00.928359744 pm' author 'eem' ancestors ((name 'VMMaker-eem.672' message 'CogMTVM Simulator:	Nuke tricky broken explicit threading of the simulator processor	in favour of an encapsulator (MultiProcessor). (Simplifies thread-	local storage and nukes lots of ensureProcessorInThread crap).	Refactor threadSchedulingLoop into it and tryToExecuteSmalltalk:	and hence fix quit on no runnable process hiccup.	Change processor simulator to enforce execute permissions	below the heap.CogVM:	allow mutex prims to take an explicit effectiveProcess for the	debugger to use when simulating mutex prims.	Refactor primitiveBehaviorHash so there''s no assumption that	0 is an invalid hash.Slang: liberal use of ensureCr' id '76f1937e-0a3e-4c94-be3a-ad0d0978c33e' date '22 October 2010' time '4:10:03.217 pm' author 'eem' ancestors ((name 'VMMaker-eem.671' message 'CogVM:	add the restore of saved C stack pointers to returnAs:...	Speed up callbacks > 3x by using _longjmp instead of longjmp.	Split cePrimReturnEnterCogCode into cePrimReturnEnterCogCode	& cePrimReturnEnterCogCodeProfiling (ineffective; moves	stall on accessing nextProfileTick to stall on accessing primFailCode).	Add prefetch instruction and use it for prefetching prim fail	code prior to interpreter prim call (ineffective; presumably too	far ahead of access, or access from cache is what''s slow?).Simulator:	Fix simulated variable and trampoline access. Old code created	many duplicate entries (but still worked).Nuke some unused methods and fix some comment typoes.' id 'eef5048b-5118-4769-a0a4-2a6a67b30f42' date '16 October 2010' time '10:22:00.286065408 pm' author 'eem' ancestors ((name 'VMMaker-eem.670' message 'Cog/Stack VM:	Non-threaded callbacks (threaded callbacks untested).	Implement legacy sendInvokeCallback:Stack:Registers:Jmpbuf:	style.	Provide a more general new style that avoids 64-bit limitations.	VMCallbackContext includes all the necessary state for a	callback, so the new arg count can be 1 (and is in interp.h).	New sendInvokeCallbackContext will work with either old	Alien class>invokeCallback:stack:registers:jmpbuf: entry-point	or new Alien class>invokeCallbackContext:.	Provide new machineInteger methods alongside 32-bit & 64-bit	integer methods for Alien plugins.	Move primitiveFail/success methods and *Bit*VaueOf: methods	up into InterpreterPrimitives.	Rewrite the integer conversion methods to get the class tests	inlined and to thus avoid class access  (since there are compact	class indices defined for the large integer classes).	Move sizeof: methods up into VMClass.Alien Plugins:	Use machine integer accessor to decode indices so they can	range over entire address space. Slang:	Move all the struct type checking to VMStructType which	maintains a cache of type names.  Eliminate all the CogClass	specific methods.	Adjust include file generation so that <standard includes> are	emitted before "local includes" (so that <setjmp.h> is always	included before interp.h, for VMCallbackContext).	Nuke unused processAssortedFiles (RiscOS support?)' id '223722c0-410e-4572-a18a-c3641fc98657' date '15 October 2010' time '4:42:00.525228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.669' message 'CogVM:	Pre-callback cleanups.	Refactor the nilling of ip & sender to markContextAsDead:.	Move addNewMethodToCache: into lookupMethodNoMNUEtcInClass:	from callers.	Eliminate some compile-time warnings due to prim return types.	Nuke some unused or duplicate methods.Plugins:	Fix a bug in SmartSyntaxPluginSimulator>computeSignatureMap	Make UUIDPlugin simulate and preen primitiveMakeUUID.	Nuke unused plugin' id 'ba44a471-c8bc-4cf2-9b35-0902289d046d' date '15 October 2010' time '3:18:00.86516352 pm' author 'eem' ancestors ((name 'VMMaker-eem.668' message 'VM & Large Integers:	Stream-line firstIndexableField: and use it to implement	LargeIntegersPlugin>>unsafeByteOf:at:.	minor simplification to digitSubLarge:with:SIulator:	Simulation support for SmartSyntaxPlugins, and hence	simulation of LargeIntegersPlugin.	Utilities menu for StackInterpreterSimulator.	Nuke obsolete & partial smart syntax simulation support.	Fix simulation of 64-bit integer arithmetic which didn''t	truncate the result to 64 bits, hence failing to fail for	results that overflow 64 bits.	Allow simulator to avoid booleanCheat: for comparing	bytecode traces obtained by runSimulated:contextAtEachStep:' id '4fe64113-5993-4659-95ce-42be8d611745' date '4 October 2010' time '7:32:01.464196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.667' message 'Fix class-side declarations for ARM & PPC FFI plugins.' id '5509e701-320b-4dd8-94a6-2ae798cbe41c' date '30 September 2010' time '6:23:00.235294336 pm' author 'eem' ancestors ((name 'VMMaker-eem.666' message 'Cog:	Complete the ObjectMemory extract to inst var refactoring.	Remove the Interpreter subclasses of NewObjectMemory.	Rename all the FooS versions (e.g. StackInterpreterS) to Foo.	Move the bulk of the core primitives to InterpreterPrimitives.	Merge the MTS fork back into trunk.Warning: this may have difficulty loading into an image with VMMakeralready loaded and you''ll almost certainly need to recompile the package if you try this.' id '4edd7d00-3db5-48ef-b579-5d95fae49120' date '30 September 2010' time '3:38:01.60732704 pm' author 'eem' ancestors ((name 'VMMaker-eem.665' message 'CogMTSVM:	support for objects-as-methods (to reduce VMMaker forks).	when in the interpreter favour invoking the interpreter primitive	over invoking the Cog method that then invokes the interpreter	primitive more slowly.	refactor ceActivateFailingPrimitiveMethod: into	activateCoggedNewMethod: to build an activation of a cogged	method and then enter at the stack-check offset.  This avoids	repeating primitive invocations when activating a failing prim	method that''s cogged from the interpreter.Slang:	merge pragmas when doing a super expansion' id '90878487-ed43-4f06-a43a-2c9d8ef53b77' date '29 September 2010' time '1:27:00.166425152 pm' author 'eem' ancestors ((name 'VMMaker-eem.664' message 'StackVM:	- revert MyList failure check in primitiveResume' id '07023708-7f96-4f08-89f0-e3823bec9f6d' date '29 September 2010' time '1:21:00.099261632 pm' author 'eem' ancestors ((name 'VMMaker-eem.663' message 'CogMTSVM/StackVM:	various cleanups	- no longer inline checkProfileTick:	- limit number of VM will not thread messages	- correct the sendTrace bit flags defs	- use internalStackTopPut: in place of internalPop: 1 thenPush:	- refactor checks into maybeMethodHasCogMethod:	- revert MyList failure check in primitiveResume	- use is:instanceOf:compactClassIndex: instead of assertClassOf:...Simulator:	provide a menu on the bytecode count pane with useful	expressions.  It''s now a tool :)' id 'c8636286-7c94-4495-aeea-975ba62bc0ab' date '29 September 2010' time '11:45:03.713261632 am' author 'eem' ancestors ((name 'VMMaker-eem.662' message 'CogMTSVM:	Fix Float < & <=; the NaN inversions for < & <= were mixed up.	(symptom was that 0 asFloat printed as -0.0, since 0.0 < 0 was true).	Fix simulation of the process-to-thread binding prims when	simulating a non-threaded VM.	Add a breakBlock to Cogit to support conditional PC breakpoints.' id '5d0bc137-cbfd-4055-997f-b0d2bda7e384' date '21 September 2010' time '8:04:02.163261632 pm' author 'eem' ancestors ((name 'VMMaker-eem.661' message 'CogSVM:	Refactor the booleanCheat to remove code duplication.	Saves 1.3k in the deployment Cog build (and > 3k in debug).	Fix some simulation methods to do with growing memory.' id '90ad2bc9-03ad-475a-8c24-2ecd65469d64' date '19 September 2010' time '12:02:03.150196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.660' message 'CogVM:	Fix machine-code floating point comparisons for nan cases (< & <=).	Provide tests for CmpCqR CmpRdRd et al.	Nuke primitiveIdentityDictionaryLookup; it is unused and ties	down the system too much (putting e.g. a hash algorithm in the VM).Slang:	Transfor "cCode: [] in Smalltalk: []" on conversion to TMethod to enable	inlining in the cCode: block''s code.	Parenthesize TSendNode for more comprehensibility.' id '57e9b621-da48-41ab-af60-5e321c69dbbb' date '18 September 2010' time '9:21:00.392032704 pm' author 'eem' ancestors ((name 'VMMaker-eem.659' message 'Cogit:	Make prim float divide fail for a zero divisor.	Fix some compilation warnings from as-yet-unused bc-to-npc	mapping code.' id 'e21ec064-19d0-4aec-9db6-3cff848d8f83' date '16 September 2010' time '5:32:02.860999999 pm' author 'eem' ancestors ((name 'VMMaker-eem.658' message 'CogMTSVM:	Write the test of checkThreadOwnership to prevent non-callback	threads taking ownership during primitiveRelinquishProcessor	correctly.	Add signalExternalSemaphores to calbackEnter:.Slang:	Put a test and a "shouldBeImplemented" when properties exist	in inlining of super sends.' id '1206f633-0286-4abb-af05-024aae490388' date '16 September 2010' time '9:35:00.554228928 am' author 'eem' ancestors ((name 'VMMaker-eem.657' message 'CogMTSVM:	Make foreignCallbackProcess a variable so we can load images	with specialObejctsArrays that don''t include the slot (#56).CogVM:Fix bad bug in CompiledMethod>>flushCache/primitiveFlushCacheByMethod.Original code failed to flush the primitive embedded in the machine codemethod, causing it to run the previous primitive.Fix two bad bugs in the Cogit''s primitiveDoPrimitiveWithArgs.1. a 0 entry in the primitive table would be misinterpreted as a quickPrimitiveResponse instead of no primitive and consequent primitivefailure.2. Because of the way the process primitives "return" (they don''t, theylongjmp) the popRemappableOop wasn''t always executed, causing theremamp buffer to overflow.With these two fixes things like the following now work:	thisContext runSimulated:		[(1 to: 10)			do:[:aClass| (Delay forMilliseconds: 100) wait]			displayingProgress: ''Processing...'']Revert the change to wakeHighestPriority signalling external semaphoresbefore giving up.  The signal needs to occur before.  e.g. in the callbackcase the signaling needs to occur before wakeHighestPriority and alsoneeds to avoid creating two activeProcesses (the current and one activatedvia the signal).  fix in a subsequent commit.Nuke the unused checking primitive stack interface (shouldPopArgs et al).Nuke unused inst vars.' id '82fa15db-83b2-467c-a7a1-7cedca7a386b' date '13 September 2010' time '11:18:00.870196224 am' author 'eem' ancestors ((name 'VMMaker-eem.656' message 'CogMTSVM:	Make threadSchedulingLoop test checkThreadActivation to	prevent waking up when there''s no process ot run because	the VM is doing primitiveRelinquishProcessorForMilliseconds:.	Put a signalExternalSemaphores call in wakeHighestPriority so	that if the system finds there''s no process to run it''ll find	something made runnable by external code before aborting.	The use case is external code does a signalExternalSemaphore	immediately followed by a callback while the VM is in e.g.	primitiveRelinquishProcessorForMilliseconds: and since there	isn''t an occasion between the signal and the callback for the VM	to actually do the signal, the wakeHighestpriority in the callback	will abort.	Have the resume primitive also insist on a nil myList; it''s an	error to try and resume something already resumed or waiting.' id '17acc882-68ac-4858-85a1-ead3b8eb3c72' date '7 September 2010' time '4:38:01.886 pm' author 'eem' ancestors ((name 'VMMaker-eem.655' message 'CogMTSVM:	Use registerVMThread:/unregisterVMThread: for foreign callbacks.	Keep window open for Josh''s use case of registering a foreign	thread with the VM long-term (open, but not implemented yet)' id 'b027937f-a783-4763-91d9-ce44128e9b33' date '30 August 2010' time '2:34:03.037392448 pm' author 'eem' ancestors ((name 'VMMaker-eem.654' message 'CogMTSVM:	Most of the plumbing for callbacks, including foreign callbacks.	Allow disownVM:/ownVM: to be called in ownVM:/disownVM:	order. 		Initialize CogThreadInfo''s osSemaphore: in populate:from:to:		Make primitiveRelinquishProcessor disown the VM but via		checkThreadActivation avoid waking other threads in the		pool.	Replace jmpMax with a constant.	Fix some primitive to change their return types to avoid	primitive table initialization warnings form the C compiler.	Base ObjectMemory>requiredMethodNames on exportAPISelectors	Fix running the simulator''s quit block from other than the main	process.' id 'd87eb529-61d3-4b76-8523-dacaca06785c' date '27 August 2010' time '3:38:03.132425152 pm' author 'eem' ancestors ((name 'VMMaker-eem.653' message 'CogMTS:	Stop hardwiring Class''s name index and Metaclass''s thisClass index.	Fix a couple of stack simulator issues.Cog:	Move firstFixedField: into ObjectMemory where it belongs.' id '9418de18-0088-4d64-8abd-498eb421eb6c' date '17 August 2010' time '7:49:03.141392448 pm' author 'eem' ancestors ((name 'VMMaker-eem.651' message 'CogMTVM:	Work-around compiler bugs for the most negative 64-bit value	in signed64BitIntegerFor: & signed64BitValueOf:' id 'bbcf5e1c-65d8-4d4b-98c1-39add8fd926e' date '9 August 2010' time '9:03:03.97616352 pm' author 'eem' ancestors ((name 'VMMaker-eem.650' message 'CogMTVM:	Do the right thing and rely on counting semaphores	(implementation in platforms/unix/vm/sqUnixThreads.c,	c.f. the Smalltalk VM ones)' id 'badce6a2-44f6-43ef-a961-d8ce351785d9' date '30 July 2010' time '5:42:03.653228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.649' message 'document the acquireVMFor: race with a comment' id 'a860f404-2f8e-4218-b355-fa4043f21730' date '30 July 2010' time '5:22:00.026228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.648' message 'CogMTSVM:	Fix race condition in acquireVMFor: caused by posix	semaphores not being counting semaphores (so doesn''t	show in simulation).  Perhaps better fix is to implement	counting semaphores in platforms/unix/vm/sqUnixThreads.c.	Provide a specific count of disowning threads for a more	reliable pollpip (string args in FFI calls get copied to be null-	terminated and hence don''t cause fullGCLock to get set).' id 'a525f558-45a4-4a23-bdfa-e6cf39083eee' date '30 July 2010' time '5:17:01.259294336 pm' author 'eem' ancestors ((name 'VMMaker-eem.647' message 'CogMTVM:	Fix primitiveDoNamedPrimitiveWithArgs for unimplemented	prims so debugger correctly steps over & into unimplemented	named prims.' id 'b0b596a5-9393-44d4-85a6-3db45cba0b8f' date '30 July 2010' time '2:15:03.36516352 pm' author 'eem' ancestors ((name 'VMMaker-eem.645' message 'CogMTVM:	Don''t inline ensureRunningThread.	Add sqAtomicOps.h for THRLOG.' id '272f4325-57bc-4e56-acdd-29f456ea3b8c' date '29 July 2010' time '2:46:02.114130816 pm' author 'eem' ancestors ((name 'VMMaker-eem.644' message 'CogMTVM:	Fix regression caused by previous fixes.  The removal of the	releaseVM from startThreadForThreadInfo: means addig one	back in ensureRunningVMThread.' id 'ccbc1001-adba-4922-874c-a36b91d87a31' date '28 July 2010' time '3:35:00.604 pm' author 'eem' ancestors ((name 'VMMaker-eem.643' message 'CogMTVM:	Fix race condition in wakeVMThreadFor:.  Old wakeVMThreadFor: set	vmOwner after starting new thread, and startThreadForThreadInfo:	mistakenly did a releaseVM.	Provide accessors for vmOwner to allow use of mfence.	N.B. Race condition debugged using asprintf to collect traces while	deferring printing, e.g.	#define TLOGSZ 256int tlogidx = 0;char *tlog[TLOGSZ];    asprintf(tlog + tlogidx, "deferStackLimitSmashAround vmOwner = %d\n", vmOwner);     tlogidx = ++tlogidx & (TLOGSZ - 1);' id '65d95ea5-556a-44d0-9df0-99fc1af5a0d9' date '28 July 2010' time '1:41:03.455392448 pm' author 'eem' ancestors ((name 'VMMaker-eem.642' message 'Cog MT VM:	Implement no-threading-from-GUI-thread flag hack.' id 'efb5fe3a-8882-417e-bac7-2b83d32cf6a3' date '27 July 2010' time '12:30:03.814196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.641' message 'CogMT:	Fixed thread-switch due to primitiveProcessBindToThreadId.	Fixed primitiveVMCurrentThreadId.	Some simulation tidy-ups (sqFileSize:, cStackRangeForThreadId:	& senders, correctly account for 4.1 window border width)	Some separation tidyups (markYoungObjectsIn:)N.B. all-in-one CoInterpreter/CoInterpreterMT has fallen behind.Its days are numbered.' id '9c61828c-b4ac-43a7-93d9-54daca13e643' date '27 July 2010' time '10:49:03.597098112 am' author 'eem' ancestors ((name 'VMMaker-eem.640' message 'CogMTVM:	process to thread binding machinery & primitives.	fix bug in populate:from:to: (old code never grew beyond initial	numThreads).	FloatMathPluginTests: change *-N to * -N.' id '0c5f1075-a797-4663-92a9-b7b017cd4de8' date '26 July 2010' time '12:00:03.01932704 pm' author 'eem' ancestors ((name 'VMMaker-eem.639' message 'CogMTSVM: export fullGCLock for debug/instrumentation' id 'a4bd43ad-469c-4412-80d9-829484e921ba' date '21 July 2010' time '8:13:00.552294336 pm' author 'eem' ancestors ((name 'VMMaker-eem.638' message 'CogVM: primitiveSetIdentityHash' id '43d93411-cea0-4086-8eb3-2c2ccf3e65eb' date '21 July 2010' time '6:47:01.474098112 pm' author 'eem' ancestors ((name 'VMMaker-eem.636' message 'CogVM:	primitiveBehaviorHash & primitiveMaxIdentityHash compatibility	prims.	# jitted methods vm parameter.	printInstancesOf:' id 'f3180422-f624-4631-ae2e-0c5b615bb4fe' date '21 July 2010' time '4:10:03.503228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.635' message 'CogVM:	simulator labels for PIC disassembly and transcript setters.' id 'dc9d3978-68c6-41c3-9cd1-6b64cf8215af' date '18 July 2010' time '6:30:01.716098111 pm' author 'eem' ancestors ((name 'VMMaker-eem.634' message 'CogVM:	Refactor primitiveChangeClass, primitiveAdoptInstance and	assertClassOf:is:compactClassIndex: so that the interpreters	no longer access object representation constants SizeMask &	CompactClassMask.  Now StackInterpreterS only accesses	compact class indices which will be mapped onto the known	class indices in the new object format.' id '8d14d140-8779-44ce-adcb-5069bd2ba8aa' date '16 July 2010' time '8:16:04.175196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.633' message 'CogVM:	The reorg of validate means validate needs a null	implementation for generation.' id '7a229265-2c90-4898-baa7-e773a7882bcd' date '16 July 2010' time '5:01:03.94732704 pm' author 'eem' ancestors ((name 'VMMaker-eem.632' message 'CogVM:	Reorgs to simulation code and primitiveIsRoot to localize	access to object-representation internals (RootBit SizeMask)	to ObjectMemory/NewObjectMemory.' id 'b741d3fe-d1c5-4f3c-9205-df38fec0ebb5' date '16 July 2010' time '3:59:01.911261632 pm' author 'eem' ancestors ((name 'VMMaker-eem.631' message 'CogVM: Take alloca from stddef.h.  malloc.h is an anachronism.' id '17b8c169-ba35-4c11-9ff4-e498ec847a72' date '15 July 2010' time '7:33:02.809 pm' author 'eem' ancestors ((name 'VMMaker-eem.630' message 'CogVM:	AllocationCheckFiller to varys with address if = 16rADD4E55.	Make include of malloc.h conditional on beung under WIN32.' id '80e55856-ba3e-4a65-a63a-db697b8e7acb' date '15 July 2010' time '4:35:03.446130816 pm' author 'eem' ancestors ((name 'VMMaker-eem.628' message 'ThreadedFFIPlugin:	Fix struct return, indexing return type spec corrrectly and not	being confised between the struct return size and whether return	is via registers or not.' id '36c4a2db-b0ee-409b-884b-eeedd6811ce7' date '13 July 2010' time '4:15:02.33616352 pm' author 'eem' ancestors ((name 'VMMaker-eem.626' message 'FFIPlugin:	restore access to the error, needed for backwards compatibility.' id 'f53f38b9-4af1-4578-8d05-db9ff8210744' date '13 July 2010' time '2:38:01.286228928 pm' author 'eem' ancestors ((name 'VMMaker-eem.625' message 'Plugins: Use pop:thenPush: in place of pop: followed by push: insome  frequently used methods.' id 'e40c1cb2-9a34-4c7f-86a9-4a7c2261a89d' date '10 July 2010' time '9:41:03.070065408 pm' author 'eem' ancestors ((name 'VMMaker-eem.624' message 'CogVM:	Fix primitiveObjectPointsTo for multiple of 4 length CompiledMethods' id '7025f236-b7d7-4f92-9236-94b08a776520' date '9 July 2010' time '3:36:01.081425152 pm' author 'eem' ancestors ((name 'VMMaker-eem.622' message 'Slang: put back prune step since its the allocation check that breaks ODBC.' id '817f8b68-cfaf-49ae-a73a-49a96e2ebefe' date '9 July 2010' time '10:56:04.260359744 am' author 'eem' ancestors ((name 'VMMaker-eem.621' message 'Slang: refactor generate method so one can create a maker and thene.g. ask it to generateInterpreterFile.Typo & nuke unused.' id 'c0b6baa9-7878-439d-9b8b-9479e780ddb5' date '8 July 2010' time '3:07:00.191294336 pm' author 'eem' ancestors ((name 'VMMaker-eem.620' message 'CogVM:	long-running primitive method code revisited.Slang:	revert pruning step in non-interpreter translations' id 'f9150a3a-4e72-4eb3-960a-25a22b454608' date '8 July 2010' time '11:27:00.00516352 am' author 'eem' ancestors ((name 'VMMaker-eem.619' message 'generateSelectedInt/ExternalPlugin holds a name not a class.' id '2f0e9169-e7d3-43f6-81bf-41a68d9cf80b' date '7 July 2010' time '4:35:03.140032704 pm' author 'eem' ancestors ((name 'VMMaker-eem.618' message 'CogVM:	add allocation checking to allocateInterpreterChunk:.	nuke obsolete method.VMMaker:	touch plugin on one-off generate to ensure its actually written	out' id '31b7e2d8-a0c2-410a-b4ab-23bf8475f833' date '7 July 2010' time '4:20:03.657359744 pm' author 'eem' ancestors ((name 'VMMaker-eem.617' message 'CogVM:	Avoid race between remapping and sampling long running primitive	by simply setting it to newMethod or nil post remap.  Add some	fences so that readers and writers sync accessing the value.' id '122d7809-600f-4f59-9b08-ba8c81bccf13' date '7 July 2010' time '12:24:01.135196224 pm' author 'eem' ancestors ((name 'VMMaker-eem.616' message 'CogVM:	Add a check for new objects being overwritten by filling eden witha marker value and checking that the value is present on every allocation.This will cause the VM to exit with an error on the next allocation aftera new object has been written into and beyond.Plugins: ReentrantFFIPlugin, dethreaded version of the ThreadedFFIPluginSlang:	Write out constants that look like hex in hex.Simulator:	Squeak4.x-ify.	Fix simulation of primitiveFileDelete' id '19c6a9db-c390-47b3-9c19-f558005ed621' date '6 July 2010' time '7:28:02.35332704 pm' author 'eem' ancestors ((name 'VMMaker-eem.613' message 'BitBltSImulation: Juan Vuletich''s fixes for combination rules that needto be handled as RGBA, not RGB.  Fixes font rendering in 4.1 images.' id '1f8aa371-b76e-4a5e-9b06-c2ccabf7484b' date '3 July 2010' time '6:30:56 pm' author 'eem' ancestors ((name 'VMMaker-eem.612' message 'CogVM: Correct sends of isMarked: & remap: in Cogit that shouldbe to objectMemory not coInterpreter.' id 'c12d3288-9d1a-4d94-b5b2-680a419cf62f' date '3 July 2010' time '6:06:59 pm' author 'eem' ancestors ((name 'VMMaker-eem.611' message 'FIx symbolicMethod:''s initial latest continuation (simulator)' id '0b480f31-e6e8-4667-b71c-51fb8cc43912' date '1 July 2010' time '7:40:36 pm' author 'eem' ancestors ((name 'VMMaker-eem.610' message 'CogMethodSurrogate>>isZero for simulation' id '6a25ff4e-1fed-4528-b8e8-6780a00cc4d2' date '1 July 2010' time '2:04:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.609' message 'CogVM:	some of the way towards bytecode pc to machine-code pcmapping.	set-up the quitBlock to close simulation window	comment out halts in simulated instVarOfContext methods' id '85739ffc-160e-452f-b1aa-882ba09aa278' date '29 June 2010' time '4:38 pm' author 'eem' ancestors ((name 'VMMaker-eem.607' message 'CogVM:	Fix off-by-one error in assigning inst vars of contexts viaprimitiveInstVarAtPut (!!).	Add printCallStackOfContext:.	Add missing markAndTracePrimTraceLog for stack simulation.	Add evaluation of atEachStepBlock to stack simulator run methods' id 'ea45f248-727d-48eb-b928-40fa6db5ef42' date '26 June 2010' time '3:05:17 pm' author 'eem' ancestors ((name 'VMMaker-eem.604' message 'CogVM:	Fix horrible bug in trace logs.  In Smalltalk the following isguaranteed to be +ve:	traceLogIndex - 3 \\ TraceBufferSizebut when translated to C:	traceLogIndex - 3 % TraceBufferSizeit can be negative and in the following cause an uncheckedout-of-bounds array access. So	(traceLog at: traceLogIndex - 3 \\ TraceBufferSize) = 0 ifTrue: [^nil].can incorrectly assume the trace log is empty if traceLogIndex haswrapped back to zero.	Remove use of debugging trace log for interpreter primitivessince the fast prim trace log suffices.	Extend leak checking to become.Slang:	Fix expansion of expressions in at: and at:put:.	Refactor generateInterpreterFile and generateCogitFile to	provide buildCodeGeneratorFoInterpreter/Cogit for testing	translations.	Nuke unused class VMMakerWithFileCopying and some	unused methods.' id '2d8951f0-d6b6-4c89-99ad-d2882472a6ca' date '24 June 2010' time '10:46:56 am' author 'eem' ancestors ((name 'VMMaker-eem.602' message 'CogVM:	Fix saving frames above interior frame for co-routining in	non-local return.	Merge Josh''s surface support into ThreadedFFIPlugin.	Add ioExitWithErrorCode: for simulating.	Fix blow up on updating of byteCount from background thread.	Remove unnecessary check in B3DAccelleratorPlugin>>stackMatrix:	Eliminate allocateChunk: from required method names (JITTER holdover?)	Merge most CroquetPlugin updates (these eliminate warnings)' id '935104d1-cb91-42ac-a303-87b8eac96e2e' date '23 June 2010' time '11:41:52 am' author 'eem' ancestors ((name 'VMMaker-eem.601' message 'CogVM:  Fix coroutining (e.g. Generator).  Base frame return must not  widow frames above the returned-to frame when the returned-to  frame is not the top frame since the frames above may still be  in use.  Add an optional exit code argument to quitPrimitive/primitiveQuit.  Fix Stack VM simulator for primitiveFileStdioHandles, and use  hex for stack addresses in frame printing.  Merge various niceties from VMMaker-eem.600.' id 'ed668fd9-7f90-4413-8adb-fa9cd1c9edee' date '22 June 2010' time '6:39:19 pm' author 'qwaq' ancestors ((name 'VMMaker-eem.597' message 'CogVM: Fix JIT crash for frameless blocks with temps.' id '5f815ccd-49a9-4346-b15f-fa181da9a56b' date '21 June 2010' time '6:10:23 pm' author 'eem' ancestors ((name 'VMMaker-jcg.593' message 'Add CroquetPlugin>>primitiveOptimizeVertexIndicesForCacheLocality, which uses Tom Forsyth''s algorithm rearrange mesh vertices to reduce GPU vertex-cache misses.' id '152e0820-1a01-4dd1-aac7-5528beb2c1e1' date '18 June 2010' time '5:03:41 pm' author 'jcg' ancestors ((name 'VMMaker-eem.592' message 'CogVM: Additional InterpreterProxy/sqVirtualMachine supportfunctions used by ThreadedFFIPlugin' id '2fd01d00-ff76-4853-be25-c5467d0a665e' date '16 June 2010' time '12:13:51 pm' author 'eem' ancestors ((name 'VMMaker-eem.591' message 'Slang: Translation improvements for ThreadedFFIPlugin, making	^exp caseOf: ...translate into a switch of the form case N: return exp; ...Prepending a plugin''s preambleCCode if any.' id 'c5483e26-9871-4c66-8a76-b3d17c9e5af6' date '15 June 2010' time '8:40:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.590' message 'ThreadedFFIPlugin: Merge Josh''s surface suppoprt prims from SqueakFFI.' id '9c635b0d-6548-4f71-ad0b-c6930f08076c' date '15 June 2010' time '7:17:52 pm' author 'eem' ancestors ((name 'VMMaker-jcg.588' message 'Fix push-pop mismatch in FFIPlugin>>primitiveDestroyManualSurface.' id 'bc2e19bd-281b-41e1-a92b-c92d16b5279d' date '14 June 2010' time '2:56:10 pm' author 'jcg' ancestors ((name 'VMMaker-jcg.587' message 'Add FFIPlugin primitives to support ExternalForm.Fix bug in BitBltSimulation... #warpBits used to proceed even if #lockSurfaces failed.  This can easily result in a VM crash.' id 'd92a2533-aa51-48ad-8e62-d41b6b58a085' date '14 June 2010' time '2:34:41 pm' author 'jcg' ancestors ((name 'VMMaker-eem.586' message 'CogVM: add safePriontStringOf: which can cope with forwarding objectsto obtain more reliable dumping of the primitive log during GC.' id 'dcb08fe3-8833-473a-945f-6c9070bd0b30' date '2 June 2010' time '4:25:11 pm' author 'eem' ancestors ((name 'VMMaker-eem.584' message 'Correct integration typo in VMMaker-eem.583 checkin.' id '1dab8071-9095-4f58-9c3f-1ec690d455bb' date '31 May 2010' time '2:04:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.583' message 'CogVM:	Fix bug with machine code references to objects in become ops.Make sure the youngReferrers list is pruned in mapObjectReferencesInMachineCodeForXXXGCotherwise youngReferrers can get duplicate entries which screws upremapping of obj refs in machine code during GC.	Mo'' betta asserts around the youngReferrers list and more leak	checking of generated code.	Make some bounds types in the method zone unsigned and cleanup some comparisons.' id 'e9758c5b-4ad3-4c20-877f-f85631570e6f' date '31 May 2010' time '1:54:24 pm' author 'eem' ancestors ((name 'VMMaker-eem.582' message 'CogVM: Extend the leak check to the traceLog.  Bob''s crash seems to bein there.' id '7e793a87-8d0b-4237-b289-46ebe4056cdf' date '28 May 2010' time '7:20:27 pm' author 'eem' ancestors ((name 'VMMaker-eem.578' message 'Move some SmartSyntaxPlugin VMMaker extensions from Collections and Kernel into the VMMaker package' id '4ea3046f-772a-413e-a27c-ecc7b75e9d6e' date '26 May 2010' time '4:26:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.576' message 'CogVMs:	Implement the unimplemented case in primitiveTerminateTo ofterminating from other than the top frame to a context in the middleof the current stack page.Slang:	fix source comparison of surrogate accessor classes (''foo'' asText ~= ''foo'' asString).	Use fixed pitch in formatting comments.Comments & typos.' id '82b3a5dd-0f8e-4a99-9e8d-80d25ff8f947' date '24 May 2010' time '2:29:32 pm' author 'eem' ancestors ((name 'VMMaker-eem.575' message 'Bow to the inevitable and make the order of UnsafeAlien and InvokeCallbackSelector match those in the outside world.  We''re not using these yet so it doesn''t affect us.' id '16f44afd-9087-40d0-b97e-ceb1982d29b3' date '22 May 2010' time '2:56:49 pm' author 'eem' ancestors ((name 'VMMaker-eem.573' message 'Slang:	code generation stability and compatibility with e.g. Squeak4.1.Sort locals in method temp declaration order.Be explicit about string sort order, using case-sensitive sorting.Enumerate methods in sorted ordewr in doBasicInlining:.' id 'b9916283-87c7-44c2-99b7-eeffc2ff0f34' date '21 May 2010' time '2:27:24 pm' author 'eem' ancestors ((name 'VMMaker-eem.572' message 'CogVM:	Make ancilliaryStructClasses initialize ProcessorClass as necessary.KlattSynthesizerPlugin	Merge with dtl''s initialization changes for refactored constant pools' id 'f820c1f5-ff93-478a-88d1-31787d705f27' date '20 May 2010' time '4:31:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.571' message 'Make ObjectMemory prim err table init code cope with a shortspecialObectsArray, and delete space between leading minus and digitds of a negative constant, to get Cog VMMaker to load in Squeak4.1.StackVM: Fix comment in primitiveVMParameter' id '6128e379-a1a4-4672-81ee-fac963731575' date '20 May 2010' time '3:22:17 pm' author 'eem' ancestors ((name 'VMMaker-eem.569' message 'Stack & Cog VM: fix typo in signed64BitValueOf: which makes it functionfor values with digitLength > 7.Adopt the Alien IA32ABI plugin.' id '00138af5-7bf9-402a-be33-b4868ef6140a' date '10 May 2010' time '6:50:59 pm' author 'eem' ancestors ((name 'VMMaker-eem.566' message 'CogVMs: VMMaker side of primitiveClockLogAddresses.  Get prim arg count right.' id '7a6084f0-685f-4601-b3a2-34bb4fa63116' date '10 May 2010' time '12:36:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.565' message 'CogVM: Argh, primitiveFailed != primitiveFail.' id 'b4af9a43-6256-40c3-bf87-7b35af0d2804' date '10 May 2010' time '12:00:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.564' message 'CogVMs: VMMaker side of primitiveClockLogAddresses that generatesinstead of barfing.' id 'ba60f73e-bdf4-435b-b8ef-5d5320316f49' date '10 May 2010' time '11:39:39 am' author 'eem' ancestors ((name 'VMMaker-eem.563' message 'CogVMs: VMMaker side of primitiveClockLogAddresses' id '6fc2b0e3-bc4c-4736-b22d-5627dfdaab56' date '10 May 2010' time '11:36:28 am' author 'eem' ancestors ((name 'VMMaker-ar.557' message 'Coercing float to doubles. Real men do cast!' id '67b26c02-8015-1f45-b488-772156f79414' date '5 May 2010' time '5:16:11 pm' author 'ar' ancestors ((name 'VMMaker-ar.556' message 'Bit-identitcality tweaks. In loops iterating over (pairs of) 32bit floats, always cast the float explicitly to ''double'' to give the C compiler no false idea of ''oh, you''re operating on vectors of single precision floats I don''t need to expand to double precision''. You do, stupid compiler, you do.' id '4bc8b32e-de23-9f43-864b-28c1b44e092e' date '5 May 2010' time '4:37:22 pm' author 'ar' ancestors ((name 'VMMaker-ar.555' message 'Update WebAuthPlugin to include Kerberos service principal name.' id '3b4141a3-9414-0c43-ad84-a0b25d1b092b' date '30 April 2010' time '11:28:02 am' author 'ar' ancestors ((name 'VMMaker-eem.554' message 'CogVM:	turn on prim trace log by default.' id '2df6d048-7c47-4fa1-8da2-af1af869245e' date '28 April 2010' time '3:23:29 pm' author 'eem' ancestors ((name 'VMMaker-qwaq.553' message 'CogVM:	provide a function version of recordPrimTrace for C support code.' id '3cc25748-6a66-444e-b73e-d13048efc3ef' date '28 April 2010' time '2:09:42 pm' author 'qwaq' ancestors ((name 'VMMaker-eem.552' message 'CogVM:	make sure primTraceLog is remapped during GC.  Fix limit	wrapping bug in remapping the vanilla trace log.' id '8d7c6f73-8e29-4733-93f9-8eb15a3d3765' date '28 April 2010' time '1:02 pm' author 'eem' ancestors ((name 'VMMaker-eem.551' message 'CogVM:	fast (inlined) tracing of primitives.	Fixed simulation rot so the simulator ups and runs again' id '382a89f7-656a-4471-babb-c6b04b955a35' date '26 April 2010' time '8:51:39 pm' author 'eem' ancestors ((name 'VMMaker-eem.550' message 'Correct a bug in the implicit yield on preemption changes.  A resumedprocess (be it via primitiveResume or by signalling a semaphore orexiting a critical section) must go to teh back of its run queue.  Onlya preempted process should go to the front of its run queue ifpreemptionYields.' id 'dab672e7-605b-4a02-98b5-22198b6ae71d' date '23 April 2010' time '12:36:56 pm' author 'eem' ancestors ((name 'VMMaker-eem.549' message 'Fix initialization snafu so that yield on preemption flag does getset from the image header.' id 'cc93c400-6c0c-4f26-b4ad-33965cbeeb98' date '22 April 2010' time '5:35:01 pm' author 'eem' ancestors ((name 'VMMaker-eem.548' message 'Provide a persistent flag controlling whether preemption causes aprocess to be put to the back of its run queue, forcing an implicit yield.If set, flag prevents preempting from causing an implicit yield, off bydefault, preserving current VMs semantics (preemption does force animplicit yield).  Flag is bit 2/value 4 of Smalltalk vmParameterAt: 48.' id 'f8ef6a6e-38b7-45b6-933b-cfc8db6d8e16' date '22 April 2010' time '5:07:47 pm' author 'eem' ancestors ((name 'VMMaker-ar.547' message 'Rename NativeAuthPlugin to WebAuthPlugin for more clarity about what it applies to.' id 'f98fdb86-ba25-7141-b928-6c189049be77' date '26 March 2010' time '6:01:11 pm' author 'ar' ancestors ((name 'VMMaker-eem.546' message 'CogVM: fix snafu in printOnTrace' id '68e140ab-4409-4e56-b809-549baf70e3a9' date '26 March 2010' time '1:17:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.544' message 'CogVM:	add tracing of interpreter primitives.Stack VM:	safer activation printingPlugins:	Add support code so that threaded FFI plugins translate correctly' id '5029f9d9-90ce-42b3-8246-da56ff0e6b42' date '26 March 2010' time '11:26:29 am' author 'eem' ancestors ((name 'VMMaker-eem.543' message 'FFIPlugin: merge with current state of threaded FFI plugin on Oinq' id '36b419e9-ddf4-4469-8b0c-5032f1a480b2' date '25 March 2010' time '8:00:54 pm' author 'eem' ancestors ((name 'VMMaker-jcg.541' message 'SoundPlugin.  Fix bug in #primitiveSoundEnableAEC:, and add new #primitiveSoundSupportsAEC to test whether the OS/hardware supports echo-cancellation.' id '1ad887ce-ed9d-e645-aafd-abfdfcfc6b2f' date '24 March 2010' time '5:44:16 pm' author 'jcg' ancestors ((name 'VMMaker-jcg.540' message 'New SoundPlugin primitive to enable/disable echo-cancellation: primitiveSoundEnableAEC().' id '055e93ba-d9ca-9e4d-93e8-afc91a6d1df8' date '24 March 2010' time '2:26:56 pm' author 'jcg' ancestors ((name 'VMMaker-ar.539' message 'Initial checkin for NativeAuthPlugin to support NTLM and Negotiate auth on Windows clients.' id 'd0312b04-9f36-fc44-b009-36a1339543aa' date '23 March 2010' time '6:44:39 pm' author 'ar' ancestors ((name 'VMMaker-jcg.538' message 'Revert "bug-fix" from -jcg.536.  The change that we made was actually already being done by the platform-specific code.' id 'a525081c-ed3a-4dc8-8bea-e0c8c9bcd67d' date '23 March 2010' time '3:16:31 pm' author 'jcg' ancestors ((name 'VMMaker-jcg.537' message 'Remove SoundPlugin>>primitiveSoundSetRecordBufferFrameCount:.  It''s not longer called from Squeak, and the support code has been removed from SVN.' id '6ce03a23-878a-4042-b594-704e56ccec87' date '22 March 2010' time '5:41:02 pm' author 'jcg' ancestors ((name 'VMMaker-jcg.536' message 'Fix an ancient SoundPlugin bug that can result in a buffer-overflow.' id '0d3db5d3-4d9f-c745-8ab8-e4afd0c1e331' date '22 March 2010' time '5:27:12 pm' author 'jcg' ancestors ((name 'VMMaker-eem.535' message 'CogVM:	integrate missing CoInterpreter>>methodReturnValue:.  Move	isYoung: up where it belongs.  Add a debug utility (clearTraceLog).' id '0420a353-80ac-43e1-ad73-6b0888d21c8b' date '17 March 2010' time '2:28:29 pm' author 'eem' ancestors ((name 'VMMaker-eem.534' message 'VMMaker:	add a doit that takes the platform dir as an arg to avoid an error' id 'fdda7205-8dc4-4e36-802b-ea290feb7560' date '10 March 2010' time '7:35:58 pm' author 'eem' ancestors ((name 'VMMaker-eem.533' message 'VMMaker:	Update Andreas'' doit to use the platform ''Cross''' id '49da5067-9650-4cf0-823f-bf114406d38f' date '10 March 2010' time '7:27:14 pm' author 'eem' ancestors ((name 'VMMaker-ar.532' message 'Remove the inline definition of void error(char*) from interp.c -- it is now a responsibility of the support code to provide a proper implementation.' id 'c0ac95d7-57ed-114e-8b30-762da0a9ee8f' date '10 March 2010' time '2:53:37 pm' author 'ar' ancestors ((name 'VMMaker-eem.531' message 'Stack & Cog VMs:	Fix primitiveFindNextUnwindContext/findNextUnwindContextUpTo:so that if called with nil as its argument it doesn''t die horribly tryng topick apart the context nil isn''t.' id '4939a66c-d355-4ab8-afae-84fe980487a1' date '9 March 2010' time '7:22:08 pm' author 'eem' ancestors ((name 'VMMaker-ar.530' message '- Change endPCOfMethod: not to rely on the trailer implementation- Add a doit allowing to generate source code programmatically' id '3fe70d21-7c92-9c4f-ba85-9d29f54b4bcb' date '8 March 2010' time '2:40:35 pm' author 'ar' ancestors ((name 'VMMaker-eem.529' message 'StackInterpreter & CoInterpreter:	primitiveContextSize needs to write back the head frame pointersto be able to find the stack pointer of a frame on the active page.' id '784f5163-06ea-4e67-b7ff-9604209cec92' date '3 March 2010' time '1:37:45 pm' author 'eem' ancestors ((name 'VMMaker-eem.528' message 'CogVM:	Fixes for coroutines (incomplete, but these fix the seg faults)' id '0d017a4c-f217-4ecc-ace6-4def5513e089' date '1 March 2010' time '11:01:38 am' author 'eem' ancestors ((name 'VMMaker-eem.527' message 'Stack VM:	support for a max external semaphore table size (vm parameter 49)	to allow the VM to pre-allocate space for lock-free signalling.	ioSynchronousCheckForEvents hook to allow the VM to provide a	synchronous ticker.' id 'b3d697ec-4a77-4f1f-956b-b9bc5fd9bf75' date '4 February 2010' time '4:01:14 pm' author 'eem' ancestors ((name 'VMMaker-eem.526' message 'CogVM:	Fix asserts in ceBaseFrameReturn:' id '39bf94f3-5c24-477f-8dfd-c28af9db9b51' date '2 February 2010' time '6:26:17 pm' author 'eem' ancestors ((name 'VMMaker-eem.525' message 'Stack & Cog VMs:	Add an assert to markAndTrace to ensure argument is sane.Crashes on linux client indicate markAndTraceStackPage can pass inbogis (apparently stack) addresses.' id 'e237da7e-ac49-4fe6-9d3b-ddcb95d667e6' date '2 February 2010' time '3:36:33 pm' author 'eem' ancestors ((name 'VMMaker-eem.524' message 'VMMaker:	changes for the single src tree CrossPlatformVMMaker.	make save/load include the Interpreter class name. ' id '9b748596-0986-4ca7-ac5b-b7a050a08431' date '15 January 2010' time '6:15:10 pm' author 'eem' ancestors ((name 'VMMaker-eem.522' message 'Stack & Cog VMs:	routines to access cogCodeBase & write back exception stack	pointers for backtracing Cog code.	Made primitiveVoidReceiver compile.	Nuked pair of obsolete versions of renamed routines.' id 'e6179577-4343-49f8-85eb-0f225917de04' date '10 January 2010' time '6:15:36 pm' author 'eem' ancestors ((name 'VMMaker-eem.521' message 'Add a couple of primitives to cradsh the VM for testing back traces.' id '87c91111-5af9-49e6-bbfc-1208fdf1b7af' date '9 January 2010' time '8:39:25 pm' author 'eem' ancestors ((name 'VMMaker-eem.520' message 'CogVM:	fix primitiveProfileSemaphore so profileSemaphore is assigned insetting to nil case.' id 'e0ff2219-db76-4ad6-9225-0e87a7e1c96e' date '19 December 2009' time '11:14:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.518' message 'Add primitiveHeartbeatFrequency to allow monitoring of the heartbeat.' id '8f71e93d-97b2-4632-9140-64ba15b37e3e' date '14 December 2009' time '10:42:13 am' author 'eem' ancestors ((name 'VMMaker-eem.516' message 'Stack & Cog VMs:	add time spent in GC to long-running primitive result.  Derived	from Oinq VMMaker-eem.515' id '1347c907-3c6d-461a-954f-e790880b9434' date '10 December 2009' time '3:01:55 pm' author 'eem' ancestors ((name 'VMMaker-eem.512' message 'CogVM:	avoid crashes due to arbitrary bytes appended to CompiledMethods	by the image (e.g. for source pointers or encoded temporary names).	Cogit scanMethod now finds the end of a method by finding the last	return bytecode, using forward branches to track reachable	continuations.' id '42a80b86-f8fd-482d-bab9-3aa8ced89b28' date '27 November 2009' time '2:56:56 pm' author 'eem' ancestors ((name 'VMMaker-eem.510' message 'Stack & Cog VMs	fix bounds check of errorCode in primitive error table.' id '39a434f4-26e9-48d8-b749-61e2c4e7818a' date '23 November 2009' time '9:31:47 pm' author 'eem' ancestors ((name 'VMMaker-eem.504' message 'Stack & Cog VMs:	get sense of assert right in sweepPhaseForFullGC.Cog VM:	send freeMethod to the right receiver in simulation (methodZone	not cogit)' id '05baf7a1-04cc-4263-8aa6-c207243b441f' date '12 November 2009' time '11:18:11 am' author 'eem' ancestors ((name 'VMMaker-qwaq.503' message 'Stack & Cog VMs:	undo the poorly thought-through modification to sweepPhase	for incrementalGC.  Use the modification for fullGC.  i.e. revert	sweepPhase and move the new version to sweepPhaseForFullGC.' id 'a6e56999-8fb2-4cad-9d31-565f950ef422' date '9 November 2009' time '1:36:43 pm' author 'qwaq' ancestors ((name 'VMMaker-eem.502' message 'CogVM:	fix bad bug in inline cache miss handling where a closed PIC is	created and the PIC reentered to dispatch.  Old code forgot to	reload ClassReg.  Compiling with the Intel 11.x compiler on Mac	uncovered this bug.CogVM/StackVM:	fix long-running primitive check	a) to not break primitivePropertyFlags: and hence no longer	    break callbacks	b) to avoid false positives	c) to answer milliseconds in the primitive instead of heartbeats	Fix hole in primitiveChangeClass/adoptInstance that didn''t check	indexable pointer objects correctly.Simulators:	bring logOf{Bytes,Sends}{Write,Verify}:  up to date.	use transcript inst var so openAsMorph works' id '1a7ee12c-ef8b-4631-ba33-515fcfc4bf25' date '23 October 2009' time '3:57:40 pm' author 'eem' ancestors ((name 'VMMaker-eem.500' message 'Stack & Cog VMs:	Eliminate unnecessary counting activity in sweepPhase, and always	set compStart to the lowest free chunk found in sweepPhase''s scan.	Comment typoes (mention freeBlock, should mention freeStart)Cog MT VM:	cedeToHigherPriorityThreads must set the current thread''s	priority to avoid highestPriorityThreadIfHigherThan: finding	the current thread.Cog VM:	fix off by one error in simulator''s idea of where the	methodCache sits in memory.' id 'c802278f-071f-432a-aefa-303c757a365b' date '6 October 2009' time '3:26:19 pm' author 'eem' ancestors ((name 'VMMaker-eem.499' message 'CogMTVM:	added fullGC lock quick hack for preventing full GC during	threaded prims.	Write the DisownVMLockOutFullGC flag to interp.cFile Plugin:	do a fullGC in primitiveFileStdioHandles to ensure stdio handles	are old and hence enable use of DisownVMLockOutFullGC in	sqFilePluginBasicPrims.cStack VM:	write prim err code defines to interp.cSlang:	support addressOf: operator to eliminate a few cCode:''s.' id 'e127ba8c-99e1-499b-b780-bb810d5e4466' date '5 October 2009' time '3:41:40 pm' author 'eem' ancestors ((name 'VMMaker-eem.498' message 'Cog MT VM	Make reenterInterpreter part of the per-thread state that is	swapped on thread VM ownership change.' id '32f80ffd-d1d3-4ef6-8a16-c43576a1e23c' date '2 October 2009' time '4:49:56 pm' author 'eem' ancestors ((name 'VMMaker-eem.497' message 'Cog MT VM:	fix stupid bugs in highestPriorityThreadIfHigherThan:' id 'e394f42e-a052-464d-8562-d16e2fa24203' date '2 October 2009' time '3:27:20 pm' author 'eem' ancestors ((name 'VMMaker-eem.496' message 'Cog MT VM:	Implement getVMThread for signalSemaphoreWithIndex:.Cog VM	Beef up the assertValidExecutionPointe:r:s:imbar: assertSlang:	translate cascades correctly.	Don''t generate plugins.ext or plugins.int if they haven''t changed	to avoid linux builds rerunning configure on every source gen' id 'acef30dc-e397-433c-9899-399516cdba29' date '2 October 2009' time '3:04:23 pm' author 'eem' ancestors ((name 'VMMaker-eem.495' message 'Cog MT VM:	use void * for stack pointer types for easier C debugging	include cointerprmt.h instead of cointerp.h.	thread-safe simulation of stack pointer cut=back on longjmp' id '2dfc8879-4f5a-4006-b374-951893231e05' date '1 October 2009' time '4:44:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.494' message 'Cog MT VM:	use void * for stack pointer types for easier C debugging	include cointerprmt.h instead of cointerp.h.	thread-safe simulation of stack pointer cut=back on longjmp' id '7c18b44e-dad0-445a-b379-c8f31893824d' date '1 October 2009' time '4:39:44 pm' author 'eem' ancestors ((name 'VMMaker-eem.493' message 'Cog MT VM:	more careful management of per-thread register state in	Cogit>>simulateLeafCallOf: means stack is not overwritten	when tryLockVMOwner and unlockVMOwner are invoked from	other than the current VM thread.	Simulation of the stdin listener example is now reliable.' id '414e346b-37db-4c2f-81e4-2b8bf36d8588' date '1 October 2009' time '10:09:40 am' author 'eem' ancestors ((name 'VMMaker-eem.492' message 'Stack & Cog VMs	add primitiveUpdateTimezone.	print process priority in printAllStacks et al.Cog MT VM:	Put activeProcess to sleep when ceding to other threads (!!).	implement correct simulation of ceCaptureCStackPointers &	add asserts for checking a thread''s C stack pts are valid.	fix simulation of leaf calls (used for try-lock/unlock) so they	don''t crash the Bochs plugin by attempting to execute an	out-of-bounds instruction.	Move save of CStackPointer/CFramePointer from disownVM to	preemptDisowningThread.	simulate cutting back processor stack pointers on longjmp	back to enterSmalltalkExecutive, and avoid C stack growth.	comment typosCog VM:	Fix package loading snafu with RootBit & RootBitDigitLengthSlang:	Don''t inline cmacro: methods.' id 'd099b65e-331c-41db-83f9-366a7251cf55' date '30 September 2009' time '3:48:19 pm' author 'eem' ancestors ((name 'VMMaker-eem.491' message 'Merge of Oinq with Homebase.Add the threaded stdio example, which works sporadically.Stragglers for the varous separate commits recently.' id 'c8b46551-7038-43e8-8904-35dbfb285752' date '25 September 2009' time '5:00:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.485' message 'Cog MT VM:	remember to write back head frame pointers to page when	ceding to other threads.  As a result, the input example runs	sporadically in the simulator.	dropping some debug printing/halts.Cog VM:	bounds-check stack accesses in the simulator.' id '845c33f2-b71b-4422-bc16-0923967b58b9' date '22 September 2009' time '5:22:06 pm' author 'eem' ancestors ((name 'VMMaker-eem.484' message 'Cog MT VM:	refactor cedeToHigherPriorityThreads so that the instrucitonPointer	is saved before giving up the VM.	Initialize the C stack pointers per-thread correctly in the simulator.	(This code is clumsy!)Cog VM:	Better instruction pointer printing in frame printing' id '85c0e644-8314-445c-94d3-c79366b1a1c6' date '22 September 2009' time '4:08:38 pm' author 'eem' ancestors ((name 'VMMaker-eem.483' message 'Cog MT VM:	Share the processor alien between threads.  Piggy-back off	CogThreadManager''s thread-local storage to save the register	state for each process.  Ensure state is current on entering or	returning to code simulation ceEnterCogCodePopReceiverReg	& handleCallOrJumpSimulationTrap: around simulateCogCodeAt:	allocate 4k chunks of stack per threasd (no asserts to check if	in correct segment yet).' id 'ba5e94be-fc01-4656-84a8-ea93f4f14d03' date '18 September 2009' time '3:36:15 pm' author 'eem' ancestors ((name 'VMMaker-eem.482' message 'CogVM:	Use >= numSmallIntegerBits instead of > numSmallIntegerBits - 1	in machine code bitShift: primitive.CogMTVM:	don''t push instructionPointer around preemptDisowningThread/ownVM,	and instead save it in the CogVMThread.' id '57b4950c-7eff-4d71-add0-831255960306' date '18 September 2009' time '11:16:25 am' author 'eem' ancestors ((name 'VMMaker-eem.481' message 'Cog MT VM	cedeToHigherPriorityThreads updates activeProcess & stackPage	with the state of the top context before searching for a higher	priority thread, and ceeding if found.	preemptDisowningThread pushes the instructionPointer and	updates stackPage''s pointers to refer to the top frame.	threadSchedulingLoop remembers to store the newly awoken	highest-priority process in the scheduler''s activeProcess slot.	if preempted, ownVM: pops instructionPointer after	externalSetStackPageAndPointersForSuspendedContextOfProcess:	so matching the push in preemptDisowningThread.	N.B.  All callers of externalSetStackPageAndPointersForSuspendedContextOfProcess:	pop the instructionPointer immediately after so this must be refactored.' id '25e14357-0a9e-475b-8c3f-e5ae9afbc133' date '17 September 2009' time '5:51:37 pm' author 'eem' ancestors ((name 'VMMaker-eem.479' message 'CogVM:	fix bug in machine code SmallInteger>>bitShift: prim that	computes -1 bitShift: 31 as 0 (!!)	collect profile sampel on primitive failure side of	cePrimReturnEnterCogCode trampoline as well as success,	since now profiler collects samples before calling the primitive,	a sample collected afterwardfs is still in the primitive, even	though it failed.  For example, BochsIA32Plugin runs code until	an execution error, so can have done substantial work before	failing.	Fixed bug in mapStackPages where top frame''s saved ip may	not be set, which is fine because instructionPointer is updated.BalloonEngineSimulation	speed up simulator by remembering previous BitBltSimulator	instead of creating a new one on each copyBits.' id '70c50a8f-4009-4767-a08a-42d65902d27d' date '17 September 2009' time '1:06:51 pm' author 'eem' ancestors ((name 'VMMaker-eem.478' message 'Cog & Stack VMs:	don''t use == when comparing stack pages because in the JIT	stack pages are surrogates for pages in memory, so using ==	is wrong.	Don''t use == for comparing objects or frame and stack	pointers as these could conceivably be large integers.' id '139cc060-b62d-4100-96f4-5d2099b6fde4' date '17 September 2009' time '9:53:14 am' author 'eem' ancestors ((name 'VMMaker-eem.477' message 'Cog MT VM	implement simulation of the stdio handles for debugging MTFFI	in the simulator	Add an assert to mapStackPages that tracks a bug caused by	using == to compare stack pages instead of =.	Implement primitiveRelinquishProcessor and make it	force an interrupt check.  Make ioRelinquishProcessorForMicroseconds:	reverse the top-left of the display when simulating.	Add CFramePointer save/restore to CogVMThreads	Add event peeking to stackLimitFromMachineCode to get	input working.Stack & Cog VMs:	fix simulator''s smashing of stackLimit to (char*)-1.  It needs to	be unsigned to be greater than any possible stack pointer.	Fix some self longAt:''s that should be stackPages longAt:''s.Slang:	allow cCode:inSmalltalk: to take a block as its first argument.' id '3d42252e-54f4-4899-b2aa-123a667c4e95' date '17 September 2009' time '9:37:47 am' author 'eem' ancestors ((name 'VMMaker-eem.476' message 'CogVM:	Make QSystemProfiler profile code conditional based on whether	the profile semaphore has been installed or not (i.e. throw	away and lazily recompile code when switching profiling on or off).	Speed up simulator by not printing addresses in	handleCallOrJumpSimulationTrap:Stack VM:	stop space leak by having primitiveProfileSemaphore nil	profileMethod and profileProcess.' id 'b140afd5-aff1-45fb-a4bf-b69306ffb96a' date '14 September 2009' time '7:58:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.475' message 'CogVM:	handle the dreaded SmallInteger minVal / -1 overflow case in	SmallInteger / // & quo: machine code prims' id 'bdd624ab-6429-4a63-96cf-282fdb8387ea' date '14 September 2009' time '10:06:42 am' author 'eem' ancestors ((name 'VMMaker-eem.474' message 'Merge with VMMaker-eem.472.CogVM:	Added machine code primitives for / // quo: & \\.	Changed interp.h so that MT & vanilla sources can be generated	and compiled in same vm tree.Stack & Cog VMs:	Made GC and code flush timings use microseconds internally.	Slight speed up & simulator fix for signed64BitValueOf:	printStringOf: prints hex for integers and byte arrays.' id 'f05eebea-acd8-4158-9228-0bfb304f8e83' date '13 September 2009' time '1:50:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.473' message 'CogVM:	machine code store check must use unsigned comparisons for	both comparisons, bozo.' id 'b3b03aff-44f5-4f4f-a0e2-abad87b4e32c' date '2 September 2009' time '6:18:15 pm' author 'eem' ancestors ((name 'VMMaker-eem.471' message 'CogVM:	fix signed comparison bug in generated store check.  Must use	unsigned comparisons in both comparisons, not just one (!!).	Fixed warning in genPrimitiveIdentityHashStack & Cog VMs:	Added primitiveOriginalMillisecondClock' id '1c3a9b6d-395c-4aae-b63e-ff4c05c6665f' date '2 September 2009' time '5:44:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.469' message 'CogVM:	Add machine code primitiveIdentityhash	Add heartbeat count to info collected by long-running primitive	check.	conditionalize threaded support trampolines so the non-threaded	Cog VM still builds.All VMs:	Use defined HashBitsOffset HashBits symbolic constants	instead of bare integers.Slang:	Parameterise comment writing with BitstreamVersSans so that	method comments are not refrmatted when using a different	system text style.' id '04b4787a-10c4-4a5d-ac37-cef2c433cb49' date '1 September 2009' time '10:17:49 am' author 'eem' ancestors ((name 'VMMaker-eem.468' message 'Merge with VMMaker-eem.467CogVM:	functional long-running primitive check.' id '3fbbff8d-ae94-4cf7-bb12-d92f407f2a11' date '28 August 2009' time '3:48:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.462' message 'CogVM:	Fix bug in clearCogCompiledCode; must void youngReferrers.Cog & Stack VMs	Replace 30-bit millisecond clock with 64bit microsecond clock.	Primitives to signal at UTC microseconds, get UTC & local	microseconds.	Add a primitive to void VM state (#214)	broken support for long-running primitives	drop get/setNextWakeupTick[:] and replaced with	get/setNextWakeupUsecs[:].	nuked unused iolowResMSecs' id '32154d35-1ac2-4852-9741-77e5a55a10ba' date '26 August 2009' time '4:16:13 pm' author 'eem' ancestors ((name 'VMMaker-eem.461' message 'CogVM:	provided a parameter to control sizse of methods compiled to	machine code.  Changed default size to 60 literals or less.	Added flagging of interpreted methods via bit 2 (4) of	vmParameterAt: 48.  VM sets flag bit of a method''s header if	flagging in effect.	Fixed bug in setImageHeaderFlagsFrom: to avoid setting	processHasThreadId incorrectly.' id '4744a22e-dcee-4d94-b7e8-f3585a82158b' date '20 August 2009' time '11:09:17 am' author 'eem' ancestors ((name 'VMMaker-eem.460' message 'CogVM:	threadSchedulingLoop: must pop the instructionPointer a la	transferTo:[from:].' id '3597bced-851e-4193-bc2b-ba9d0a503533' date '18 August 2009' time '5:22:45 pm' author 'eem' ancestors ((name 'VMMaker-eem.459' message 'StackVM:	inline temporary:in: for faster marryFrame:SP:CogVM:	implement missing storeAndPopTemporaryVariableBytecode	to use itemporary:in:put: instead of temporary:in:put:.	Restore missing currentVMThread.	Fix bugs in GC simulation (newMethodOrNull: is nil, not 0, when	undefined).	CogVMThread>>new should be initialize (doh!)' id '39c05365-ad05-420e-8b1d-5be8300b644f' date '18 August 2009' time '4:35:24 pm' author 'eem' ancestors ((name 'VMMaker-eem.458' message 'restored GeniePlugin with DTL''s fix to eliminate extra temps' id '4737c835-4bf8-4a5d-87ce-5bfce805949e' date '18 August 2009' time '2:36:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.457' message 'CogVM:	deferred all the process manipulation (setting myList to the	ProcessInExternalCodeTag, marrying frame and saving	context in process) to preemption time.	Added disowningVMThread to remember the disowning	thread that may be preempted.StackVM:	Refactored transferTo: extracting code to make new active	context executable to externalSetStackPageAndPointersForSuspendedContextOfProcess:	Fixed a couple of bugs in the simulator.  On the Cog VM the	StackVM simulates faster than at a crawl.All VMs:	Store nil in myList of new active process in transferTo:[from:]' id '9b27278c-06a6-4be6-8359-a7a743b77e99' date '18 August 2009' time '1:19:14 pm' author 'eem' ancestors ((name 'VMMaker-eem.456' message 'CogVM:	Thread management starting to work.  Can do 3+4=7 through	listener making read calls on stdin without blocking the image.		Added point to switch threads in the midde of transferTo:from:		that is stubbed out in CoInterpreter but longjmps back to		the threadShedulingLoop in CoInterpreterMT.		CogVMThread keeps a stack of "awolProcesses" that are		in external code.		Use of an OSSemaphore is now of that in a CogVMThread		rather than a copy to a local variable (doh!).		ExecutingExternalCodeFlag bites the dust. It can''t fly.		Refactored to get rid of optionallyStartThreadSubsystem.	Fixed assert in activateInterpreterMethodFromMachineCode	that would complain if a methods primitive is not implemented	by the VM (e.g. next & nextPut:).Stack & Cog VM:	Print process oop when printing all stacks.Slang:	Don''t complain about <doNotGenerate> methods being already	defined; they''re going to be filtered out anyway.' id '80401821-35c1-4f89-9b47-4723b4f91d2b' date '17 August 2009' time '3:06:55 pm' author 'eem' ancestors ((name 'VMMaker-eem.455' message 'CogVM:	Thread management starting to work.  Can do 3+4=7 through	listener making read calls on stdin without blocking the image.		Added point to switch threads in the midde of transferTo:from:		that is stubbed out in CoInterpreter but longjmps back to		the threadShedulingLoop in CoInterpreterMT.		CogVMThread keeps a stack of "awolProcesses" that are		in external code.		Use of an OSSemaphore is now of that in a CogVMThread		rather than a copy to a local variable (doh!).		ExecutingExternalCodeFlag bites the dust. It can''t fly.		Refactored to get rid of optionallyStartThreadSubsystem.	Fixed assert in activateInterpreterMethodFromMachineCode	that would complain if a methods primitive is not implemented	by the VM (e.g. next & nextPut:).Stack & Cog VM:	Print process oop when printing all stacks.Slang:	Don''t complain about <doNotGenerate> methods being already	defined; they''re going to be filtered out anyway.' id '585d08b5-fa0e-4db4-ac61-014453e1d67c' date '17 August 2009' time '3:05:57 pm' author 'eem' ancestors ((name 'VMMaker-eem.454' message 'CogVM:	restructured simulation and initialization so threaded VM can	invoke threadSchedulingLoop:startingVM: on start-up.VMMaker	Add "settersReturnValue ^true" to VMStructType class.' id '3cdf2d4b-1b4d-4db2-abdb-6f1190431f0f' date '12 August 2009' time '4:45:19 pm' author 'eem' ancestors ((name 'VMMaker-eem.453' message 'Stack & Cog VMs:	add and use activeProcess throguhout process prims etc.	fix "reciever" to "receiver" in commentsCog MT VM:	Flesh-out thread scheduler.  First cut of ownVM/disownVM	(invalid because process scheduling issues have yet to be	thought-through, but still good progress here).  Discard bogus	ProcessesExecutingExternalCodeList scheme (a runnable proc	can happily live on the runnable processes list, so can''t move	to ProcessesExecutingExternalCodeList). See class	comment of CogThreadManager.	Make threads array hold pointers to CogVMThreads instead of	be composed of them.  Hence growing list no longer affects	holders of CogVMThreads in the array.	Use XCHG instead of CMPXCHG for low-level lock.	Hang CogVMSimulator off CoInterpreterMT and implement	a perform:withArguments:inSuperclass: based switch to elide	CoInterpreterMT methods when simulating CoInterpreter.	See CogVMSimulator>>optionallyStartThreadSubsystemCog VM:	Move removal of Cogit & CogMethodZone simulation variables	to declareCVars: where they belong.	Speedup simulation by deferring printing addresses until	report time.	Fix CoInterpreter class>>exportAPISelectors to work in a	subclass (CoInterpreterMT).FFI Plugin:	nuked ffiArgClass; it isn''t used.Threaded FFI Plugin:	Work in progress.  Clone of FFIPlugin. Uses disownVM/ownVM	in right places.  Still needs to be made reentrant by using	alloca to hold all per-call state (see	http://lists.squeakfoundation.org/pipermail/vm-dev/2009-August/002889.html)' id 'f94c18b0-5be9-4b00-a412-74a2d9aec2ee' date '7 August 2009' time '3:57:42 pm' author 'eem' ancestors ((name 'VMMaker-eem.449' message 'All VMs:	made HeaderTypeExtraBytes a class var defined once only	refactored exportAPISelectors to make overriding easier	deleted ClassTranslatedMethodCogVM:	added first cut of multi-threaded VM with changes coralled	in CoInterpreterMT and its support classes CogVMThread	and CogThreadManager.  See CogThreadManager''s class	comment for design doc.	needs updated source tree (checkin to follow)' id 'ff1abdd7-bd16-41a8-9898-582d8d196788' date '17 July 2009' time '9:18:56 pm' author 'eem' ancestors ((name 'VMMaker-eem.448' message 'All VMs:	fix stack offset bugs in zero-arg primitives in File Security	and Socket plugins.CogVM:	fix bug in failing to round up size of a PIC.  Added concomitant	asserts.	improve x86 code quality by using ModRegInd instead of	ModRegRegDisp8 with a 0 displacement byte (which threw	up PIC size bug).	Added CMPXCHG & LOCK instructions for compare-and-swap	for threaded VM, and used to implement ceTryLockVMOwner.	fixed bug in lookupAddress: for disassembly.	fixed some cCoerceSimple:''s for simulation & commented the	ones that shouldn''t be fixed.	Added initial CogthreadManager with design doc in class	comment.	Fixed simulation bug in	rewriteMethodCacheEntryForExternalPrimitiveToFunction:.	fixed typoes & nuked unused accessor' id '1c4b43cf-9e70-4d5c-8a12-2a45d601f9bb' date '10 July 2009' time '2:13:04 pm' author 'eem' ancestors ((name 'VMMaker-eem.447' message 'CogVM:	fix Python callback crash.  callbackEnter needs to deal with the	case where the call-out frame is flushed to the heap and is	faulted back in.  In this case instructionPointer won''t be set	to ceReturnToInterpreterPC, nor its value saved in the frame.	So callbackEnter must check and if necessary make it so.' id '51afeb48-7c83-400e-98df-a7f85e7a91b6' date '7 July 2009' time '8:49:29 pm' author 'eem' ancestors ((name 'VMMaker-eem.446' message 'CogVM:	~10% faster Compiler recompileAll by checking if a cog	method has the selector to be flushed before making a pass	over machine code to unlink it.		Time millisecondsToRun: [Compiler recompileAll]		149277 - 158512 / 1585.12 -5.82605733319875		146565 - 168610 / 1686.10 -13.07455073839037' id 'fa2057d1-8681-40eb-9eec-d61abb25a868' date '27 June 2009' time '11:39:44 am' author 'eem' ancestors ((name 'VMMaker-eem.445' message 'CogVM:	Removed restriction on compiling methods that contain new	literals, and on linking to methods when a receiver''s class is	new, or when a selector is new.	Fixed bugs in machien code traversal (during GC & during	unlinking) where previosly freed machine code methods would	be traversed if valid.	Fixed bugs where freed methods and/or PICs would not be	removed from the youngReferrers and/or open PICs lists.	typoes (referers => referrers).Slang:	provide doNotGenerate: pragma for eliding varables (e.g.	because they''re only used for simulation).VMMaker:	log a timestamp to the VMMaker transcript so one can tell	when the sources were last generated.' id '7fbfd87d-61cd-40f7-b91d-3a26f39b0f98' date '26 June 2009' time '3:45:44 pm' author 'eem' ancestors ((name 'VMMaker-eem.444' message 'CogVM:	correct fix in VMMaker-eem.436.  The map enumeration code	needs a flag so that it only elides the skip to the next bytecode	the first time it needs to and not every time.  Fixes symptom	where a context for a method that starts with bytecode 132	has bogus pcs, showing it always at the first bytecode.	less warnings.' id 'b0159ed6-e631-468e-9fe8-9cf167cbe8af' date '25 June 2009' time '1:51:48 pm' author 'eem' ancestors ((name 'VMMaker-eem.443' message 'Stack & Cog VMs:	catch attempts to return to terminated contexts (pc = nil) as	cannotReturns.	renamed baseReturn to baseFrameReturn to match ceBaseFrameReturn.	comment typoe.CogVM:	Keep contexts that can''t return in a can''t return state so that	e.g. proceeding causes a resend of cannotReturn: (until we	provide e.g. a cannotResume selector).  At least this works for	both returns other than ^-return in a block.	less warnings' id 'aacc8282-57a3-4f3b-99dd-aa01ff815ca2' date '24 June 2009' time '4:13:33 pm' author 'eem' ancestors ((name 'VMMaker-eem.442' message 'CogVM:	need to void the openPICList when clearing compiled code.  if	not the system crashes soon after a save.' id '94ba7dcb-9822-4a41-8d61-838b99fd0886' date '24 June 2009' time '11:40:47 am' author 'eem' ancestors ((name 'VMMaker-eem.441' message 'CogVM:	keep open PICs on a list so they can be shared.  Link a	newly polymorphic send site to an open PIC if one exists	with the same selector.  Stats show such sites are on their	way to becomming megamorphic anyway and this saves	lots of interim closed PIC updatets.	fewer warnings.' id '2e722d03-ed81-44b8-8df7-2697919b19a2' date '22 June 2009' time '7:38:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.440' message 'CogVM:	revive simulator after recent primitiveExternalCall changes.	add some cog method printing & collecting conveniences' id '00447bdc-02e4-4631-998f-0da8ea00a2bb' date '22 June 2009' time '10:41:24 am' author 'eem' ancestors ((name 'VMMaker-eem.439' message 'CogVM:	Fix bug where recompile all causes mustBeBoolean for	result of Quaternion>>#= in Dictionary>>scanFor:.	Bug was a copy-paste error in functionForPrimitiveExternalCall:	that used the global newMethod in place of the arg methodObj.	Changed primitiveExternalCall machine code cacheing to	substitute primitiveFail instead of primitiveExternalCall when	voiding the cached function.	Split the externalPrimCallOffsets table into two, adding	externalPrimJumpOffsets.  Only the latter is used but the split	is correct.' id '9b267085-8fba-45f7-90c6-e34180f3ea6a' date '21 June 2009' time '3:18:47 pm' author 'eem' ancestors ((name 'VMMaker-eem.438' message 'CogVM:	Fixed BalloonEngine>>primFlushNeeded: bogus failure bug.  The fix	is to primitiveExternalCall''s cache entry rewriting logic that no longer	depends on lkupClass & messageSelector, but instead on the new	lastMethodCacheProbeWrite, set by addNewMethodToCache:.  If	newMethod is at lastMethodCacheProbeWrite + MethodCacheMethod	then the cache entry can safely be rewritten.	Less warnings by using CogBlockMethod * more in places that used	CogMethod * previously, & by typing arg in checkOopIntegrity:....	First support for threads.  VM gets a processHasThreadId flag that	states that Process''s 4th inst var (after myList) is a threadId slot.Stack & Cog VM:	cleaned up primitiveVMParameter by making the various getCogFoo	methods answer SmallIntegers.	Added some error codes used in primitiveExternalCall;		PrimErrBadMethod & PrimErrNamedInternalStackVM:	use inner/convenience ioLoadFunction:From: in place of outer/mouthful	ioLoadExternalFunction:OfLength:FromModule:OfLength:Slang:	comment typoe' id '70e25f3e-e644-468a-b462-a8c6d1606aa9' date '20 June 2009' time '12:18:04 pm' author 'eem' ancestors ((name 'VMMaker-eem.437' message 'CogVM:	Fix bug where base frame return and context inst var access	can invalidate the instructionPointer if they provoke a code	compaction.	Fix bug where ensureMethodIsCogged: didn''t count or time	code compactions, or update the stack correctly.	Added asserts to code compaction to check that any updated	instruction pointers are valid, and to callbacks to check	primFailCode is zero on return to C.	Fixed compilation warning for primitiveTerminateTo.	Fixed another simulated coercion for the youngReferrers	list.	Added code to allow stress testing compactions by forcing a	compaction on every ensureMethodIsCogged:.' id '75ecd689-db60-45a8-94e7-a1d76c36ee17' date '18 June 2009' time '7:51:44 pm' author 'eem' ancestors ((name 'VMMaker-eem.436' message 'CogVM:	All machine code pcs with bytecode pcs map to the following	bytecode except the first bytecode/stackCheckOffset. Special	case that before traversing the map.' id '6401253a-d89d-49fb-971b-95ce823a7ca7' date '17 June 2009' time '11:34:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.435' message 'CogVM:	moved use of CPUID for serializing on instruction modification	to a subclass.  I RTFM and it''s not needed unless code and	data reside at different virtual/linear addresses.	Added support for generating MFENCE.' id '2d47727d-698f-422a-9f40-3fb27e5ffd25' date '17 June 2009' time '9:07:46 pm' author 'eem' ancestors ((name 'VMMaker-eem.434' message 'CogVM:	^-return in block pc needs to map to a bytecode pc' id 'c5e5f033-0f67-4e15-ac3b-2d5de9cad6a9' date '17 June 2009' time '9:47:58 am' author 'eem' ancestors ((name 'VMMaker-eem.433' message 'CogVM:	rationalized pc mapping increment to following bytecode	into one place for both HasBytecodePC and IsSendCall.	fixed checkIsStillMarriedContext:currentFP: to avoid assert	fail.Stack & Cog VMs:	added an "xray" primitive to inspect internal state of a context	for tests to be able to check that conditions are as assumed.' id 'be9d14cf-8beb-4562-a46f-d5315ada6a75' date '16 June 2009' time '10:27:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.432' message 'CogVM:	Fixed map enumeration of bytecodes for case where first	bytecode is a block creation.	Abstracted out common code for nextBytecodePC of a	bytecode descriptor' id '62b59a58-f14b-4b77-ae31-629c403bb225' date '16 June 2009' time '5:35:42 pm' author 'eem' ancestors ((name 'VMMaker-eem.431' message 'StackVM:	Fixed simulator w.r.t. float order flags.  In C 1 = true, but not	in Smalltalk.CogVM:	Fixed bug in encode/decode of machine code pcs in blocks.	pc is relative to block method not enclosing home method.	Fixed bug in ceMustBeBoolean: which pushed wrong return pc.	Fixed bug in pc mapping for mustBeBoolean which mapped to	the jump bytecode instead of the following bytecode.	Fixed bug in ceSend:super:to:numArgs: where mapping of	"don''t link" arg count to real arg count was wrong.	Some refactoring of pc mapping to help assert checks (yet	to be written).	Fixed simulator for processing young referrers list.' id '5cd82b4f-2480-4c55-9930-c4ce31c4d4eb' date '16 June 2009' time '12:38:53 pm' author 'eem' ancestors ((name 'VMMaker-eem.430' message 'All VMs:	Moved prim err code defines to VMBasicConstants to share	defs with the InterpreterPlugin hierarchy.	Recompile after loading!CogVM:	Fix bad bug in genPrimReturnEnterCogCodeTrampoline.  Old	code assigned Smalltalk stack pointer into CStackPointer on	primitive failure of a named primitive.	Removed redundant argCount arg from	activateInterpreterMethodFromMachineCode:.	Added two variables to record last C frame on entering	machine code for debugging.  These are only assigned to	if the -dpcso (debugPrimCallStackOffset) arg is non-zero.StackVM:	added prim err codes to method execution prims.' id 'b7284700-512e-4898-b9b4-a293764d1b04' date '15 June 2009' time '12:38:04 pm' author 'eem' ancestors ((name 'VMMaker-eem.429' message 'All VMs:	document the contract between executeNewMethod and the	perform and executeMethod primitives.  Fix unsafe code	in primitiveExecuteMethod.  Fix check of newMethod instead	of the method argument in primitiveExecuteMethodArgsArray.	Make failed read primFailCode ~= 0, not > 0, since i.e.	primitiveDoNamedPrimitiveWithArgs uses negative err codesCogVM:	Fix primitiveExitCriticalSection to only call	forProcessPrimitiveReturnToExecutivePostContextSwitch: if	there is a switch.	add an assert to activateInterpreterMethodFromMachineCode:	for the BallonEngine prim fail bug hunt.	pass method to ceInterpretMethodFromPIC:receiver:' id '8a87f976-7405-4a88-a04e-f9429606e56f' date '12 June 2009' time '11:41 am' author 'eem' ancestors ((name 'VMMaker-eem.428' message 'Balloon Engine:	setup primitive shell changed to answer specific error codes	for failures.  NEEDS Balloon-eem.17 FIRST.  Don''t forget to evaluate 	BalloonEngineConstants initPrimitiveConstantsafter loadStack VM:	fixed snafu with checkCodeIntegrity => checkCodeIntegrity:	renamed StackInterpreter stub to match.' id 'fe6e9252-5326-47dd-ab02-8157b4134c3f' date '8 June 2009' time '10:52:42 am' author 'eem' ancestors ((name 'VMMaker-eem.427' message 'CogVM:	repeatedly recompiling a method for block activation that can''t	be compiled (e.g. because it contains a new reference) is a bad	idea; it hurts.  Don''t do that.	this is the same as Oinq:VMMaker-eem.427 without the	BalloonEngine changes' id 'd9a8bfc9-8492-4739-a113-f7fd6400d836' date '5 June 2009' time '3:22:17 pm' author 'eem' ancestors ((name 'VMMaker-eem.423' message 'All VMs:	remove duplication in noteAsRoot:headerLoc:Cog VM:	doc & polish' id 'cf07f786-e964-44b2-9d57-07282128ddb4' date '4 June 2009' time '10:52:52 am' author 'eem' ancestors ((name 'VMMaker-eem.422' message 'CogVM:	documented trampoline return pc/instructionPointer behaviour.	fixed stack offset bug in cePushActiveContext.	moved ceCheckForInterrupts''s pop of return pc into	instructionPointer from C to the trampoline (it''s quicker that way ;) )	fixed some trampoline name typoes and a comment typoe' id '5b8324b2-037a-480b-a0e1-617959f4003f' date '2 June 2009' time '8:44:18 pm' author 'eem' ancestors ((name 'VMMaker-eem.421' message 'Stack & Cog VMs:	No need to include the pushed copied values in the outer	context when a frame is married tyo create a closure within it.' id '7c7e5465-d636-46b4-b858-037319e0adfd' date '2 June 2009' time '4:16:06 pm' author 'eem' ancestors ((name 'VMMaker-eem.420' message 'All VMs:	asserts to check context stack pointer store/fetch is in bounds.Cog VM:	If, when a closure is created in a machine-code activation,	the frame is married we must not include the pushed return	pc in the context''s stack contents.  if we do we may store a	stack pointer value that is one too big and subsequently	causes the smashing of the following object''s header when	the context is e.g. remapped and its end is determined from	the stack pointer.' id '71dce4ac-6b2b-49cd-a487-5099448bbffb' date '2 June 2009' time '3:53:10 pm' author 'eem' ancestors ((name 'VMMaker-eem.419' message 'Stack & Cog VMs:	move post-markPhase leak check to post-sweepPhase.	add asserts to mapStackPages to ensure written-through	pointers are on page.' id '85f08a8d-722a-4aed-851e-46c3f134f6fc' date '2 June 2009' time '11:41:30 am' author 'eem' ancestors ((name 'VMMaker-eem.418' message 'All VMs:	refactor remap code so that forward block dereference is in	one method (remappedObj:), not three.  Add assert for valid	result of remappedObj:.Cog VM:	add a couple of functions with which to check that asserts are	enabled checkAssertsEnabledInCogit/CoInterpreter.' id '466403ef-eeb2-45e9-9587-958717c52ad2' date '2 June 2009' time '9:54 am' author 'eem' ancestors ((name 'VMMaker-eem.417' message 'All VMs:	fix leak checker''s determination of the length of a compiled method	Procedurally abstract the various passes of the leak checker.	Put an assert check for a valid object on both ends of remap	(creating the forwarding entry and dereferencing a forwarding pointer)CogVM:	Pass in fullGC flag to code integrity check to avoid bogus	young but not so marked assert failures on full GC' id 'ee5ac7ff-ffa3-4b85-95c5-feb520781f12' date '1 June 2009' time '4:56:51 pm' author 'eem' ancestors ((name 'VMMaker-eem.416' message 'All VMs:	run leak check on start-up if it is turned on for fullGC' id 'd3c6e9b5-dc78-4068-8516-405e7b98f3c4' date '29 May 2009' time '5:26:47 pm' author 'eem' ancestors ((name 'VMMaker-eem.415' message 'All VMs:	revert non-bug in leak checker.	Add assert to catch bogus oops stored in contexts when	updating their state from the stack.' id '4ca6fb81-b1fc-47c5-afc3-36d7ce13fee3' date '29 May 2009' time '5:16:55 pm' author 'eem' ancestors ((name 'VMMaker-eem.414' message 'All VMs:	fix off-by-one error in leak checker that causes it not to check	the last accessible field (top of stack) in a context.	clean-up primitiveStoreStackp (stackp access over complex cuz	context is stable; stackp is an int so use signed comparisons)' id '270ab01d-f5e3-4a7b-817d-75bfe2fe1e4f' date '29 May 2009' time '2:41 pm' author 'eem' ancestors ((name 'VMMaker-eem.413' message 'All VMs:	export buildInfo for debug backtrace as __interpBuildInfo and	__cogitBuildInfo.CogVM:	bug fix for profiler (Slang snafu):		#primitiveYield => #primitiveYield asSymbol	Make getCurrentBytecocde check for being in an interpreter	frame.' id '80b24ac5-735c-4871-bc9a-57012daca320' date '29 May 2009' time '10:25:23 am' author 'eem' ancestors ((name 'VMMaker-eem.412' message 'CogVM:	beef-up the "is a method header in fact a pointer to a Cog method"	assert.' id 'ec79b352-74d5-4b4e-9ab4-669db7935823' date '28 May 2009' time '4:40:35 pm' author 'eem' ancestors ((name 'VMMaker-eem.411' message 'CogVM:	instruction pointer access in [external]instVar:ofContext: must	write-back stack page pointers before using	mustMapMachineCodePC:context: since it uses	ensureMethodIsCogged: which may cause code compaction	and trace the current page incorrectly if headFP/headSP	are stale.' id '6f2ab522-d046-49aa-86b1-087402f78c51' date '27 May 2009' time '2:10:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.410' message 'CogVM:	test for 64-bit nextProfileTick should or both 32-bit halves, not	add otherwise there''s a slim chance of a missed tick.' id '9b9f1554-8dd0-4026-94d6-57d61cce60b5' date '26 May 2009' time '7:58:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.409' message 'CogVM:	copy bug fix for ceBaseFrameReturn: made in VMMaker-eem.353	into the interpreter''s version baseReturn. Must free page before makeBaseFrameFor:	because creating a machine code frame involves ensureMethodIsCogged:	which may cause code compaction and trace the dead page being	returned from unless it is freed.' id '6cf420d0-fb46-4ae6-a298-16afd1d2126a' date '26 May 2009' time '6:31:10 pm' author 'eem' ancestors ((name 'VMMaker-eem.408' message 'All VMs:	Add an adoptInstance primitive for more convenient class	change.Stack & Cog VMs:	Eliminate redundant (and obstructive) checks for receiver	being a semaphore in primitiveSignal & primitiveWait.' id 'a41d25de-a71b-4119-af3e-6b7a996cad3a' date '26 May 2009' time '10:53:03 am' author 'eem' ancestors ((name 'VMMaker-eem.407' message 'All VMs	fixed bug in leak map check introduced when I sped up the	leak check.	leak check now checks root table and replaces validateRoots.	leak check now checks interpreter oops, extraRootsTable	& remapBuffer.Cog VM:	check for heap validity before & after GC.Context VM:	nuked unread inst var methodClass' id 'babce608-2408-42b6-9f06-dc369946b2f3' date '21 May 2009' time '2:50:13 pm' author 'eem' ancestors ((name 'VMMaker-eem.406' message 'Stack & Cog VMs:	made leak checking in GC controlled by checkForLeaks flag	also accessible from command line -leakcheck[:] n' id '3faf94bd-3d61-4105-9109-e6c876c104df' date '20 May 2009' time '4:27:01 pm' author 'eem' ancestors ((name 'VMMaker-eem.405' message 'All VMs:	Fixed signature of addGCRoot: & removeGCRoot:. varLoc	shoudl be sqInt *, not usqInt *.Cog VM:	Fixed callback entry bug.  enterSmalltalkExecutive must cope	with an instructionPointer of ceReturnToInterpreterPC in an	interpreted method.	Made simulated strncmp funcitonal enough to simulate	findString:.' id '1304cd81-e29b-49a1-9d77-3ef55345a61a' date '19 May 2009' time '10:07:12 am' author 'eem' ancestors ((name 'VMMaker-eem.404' message 'All VMs:	Fix primitiveLoadImageSegment so that it doesn''t interpret an	image version change as a byte-order reversal.Stack & Closure VMs:	Fix primitiveLoadImageSegment so that it swaps floats when	loading from an older image version that holds floats in big-	endian order into a version that holds them in little-endian order.' id '58c14d3b-1262-4098-aaf6-4c70a7a0bcbb' date '16 May 2009' time '9:08:05 am' author 'eem' ancestors ((name 'VMMaker-eem.403' message 'FilePlugin:	primitiveFileStdioHandles which answers an array of SQFile/	fileIDs for stdin,stdout & stderr as available.  Depends on	platform support in r5514 (trunk) & r5513 (cog branch).' id '4b62f020-51e2-4caa-b3a7-2c3a1ccefb66' date '14 May 2009' time '4:20:59 pm' author 'eem' ancestors ((name 'VMMaker-eem.402' message 'Cog & Stack VMs:	fixed primitiveObjectPointsTo for married contexts.  Now		thisContext pointsTo: thisContext sender	is true, etc.	primitivePerformWithArgs/primitivePerformInSuperclass are	now varargs primitives and so can be used for a mirror	perform (for the debugger).	Mirrors now complete at the VM level (and in my current	image''s debugger; will check-in once the changes propagate	to the Stack VM build)' id '81e80434-1ffa-4e92-ac12-4402ff77dac1' date '13 May 2009' time '11:24:39 am' author 'eem' ancestors ((name 'VMMaker-eem.401' message 'ClosureVM:	Fix broken redefinition of primitiveEquivalentToStackVM:	Fix broken redefinition of primitiveIdentical.	Make primitiveObjectPointsTo correct w.r.t. contexts	Less warnings in primitiveTerminateToCogVM	Make primitiveObjectPointsTo correct w.r.t. contexts & machine-code methods.	Less warnings in primitiveTerminateTo' id '59104adf-7567-4b34-ba82-b6cd5fd95f5c' date '12 May 2009' time '4:45:09 pm' author 'eem' ancestors ((name 'VMMaker-eem.400' message 'CogVM:	code compaction stats (number and total milliseconds)	less warnings in CoInterpreterStackVM:	less warnings in StackInterpreter' id '038ffb6a-bdba-4265-9920-01309e85e3cb' date '11 May 2009' time '3:55:10 pm' author 'eem' ancestors ((name 'VMMaker-eem.399' message 'CogVM:	Bug fix to interpreter method activation.  If an interpreted	method invokes a machince-code primitive that invokes an	interpreter method (e.g. block value, where the primitive is	compiled to machine code but with an as-yet-to-be-compiled	target) then the return pc (in instructionPointer) will be the	ceReturnToInterpreterPC and so activateMethod and	activateNewClosureMethod:numArgs:mayContextSwitch: must	check for this and substitute the saved pc because	ceReturnToInterpreterPC is vaid only between an interpreted	caller and a machine-code callee.	Reduced number of alloca''s on compile from three to two.	Restored mistakenly nuked trampoline.' id 'e36b75e5-e005-4021-9bca-6fad39841101' date '10 May 2009' time '4:07:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.398' message 'StackVM:	renamed primitiveEquivalent to primitiveIdentical and made it	varargs for mirror prims (perf not an issue because #== is	effectively inlined via a special selector).' id 'e0b36c12-a929-44f5-af83-09a119568c0e' date '8 May 2009' time '12:18:28 pm' author 'eem' ancestors ((name 'VMMaker-eem.397' message 'CogVM:	typoe in getCogCodeSize' id '44e990e2-8a1f-4e47-ae38-15068da5c47a' date '7 May 2009' time '5:24:37 pm' author 'eem' ancestors ((name 'VMMaker-eem.396' message 'CogVM:	access actual and desired cog code size in vmParameter prims' id '1cfca76b-8483-49df-af5d-e17a1ea05087' date '7 May 2009' time '4:49:52 pm' author 'eem' ancestors ((name 'VMMaker-eem.395' message 'CogVM:	Sample the profileMethod in process primitives before they context switch' id '6e15a952-b148-4d73-82a6-f79509cfa8dd' date '7 May 2009' time '12:16:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.394' message 'CogVM:	excised an unused trampoline' id '80e7b1ca-fab3-4e5b-b81f-ca04518df964' date '7 May 2009' time '8:44:01 am' author 'eem' ancestors ((name 'VMMaker-eem.393' message 'StackVM:	cosmetic changes only (comments & loss of an <api>)CogVM:	bug fix for callbacks.  Old code didn''t handle the movement of	the machine code for a callout during a callback so that when	the callout eventually returned it would execute bogus code.	Fix is to "sideways call" external primitives & FFI calls such	that they always return to cePrimReturnEnterCogCode, a	function that replicates the post-primitive call code at slightly	higher cost because it has to derive the argument count from	newMethod.	Renamed Push & Pop to PushR & PopR since for the above	PushCw was added.	Dropped unused support for setting messageSelector in a	primitive call.	Simulation support for jumps into runtime for simulating	"sideways call"' id '18dc53e3-2f1f-40a3-b909-27b116557c17' date '6 May 2009' time '8:34:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.392' message 'StackVM:	Need to not vm-profile label checkProfileTick: to avoid C	compiler errors.' id 'bb7fc0d0-9d06-46fc-8fc9-898d2406f7c7' date '5 May 2009' time '1:59:18 pm' author 'eem' ancestors ((name 'VMMaker-eem.391' message 'StackVM:	simplified QSystemProfiler VM profiling.  slowPrimitiveResponse	now simply samples, omitting the context switch.	The access primitives nil method and process implying that	to fully clean-up one should invoke Smalltalk profileSample	and Smalltalk profilePrimitive until they answer nil, e.g.		[Smalltalk profileSample isNil] whileFalse.		[Smalltalk profilePrimitive isNil] whileFalse.CogVM:	correctly profile non-machine-code primitives invoked from	machine code (i.e. SmallInteger, Float and BlockClosure value	primitives et al are not profiled, just as special selector prims	are not in the interpreter).	edits to reduce C compiler warnings' id '945da079-0e57-4323-a1bf-39ff90732214' date '5 May 2009' time '1:12:43 pm' author 'eem' ancestors ((name 'VMMaker-eem.390' message 'CogVM:	Bug fix in enterCallback/enterSmalltalkExecutive.  reenterInterpreter	setjmp needs to be done irrespective of whether the callback	directly enters machine code or the interpreter.  Old code just	did setjmp for the interpreted case.	callbackEnter also needs to save/restore the reenterInterpreter	jmpbuf around the callback, not just the C stack pointers.Slang:	added support for a <volatile> pragma which declares all local	variables as volatile (needed for callbackEnter).Stack VM:	put assertion checks of leak map in incrementalGC and allocated object	vaidity in allocation under control of DoExpensiveAssertChecks.	Fixed abscence of bounds checking bug in reverseDisplayFrom:to:	for toggle full screen, which temporarily sets display bits to nil.	Sped up leak check by avoiding firstAccessibleObject:/nextAccessibleObject:.	typoes' id 'c47b6b42-5ed8-4b05-820b-82c60ae13111' date '4 May 2009' time '8:22:53 pm' author 'eem' ancestors ((name 'VMMaker-eem.389' message 'CogVM:	Bug fix for wild write.  Frameless optimization for		instVar := LiteralVariable	was incorrectly using ReceiverResultReg as a temporary.	This was trashing the GLTrue association when running	TStripData>>modeGLTriangles.	Made GC/unlink phase single-pass.StackVM:	Bug fix for printAllStacks broken when I added checking for	Mutex''es.		Streamlined leak map check code.	Made leak map check during incrementalGC depend on	DoExpensiveAssertChecks.	Provided findString: for locating symbols in debugging.' id '3efda368-f1c2-472c-ab73-64acd231b54b' date '29 April 2009' time '5:54:18 pm' author 'eem' ancestors ((name 'VMMaker-eem.388' message 'CogVM:	Bug fix to GC of machine code.  Need to mark-and-trace	references to literals and at least unlink sites that have	unmarked classes in inline caches on (full) GC.  Also no need	to keep class in inline cache at super send or open PIC send	sites.	Need to include NewObjectMemory''s <api> methods in	CoInterpreter''s exportAPISelectors.' id '78a612f0-73a4-485a-b6b2-c074fcd07dfc' date '28 April 2009' time '9:39:50 pm' author 'eem' ancestors ((name 'VMMaker-eem.387' message 'StackVM:	Faster context instantiation for Closure creation.  Avoid the	specialObejctsArray indirectin and format fetch for MethodContext	since it is compact and its format is known.	Use fooNonInt: in a few more places.	Cleaner code for determining stack pointer of married frame,	allowing Cog to override correctly.	Add an assert for overflowing incorrectly-sized contexts on	updating frame spouses.	Correct some signed comparisons to be unsigned in various	object enumerations, etc.CogVM:	Bug fix to eliminate incorrect use of StackInterpreter''s frame	receiver offset (FoxReceiver) instead of machine-code or	interpreter offsets (FoxIFReceiver & FoxMFReceiver) as	appropriate.	Bug fix to GC of trace log.	Add block creation and code compaction to tracing events	for debugging.	Some additional asserts.	Some more unsigned comparisons to fix various asserts.	typoes.' id '6e878971-62e6-4746-b495-e34343382127' date '28 April 2009' time '1:52:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.386' message 'CogVM:	bug fix in storing primitive error code.  old code answered	negative error codes as 0, which broke tryNamedPrimitive:for:withArgs: when compiled.' id '6c4a485f-96a1-42f3-94ed-126e39b94aae' date '25 April 2009' time '11:20:15 am' author 'eem' ancestors ((name 'VMMaker-eem.385' message 'StackVM:	load/store image segment now handle platform-order floats.	bug fix to stack page handling when assigning to contexts	such that the upper frames on an old stack segment must	move to a new stack page.  Now the current stack page is	restored as most-recently-used-page.	Tweaks using various fooNonInt: variants where appropriate	(e.g. oopHasAcceptableClass: in load image segment).CogVM:	store image segment now avoids writing cog references in	the method headers of cogged methods.' id 'eeb15449-74db-4918-a296-d38c09c76927' date '24 April 2009' time '3:36:14 pm' author 'eem' ancestors ((name 'VMMaker-eem.384' message 'Slang:	Ensure CoInterpreter is initialized whenever the Cogit is generated.	If one runs e.g. the Stack VM in the simulator and then  generates	the Cogit without initializing CoInterpreeter then the Cogit can be	generated with invalid values for constants such as FoxThisContext (ouch).StackVM:	bug fix to primitiveStoreStackp.  Ensure stackPage is most recently	used page always.	bug fix to storeMaybeContextReceiverVariable:withValue:.  receiver	may not be a context.	Use isContextNonInt: where appropriate.  Reorganize	doubleExtendedDoAnythingBytecode to avoid duplicating	storeMaybeContextReceiverVariable:withValue:CogVM:	Use isContextNonInt: where appropriate.' id '6d517f23-3a5b-4b20-904d-92f62544afc5' date '23 April 2009' time '3:09:01 pm' author 'eem' ancestors ((name 'VMMaker-eem.383' message 'Warning: this is another "recompile after loading" check-in that moves hash-related constants from ObjectMemory classPool to VMSqueakV3ObjectRepresentationConstants classPool.StackVM:	fix bug in assigning fields of contexts which could cause the	stack page list to be malformed.	fix bug in positive64BitValueOf: which would fail for 8-byte	values (self sizeof: #sqLong is translated as sizeof("sqLong"),	which is 7 bytes in size).	Maintain Floats in platform-order (also requires a platforms	putsch yet to be checked-in).  This involves an image format	roll since older VMs will not recognize the flag in the image	header that defines the float format.CogVM:	Added floating-point support with primitives for = ~= > < >= <=,	* / + - sqrt asFloat.  Uses SSE2 instructions; tests for their prescence	at start-up and disables primitives if missing (but does presume	CPUID is available, i.e. Pentium or later)' id '898dcaad-ba85-489e-a5ce-781e0dad6d3f' date '21 April 2009' time '1:59:05 pm' author 'eem' ancestors ((name 'VMMaker-eem.382' message 'StackVM & CogVM	drop an unnecessary store check on context switch' id '41ab251b-a0cf-4402-9ae5-936d49e3a08d' date '14 April 2009' time '10:03:53 pm' author 'eem' ancestors ((name 'VMMaker-eem.381' message 'CogVM:	neater method metadata map. Use 0 as the tag for displacement-	only bytes and an effectively shifted extension byte for	larger displacements.  This representation will simplify	lazy unlinking.' id '243d8a1d-41f2-4b2b-8ece-a4745adde646' date '14 April 2009' time '1:53:09 pm' author 'eem' ancestors ((name 'VMMaker-eem.380' message 'StackVM:	speed up primitiveNextInstance (apparently x2 on Cog?!)CogVM:	fix regression from abort merging whenb extending a closed PIC.	eliminate duplication combining patchToOpenPICFor:receiver:	& patchToOpenPICFor:numArgs:receiver: into better named	ceSendFromInLineCacheMiss:.' id '2c9e81e3-7eee-4183-86f4-3bb73fcb1b21' date '14 April 2009' time '11:05:22 am' author 'eem' ancestors ((name 'VMMaker-eem.379' message 'CogVM:	combine the two prolog abort calls into one in both methods	and PICs.  Saves 3% and potentially aligns entry on a 32-byte	boundary (current method alignment is 8 bytes).' id '949dd98b-6b44-4d76-9e6f-ad8ec60b8174' date '13 April 2009' time '8:55:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.378' message 'CogVM:	Fix bug with frameless block generation.  ReceiverResultReg	must hold the home receiver not the closure for inst var access.	Incomplete refactoring of trampoline generation in anticipation	of collapsing aborts.' id '548b4c30-5504-472f-912a-89429335cfce' date '13 April 2009' time '7:13:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.377' message 'StackVM:	Fix to non-local return stack page management.	If it allocates a page, establishFrameForContextToReturnTo:	must mark the page as most recently used.  Now non-local	returns can assert a well-formed page list throughout.	There is no need to flush external primitives from all methods	on startup since this is done in snapshotCleanUp.CogVM:	ditto fix to non-local return stack page management.	Bug fix for makeBaseFrameFor:, which must allow for a	machine code compaction in ensureMethodIsCogged:.	Streamline bytecocde pc preparation in makeBaseFrameFor:.' id '77e612b7-3bd4-4b72-8bb3-ea67fe3789bc' date '13 April 2009' time '2:38:48 pm' author 'eem' ancestors ((name 'VMMaker-eem.376' message 'StackVM:	replace all DoAssertionChecks ifTrue: [ self fwdBlockValidate: fwdBlock ]	with proper self assert: (self fwdBlockValid: fwdBlock) asserts.	Rename primitiveFlushCacheSelective to primitiveFlushCacheBySelector	for consstency with primitiveFlushCacheByMethod.	Fix bug in primitiveFlushCacheBySelector.  remember to flush the at	cache if the selector is either at: or at:put:.CogVM	Fix bug in ceBaseReturnTrampoline which was popping	the stack one too far which could smash the saved context	if an interrupt happened befre the call of ceBaseFrameReturn:.	Fix bug in cache fushing; i.e. implement primitiveFlushCacheBySelector	and primitiveFlushCacheByMethod.	streamline marryFrame:SP: to speed up block creation.' id '7f960079-75fd-46f9-9e45-ababb0e1ba66' date '9 April 2009' time '6:42:32 pm' author 'eem' ancestors ((name 'VMMaker-eem.375' message 'StackVM:	Defer an assert in primitiveTerminateTo & less warnings therein.CogVM:	If the interpreter hard-wires #class then so must the Cogit.	Defer an assert in primitiveTerminateTo.	Fix regression in primitiveCalloutToFFI.  It uses newMethod.' id '17026662-e2be-419e-ab0c-79bd2ad5c3a3' date '9 April 2009' time '8:29:31 am' author 'eem' ancestors ((name 'VMMaker-eem.374' message 'CogVM:	fix the prim num args table so its an array of chars.  sigh.' id 'ecca0a64-c802-4601-b48b-5b53ae890595' date '8 April 2009' time '11:28:24 pm' author 'eem' ancestors ((name 'VMMaker-eem.373' message 'CogVM:	fix primitive num args initializer so it doesn''t contain nils.' id 'eb3152ed-55ac-4103-b2a5-55144329ec58' date '8 April 2009' time '11:22:29 pm' author 'eem' ancestors ((name 'VMMaker-eem.372' message 'StackVM:	refactor well-formed stack pages assert so it is void in non-debug	VMs, and not so verbose when it fails.	primitiveSize pops argumentCount + 1 rather than 1 so it can	be used in to implement mirror primitives.CogVM:	Major bug fix to interpreter callers of slowPrimitiveResponse.  Of course	these callers must be prepared to return to machine code because a	primitive may have done a context switch or activated a machine code method.	primitive compilation checks for expected arg count if primitive	generator assumes arg count, and defaults to interpreter primitive	if the arg count is wrong.	Fixed stupid bug in simulator that was causing image to retain	heap bitmaps (replace UniqueIndices class var with uniqueIndices	inst var).	some explanatory comments and a bug fix for storing into	subclasses of context that happen to have integers in their	senders (i.e. not a bug that''s likely to bite).' id 'fc015fae-2bcc-4196-b84f-3358c6914c3a' date '8 April 2009' time '11:10:35 pm' author 'eem' ancestors ((name 'VMMaker-eem.371' message 'StackVM:	removed tracing from transferTo: (Cog now has its own).	Put asserts around test of primitiveFunctionPointer in callback	enter and leave.CogVM:	External call caching now updates machine code so calls	will be direct from machine code once repeated after unloadModule:.	Context switches tracing includes the source (wait, signal,	enter critical section et al).	Bug fix to GC of trace log.	Machine code prim calls assign to newMethod and primitiveFunctionPointer	only for primitiveExternalCall and primitiveCalloutToFFI.	Bug fix in activateInterpreterMethodFromMachineCode:.	Replace ancient incorrect prim return code with the generic	return:toExecutive: helper.	Bug fix in callbackEnter:.  enterSmalltalkExecutive must also	activate a machine code frame.	Enter''s Brad Project happily, but any attempt to turn on the	profiler crashes repeatably.' id 'd82c6cc3-28f7-4b47-979d-147d23b0763d' date '8 April 2009' time '3:36:41 pm' author 'eem' ancestors ((name 'VMMaker-eem.370' message 'CogVM:	rewrite machine code call from primitiveExternalCall to target	on subsequent call after flush/unload.StackVM:	less warnings.' id '2b54b4bf-25fc-40e4-9e64-938480b9f1a1' date '7 April 2009' time '9:55:19 pm' author 'eem' ancestors ((name 'VMMaker-eem.369' message 'StackVM:	fix to assert (send to correct implementor).	less warnings from interp.c.CogVM:	Call target of primitiveExternalCall directly (analogously	to interpreter''s rewriting of 1st-level method lookup cache with	target function).  Necessitates reverting call back to	primitiveExternalCall on unloadModule:.  Passes the ultimate	test: Reset Sound.	Doesn''t yet rewrite back to direct call on subsequent call to	primitiveExternalCall.	less warnings from cointerp.c.' id '24719eb6-c5ef-4f60-b3d9-1ea60b5e23ae' date '7 April 2009' time '9:20:52 pm' author 'eem' ancestors ((name 'VMMaker-eem.368' message 'Slang:	Add support for dereferencing assignments to struct targets as in		(fooStruct := (expr)) fieldNameStackVM:	Relax an assert in non-local return.  Test for a well-formed stack page list	before and after walking and freeing intervening stack pages, not during.CogVM:	Bug fix for regression.  Relocate the youngReferers on method zone compaction.	Fixes recent crashes on forum entry.	add assert to check fake header in cog methods is correct.	fix typoes & polish a couple of comments.' id '023ec726-29a6-4c2f-9e34-a39924672d7d' date '7 April 2009' time '11:07:59 am' author 'eem' ancestors ((name 'VMMaker-eem.367' message 'CogVM	Maintain a list of the cmRefersToYoung cog methods so that	incrementalGC dsoesn''t have to enumerate all cog methods.	replace updateCogMethodHeaderPostGC:, which is now just an	assert, with an explicit assert.' id 'ac21b797-3a64-4900-ae7a-da9757f3ed6c' date '6 April 2009' time '11:29:32 am' author 'eem' ancestors ((name 'VMMaker-eem.366' message 'CogVM:	Bug fix: need to update saved ip of top frame of active page if	it is an interpreter page (unlike StackVM).	Bug fix, annotate an add of true or false in genJumpIf:to:.	Implement mustBeBoolean in machine code (requires adjusting	abort senders of ceSend:super:to:numArgs: to pass negative	arg count - 1).' id 'd8b84d74-5771-44b3-97da-719f517cb8ba' date '4 April 2009' time '11:10:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.365' message 'StackVM:	Fix old bug that could set memoryLimit to a value not on a word	boundary.	Set endOfMemory and memoryLimit thorugh accessors so an	alignment assert can be easily applied.	Move call of markAndTraceOrFreeMachineCode: up to markPhase:	out of markAndTraceInterpreterOops: and crucially after	markAndTraceAndMaybeFreeStackPages:.  Machine code methods	can only be freed safely after scanning the stack.  This is	the fix for Brad''s updateAllLoadedPackages crash.CogVM:	Bug fix; as  described above markAndTraceOrFreeMachineCode:	now done as the last part of the markPhase:.	Freeing a machine cocde method can be done if the method is	free; care less about the selector.' id 'ea5ebe86-8cd6-4bfc-8f1b-8e06999a1969' date '4 April 2009' time '8:39 pm' author 'eem' ancestors ((name 'VMMaker-eem.364' message 'StackVM:	less warnings in users of printHexPtr: using void * instead of char *.CogVM:	Bug fix: move inInterpreter determination before transferTo:	in process & semaphore prims.' id 'b1b11c2a-9958-489e-9b8c-39fb06e3d6ad' date '4 April 2009' time '3:07:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.363' message 'StackVM:	better names and typoesCogVM:	on snapshot make sure all unmarried contexts have bytecode	pcs, not just those that were on married on stack.' id '4de48139-03e7-43b5-ae5d-6dffbf48e418' date '4 April 2009' time '11:15:19 am' author 'eem' ancestors ((name 'VMMaker-eem.362' message 'StackVM:	arrange that widowed contexts are bereaved at snapshot so that they are	safe to load.CogVM:	ditto and also map all machine code pcs to bytecoded pcs so images can be	brought up on the Stack VM.' id '6e04e953-1e42-4155-9e03-ee7df4f597a3' date '3 April 2009' time '4:14:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.361' message 'CogVM:	tweak to the labels in the Cog code constituents primitive' id '20760565-018c-4b52-aaae-685d5acd1c4c' date '3 April 2009' time '2:41:24 pm' author 'eem' ancestors ((name 'VMMaker-eem.360' message 'StackVM:	Made methods used by Cog profling prim <api> methods.CogVM:	Added primitiveCogCodeConstituents to answer a symbol	table for the machine code zone for profiling.	Renamed zoneEnd to zoneLimit and called the end of the zone...	zoneEnd.	First check-in from a Cog VM, I hope...' id '17342a84-f098-4f3e-9675-4c5c0f3aa976' date '2 April 2009' time '11:33:38 pm' author 'eem' ancestors ((name 'VMMaker-eem.359' message 'StackVM:	remove assumption in snapshot code that heap starts at	memory rather than at startOfMemory.CogVM:	above change fixes snapshot bug.' id '53a50bbc-6e3a-4735-831e-112a8f499864' date '2 April 2009' time '8:54:41 pm' author 'eem' ancestors ((name 'VMMaker-eem.358' message 'StackVM:	remove assumption in snapshot code that heap starts at	memory rather than at startOfMemory.CogVM:	above change fixes snapshot bug.' id '15dad5f0-6128-4411-9075-9c5e499b297d' date '2 April 2009' time '8:51:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.357' message 'CogVM:	unlinked sends patch to open pics when sending to instances	of young classes.	tracing code now includes source (machine code, interpreter or	unknown) in each logged event.' id '68de32de-8f93-46c6-abb9-7700a4159a46' date '2 April 2009' time '6:36:30 pm' author 'eem' ancestors ((name 'VMMaker-ar.356' message 'A minor tweak to CroquetPlugin (avoid failing a primitive in a case where it is not necessary).' id '5c760296-0ada-344b-9aeb-43293af3a1b3' date '2 April 2009' time '3:37:15 pm' author 'ar' ancestors ((name 'VMMaker-eem.355' message 'StackVM:	changes to image i/o to preserve the code size short in the	image header to be polite to images run on Cog.	Refactored primitiveCalloutToFFI''s cacheing of primitiveCallout	to allow Cog to call primitiveCallout directly.CogVM:	bug fix for young classes in in-line caches (not ideal; want	ceSend:super:to:numArgs:to use patchToOpenPIC: but that''s	a lot of refactoring for now).	Another bug fix to asserts in frameCallerContext: (nil is a legal	sender context).	Seems to run forums quite happily (except for sound?  Am I	supposed to be able to hear myself?  I can''t)' id '8272acde-ed03-4168-bd0d-12b80a4bb50c' date '1 April 2009' time '10:20:27 pm' author 'eem' ancestors ((name 'VMMaker-eem.354' message 'StackVM:	fix to checkStackIntegrity; use stackPointer & framePointer for active page.	heap integrity refactored to suit CogCogVM:	biggie bug identified for QF.  QF creates anonymous classes	(i.e. OGLExtManager) which mustn''t be allowed to be used as	inlione cache tags since we don''t update inline caches in	incremental GC (for sound performance reasons).  Assert in	place but no fix yet.	leak map extended to cover references from code (hence	identifying the above bug).' id '62cf2ce2-b037-4fd6-8383-6930822fa1a8' date '31 March 2009' time '11:26:39 pm' author 'eem' ancestors ((name 'VMMaker-eem.353' message 'StackVM:	added checkCodeIntergrity stub for Cog to fulGC assert checks.CogVM:	Bug fix to incremental gc clerical errror.  update selector as well	as method in mapObjectReferencesInMachineCodeForIncrementalGC.	Bug fix in ceBaseFrameReturn:.  Must free page before makeBaseFrameFor:	because creating a machine code frame involves ensureMethodIsCogged:	which may cause code compaction and trace the dead page being	returned from unless it is freed.	Bug fix to asserts in frameCallerContext:.  Can''t depend on	frameStackedReceiverOffset: because method state may have been	smashed by interrupts.	Extended heap integrity check to machine code but still more needs	doing in CoInterpreter to cope with cog method references in	CompiledMethod headers.' id '42a1d8fb-20ce-4883-a8f7-3448d897e148' date '31 March 2009' time '5:03:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.352' message 'StackVM:	fixed stack imbalance for primitiveArrayBecomeOneWayCopyHash (due to clerical error)CogVM:	eagerly jit targets of perform:, withArgs:executeMethod: et al	so that with Compiler-eem.57/Tweak-Compiler-eem.43/Tools-eem.63	doits will run at full speed immediately.' id 'cb8ef957-3e4e-4037-b602-34e8468d464b' date '31 March 2009' time '12:09:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.351' message 'CogVM:	Add primitiveCalloutToFFI to list of primitives which need	newMethod setting up.	Now Cog enters QF but doesn''t hang around for long.' id 'b1b866cd-a47d-4764-a855-2b4bf3639d6d' date '31 March 2009' time '10:57:12 am' author 'eem' ancestors ((name 'VMMaker-eem.350' message 'StackVM:	createActualMessageTo: marked as no inline because it''s a	useful breakpoint.	no-op stack assert added to checkForEventsMayContextSwitch:	(not a no-op in Cog).	markAndTrace: exported (for Cogit)CogVM:	bug fix in open PICs, align call of ceSendFromOpenPIC:.	bug fix in closed PICs; pass parameter in SendNumArgsReg	instead of ClassReg because otherwise ClassReg smashed for	subsequent cases.  Also alter open PICs to use SendNumArgsReg.	bug fix, markAndTrace: young references in cog methods.	beefed up C stack alignment checking in simulation and production.	Avoid refs to new methods in closed PICs by patching to	open PICs.	Now successfully evaluates Compiler recompileAll' id 'edf1bae9-92d6-4ecf-94bf-a769447360dd' date '30 March 2009' time '8:14:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.349' message 'CogVM:	deal with young selectors.	clear cmRefersToYoung flag when possible' id 'f7263f47-5191-4065-b489-ba6ace228a5f' date '29 March 2009' time '2:31:53 pm' author 'eem' ancestors ((name 'VMMaker-eem.348' message 'CogVM:	allow compilation of young methods.	Rename selectors & variables containing "new" to refer to	young objects to contain "young".' id '07ffc15d-bb1a-41e4-8c40-9b759273dfba' date '29 March 2009' time '1:45:32 pm' author 'eem' ancestors ((name 'VMMaker-eem.347' message 'StackVM/CogVM:	sweeping memory requires only a sentinel free block at	freeStart, not one at endOfmemory too.  This fixes a start-up	bug on WIndows with Cog where the set-up of the endOfMemory	free block would cause a segfault since pages towards end of memory	are not yet mapped (they usually are in the non-Cog VM).' id 'ccf97957-f6ad-4116-98cf-8655aa3343f3' date '28 March 2009' time '3:54:46 pm' author 'eem' ancestors ((name 'VMMaker-eem.346' message 'CogVM:	fix bug in passing primitive error code to method (can''t use	same register for both base & index).' id '7bf6e35d-a052-4655-a63e-5f8e95539b17' date '27 March 2009' time '3:00:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.345' message 'Slang:	Move the error/warning preamble definition from	CCodeGenerator>>emitCHeaderOn: to e.g. StackVM	class>>preambleCCode to allow Cog to add to it.StackVM:	Aforementioned preamble moved to class side.	Recategorize some float comparison primitives.	No-op extension to primitiveVMParameter to allow Cog	to override and add accessors for desiredCogCodeSize.	Export printing routines for CogitCog:	fix missing objref annotation in genReturnTrue.	save/restore C stack/frame pointers on callback enter/leave.	Rip out reserveExtraCHeapBytes anacrhonism from image load.	Support Win32 setjmp/longjmp (& map sigsetjmp to _setjmp).	Use ObjectMemory>>nilObject, trueObject falseObject in	place of CoInterpreter>>nilObj et al to avoid compilation	errors in non-global-struct regime.	Make save/restore of C stack pointers not save frame pointer	unless in use.	Fix initialization order on package load.' id '40057ebb-c58a-45fd-bd2f-f67dbe349d74' date '27 March 2009' time '12:06:56 pm' author 'eem' ancestors ((name 'VMMaker-eem.344' message 'StackVM:	Checking-in two bugs found by Andreas in primitiveExitCriticalSection.	First the exit always transferred to the first waiting process, even if it had lower priority; the inent was merely to transfer if	the waiting process had equal priority to the exiting process.	Second, the code assumed it was correct to be fair and	transfer if the first waiting process had equal priority, and	hecne avoided using transferTo:.  But this changes the	semantics from that obtained by implementing Mutex above	Semaphore (which uses resume:).  So exit now uses resume:	and hence doesn''t transfer if the first waiting process is of	equal priority.	Backing out of change to synchronousSignal: since the ciritcal	section primitives don''t use the new version, which isn''t necessary; IIABDFI.' id 'a8cb126b-7b1f-4ec0-a1ca-6370e41250a2' date '24 March 2009' time '2:49:40 pm' author 'eem' ancestors ((name 'VMMaker-eem.343' message 'StackVM:	nill changes to markAndTraceInterpreterOops to provide a hook	to override in Cog.	Export isMarked: for Cogit.CogVM:	Implement voiding code that refers to freed methods and	unlinking sends to such freed code; see markAndTraceObjectsOrFreeMachineCode.	Fix stupid bug in unlinking code due to copy-pasting code	and forgetting to delete the remap: sends there-in.	Fix bug in mapObjectReferencesInMachineCode which could	have traced through a freed method.	More informative cog method printing (pic? method?).	More definitive comments as to stack layout in PIC-related	methods.	Set cmIsUnlinked: flag to zero (to get rid of the noise).' id '11f11367-d960-4145-a4b3-42776eadb77b' date '23 March 2009' time '4:39:35 pm' author 'eem' ancestors ((name 'VMMaker-eem.342' message 'StackVM:	Somewhat faster CriticalSection/Mutex primitives which set	owningProcess in synchronousSignal: as well as the Critical-	Section/Mutex primitives.Cog:	corresponding versions of the primtiives for CoInterpreter.' id '2f4ccb6e-392a-43f8-b5ec-c8d09b1308b8' date '22 March 2009' time '1:03:52 pm' author 'eem' ancestors ((name 'VMMaker-eem.341' message 'StackVM:	Critical section primitives for much faster Mutext>>critical:.	Abstracted remapping of VM registers from mapInterpreterOops	to mapVMRegisters for override by CoInterpreter.	printOop: uses hex consistently.	printFrame:WithSP: more robust for corrupt frames.Cog:	experiment with more stack headroom.	Critical section primitives for much faster Mutext>>critical:.	printFrame:WithSP: more robust for corrupt frames.' id '9427523c-46eb-46ed-ab1b-54d91bb696f9' date '21 March 2009' time '4:27:10 pm' author 'eem' ancestors ((name 'VMMaker-eem.340' message 'StackVM:	changed checkForEventsMayContextSwitch:, signalExternalSemaphores	& handleStackOverflowOrEventAllowContextSwitch: to answer	whether a context switch occurred.	Used isEmptyList: instead of concrete code.Cog:	reentry into machine code post context-switch modified so that	result popped off stack into ReceiverResultReg if switching	to a machine-code process suspended at a send.' id 'd8a5c322-900a-4c2f-8aa2-556491768ecf' date '20 March 2009' time '2:01:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.339' message 'StackVM:	added some asserts that check for stack frame growthCogVM:	removed some unnecessary externalWriteBackHeadStackPointer''s.	Made primitiveResume and primitiveSuspend avoid	returnToSmalltalkExecutive if context not switched.	Identified, but not fixed, stack growth bug exhibited in	ScriptScheduler>run.  Cogit''s current caller pushes result	calling convention is incompatible with context switching	primitives because none of the proecss switching primitives	remove their arguments from the stack and when a process	continues after a wait/suspend et al it pushes a result.  See	all uses of		self flag: ''currently caller pushes result''	for relevant points.' id 'c3845f8a-6276-488b-bd8d-eeb48c53dedd' date '19 March 2009' time '7:58:22 pm' author 'eem' ancestors ((name 'VMMaker-eem.338' message 'Slang:	ripped out the bitShift: can be signed futility and put it	Integer>>signedBitShift:/CArray>>signedBitShift:Cog:	use signedBitShift: in pc mapping code.  Cog now starts up	forums and dies with a stack overflow in ScriptScheduler>run	when listing forums in the Lobby.' id '11147440-f727-4b2e-9893-ec262128e756' date '19 March 2009' time '4:44:51 pm' author 'eem' ancestors ((name 'VMMaker-eem.337' message 'StackVM:	extend printAllStacks to print runnable processes on the	runnable process lists' id '9c1e3cee-72b6-4f6c-9a52-b2854f3bcc66' date '19 March 2009' time '12:06:10 pm' author 'eem' ancestors ((name 'VMMaker-eem.336' message 'StackVM:	suppressHeartbeatFlag must be global otherwise it gets	localised to forceInterruptCheckFromheartbeat and misdeclared,	which breaks input.Slang:	nuke a forgotten halt' id '033a687d-bf13-407b-b390-65a6268a61e3' date '19 March 2009' time '11:42 am' author 'eem' ancestors ((name 'VMMaker-eem.335' message 'Slang:	got rid of stupid questions.  Headers are now written if	- they don''t exist, or	- their contents have changed, or	- the package is clean	i.e. they don''t get wrtten if they haven''t changed and the package is dirty.	One still gets asked if one wants to regenerate the interpreter and/or jit if they haven''t changed.	sqNamedprims.h now gets a package version in its header and	doesn''t get unnecessarily rewritten (obeys the rules above).StackVM:	Made breakSelector an inst var with an accessor, along with	suppressheartbeatFlag.Cog:	moved all breakSelector stuff into the interpreter.' id '26b34085-c461-44db-a46a-032ba2ff55be' date '19 March 2009' time '10:59:10 am' author 'eem' ancestors ((name 'VMMaker-eem.334' message 'StackVM:	corrected printHex:.	Changed resume: & synchronousSignal: to answer if they	switched process (needed by Cog).	Fixed typoe in primitiveSignal.Slang/VMs:	changed switch generation to output a call on	bytecodeDispatchDebugHook() which is implemented in dispdbg.h,	instead of an include of dispdbg.h at the switch.  Allows	dispdbg.h to be included elsewhere (cogit.c).	Better fix for plugin module name, verified by producing all	pl;ugins and running Croquet VM tests.Cog:	Fixed bug in primitiveSignal (there was no implementation for	Cog so if primitiveignal switched process and switched from	machine code to interpreter or vice verce, kaboom.	Implemented voiding the code cache on snapshot to put all	compiled methods into a snapshottable state.	Fixed externalAboutToReturn:throguh: & externalCannotReturn:from:	to push instruction pointer last.	Cog now passes more of the Croquet VM tests than the StackVM?!' id 'b3749f3d-85f0-45dd-a146-8f04c843c48b' date '18 March 2009' time '6:18:58 pm' author 'eem' ancestors ((name 'VMMaker-eem.333' message 'Slang:	Fix the doubling up of plugin names in their declared	module name.CogVM:	previous check-in comment is baloney.  This fixes the wild	pointer bug  The code for cannotReturn:/aboutToReturn:through:	uses send code that will attempt to link the send unless told	otherwise.  So tell it not to link when sending cannotReturn:/	aboutToReturn:through: as part of non-local return where	there is no send site.	At least two obvious bugs exist:	- Something that looks like a bitShift: bug shows up in	  computePixelRampOfSize:/scaledAlphaMix:of:with:.	- There''s a bug returning vaues via NLR through a	  Semaphore>>critical:' id '2de268e0-5a63-47fc-9695-f97d5a5a61ca' date '17 March 2009' time '4:44:01 pm' author 'eem' ancestors ((name 'VMMaker-eem.332' message 'StackVM:	minor fix to printing so that in a frame print empty string	objects print as ="" not =.Cog:	Fixed wild pointer bug that was caused by updating an inline	cache but passing the wriong address, that of an object, not	the return address of the send call.  This is an old bug where	I forgot to update code when the calling convention for	ceSend:super:numArgs:receiver: was changed from it having	to pop the instruction pointer to having the trampoline assign	instructionPointer instead.	Made send breakpoints suppress the heartbeat when reached to	enable uninterrupted stepping after a breakpoint.' id 'ff5d4089-4c71-4ea2-9922-53e4313e8e5d' date '17 March 2009' time '12:34:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.331' message 'StackVM:	correct printHex: (will work under cygwin 2.95.x).	comment typoes.	prevent inlining of warning and error as these are useful	as breakpoints.Cog:	Fixed bug in GC of object refs in methods (old code forgot to	update selectors in unlinked sends).	store tracing routine for checking inst var assignments.	deleted frame print code that assumed obsolete & wrong base frame representation.	comment typoes' id '0ce21175-754f-4cfb-9935-95e59b086a5c' date '16 March 2009' time '10:19:24 pm' author 'eem' ancestors ((name 'VMMaker-bgf.330' message 'Really really suppress export pragmas by default.' id '8552cd2b-b20c-4778-9ec3-789cca788c74' date '15 March 2009' time '9:12:57 pm' author 'bgf' ancestors ((name 'VMMaker-bgf.329' message 'Some fruits of dabbling in generating with no inlining.- doNotGenerate some InterpreterStackPages    non-slang simulator support code.- In #transferTo:, a missing *StackPage'' cdecl   prevented the field accessors from being pointer->ized.- Fix TReturn to emit proper C for a void function  (eliminates about 350 warnings.)- Make suppressing #pragma export the default;  we''ve seen enough of those pests I think.(There is a further spate of changes to allow no-inlineto compile, fiddling the return valuesof StackInterpreter methods(e.g.  adding an ^ to  #internalPush: and many others)to force slang to make them int rather than void,so places that use them as their results don''t barf.)But those are just ''make it work'' hackery.The non-inline experiment was just to play with compilers,nothing we need actually to support.)' id '2d18350f-0a32-43e2-96bd-5425f1739293' date '15 March 2009' time '1:29:43 am' author 'bgf' ancestors ((name 'VMMaker-bgf.328' message 'Noticed while mud-wrestling...self self in setWindowSize prim.' id '0e42f0a6-2483-4618-a8e8-6fd419bffd64' date '14 March 2009' time '11:16:56 pm' author 'bgf' ancestors ((name 'VMMaker-eem.327' message 'Slang:	Don''t create bogus global declarations for things already declared static.Cog:	added debugging support to map addresses to the names of	generated run-time routines.' id '8354621c-9afd-492d-8988-2e9f392c5bf4' date '13 March 2009' time '5:07:33 pm' author 'eem' ancestors ((name 'VMMaker-eem.326' message 'Cog:	fixed two bugs in compaction.  old code updated corpse, not	copy.  old code didn''t diminish usage count of methods not	moved (lowest methods).' id '3f98d60f-bead-4aa3-96ea-8ecb4a9bfbdd' date '13 March 2009' time '10:05:50 am' author 'eem' ancestors ((name 'VMMaker-eem.325' message 'StackVM:	comment typoes in primitiveTerminateToCog:	defined primitiveTerminateTo so that it maintains contract	between interpreter caller and machine-code callee frames' id '9ed250f3-c472-422e-ae32-4966cd6c4f3e' date '12 March 2009' time '6:49:01 pm' author 'eem' ancestors ((name 'VMMaker-eem.324' message 'StackVM:	stack frame printing that also works on windows.Cog:	fixed decl for method cache export.' id '1df0aa59-aec3-49eb-8259-afa9a8ef6dc4' date '12 March 2009' time '3:43:05 pm' author 'eem' ancestors ((name 'VMMaker-eem.323' message 'Cog:	fix compilation after adding compaction support.	remove warnings due to mo betta type propagation' id '33909465-d12a-476d-a250-6cd6e21dfbdc' date '12 March 2009' time '12:37:18 pm' author 'eem' ancestors ((name 'VMMaker-eem.322' message 'StackVM:	Undo damage done by VMMaker-bgf.318 which removed	the correct type declaration from functionPointerFor:inClass:	upon which Cog depends (in Cog the function is exported and	so must appear in a header file, where it requires either the	full baroque function returning pointer to function type or	a typrdef thereof).Slang:	Beefed up Andreas'' type propagatiopn casting code to deal	with aformentioned barque function type.' id 'cc6dd6d9-db9b-4354-ad86-afecef7b7038' date '12 March 2009' time '10:58:52 am' author 'eem' ancestors ((name 'VMMaker-eem.321' message 'StackVM:	a version of Brad''s bytecodeprimSize speedup which preserves	the benefit of the compact class index based instance test.	Initialize shouldPopArgs in initializeInterpreter which allows	Cog to disable the whole shebang by overriding initPrimCall.Cog:	moved rum C stack out of harm''s way (memory growth would consume it).	fixed a couple of asserts' id '2aa3c319-b928-49f5-b1e6-1d1357b8d1d6' date '12 March 2009' time '10:12:35 am' author 'eem' ancestors ((name 'VMMaker-eem.320' message 'Cog:	Code compaction completed.	Updating of references in code on GC completed.	But no support for e.g. freeing PICs that refer to GC''ed	classes or parameters.	Open PICs completed.	Fixed bug in activateInterpreterMethodFromMachineCode:	which wasn''t able to deal with primitiveTerminateTo prim	cutting back stack to a machine code frame.' id 'e67b89c5-4ad5-4e49-8d17-123d7e4a8e76' date '11 March 2009' time '11:20:17 pm' author 'eem' ancestors ((name 'VMMaker-eem.319' message 'StackVM:	Fixed race condition in forceInterruptCheck following interuptCheckChain.	Fixed stack offset bug in primitiveDoNamedPrimitiveWithArgs	(old version left a couple of args on the stack).	Addded compact class indices for LargeNegativeInteger and	ByteString because Brad''s speedup for primSize can be even	faster (but haven''t yet implemented it).Cog:	Open PICs look to be working, but need to test cache hits	properly, and have yet to implement compaction.Since class variables moved one will need to recompile the package and perhaps manually remove ShiftForWord, MethodCacheClass, MethodCacheEntries et al from Interpreter StackInterpreter and ObjectMemory.' id 'ec7e251f-662a-4326-9482-525b3d552dc0' date '11 March 2009' time '6:50:02 pm' author 'eem' ancestors ((name 'VMMaker-bgf.318' message 'Add ByteString to the Array fast-path through size.(Takes > 5 % off the unpacking time of a beeg old forum.)' id '04ed7118-5367-4a8a-89fc-c78f7f725e5d' date '11 March 2009' time '6:16:05 pm' author 'bgf' ancestors ((name 'VMMaker-eem.317' message 'Slang:	simpler type propagation scheme that simply casts results	according to return type.  Backed out of translationTypes.	Removed some unused methods.  Includes the test plugin.' id '8fae84b6-9271-4f56-acf5-92048809ced0' date '11 March 2009' time '2:16:59 pm' author 'eem' ancestors ((name 'VMMaker-ar.316' message 'Add a missing declaration in FFIPlugin>>ffiArgByValue:.' id 'bcacbb00-71ca-0e45-be6d-10727f4d48ee' date '10 March 2009' time '10:26:50 pm' author 'ar' ancestors ((name 'VMMaker-eem.315' message 'Cog:	Compacting working except for open PICs:		Annotated method reference in compileInterpreterPrimitive		Block method back-pointers updated.		call for code compaction flag cleared post compact.	Added backEnd variable for instruction stuff not related to	methodLabel.' id '089b8a3f-fc45-41ac-b384-cc96bb98d189' date '10 March 2009' time '4:59:58 pm' author 'eem' ancestors ((name 'VMMaker-ar.314' message 'Pop arguments of the return primitive when leaving a callback.' id 'd6be510f-3fc7-2b40-9356-9479d34052b7' date '10 March 2009' time '3:10:35 pm' author 'ar' ancestors ((name 'VMMaker-ar.313' message 'Fix callback handling to restore argumentCount and reset stack balance counters.' id '4f28a005-886d-6a4c-ba12-e50c154d7347' date '10 March 2009' time '3:05:28 pm' author 'ar' ancestors ((name 'VMMaker-eem.312' message 'StackVM:	Fixed bad pug in primitive dispatch optimization.  Old code	cast primitiveFucntionPointer to long when checking it was	a quick primitive index, hence any primitive loaded at or	above the 2Gb boundary was assumed to be a quick primitive.Cog:	More code compaction progress.  Relocation pass must also	unlink sends to free.  PICs are freed if any of their targets are	free.  PCs and methods adn the instruction pointer are all	correctly updated on compaction.  Usage count decremented	on compaction.  Freed methods restore the headers of their	bytecoded methods.  Compacted methods update the headers	of their bytecoded methods.' id 'dbe901ce-610b-4d55-94f3-75c1c4d0b106' date '10 March 2009' time '1:47:22 pm' author 'eem' ancestors ((name 'VMMaker-eem.311' message 'Cog:	Need to implement markAndTraceStackPage: to avoid	StackVM pulling in a typedef for CogMethod.StackVM:	The corrollary: markAndTraceStackPage: reverts to its	pre-Cog form.' id '51da3326-95c4-4283-895f-56254f3bdb5f' date '9 March 2009' time '12:21:04 pm' author 'eem' ancestors ((name 'VMMaker-eem.310' message 'StackVM:	pageSizeInSlots is smulation only and needs to be quarantined	in a cCodee:inSmalltalk: block.' id '6df9a876-b81d-42a8-962d-016ffdfebc06' date '9 March 2009' time '12:09:43 pm' author 'eem' ancestors ((name 'VMMaker-eem.309' message 'Slang:	back out of back out of multi-line plugins.int/etc.  Rev 4998	should fix the unix build with multiline plugins.int/etc.	Fix for autopropagation of types to integral values.  Slang	will propagate a wider type to a variable that is subsequently	assigned a wider integral type.Cog:	first cut of code compaction (forgets to relocate instructionPointer).	Fixed bug with allocation of stack zone due to assumption	that stack page structs were malloced.' id '34d7d2b1-eb00-40cd-b555-4a923928584b' date '9 March 2009' time '11:33:53 am' author 'eem' ancestors ((name 'VMMaker-eem.307' message 'Cog:	first cut of compaction code (forgets to update	instructionPointer during compaction).	fixed bug in computing layout of stack zone due to assumption	in StackVM code that stack pages are malloced and hence don''t	contribute to the alloca''ed size.Slang:	fix to autopropagation.  Allow widening of integer values	previously propagated as a narrower type.' id '408046d7-56b5-4a74-a7cd-6d44fc41608b' date '9 March 2009' time '10:51:48 am' author 'eem' ancestors ((name 'VMMaker-eem.306' message 'Slang:	de-struct tag the types of self-referencing struct pointers,	so that nextPage/prevPage type-check.' id '183a1e93-7b7d-42f2-b3bb-553c1cabbfbd' date '5 March 2009' time '4:54:54 pm' author 'eem' ancestors ((name 'VMMaker-eem.305' message 'Slang:	beefier type extraction that can cut down		static HANDLE foo = 0	to size (HANDLE).	Added pid_t to list of integral types (probably unnecessary but	too much effort right now to test if I can back it out).StackVM:	fixed InterpreterStackPage''s typedef printing.Me:	bummed that I blew 303 as a verison number.  knackered.' id 'a6789175-7150-4445-8f5d-6bc24af6d658' date '5 March 2009' time '4:21:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.304' message 'Slang:	beefier type extraction that can cut down		static HANDLE foo = 0	to size (HANDLE).	Added pid_t to list of integral types (probably unnecessary but	too much effort right now to test if I can back it out).StackVM:	fixed InterpreterStackPage''s typedef printing.Me:	bummed that I blew 303 as a verison number.  knackered.' id 'fd9e7247-b180-48ed-9b24-b7cb7b2f3084' date '5 March 2009' time '4:19:43 pm' author 'eem' ancestors ((name 'VMMaker-eem.303' message 'Slang:	suport float := double & vice verce.	allow floating-point := integral without a cast.	don''t assume type of min:/max: is integral.	identify signed char as integral	assume asValue: is void *.  Only one sender.Plugins:	SocketPlugin eschew the one SQSocket * in place of the many	SocketPtr' id '5e07ec69-09d1-4304-87b2-e03dd5373497' date '5 March 2009' time '2:58:04 pm' author 'eem' ancestors ((name 'VMMaker-eem.302' message 'Slang:	much more rigourous type-checking when assigning results,	inlining assigned sends, and inlining returned sends.  The	code gen now has types defined for the builtins.  This all	to avoid silent type propagation of results to variables which	can silently change the size fo a variable and hence play havoc	with pointer arithmetic.	return types computed for struct accesors.	ripped out hack for a struct type to include field renaming	macros in its typedef (can be done better with explicit	<cmacro:> accessors.StackVM/Plugins:	some ^nil''s added after final self error: foo, or whileTrue to	tell Slang a method really does return a value.	Some ''float*''''s changed to #''float *'' for type checking.	(Slang does deal with ''void*'' and ;void *'' a widespread	confusion, but there were only three heretical ''float*''''s to	deal with.' id '065f685d-03eb-4273-97be-68e89b309a5c' date '5 March 2009' time '1:51 pm' author 'eem' ancestors ((name 'VMMaker-eem.301' message 'UUIDPlugin:	added an explicit return to primitiveMakeUUID to get the	right return type.' id 'cdc95acd-5cdd-4777-9663-a63e316a59f9' date '4 March 2009' time '6:05:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.300' message 'Slang:	Fixed a regression with the "make default return type of	methods that don''t return a value void" changes that broke	SmartSyntaxPlugins (e.g. rePluginFree lost its void return type)' id '02a4adbe-f3b9-4bb4-9799-89e276e9e22c' date '4 March 2009' time '4:46:54 pm' author 'eem' ancestors ((name 'VMMaker-eem.299' message 'StackVM/Slang:	changes to bring exported utilities (primitiveFail et al) back into	line with sq.h. One can''t get away with this under gcc 2.95 on Windows.' id '59b046b7-f5da-4d10-b115-934124cd29f4' date '4 March 2009' time '3:40:47 pm' author 'eem' ancestors ((name 'VMMaker-eem.298' message 'StackVM:	replace C code to allocate StackPage structs in Cross/vm/	sqAllocStackPages.c with C code.  This also includes a bug fix	for finding the StackPage struct for an address on a stack page	which could have caused crashes in garbage collection.  Hence	exeunt src/vm/stackpage.h.	Made default return value of functions that don''t return a value	void.  As a result, lots of methods have their last expression made	into a return, or have a return to avoid a translation-time type	check failure.	Fixed bug in context variable access where a non-context	sub-instance of ContextPart could have been misinterpreted as	a married context (but I think this is unlikley to have bitten us).	Made all context inst var access < MethodIndex be done via	[external]instVar:onContext:[put:] (for Cog VM''s instruction	pointer access).Slang:	Made all addition/removal accesses to TMethod''s declarations	go throguh three accessors for ease of debugging.	Added support for signedIntToShort/signedIntFromShort (plus fixed	implementations in Integer).	Allowed vmClass to decide if bitShift:''s translation (but not >>''s	or <<''s) is to an arithmetic shift.  Will probably go with Andreas''	compromise of adding e.g. arithmeticShift:/logicalShift:.Cog:	Deferred mapping of machine code pc to bytecode pc from	divorce time to access time.  If a context''s pc field is negative	then it is a machine code pc.  This is hidden from the image	by the [external]instVar:onContext: machinery.	Made bitShift: be signed in CoInterpreter (N.B. but not in	StackInterpreter).  This for the pc mapping changes, since	mapping needs to know the block start if mapping a machine	code pc in a block, and so the offset of the block is stored in	the high 15 its of the negative pc.  Changed alignment of	blocks from 4 bytes to 8 to stretch the range of these 15 bits.	Fixed bug where pc atop a stack page that has bee split (for	divorce) was left as a bytecode pc in an interpreted frame instead	of saved and changed to cereturnToInterpreterPC.  But VM still	crashes in primitiveQuit.	Removed an unused parameter from the map enumerator	mapAt:...performUntil:.	' id 'd8dd67ed-50ed-4fa9-87df-5cf3287136b2' date '4 March 2009' time '2:04:40 pm' author 'eem' ancestors ((name 'VMMaker-bgf.297' message 'StackVM:  - primitiveProfileSemaphore needed a pop:1 - rename arg fullGG to fullGCFlag to avoid inlining conflict err.Note - Stack VM generated from this VMMaker does not work(crashes early in lookupMethodInClass somewhere).But I''ve verified the profile-prim by generatingfrom an older revision (the one we have c source for)and that profiles successfully now.' id '3586a407-dec7-4528-8536-95c4c0620ca9' date '2 March 2009' time '2:51:53 am' author 'bgf' ancestors ((name 'VMMaker-eem.296' message 'StackVM:	back out of changes to mapStackPages that accomodate CoInterpreter	because CoInterpreter needs its own version anyway.	Fixed bug in GC prim forgetting to write-back current head	frame pointers (which could cause garbage retention).Cog:	runs the benchmark suite image without crashing (I''ll post	performance figures once I build from this check-in).	Fixed bug in mapStackPages that caused a saved ip of	ceReturnToInterpreterTrampoline to be moved with the	method (eek!).	Fixed bug that overlapped first slot of stack pages struct	with first (highest) slot of top stack page.  Made CoInterpreter	use CoInterpreterStackPages and dropped no-longer-necessary	use of C code from Cross/vm/sqAllocStackPages.c	Added nascelle for code compaction (flag to call for code	compaction, cogCompiledCodeCompactionCalledFor naturally,	plus testing the flag in checkForEvents:mayContextSwitch:.	But compaction routine is so far just a stub.	Use sigsetjmp/siglongjmp for returning to the interpreter for	performance.Slang:	modified ancilliaryClasses scheme so only vmClass contrinutes	them, allowing a subclass to remove ancilliary classes added	by a superclass (i.e. StackInterpreter''s InterpreterStackPages	replaced by CoInterpreter''s CoInterpreterStackPages)' id 'bba6534b-cd97-44c4-828e-1593888f2c51' date '1 March 2009' time '9:02:27 pm' author 'eem' ancestors ((name 'VMMaker-eem.295' message 'StackVM:	fixed a typoe.  Added a tiny streamlining to primitiveSuspend.Cog:	update class tags in linked sends during GC.	icache flushing after code modifications for inline cache	flushing and GC.	Use dispdbg.h''s assert def (non fatal; the assert defs should	move to e.g. sq.h).	Hiding of cogMethods from GC apparently fixed using an	unmarked empty header.  At least system runs for longer	this way round.' id 'bc4e1d65-90ad-44b2-9733-3930a749a3d6' date '28 February 2009' time '12:22:36 pm' author 'eem' ancestors ((name 'VMMaker-eem.293' message 'Slang:	fix slip in TSendNode>>nodesDo:unless: to make sure	asserts: are properly  undisturbed by inlining.' id 'dff7906f-2c49-4278-9401-8bccc2e6ef13' date '27 February 2009' time '10:00:13 pm' author 'eem' ancestors ((name 'VMMaker-eem.292' message 'StackVM:	renamed a local flag to avoid a conflict when isContext is not	inlined.' id 'fe6db8bd-1a61-4944-b293-3650b11cd19c' date '27 February 2009' time '7:06:42 pm' author 'eem' ancestors ((name 'VMMaker-eem.291' message 'Slang:	prevent inlining into assert: arguments to keep the asserts concise and readable' id '270e3881-c252-4f28-bb3e-164bfe8a5829' date '27 February 2009' time '6:35:11 pm' author 'eem' ancestors ((name 'VMMaker-eem.290' message 'Cog:	fixed bug in handleMNUInMachineCodeTo:lookupClass:mayLink:	which pushed instructionPointer prematurely.	added asserts to check for frame contexts being context objects	in efforts to track down what looks like a stack page tracing bugSlang:	added a nodesDo:unless: enumerator to aid in avoiding inlining	expressions in asserts. My attempts to apply this have so far failed.' id '85a17bcd-8d1c-4c82-9ff4-1e5f8cbf1579' date '27 February 2009' time '5:49:54 pm' author 'eem' ancestors ((name 'VMMaker-eem.289' message 'Slang:	broken attempt to avoid inlining arguments to assert: to	keep them readable.  Where does TMethod''s complete	get set to true?' id '6aba9ce1-5bdb-49b9-a9f9-2c66a9f00440' date '27 February 2009' time '5:41:11 pm' author 'eem' ancestors ((name 'VMMaker-eem.288' message 'Cog:	Eliminated tricky 0 map end byte in favour of much simpler 16rFF.	restored temporary GC prim for debugging the map & gc.' id 'eb947bdb-2db1-4d40-8266-0941b6073f16' date '27 February 2009' time '12:25:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.287' message 'StackVM:	made bteAt:put: in the smulators answer the value stored.Cog:	Drop before changing map termination byte to 16rFF.	fixed stupid bug with backward branch.  As Adam says toddlers	start walking as soon as they work out how to take a step backwards.	changed asssignments of map annotations.' id 'dc3e2129-6fc7-4ac4-8740-a73ac028c0b4' date '27 February 2009' time '11:57:17 am' author 'eem' ancestors ((name 'VMMaker-eem.286' message 'Cog:	Circular trace buffer for sends, block activations,	context switches, incremental & full GCs.StackVM:	null refactorings to support the above.' id '81d97909-f1c7-4ef6-9eaa-49ef1d0da34d' date '26 February 2009' time '9:39:57 pm' author 'eem' ancestors ((name 'VMMaker-eem.285' message 'Cog:	implemented in-line cache flushing/send unlinking.	implemented updating of oops in code (for GC).StackVM:	null refactorings to aid in the above' id 'c9783aeb-1dfc-43cd-a5ea-493e4f64d16f' date '26 February 2009' time '7:16:15 pm' author 'eem' ancestors ((name 'VMMaker-eem.284' message 'Slang:	added shouldBeImplemented supportCog:	shrank CogMethod header saving 1 word (still need to change	aborts to an abort profit from this, but it can wait).	Changed blockEntry from direct pointer to offset.	Added 16-bit fetch.	Fixed printing of closed PICs.	Added search for cog methods with a specific selector' id '7ffbb203-ecf3-4e81-bdbf-29ebbc7e736c' date '26 February 2009' time '10:23:25 am' author 'eem' ancestors ((name 'VMMaker-eem.283' message 'Cog:	automatic structure surrogate accessor generation in VMStructType.	New CogBlockMethod & CogMethod layout saves a word (or two in 64-bits)' id 'de8fa1a2-415e-4975-89ed-7a6dbd6d710d' date '25 February 2009' time '10:28:55 pm' author 'eem' ancestors ((name 'VMMaker-eem.282' message 'Cog:	automatic structure surrogate accessor generation in VMStructType.	New CogBlockMethod & CogMethod layout saves a word (or two in 64-bits)' id '1fa91bb7-f836-45a1-9c4e-dd9c4324c4dc' date '25 February 2009' time '10:26:51 pm' author 'eem' ancestors ((name 'VMMaker-bgf.281' message 'Missing receiver pop in GSM primitive.' id 'da4f2354-133d-4de1-9ca7-5b5687a4b018' date '25 February 2009' time '9:44:52 pm' author 'bgf' ancestors ((name 'VMMaker-eem.280' message 'Slang:	Make vmmaker.config have every entry in the array to	 be on a separate line, again to be diffable in svn.' id 'cca6c431-794b-45a6-9007-f5bcaa45aee9' date '25 February 2009' time '1:50:13 pm' author 'eem' ancestors ((name 'VMMaker-eem.279' message 'Fix init bug in CCodeGeneratorGlobalStructure providing a default def for the structDefDefine.' id 'c32f3a4b-b87a-4c9d-b986-ef1c2226dce9' date '25 February 2009' time '1:30:25 pm' author 'eem' ancestors ((name 'VMMaker-eem.278' message 'Fix class hierarchy snafu with CoInterpreterStackPages andInterpreterStackPages both having a class inst var timeStampduplicating that inherited form VMClass.' id '5c05ede1-2bd4-40d8-aa54-58e32dee2b5e' date '25 February 2009' time '1:02:34 pm' author 'eem' ancestors ((name 'VMMaker-eem.277' message 'Slang:	plugins.ext and plugins.int lists have one plugin per line with	backslashes to escape the newline to make them svn-diff-friendly' id 'b130769f-0cdb-47b3-b820-6fc821e82701' date '25 February 2009' time '12:29:43 pm' author 'eem' ancestors ((name 'VMMaker-eem.276' message 'StackVM:	fix for gc crash on startup.  NewObjectMemory>>initializeMemoryFirstFree:	should not abort if it can''t find space for forwarding blocks.	Reinstatement of code that "fails" primitives that cut back	their stack by the wrong amount.  "fail" in quotes because	the primitive still runs, and without a primitive error code	in the method the failure may appear mysterious.  But this	is much better than silently continuing.	By default functions and inst vars of the interpreter are now	private (static).	Split flushMethodCache into flushMethodCache and flushAtCache.	Changes to stack limit check asserts; being more careful about	order and disabling smashing of the limit while checking.	Changed interpreterVersion to be more accurate (states its a	Closure VM and distinguishes between Context, Stack and Cogit	VMs.	Correct simulation of primitiveBitShiftLargeIntegers.	Some shouldNotImplements for compatibility with the CoInterpreter.Slang:	support for shouldNotImplement (for the above)	support for C preprocessor directives (see forceInterruptCheckFromHeartbeat)Cog:	Broken as I''m midway through a change in CogBlockMethod''s fields.	Interrupt checking in backward branches.	Fix for bug of cogging methods with 75 bytes of literals.  Now	cogs methods with less than 40 literals.	Initial code for send unlinking (inline cache flushing)	Nicer syntactic sugar for annotating instructions makes annotation	constants private to Cogit.  Better naming of annotation displacements.	Ability to override specific systemAttributes in the simulator (e.g. to	simulate images that takle doits from the command line)	Beginnnings of code to autogenerate accessors in surrogate classes.	Too error-prone and tedous ot do manually.' id 'e7e1ef91-2c3a-4f06-aacd-04a789ed57af' date '25 February 2009' time '10:13:29 am' author 'eem' ancestors ((name 'VMMaker-eem.275' message 'Cog:	Cog computes!  Or at least it responds to input.  Problem was	lack of suitable override of backward branches in CoInterpreter.	Still need to implement ackward branches in machine code.	System falls over wiht a compilation error when opening	a browser.  It is on its way!!	More assert code for checking frame validity.	Sionara CoInterpreter>>frameMethod: which erroneously used	the mask to get rid of hasContext/isBlock flags valid only in	maching code frames.StackVM:	bug fix for 64-bits in pushClosureCopyCopiedValuesBytecode	(courtesey of dtl).	Use of iframeMethod: for compatibility.' id '7e9c8c00-14e0-46fa-9746-3bbbc93e3ab3' date '21 February 2009' time '5:56:07 pm' author 'eem' ancestors ((name 'VMMaker-eem.274' message 'Cog:	Fixed block compilation order to pc/depth-first order.	Image now starts-up.  Input events do not yet work.	employed suppressHeartbeat.' id '00a73123-d504-44da-80a1-171e7b951e53' date '21 February 2009' time '3:02:09 pm' author 'eem' ancestors ((name 'VMMaker-eem.273' message 'Cog:	drop before fixing block compilotion.  For binary tree block	dispatch to work blocks must be compiled in pc/depth-first	order not breadth-first order. (doh!)	Means scanning for blocks must recurse.	Break-pointing improvements, compilation selector break	triggers when seting a previously-compiled methods'' selector.	Also provide a break for compilation of a specific bytecode method.	Bug fix in scan for block start pcs for disassembly/method map assert.' id 'cb6bbedf-e6d4-470f-9b62-79ff03282da1' date '21 February 2009' time '1:31:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.272' message 'Cog:	fixed non-local return from machine code.  Bug was	not keeping to result push/replace contract.  In machine	code the caller pushes the result but in the interpreter	the callee pushes the result.	Now debugger comes up for problem (presumably	 JIT-related VM bug) in starting finalization process.StackVM:	fixed bug in simulation of positive64BitValueOf:' id '5291fb6c-a745-428e-9d9c-05f7d6b76a03' date '20 February 2009' time '10:11:50 pm' author 'eem' ancestors ((name 'VMMaker-eem.271' message 'Cog:	Drop before fixing known broken non-local return in machine code.	fixed bug computing PIC ceMNUFromPICMNUMethod:receiver:	by using correct return offset.	fixed bug in cPIC case compilation, jumping to right target if an MNU case.	Added compilation breakpoint code to PIC compilations.	fixed bug with recordLastInstruction which could cause unbounded growth in lastNInstructions (simulation).StackVM:	assign method only through setMethod: for assert checking in CogVM.	renamed signalLowSpaceAndSaveProcess to more accurate	setSignalLowSpaceFlagAndSaveProcess.	replaced some self nilObject''s with some nilObj''s.	fixed assignment to method in transferTo:, sio not assigned unless in interpreter frame..' id '57c64390-de4b-43c5-8cb2-5d4e4314a23b' date '20 February 2009' time '9:45:08 pm' author 'eem' ancestors ((name 'VMMaker-eem.270' message 'Cog:	It runs!  It blows up pretty quickly, but the C version does	draw the initial screen of a dev image before going kablammo.	Main fix was removing an cCode: '''' inSmalltalk: around some	needed stuff (blush).	Lots of type defs added to CoInterpreter to reduce compiler warnings.	Added a plausible (but untested) implementation of	ceMNUFromPICMNUMethod:receiver:	Support for breaking at compilation for a specific selector.StackInterpreter:	make sendBreak:point:receiver: less presumptuous	add lengthOf: to api for Cogit breakpointingSlang:	CCodeGenerator asks vmClass if export pragma should be produced or not.	Add Integer>>asUnsignedInteger' id 'c023cdc1-ec64-4c17-b00a-4dc92d4bd45c' date '20 February 2009' time '3:44:07 pm' author 'eem' ancestors ((name 'VMMaker-eem.269' message 'Cog:	more fixes for disassembly.' id '3cdb4f26-6c36-4de9-b645-b0c21e9046a5' date '19 February 2009' time '6:06:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.268' message 'Cog:	Implemented MNU processing in unlinked sends and open PICs	added relevant relative calls to method map (ceMustBeBoolean, cePushThisContext etc).	revamped pc mapping, which now deals with complex cases of methods weith nested blocks.	fixed method map printing in disassembly.	improved block dispatch in cases where there are three dispatches.StackVM:	fixed extra cr in printContext:.' id 'a8142fbb-10f0-428f-8ed1-401a5ed0deba' date '19 February 2009' time '5:17:28 pm' author 'eem' ancestors ((name 'VMMaker-eem.267' message 'StackVM:	Integrated Igor''s suggestion of initialing headerTypeBytes statically.	Made signed64BitIntegerFor: simulateable.	Moved primitive table max check into functionPointerFor:inClass:	where it absolutely needs to be for safety (e.g. of	primitiveDoPrimitiveWithArgs).Cog:	Cog computes!  It nearly completes starting up the	1.2.47 development image.  It redraws most of the	screen a few times and is in the process of reporting	an error somewhere in the finalization process when	it gets to unimplemented MNU code.	Bug fixes to method mapping code. #== needs a map	entry because it is recognized as a send by the	bytecode scanner.  doubleExtendedDoAnything also	needs an entry when not a send for the same reason.	Bytecode span code needs to take method to scan as	an argument; not assume it is the method being compiled.	Implemented interpret-from-closed-PIC.  Refactored	executing interpreeter m ethods from machine code,	sharing execution code between three clients.  Also	realized that methodShouldBeCogged: is refusing to cog	methods with more than 18 literals instead of 75 as intended	(75 // 4 = 18).	Bug fix in closed PIC compilation.  Code accessed	interpretCall before it had been initialized, accessing	a stale value.	Implemented cePositive32BitIntegerFor:, hopefully completing	the compiled at: primitive.	Bug fix in ceSend:... where a method found by hierarchy	lookup could have been translated and have a nil selector.	To be linked at a send site it must have a selector.  So	selector is assigned if nil.	CoInterpreter needs its own version of roomToPushNArgs: because	method headers are not directly in frameMethod:.' id 'c860d289-83e0-4eb2-83d9-69b3c33aae51' date '18 February 2009' time '9:54:50 pm' author 'eem' ancestors ((name 'VMMaker-eem.266' message 'Cog:	pc mapping that should support blocks also (though not tested for blocks yet).	runs the tinyBenchmarks test image (simulated)' id '014dab63-384f-4df9-88f4-f86bf3ee1778' date '18 February 2009' time '3:41:48 pm' author 'eem' ancestors ((name 'VMMaker-eem.265' message 'Cog:	drop of broken mcpc<->bcpc mapping for blocks.	broken because it expects block startpcs to be embedded	in the block dispatch code, which is unnecessary because	the info is embedded in the code in the form of the constants	used to compare a closure''s startpc against in the dispatch	tree.' id '2d775d99-c486-401d-894b-d021efa90f10' date '17 February 2009' time '8:24:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.264' message 'Cog:	post pathetic peephole pass publish' id '4c1711f1-135a-4d32-b3cb-4d303acdbc9b' date '16 February 2009' time '12:27:22 pm' author 'eem' ancestors ((name 'VMMaker-eem.263' message 'Cog:	very interesting.... but stoopid!	added a peephole pass for Push followed by Pop.	But didn''t affect benchFib at all because in both Push/Pop pairs the pop is a jump target.	Conclusion, we need a proper deferred code generation approach to stack elimination. Half-assed peephole passes have no effect and merely complicate the code.' id '0c4ed0be-3f11-4d06-be99-483a305152a4' date '16 February 2009' time '12:18:09 pm' author 'eem' ancestors ((name 'VMMaker-eem.262' message 'Cog:	runs example benchmark image which ismply evaluates tinyBenchmarks.		Mac OS X Debug: 271330153 bytecodes/sec; 31599498 sends/sec		Mac OS X Fast:    366237482 bytecodes/sec; 31599498 sends/sec	doesn''t run in Deployment config (doesn''t get to first ceTraceLinkedSend)	cogit.c compiles without any warnings.	Upped stack page size and added 256 bytes of headroomSlang:	added a class-side default return type (VMClass class>>implicitReturnTypeFor:)	added translation for expr asUnsignedInteger => ((usqInt)expr)' id '6db9cc5e-70c0-4343-a480-eb9fb9d34400' date '15 February 2009' time '10:36:15 pm' author 'eem' ancestors ((name 'VMMaker-eem.261' message 'Cog:	fixed frameness for block compilation.	18k bytecodes before wimping out (incomplete WordArray>>at:)	while raising a debugger because of failing		AcornFileDirectory class(FileDirectory class)>primPathNameDelimiter' id '56328e88-e754-49db-b0dc-2d74c0f67d70' date '14 February 2009' time '1:06:50 pm' author 'eem' ancestors ((name 'VMMaker-eem.260' message 'Slang:	allow macros to be renamed so we can have halt and halt: cohabit.	check for struct class method arguments shadowing struct accessors.	emit error dedfault case for switchs with no default (cases with no otherwise)Cog:	bug fix for bad bug in gen:operand:	bug fixes for arguments shadowed by accessors.	bug fix for block activaton tracing	assert checking for jump targets	bug fix in C vs Smalltak for addressIsInFixups	bug fix in decl for dasMethodLabel	hacked Mac OS C stack alignment simulation' id '61a5f784-7e81-4db6-9dae-75cd5d7416ad' date '14 February 2009' time '11:41:13 am' author 'eem' ancestors ((name 'VMMaker-eem.259' message 'Cog:	maintain C stack alignment in run-time calls (calls through the trampoline)' id '467570f6-c591-4538-9328-b244f6c8b5ca' date '13 February 2009' time '3:46:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.258' message 'Cog:	better support for ceTraceLinkedSend (saving & restoring registers around the call).	beginnings of support for maintaining C stack alignment in run-time calls (assert check, defines, etc)' id '84760163-0004-4e5f-81a9-d327f37825cb' date '13 February 2009' time '3:15:25 pm' author 'eem' ancestors ((name 'VMMaker-eem.257' message 'StackInterpreter:	made memory private to interp.c (platforms/Mac OS/vm/sqMacMemory.c changes also).Cog:	compute startMemory correctly and cache it in heapBase.	added a Debug intercept for ceEnterCogCodePopReceiverReg.Slang:	check if ancilliary headers have changed before writing them out.' id '934f24aa-6bb9-4407-b5b3-aedb24aa3c25' date '13 February 2009' time '11:50:33 am' author 'eem' ancestors ((name 'VMMaker-eem.256' message 'Slang:	changes to better track struct types.	changes to support header generation etc.	changes to make most methods private/static.Cog:	Many minor changes to make the CoInterpreter and Cogit modules link.	Generate a CPUID routine for icache flushing.	Cog now links on Mac OS X but doesn''t yet run, falling over in initializeInterpreter:.' id 'eb2c0e3e-d76c-494a-8c52-431f7f309144' date '12 February 2009' time '11:38:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.255' message 'Cog:	exported.  Compiles but for some undeclareds.Slang:	many mods/hacks to support structure types.Dropping here because StackInterpreter at least somewhat broken (needs updating for the new structure support)' id '0c177b72-3b5f-4bee-9b32-af65bfb96057' date '12 February 2009' time '12:16:18 am' author 'eem' ancestors ((name 'VMMaker-eem.254' message 'Cog:	fixed ioMSecs bug in simulator by backing-out of in-memory cache of stackLimit and incrementing byteCount on every stackLimit access (frame building send) from machine code.' id 'dd8c4e02-c928-4c20-9b30-ee80285dd74f' date '8 February 2009' time '10:50 pm' author 'eem' ancestors ((name 'VMMaker-eem.253' message 'Cog:	Fixed bug in ensurePushedInstructionPointer that broke primitivePerform, primitiveExecuteMethod et al	Unnecessary performance optimization of the simulator because I was too stupid to realise that once the VM is entirely in machine code there is no more byteCount and hence the microsecond clock stops.StackInterpreter:	Refactoring to allow CogVMSimulator to cache a copy of stackLimit in-memory	Better short-frame printing' id '36b67e7a-59ef-463a-b17b-4da1b23a1215' date '8 February 2009' time '10:11:48 pm' author 'eem' ancestors ((name 'VMMaker-eem.252' message 'Cog:	fixed non-local return from machine code fraqme to machine-code frame	implemented primitiveBitXor' id 'f34fafe5-61f1-46d1-8aae-8a4dc2817080' date '7 February 2009' time '8:03:22 pm' author 'eem' ancestors ((name 'VMMaker-eem.251' message 'Cog:	implemented primitiveStringAt.	implemented non-local returnStackVM:	refactored findUnwindThroughContext: to lend help to Cog' id '94fea49f-00e4-47f6-afd4-c4fb28f5c2c0' date '7 February 2009' time '6:34:35 pm' author 'eem' ancestors ((name 'VMMaker-bgf.250' message 'HostWindows prims to get the host screen work-area(so we can position windows smartly from within Squeak.)' id 'fa395bfe-5ed0-4bdb-a689-ab3dfcab4d7e' date '7 February 2009' time '6:13:45 pm' author 'bgf' ancestors ((name 'VMMaker-eem.249' message 'StackVM:	removed unused quick primitive constant methodsCog:	fixed stack offset bug with inlined #==	moved primitive fake addresses further down to avoid confusion' id '5120c44c-2fb9-4c55-a242-3aa75f81bb72' date '7 February 2009' time '11:05:14 am' author 'eem' ancestors ((name 'VMMaker-eem.248' message 'Cog:stack page mapping generalized to be usale by Cog and StackInterpereter.  Cog now runs to the first non-local return.' id '2a6aa9da-a84d-4c2b-9586-b68eda302b42' date '6 February 2009' time '9:35:35 pm' author 'eem' ancestors ((name 'VMMaker-eem.247' message 'StackVM:	fixed bug in primitiveInstVarAt[Put] for contexts.  Old code could incorrectly widow.Cog:	implemented mc<->bc pc mapping	eliminated some bogus frameless method determinations.	fixed range check in baseReturn	implemented temporary Open PIC code (simply call the interpreter).	added methods to labelling (so e.g. linked sends indicate their target method''s selector)	fixed methodZone>>methodFor: infinite loop	less chatty printing as befits a more functional VM	made cog stack page simulator use coInterpreter for memory access	made frame print use hex for addresses throguhout' id '98d22fc1-8d09-4a4e-847b-bd391702a682' date '6 February 2009' time '9:05:56 pm' author 'eem' ancestors ((name 'VMMaker-eem.246' message 'Cog:	Speeling error in bytecode table that mader a whole framefull => frameful load of difference.  After the fact asserts to catch it isicne it''l never happen again :(.	Now runs to the first attempt to create an OpenPIC.' id 'efd5db94-74be-41ad-81c1-bcd63a427488' date '5 February 2009' time '8:09:15 pm' author 'eem' ancestors ((name 'VMMaker-eem.245' message 'Cog:	Implemented pc mapping above method metadata.	method metadata integrated with disassembly.	Renamed CogMethod>>method to methodObject' id '14860bba-0535-42a3-a0d6-f8fdfd866bd8' date '5 February 2009' time '5:59:17 pm' author 'eem' ancestors ((name 'VMMaker-eem.244' message 'Cog:	implemented machine code method metadata.	cleaned up initializatin of compilation arrays, etc' id '12db9e8d-d54f-4ee3-bfba-5dd333e10a7d' date '5 February 2009' time '1:53:17 pm' author 'eem' ancestors ((name 'VMMaker-eem.243' message 'Cog:	implemented size and at: primitives.	As the halt says "time to implement machinecode pc to bytecode pc mapping".StackVM:	more explicit about CallerSavedIP vs CallerSavedContext to ease CoInterpreter subclassing.' id 'f92da594-e2f5-4fbe-8c14-2dd003a93603' date '4 February 2009' time '12:57:14 pm' author 'eem' ancestors ((name 'VMMaker-eem.242' message 'Less trixy more robust return code fror compiled interpreter primitive call.  Simply push instructionPointer to reestablish return pc instead of repositioning sp.Consequence: implemented married context inst var assignment.Fixed frameCallerContext: assert.' id 'f517882b-02e4-44e7-9e69-b9b4334b298d' date '3 February 2009' time '9:51:05 am' author 'eem' ancestors ((name 'VMMaker-eem.241' message 'Changed interface between compiled code and CoInterpreter away from stackPage headFP/headSP to framePointer/stackPointer.  Plenty of simplification.Figured out transitions between interpreter and machine code and the instructionPointer convention (i.e. wen it is pushed and when it is ffree floasting).Support for performAt, primitiveExternalCall et al that require messageSelector and/or newMethod to be set.Implemented context switch, stack overflow, base returns and no-context-switch block entry.Disabled at cache for machine code primitives (prior to implementing compiled at:[put:] primitives).' id '5181883f-ab40-466e-aa3d-29589c9d7af1' date '3 February 2009' time '7:59:37 am' author 'eem' ancestors ((name 'VMMaker-eem.240' message 'Added necessary ewxport decl to setInterruptCheckChain:.Bludgeoned loadConfigurationFrom: into keeping relative plaths (I hope).' id '624b346b-76ad-4cdd-96ab-e242a684267f' date '30 January 2009' time '11:00:32 pm' author 'eem' ancestors ((name 'VMMaker-eem.239' message 'Cog:	generate the stack check offset.' id '7a70cc8d-5228-48e4-a8e1-edb280467423' date '30 January 2009' time '2:16:48 pm' author 'eem' ancestors ((name 'VMMaker-eem.238' message 'Cog:	CogBlockMethod numArgs, numTemps, type renamed to	cmNumArgs, cmNumTemps, cmType for better usage tracking' id 'd71d5b4c-83fa-4b83-8112-4cfa40f97bad' date '30 January 2009' time '11:48:42 am' author 'eem' ancestors ((name 'VMMaker-eem.237' message 'fixed the "how much state to svae when marrying a context" bug.  VM now saves only arguments but fills in the context''s stack with nils for stack contents above the arguments up to the stack pointer.   Without this tempAt:put: would fail for a widowed on:do: activation.Lots of apparent change because marryFrame: => marryFrame:SP: and so callers provide the sp.  More use of ensureCallerContext: simplifies things.Cog:runs to first stack overflow.changed layout of CogMethod header to provide a filed giving the offset to the stack overflow check jump for reentering the flow after stack overflow.' id '536364f1-c58b-4702-8a0b-b161f86e4018' date '30 January 2009' time '10:46:13 am' author 'eem' ancestors ((name 'VMMaker-eem.236' message 'Cog:	implemented ability for primitiveClosureValueNoContextSwitch	and primitive 198 to do their thang and not swing.	implemented moveFramesIn:through:toPage: for Cog framesCog now correctly switches processes but can''t finish ovefflowing the stack (no way to locate correct continuation)' id '28caa59d-db56-403f-911a-ea12218cfa7b' date '29 January 2009' time '6:39:39 pm' author 'eem' ancestors ((name 'VMMaker-eem.235' message 'Fix to regression introdeuced by saving only arguments in married contexts.  Need to also save the cpied valiues for a block activation to avoid out-of-bounds errors in ContextPart>>handleSignal: when trying to set handlerActive back to true.Cog:	extending closed PICs.	fixed bad bug in makeBaseFrame:	added cache flushing code for inline cache alteration and pic extension' id '4ad08b73-382d-4003-8620-c49e69adc489' date '29 January 2009' time '4:09:27 pm' author 'eem' ancestors ((name 'VMMaker-eem.234' message 'Cog (now context switches):	fixed bug in size of doubleExtendedDoAnythingBytecode	genLabel => Label	finessed bytecode pc to machine code pc mapping fror the moment (just interpret :) ).	implemented Context inst var access.	simplified CogVMSimulator by making cCoerceSimple:to: produce method surrogates.' id 'd7ab005c-488f-4779-b837-c2dbf4f236fb' date '29 January 2009' time '1:08:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.233' message 'Implemented super send for Cog.  One ceSend: method to rule them all.' id 'daa3bbee-6474-4737-a4ab-daa7df1537d3' date '29 January 2009' time '10:27:53 am' author 'eem' ancestors ((name 'VMMaker-eem.232' message 'Cleanups in light of better understanding of CoInterpreter/machine code transitions.- to ceEnterCogCodeReturnReceiver (no need for a hack argument anymore).- stack page loses savedReturnPC- fewer foo isSurrogate ifTrue: [foo] and more asIntegers' id '648265cb-3ae7-409d-8ba7-e82f0bb6e79c' date '29 January 2009' time '9:49:42 am' author 'eem' ancestors ((name 'VMMaker-eem.231' message 'Finally fgured out the correct interaction between machine code callers of interpreted primitive methods.  Cog now gets as far as the first super send.' id '6604cdc8-3eb3-4bbc-bea5-3a97d24ced0d' date '28 January 2009' time '11:52:59 pm' author 'eem' ancestors ((name 'VMMaker-eem.230' message 'Bug fix to unwind checking primitives which now only find method activations, not block activations.  This could conceivably affect critical: et al (for the better; this brings the behaviour back in line with the Closure and Context VMs).Bug fix to context switch on primitive failure.  VM no longer allows a context switch when failing primitive 198 (primitiveMarkUnwindMethod).  Should fix a small window in critical:.Added primitiveDoNamedPrimitiveWithArgs for the debugger to evaluate external calls a la primitiveDoPrimitiveWithArgs.Added an interruptCheckChain to the VM to allow other clients (i.e. the BocksIA32Plugin) to return (e.g. from a run loop) when the VM wants to do an interrupt/event check.Added code (to slowPrimitiveResponse) to fail unbalanced primitives (but this is disabled for now because there is an unbalanced primitive in UnixOSProcessPlugin that causes the system to fail horribly on startup).shaved the allocation primitives to avoid unnecessarily precomputing the fill value if its not used.  So the inner allocation routines and callers change from ***doFill:with: to ***doFill:format:.shaved an unused parameter from the stack overflow checker, now better named.addNewMethodToCache: now takes the class as an argument instead of relying on lkupClass global.marryFrame: now only intializes the arguments part of the stack state instead of temporaries.  This means that widowed contexts hold onto less.  This should be unnoticeable in practice.Progress with Cog.  VM now gets about 20,000 sends in.  Syntactic sugar for RTL.  Better disassembly (blocks show up nicely).  Better integration etween CoInterpreter and machine code (setjmp/longjmp transfer between the two when necessary).' id '14b64f23-0ddf-470f-8ed8-a9f67ea610c9' date '28 January 2009' time '5:21:45 pm' author 'eem' ancestors ((name 'VMMaker-eem.229' message 'Drop prior to diagnosing regression in StackInterpreter' id 'f3facc34-5d8a-4965-809e-c57b647bc61a' date '28 January 2009' time '10:33:32 am' author 'eem' ancestors ((name 'VMMaker-eem.228' message 'Syntactic sugar applied.  Gets as far as pushActiveContext :)' id '9c19f4cd-2466-41a6-92a7-85efd1233e65' date '22 January 2009' time '2:17:50 pm' author 'eem' ancestors ((name 'VMMaker-eem.227' message 'Drop before syntactic sugar putch	self gen: FooX operand: o=>	self FooX: o' id 'e8a37ce0-e4a5-41f4-a394-7645523a6e3d' date '22 January 2009' time '11:28:57 am' author 'eem' ancestors ((name 'VMMaker-eem.226' message 'Changed over to "backwards" (i.e. congruent with subtract) compare.' id '17aa1874-2bc3-4481-a841-df4486fe9170' date '21 January 2009' time '10:11:29 pm' author 'eem' ancestors ((name 'VMMaker-eem.225' message 'Drop before bowing to the inevitable and reversing the sense of CmpR, CmpCqR & CmpCwR' id '7a2e44e5-5417-4282-87fe-5d88ed461d93' date '21 January 2009' time '9:35:48 pm' author 'eem' ancestors ((name 'VMMaker-eem.224' message 'Saving state of Cog before changing back to 0 as the caller saved frame pointer for a base frame.' id '37e81390-5f13-4e5c-9efc-999feceb5c1a' date '20 January 2009' time '5:24:34 am' author 'eem' ancestors ((name 'VMMaker-eem.223' message 'Cogit uses the run mode of the Bochs plugin.Better send logging.' id '90119cdf-3262-4a03-95c7-0d4c6e705bea' date '14 January 2009' time '4:53:58 pm' author 'eem' ancestors ((name 'VMMaker-eem.222' message 'cosmetic changes guaranteed to numb the pain.Reformatted clause in commonReturn.Eliminated ugly assymetry with instVar:ofContext: in storeMaybeContextReceiverVariable:withValue:/instVar:ofContext:put:' id '276de9c3-ae9f-4dda-b3b1-a0115c906b49' date '13 January 2009' time '11:04:58 pm' author 'eem' ancestors ((name 'VMMaker-eem.221' message 'Fixed bug in stack simulator''s firstIndexableField:.Used more informative selector in changeClassOf:to:/primitiveChangeClass' id '51b44801-a9df-4949-a076-c3ed277b2343' date '13 January 2009' time '5:07:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.220' message 'Fixed bug in context/frame marriage checking.  There was an extremely unlikely chance of the system assuming a context was married to some other frame.  This fix is needed but I doubt very much we have ever been bitten by it.Much of block support implemented in SImpleStackBasedCogit.Some straggling methods (senders of expandCases) now use pragmas.Fixed printop: for Interpreter.  Fixed method that sent successful instead of tested successFlag.' id '6e8d7797-222a-4a2f-8c5f-1b9dea84c575' date '13 January 2009' time '3:35:03 pm' author 'eem' ancestors ((name 'VMMaker-eem.219' message 'Fixing class variables in ObjectMemory Interpreter and StackInterpreter because Monticello can''t quite hack shared pools when class variables are moved into sharefd pools.You may have to do this manually:	#(BaseHeaderSize BytesPerWord RootBit) do:		[:k| Undeclared declare: k from: ObjectMemory classPool].	Undeclared declare: #ValueIndex from: Interpreter classPool.	Undeclared declare: #ValueIndex from: StackInterpreter classPool.	ObjectMemory withAllSubclasses do:		[:c| c recompileAll.  c class recompileAll],	Undeclared removeUnreferencedKeys.	self assert: (#(BaseHeaderSize BytesPerWord RootBit ValueIndex) noneSatisfy: [:k| Undeclared includesKey: k])' id '9f6a4902-98d8-40f5-bc93-a8ed4ee9d252' date '8 January 2009' time '6:43:33 pm' author 'eem' ancestors ((name 'VMMaker-eem.218' message 'Interim Cogit class initialization fix.' id '1937a174-e82a-4bdd-be1e-60d992b14fa7' date '8 January 2009' time '6:17:22 pm' author 'eem' ancestors ((name 'VMMaker-eem.217' message 'Fixed bug in activateNewMethod which causes a primitive failure on perform or executeNewMethod to crash.Moved more constants to shared pools for Cog.Plenty of progress with Cog. Now runs up to isKindOf: in Cursor class>>currentCursor:.' id '17b3dd47-c541-4b05-a55e-9d75328d3fd2' date '8 January 2009' time '5:12:31 pm' author 'eem' ancestors ((name 'VMMaker-eem.216' message 'Should also have said fixed NaN comparison for <= & >=.  VMMaker-eem.210 is not quite right.' id '6a2186bf-e0d3-43c8-933c-835cc90a772a' date '6 January 2009' time '9:38:46 pm' author 'eem' ancestors ((name 'VMMaker-eem.215' message 'Shaving time from float prims by removing redundant tests from inner functions.Cosmetic changes to StackInterpreter (e.g. type: ''double '' => type: #double).Cog generates non-trivial methods, calls interpreter primitives correctly and returns to interpreter.  Gets confused in Bitmap>>decompress:fromByteArray:at: invoking at: with an index one too big for the byte array.' id 'eda48979-5772-4be3-9e2f-7bdf8271d280' date '6 January 2009' time '9:36:20 pm' author 'eem' ancestors ((name 'VMMaker-eem.209' message 'Checking-in Cog progress so far.  Much interoperability between interpreter and generated code funcitonal (see CoInterpreter>>ceSend:to:numArgs:).  System executes much of initial Bitmap>decompress:fromByteArray:at: that decompresses the cursor on start-up.' id '9d2f907d-fe73-40f6-98d2-ff67b7d6e4a6' date '5 January 2009' time '5:36:31 pm' author 'eem' ancestors ((name 'VMMaker-eem.208' message 'Cog JIT stack pages moved into main memory.Cogit simulates a read of stackPage on entry to the ceEnterCogCodePopReceiverReg enilopmart and then c***ps out indexing the page struct via eax.' id 'edbbdd87-dcf1-420b-9736-b63f3e25871a' date '29 December 2008' time '3:17:20 pm' author 'eem' ancestors ((name 'VMMaker-eem.207' message 'Fixed StackInterpreter>>primitiveExternalCall which I broke for simulation in VMMaker-eem.204.Fixed for simulation assert in markAndTraceAndMaybeFreeStackPages:.CoInterpreter/Cogit now compiles methods and is on the verge of executing the first one.' id 'fdcfe7f9-4256-420e-b9e2-9779d24e4dd7' date '29 December 2008' time '11:47:14 am' author 'eem' ancestors ((name 'VMMaker-eem.206' message 'Refactoed markAndTrace: code to avoid duplication with new stack pages tracign code.  This is done by using lastPointerOf:recordWeakRoot: instead of lastPointerForMarkAndTraceOf:.Fixed "^self" slip.' id 'd6878edc-b348-4776-bad9-10deb517dbfa' date '20 December 2008' time '9:28:39 am' author 'eem' ancestors ((name 'VMMaker-eem.205' message 'Added stack pager GC scheme (on full GC trace stack page if tracing a married context on that page).Added ObjectMemory>>isMarked: and used it in as many places as possile (other places use the header for performance).Fleshed out the Cogit (pun  intended).  There is an assembler, a jit, a code zone manager, a co-interpreter.' id '8e0f5088-ccdf-4f0d-b0ee-935176062aa4' date '20 December 2008' time '7:57:20 am' author 'eem' ancestors ((name 'VMMaker-eem.204' message 'Moving all C annotation messages (var:type: export: et al) to pragmas.  Plugins up-to-date with repository as of 9:20am today.N.B.  Old code still supported for backward compatibi.lity/lagging plugins.Made global struct regime use macros (e.g. GIV(framePointer) instead of foo->framePointer).StackInterpreter startup uses eden and stack reserve to determine if it has enough memory on startup.StackInterpreter checks compact classes it depends on are present and correct.Initial Cog JIT classes.' id 'f9f8a218-fb72-4b8d-aa3a-15e3ffa74309' date '17 December 2008' time '9:36:50 am' author 'eem' ancestors ((name 'VMMaker-eem.203' message 'Fixes and clarifications to allocation logic for low space conditions.' id 'cf6e23f2-6403-42c1-b7b3-9caf787fb9d2' date '15 December 2008' time '11:26:28 am' author 'eem' ancestors ((name 'VMMaker-eem.202' message 'Fix for access to contexts through instVarAt: & instVarAt:put:.' id 'd02d43b1-00f1-4d54-b345-79aed7ee76f9' date '10 December 2008' time '5:21:08 pm' author 'eem' ancestors ((name 'VMMaker-eem.201' message 'Fix for misplaced low-space logic.  Low-space now tested for at safe point.' id '930e2c8b-cb48-4a72-8176-d2254118a611' date '10 December 2008' time '2:05:19 pm' author 'eem' ancestors ((name 'VMMaker-eem.200' message 'Added DumpStackOnLowSpace to StackInterpreter for easier debugging of low-space conditions.' id 'e5622d71-38bb-4e2b-950c-2658bf6bb4b7' date '8 December 2008' time '4:30:52 pm' author 'eem' ancestors ((name 'VMMaker-eem.199' message 'Added DumpStackOnLowSpace class var to StackInterpreter to allow easier debuggng of low-space conditions.  Set to non-zero in e.g. interp.c' id '3b85de12-3f2e-439d-9a90-cc3b6bff13ec' date '8 December 2008' time '4:29:31 pm' author 'eem' ancestors ((name 'VMMaker-eem.198' message 'Added comments to users of assertClassOf:is:compactClassIndex: that explains that the fetch of the class from the specialObjectsArray is expanded in-line and hence is only evaluated if the compact class index is zero.' id '384f2e07-ccc6-4b6e-882e-701bab33608d' date '8 December 2008' time '11:15:34 am' author 'eem' ancestors ((name 'VMMaker-ar.197' message 'Combined client state and draw[range]elements primitives for the B3DAcceleratorPlugin to avoid the gc problems we were seeing. Also adds a few verification methods to ensure proper input data.' id '02e7b79b-f4fd-174d-aca5-716bb64914ce' date '5 December 2008' time '3:53:59 pm' author 'ar' ancestors ((name 'VMMaker-eem.196' message 'Adding primitive err code support to stack vm.Added faster isFloat checking to stack vm (via Float''s compact class index).Adding Alien support to ObjectMemory & InterpreterProxy.Fixed bug in CCodeGenerator translation of and: clauses.Stackvm needs stackvm branch revision 4506 or better.' id 'd91eaaca-7b4a-429b-9de2-fd728e8eea45' date '4 December 2008' time '3:26:06 pm' author 'eem' ancestors ((name 'VMMaker-eem.195' message 'Changing eden & stack pages defaults to 2m & 160 respectvely.Cursor set x y for HostWindow plugin.' id 'd28d0f02-74d2-490e-b8f2-83d5a8fbb0e1' date '24 November 2008' time '3:26:24 pm' author 'eem' ancestors ((name 'VMMaker-eem.194' message 'Extensions to HostWindowPlugin for JL to answer positions and sizes of arbitrary native windows and their displays (inside surfaces).Fixes to SmartSyntaxPlugin Unsigned support for the above.' id 'd97f3f73-ed57-45da-9bfb-80f0c7d7a9fe' date '20 November 2008' time '2:04:27 pm' author 'eem' ancestors ((name 'VMMaker-bgf.193' message 'Strncpy rather than strcpy so we don''t get an extra 0 bytefrom device name checks in Sound Plugin.' id '5d444fc1-21f3-48fd-8871-e8a7235a6eb6' date '20 November 2008' time '12:08:59 pm' author 'bgf' ancestors ((name 'VMMaker-eem.192' message 'Added ability to force asmLabelling and applied it to internalQuickCheckForInterrupts.Simplified externalEnsureContextIsMarried:.Made makeBaseFrameFor: provide an error message for cannotResume (which is a fatal crash in the normal VM).Removed labelling of assertClassOf:is: in the context VM.' id '6ad87ff2-2bcf-424b-9ef4-ae0f65777b66' date '18 November 2008' time '1:13:25 pm' author 'eem' ancestors ((name 'VMMaker-eem.191' message 'instVarAt:[put:] primitives fixed for married contexts.pruning report includes deleted primitives.fixedFieldsOf:format:length: can use fetchClassofNonInt:subscript:with:format: must lose its profiling label :(' id 'b68ded8a-a28f-46b6-ba83-5632a46ed911' date '11 November 2008' time '12:16:31 pm' author 'eem' ancestors ((name 'VMMaker-eem.190' message 'Changed some of the new vm parameter numbers to reserve indices for more values that wioll persist in the image header (such as survivor space size, jitted code cache size)' id '37db9d31-c43d-4f0e-8d0b-65284e79d1bf' date '5 November 2008' time '12:12:23 pm' author 'eem' ancestors ((name 'VMMaker-eem.189' message 'Fixed lowSpace.  lowSpace now checked for in StackInterpreter>>postGCAction:.Removed some more VM_LABELings and commented some that werre missing them.' id '8bbba6d7-0c75-400f-a925-9afdbc026a0c' date '5 November 2008' time '10:54:09 am' author 'eem' ancestors ((name 'VMMaker-eem.188' message 'Closure VM updated with new profiler support and stats counting number of process switches, checkForInterrups and ioProcessEvents calls (you''ll also need to update the platform source)' id 'cf2e86c3-54f7-4bb1-87c4-bfec58dad36f' date '3 November 2008' time '4:47:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.187' message 'StackInterpreter (but not yet normal Interpreter) uses new pc buffer VM profiler.Fixed doc bug for isContextHeader: and simplified StackInterpreter''s implementation, since it uses only MerthodContext.Two fewer labellings since icContextHeader: simplifications cause more inlined label duplication by the intel compiler.' id 'c11d3d1a-0a87-467b-9f92-0ac31d0d1ee3' date '2 November 2008' time '3:54:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.186' message 'Made assertValidExecutionPointers available to C vm.Fixed stack page list assert for baseReturn.Bullet-proofing.  VM now survives e.g. thisContext swapSender: 1.Typoes.' id 'f4f3c811-843c-46be-8120-f2d611fde127' date '31 October 2008' time '2:39:30 pm' author 'eem' ancestors ((name 'VMMaker-eem.185' message 'Abstracted setting the current stackPage and stackLimit.Fixed bug with cannotReturn: (base return freed the current page no matter what).Sender assignment cleaner using markStackPageNextMostRecentlyUsed: to avoid disturbing current page.More helpful frame printing.' id '3855c577-17ff-4bef-bffe-1107dec34f39' date '31 October 2008' time '1:30:19 pm' author 'eem' ancestors ((name 'VMMaker-hrs.184' message 'Don''t fail when primitiveSoundGetRecordLevel doesn''t work -- just answer a negative number.' id '1c96559d-d562-46e9-a343-9020e528a796' date '30 October 2008' time '4:28:42 pm' author 'hrs' ancestors ((name 'VMMaker-eem.183' message 'Nuked leastRecentlyUsedPage pointer.Moved arrays to end of global struct.' id '1d38a73a-4e70-492c-b8e6-6c0eaf47b90b' date '30 October 2008' time '12:58:06 pm' author 'eem' ancestors ((name 'VMMaker-eem.182' message 'Implemented my move variable number of frames on overflow algorithm.  Performance of benchFib now stabilised, predictable and faster than standard VM.Added instrumentation for various stack-related events (see vmParameterAt: & primitiveVMParameter).Sorted entries in global struct better.Did more of cannotReturn: implementation for thisContext swapSender: nil.' id 'fdf57f17-4f51-4836-bfa2-665b8ef9a3a6' date '29 October 2008' time '6:01:16 pm' author 'eem' ancestors ((name 'VMMaker-hrs.181' message 'When iterating over audio devices, let Squeak base from 1 while C bases from 0.' id 'aecbcdf3-d27b-9e47-b733-32438482a56c' date '26 October 2008' time '8:23:55 pm' author 'hrs' ancestors ((name 'VMMaker-eem.180' message 'Fix bug in primitveExecuteMethod[ArgsArray] when invoking method with primitive that fails.Fix off-by-one error transferring arguments to stack in StackInterpreter''s primitiveExecuteMethodArgsArray' id '8db941d7-b875-4b02-ac09-8ebb83f47bdc' date '26 October 2008' time '7:24:23 pm' author 'eem' ancestors ((name 'VMMaker-eem.179' message 'Fixed bad bug in snapshot (system didn''t resume with snapshot primitive answering true).Added a flush to stringlike-object printing for printOop.' id '08ca0bd2-f80f-40d7-8339-cecd9e105cf0' date '24 October 2008' time '3:53:33 pm' author 'eem' ancestors ((name 'VMMaker-hrs.178' message 'Primitives for enumerating the audio devices, getting and setting the default devices, and for getting the record level.' id '825c430d-3c92-4cfb-abc2-3554213a412b' date '24 October 2008' time '2:51:06 pm' author 'hrs' ancestors ((name 'VMMaker-eem.177' message 'Restore stackLimit in checkForEventsMayContextSwitch:, which means stackLimit now restored if system is looping checking for interrupts in backward branches.This fixes the performance difference between Stack and Context interpreters for the sieve benchmark (bytecodes per second in tinyBenchmarks).' id 'f470bb10-da86-4ba6-afb7-e7d9bdef7966' date '23 October 2008' time '5:11:20 pm' author 'eem' ancestors ((name 'VMMaker-hrs.176' message 'Define primitiveSet/GetDefaultSoundPlayer/Recorder in SoundPlugin.' id '7037bff9-769e-5b45-9e56-2cc95ec8d42b' date '23 October 2008' time '5:21:42 pm' author 'hrs' ancestors ((name 'VMMaker-eem.175' message 'Nuking unused stackArgvFoo: methods which cause a type error in the translator.' id 'a16ca492-f356-4519-8396-1da160a4bde4' date '23 October 2008' time '12:25:44 pm' author 'eem' ancestors ((name 'VMMaker-eem.174' message 'Changed statMarkCount to count objects visited (minimal change from times round the loop) instead of meaningless times round the state machine loop.  Better would be objects marked, but that''s further away from the current definition.Added desiredEdenBytes setting in image header, accessed via vmParameterAt: 44 (current eden bytes) and 45 (desired eden bytes).Fixed nextPage ref in assertWellFormedPageList' id '35ce2fa8-d49b-4797-a367-39ea00a7acdf' date '23 October 2008' time '11:24:49 am' author 'eem' ancestors ((name 'VMMaker-eem.173' message 'Cheap instrumentation of incrementalGC frequency in simulator.  Interpreter does an incrementalGC about every 50k bytecodes and the StackInterpreter, with 256k of eden, does one about every 200k bytecodes.Bug fix to markStackPageMostRecentlyUsed: (prolly the first of a few :/)Moved a bug fix from StackInterpreter>>signed64BitValueOf: across.Made needsToRegenerateInterpreterFile consider ancilliaryClasses.' id '353605d8-d793-4775-9dc4-bc4759abe230' date '22 October 2008' time '2:00:52 pm' author 'eem' ancestors ((name 'VMMaker-eem.172' message 'About a 15% improvement in the performance of markAndTrace:- eliminated unnecessary variable- eliminated some dispatches by making some states loop where possibleThis results in around a 5% improvement in binarytrees: 15.' id '5a59e14a-1575-4d47-9eb1-3d868efc6fd3' date '22 October 2008' time '12:02:59 pm' author 'eem' ancestors ((name 'VMMaker-eem.171' message 'Faster floating-point arithmetic.  Made inliner ignore (i.e. happily inline methods containing) cCode: '''' inSmalltalk:''s with empty c code.  Makes e.g. ShootoutBody, a float-intensive n-body simulation, about 11% faster.Nuked some unused code (inlineMethodsUsing:).' id 'f252d1cc-dfb9-49f0-9171-b3878b10cdf6' date '21 October 2008' time '2:36:52 pm' author 'eem' ancestors ((name 'VMMaker-eem.170' message 'FloatMathPluginSmulagtor needs to implement shouldBeTranslated' id 'a42ef655-1da5-4e9e-9233-2ba0b256d624' date '21 October 2008' time '12:31:05 pm' author 'eem' ancestors ((name 'VMMaker-eem.169' message 'Fixed performance bug in newStackPage.Made desiredNumStackPages global to allow setting as a preference.Fixed bug in changeClassOf:to: for byte objects.Added FloatMathPluginSimulator to simulate isnan:.Fixed bug in BalloonEngineSimuator>>loadWordTransformFrom:into:length: (needs review)' id '9bc6fae7-cd19-43cd-90c2-3fa559db9a25' date '21 October 2008' time '12:18:24 pm' author 'eem' ancestors ((name 'VMMaker-eem.168' message 'Since stackLimit is also the initialization flag for the stack system forceInterruptCheck must not smash it to -1 unless it is non-zero (i.e. unless the stack system has been intialized).  If not, a call to forceInterruptCheck before teh system has booted will crash the VM since the stack system will not be initialized.' id '5554a37f-29c8-4c0f-b25a-e421b8de1347' date '16 October 2008' time '7:24:06 pm' author 'eem' ancestors ((name 'VMMaker-eem.167' message 'Removed enough labels to allow for labelling under the Intel compiler (with our current optimization settings).' id 'd21936de-c38c-4b9b-8b4c-caf1d320c3bc' date '13 October 2008' time '5:02:54 pm' author 'eem' ancestors ((name 'VMMaker-eem.166' message 'Only generate labels in the VM proper, avoiding problems with labels being duplicated by C compiler optimizer inlining and loop unrolling.  We use the asmLabel: directive to control labelling in the interpreter proper. But it is too much work doing that for plugins too.' id '4cbe8479-277f-4017-bf5d-f1f16ffbed4e' date '13 October 2008' time '2:35:15 pm' author 'eem' ancestors ((name 'VMMaker-ar.165' message 'InterpreterPlugin class>>touch to force regeneration of plugin.' id 'aa6bb603-9a87-5e48-8b2b-1f908a39f8ee' date '13 October 2008' time '1:20:54 pm' author 'ar' ancestors ((name 'VMMaker-eem.164' message 'Need a sensible default initializetion on logger for SmartSyntaxCodeGenerators.' id '573e01a4-3527-4c45-a568-644a1c4b39e6' date '13 October 2008' time '1:16:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.163' message 'Fixing Interpreter class>>initialize & StackInterepreter class>>initialize to correctly initialize ObjectMemory.' id 'd71f0f74-ee70-413e-9b2c-c1194b394c09' date '13 October 2008' time '1:05:29 pm' author 'eem' ancestors ((name 'VMMaker-ar.162' message 'Merge VMMaker-eem.161 which includes the changed closure format (copied values being in the indexed portion of the closure instead of an extra array).' id 'c8c6226b-759c-8949-b65b-fba5f89cfaa4' date '13 October 2008' time '12:53:53 pm' author 'ar' ancestors ((name 'VMMaker-ar.157' message 'Add support for gif plugin.' id '804862de-14b3-9846-ac3d-b1789a4fc8d1' date '10 October 2008' time '4:36:50 pm' author 'ar' ancestors ((name 'VMMaker-ar.156' message 'Added PNGLibPlugin.' id '3b11c325-915f-4940-90e6-70d323d919c4' date '8 October 2008' time '6:19:10 pm' author 'ar' ancestors ((name 'VMMaker-eem.155' message 'Argh!! Too dumb to realise that version wasn''t dumb enough.  Checking-in an even dumber version.' id '48563ce1-79f1-41eb-b750-7d5986076905' date '22 August 2008' time '4:48:29 pm' author 'eem' ancestors ((name 'VMMaker-eem.154' message 'Argh!! Too many versions!  Used something only my whizzy CCodeGenerator supports in pop:thenPushBool:.  Checking-in a dumber version.' id 'e0c1379c-60e1-4d4c-8a62-98b9e2b38076' date '22 August 2008' time '4:41:15 pm' author 'eem' ancestors ((name 'VMMaker-eem.153' message 'Added missing pop:thenPushBool: needed by newer VM profiling prim' id 'ed89353b-eeeb-482b-a040-996e45ed8b6a' date '22 August 2008' time '4:28:46 pm' author 'eem' ancestors ((name 'VMMaker-eem.151' message 'Added no-context-switch versions of closure value primitives.  Made ordinary closure value primitives context-switch points.Updated VM profile primitives.' id 'daa3252c-8ab1-4c21-8f49-4d35d927f6b4' date '22 August 2008' time '4:04:02 pm' author 'eem' ancestors ((name 'VMMaker-eem.150' message 'Fixed type error in primitiveVMProfileExtent' id '092d83da-8576-4aa8-bd6a-07c80027ea4c' date '20 August 2008' time '3:09:14 pm' author 'eem' ancestors ((name 'VMMaker-eem.149' message 'Added VM profiling primitives.Made VMMaker & Tool accept relative paths for src & platforms' id '2146abba-5e5a-46ce-b3ac-f0753fe77e62' date '20 August 2008' time '2:04:33 pm' author 'eem' ancestors ((name 'VMMaker-ar.148' message 'Move GeniePlugin into a separate package since the closure compiler has difficulties loading it.' id '647cdd99-e209-2542-8aef-e7f8381c674c' date '19 August 2008' time '4:09:36 pm' author 'ar' ancestors ((name 'VMMaker-eem.147' message 'Added VM profiling primitives (needs svn/qwaqvm/trunk rev 3458).Added imageFormatVersion as VM parameter 41 to primitiveVMParameter. (to distinguish old from Closure VMs)Slight imporvements to closure value primitives & creation bytecode.Faster checkHeapIntegrity.Fixed extra pop in SocketPlugin>>hasSocketAccess.Nuked useless storePointerUncheckedAsserting:.Added printReferencesTo:.Typoes with metaclassInstSize.' id 'df2bde04-16dd-41e3-9b47-ad68b2166d6f' date '18 August 2008' time '2:33:33 pm' author 'eem' ancestors ((name 'VMMaker-jcg.125' message 'Return zero at the end of halt() and msg() to avoid compiler warnings about falling off the end of a non-void function.' id 'fd1a51b6-2ca6-4bfa-bcc2-8849ea90a239' date '30 June 2008' time '5:49:13 pm' author 'jcg' ancestors ((name 'VMMaker-eem.124' message 'Addedf compatibility primitives for Cog/Closure VM''s Context at:[put:] & size primitives 210, 211 & 212.' id '50c6dda4-4d7a-428c-9d1f-31d2b81a8108' date '27 June 2008' time '3:24:20 pm' author 'eem' ancestors ((name 'VMMaker-eem.121' message 'Rolled image version number.  Made previous version (6502) bac kward-compatible.Ripped out obsoleteNamedPrimitive and obsoleteIndexedPrimitive support.' id '912a2d42-e61d-4b06-a27e-e2388c79dec0' date '23 June 2008' time '4:50:35 pm' author 'eem' ancestors ((name 'VMMaker-eem.117' message 'Fixed metaclassInstBytes usage for debug printing of classes' id 'ced38414-fb84-4db5-b70f-1bb2d94bcabf' date '18 June 2008' time '4:41:27 pm' author 'eem' ancestors ((name 'VMMaker-eem.116' message 'Fixed saving/loading configuration.  New scheme saves directories as relative path names if they''re relative to the current directory along with booleans that state whether the path name is relative or not.  Loader checks for the flags and interprets file names as relative if set.Changed && & || ytranslation to crtab: indent.Fixed VMMakerTool>>platformNameText: so it only switches to a new VMMaker if the new maker was successfully initialized.' id 'cf38bbca-6533-4573-9199-836a8239229e' date '18 June 2008' time '2:50:40 pm' author 'eem' ancestors ((name 'VMMaker-ar.115' message 'Undo the indentation change to formatting && so that it is easier to diff the changes in C code (sorry Eliot ;-) We can restore this in due time but the formatting change shouldn''t come in combination with all those actual content changes.' id '1f9006e8-112a-f840-bb12-331692ea3396' date '16 June 2008' time '10:03:49 pm' author 'ar' ancestors ((name 'VMMaker-ar.114' message 'Improve handling of legacy VMMaker configuration files.' id 'ed080971-fb8f-504d-9e5a-bd52c85a7ca8' date '16 June 2008' time '9:55:47 pm' author 'ar' ancestors ((name 'VMMaker-eem.113' message 'Commented out two asserts because the win32 build doeswn''t pick up an assert def (unlike Mac OS)' id 'e2889db9-5fe1-47fa-ad9d-e31e89263f69' date '16 June 2008' time '3:02:57 pm' author 'eem' ancestors ((name 'VMMaker-eem.112' message 'Eliminated pointless short-form pushIndirectTemp bytecode 139.Several block usage cleanups to move temps from emthod scope to block scope, in part to test closures.' id 'bde7ece9-3de1-4bfc-88db-4692a7649874' date '16 June 2008' time '10:10:19 am' author 'eem' ancestors ((name 'VMMaker-eem.111' message 'Fixed bug with plugin drag-n-drop. validatePlugin:in: checkedcorss-platform fiels existing in platformPluginsDirectory insteadof crossPlatformPluginsDirectory(Grrrrr...)' id '77866e63-3832-4f09-92c9-1768b48cc46e' date '13 June 2008' time '4:51:22 pm' author 'eem' ancestors ((name 'VMMaker-eem.110' message 'Merge of Closure changes with Josh''s primitiveSoundSetRecordBufferFrameCount: in VMMaker-jcg.103' id '57416bec-dbed-4ebc-b340-e64ca4eae063' date '13 June 2008' time '3:43:01 pm' author 'eem' ancestors ((name 'VMMaker-eem.109' message 'Functional Closure VM with the GC bug in Interpreter>>activateNewClosureMethod: fixed.pushNewArrayBytecode modified to also "cons" (initialize with elements popped off the stack)Adds a heap leak map checker (requires platforms/Cross/vm/sqHeapMap.c); see Interpreter>>checkHeapIntegrity.Moves some methods up and down between ObjectMemory and Interpreter.' id '12c85190-d789-4e7e-a7ee-5d3e63a35c3b' date '10 June 2008' time '4:30:43 pm' author 'eem' ancestors ((name 'VMMaker-eem.108' message 'Added the crucial one-liner to the create closure bytecode:	reclaimableContextCount := falseThanks Andreas!' id 'e3c28fda-13d5-46f7-a221-5d23839c829b' date '6 June 2008' time '2:43 pm' author 'eem' ancestors ((name 'VMMaker-eem.107' message 'removed obsolete closureCopyNumArgs:copiedValues:instructionPointer:' id 'a0dd0b9f-3447-4025-84fd-b69a7e2880b1' date '6 June 2008' time '12:25:18 pm' author 'eem' ancestors ((name 'VMMaker-eem.106' message 'Changes for GC bugs in closure bytecodes:	activateNewClosureMethod:	closureCopyNumArgs:copiedValues:instructionPointer:	closureCopyNumArgs:instructionPointer:pushNewArrayBytecode can init contents from stack or produce empty array.Corrected slips in oopHasOkayClass: okayOop: okayFields: (check compiled methods)Removed stream primitives.Reorganized Interpreter to keep me sane.' id '886ad8f5-b970-4feb-9f66-6b37fe298244' date '6 June 2008' time '12:23:50 pm' author 'eem' ancestors ((name 'VMMaker-eem.105' message 'Eliminated method inst var from Closure, fetching receiver and method from outerContext for consistency.Added more error checking to Closure>>value[:value:...] primitives' id 'eff85bf7-744d-4cf4-b4fd-b723f580b035' date '29 May 2008' time '5:20:27 pm' author 'eem' ancestors ((name 'VMMaker-eem.104' message 'V3 + Closure and LongForm V3 + Closure VMs which add	PushNewArray:	PushRemoteTemp:inVectorAt:	StoreRemoteTemp:inVectorAt:	StorePopRemoteTemp:inVectorAt:	PushClosureCopyCopiedValues:bytecodes' id 'e7d631ca-9b82-4b3d-af0e-e90d63d4e2e6' date '28 May 2008' time '11:30:07 am' author 'eem' ancestors ((name 'VMMaker-eem.103' message 'V3 + Closure and LongForm V3 + Closure VMs which add	PushNewArray:	PushRemoteTemp:inVectorAt:	StoreRemoteTemp:inVectorAt:	StorePopRemoteTemp:inVectorAt:	PushClosureCopyCopiedValues:bytecodes' id '6ef2c36e-dfbb-46d9-8c39-a8643bc3305b' date '28 May 2008' time '11:27:20 am' author 'eem' ancestors ((name 'VMMaker-ar.102' message 'Since Interpreter>>signed32BitValueOf: will now fail for 32 bit positive integers (ulong) make sure the FFI uses positive32BitValueOf: when appropriate.' id '4965957f-92c3-324b-866e-9042ba943616' date '26 March 2008' time '7:40:03 pm' author 'ar' ancestors ((name 'VMMaker-ar.101' message 'Two more fixes for LargeInts:- positive64BitIntegerFor: obviously needs to bail to positive32BitIntegerFor: to avoid creating non-normalized large ints- primitiveBitShiftLargeInts needs to be protected from the explicit translator coercion of the right shift argument' id 'bdeaf4e6-8dae-e945-b61e-979c8e214372' date '21 March 2008' time '8:51:53 pm' author 'ar' ancestors ((name 'VMMaker-ar.100' message 'Put the large integer primitives online. Note that some primitives currently aren''t used in the image (the logic prims in particular) and we still need to turn them on.' id '6ca786a6-c9f8-394e-9e41-2e2a483a5c52' date '20 March 2008' time '11:49 pm' author 'ar' ancestors ((name 'VMMaker-ar.99' message 'More large integer work:- Rename primitiveBitShiftLargeInt to primitiveBitShiftLargeIntegers for consistency with other names- Fix positive64BitIntegerFor: not to return non-normalized values (same problem as in signed64BitIntegerFor:)- Address an additional overflow problem in large int division that wouldn''t affect small integers since they are only 30 bits wide' id '231d8580-360c-c249-b263-563e8b5bbaa5' date '20 March 2008' time '11:08:05 pm' author 'ar' ancestors ((name 'VMMaker-ar.98' message 'Interim check in for LargeInteger work:- Fixed versions for signed32Bit* and signed64Bit* functions- Versions of all the missing large int primitives which will work as long as the input is in 64 bit rangeOnly the add, sub, div, and mul primitives have been verified so far. Once all of them have been tested the blue book large integer primitive ranges in Interpreter should be filled in again.' id '6ad57f64-1139-a844-8bf9-54caf6c3dbfd' date '19 March 2008' time '11:41:06 pm' author 'ar' ancestors ((name 'VMMaker-ar.97' message 'Fix edge cases in signed32BitValueOf: and signed64BitValueOf: and simplify primitiveIntegerAtPut a little.' id '10175d02-6445-4e4e-a126-00819f944be2' date '19 March 2008' time '8:47:59 pm' author 'ar' ancestors ((name 'VMMaker-bgf.96' message 'Pedantic change to the guard against negative-remainderin primitiveIdentityDictionaryLookup.' id '573302bf-7489-43a0-8fd7-9b31da46b4de' date '5 March 2008' time '9:59:12 pm' author 'bgf' ancestors ((name 'VMMaker-ar.95' message '- adds an optimization for Array>>size in bytecodePrimSize- adds a primitive for IdentityDictionary>>scanFor:' id '4231e3a8-25e5-ae41-9178-a46c458fa252' date '5 March 2008' time '4:54:27 pm' author 'ar' ancestors ((name 'VMMaker-ar.94' message 'Add primitiveGetWindowSize/primitiveSetWindowSize to get/set the size of the Squeak main window.' id '28aff368-c150-644a-b813-84f0dc2d626d' date '27 February 2008' time '11:39:32 am' author 'ar' ancestors ((name 'VMMaker-ar.93' message 'Fixes for profiling:- Account for the correct sample after a timer interrupt occurs (instead of accounting for the timer which just got activated)- Take samples of the primitiveMethod after a primitive successfully completed (to be able to measure primitives as well)- Instead of being overly clever pay the price while profiling and do a high-res clock check on each primitiveResponse' id '125d686d-1a4d-8741-9c41-39dfc98c81da' date '27 February 2008' time '11:38:10 am' author 'ar' ancestors ((name 'VMMaker-ar.92' message '- remove Miramar primitives since they require support code which is not in the code base yet' id '3a3dbb12-8a8e-564b-97b9-a2d6b1466ce7' date '7 December 2007' time '4:39:54 pm' author 'ar' ancestors ((name 'VMMaker-ar.91' message '- Extends primitiveSuspend to take process off-list if they are not the active process' id '45245cdc-978c-1a4e-9740-63dbd180859a' date '7 December 2007' time '4:38:33 pm' author 'ar' ancestors ((name 'VMMaker-bgf.90' message 'For future reference...	primitiveLength 	primitiveNormalizefor FloatArrayPlugin(not used yet in the main code, just archiving themwhile I bring my VM image up to date.)' id '05d71f64-370e-42c7-a221-7f306d9a42e3' date '5 December 2007' time '11:51:13 pm' author 'bgf' ancestors ((name 'VMMaker-bgf.89' message 'Put back the KlattSynthesizerPlugin,that was just innocently minding its own business...' id '9c332fb0-3d36-4da0-a094-fc9987cb0ae5' date '5 December 2007' time '11:46:49 pm' author 'bgf' ancestors ((name 'VMMaker-clw.88' message 'Added some stability fixes for the native window contents Miramar windows.' id '86d79bfc-3d3f-48cc-9a96-5647751aa67e' date '5 December 2007' time '2:00:28 pm' author 'clw' ancestors ((name 'VMMaker-clw.87' message 'Added my primitives.' id '374640ef-7eab-43a5-873f-e43ea1dc51d4' date '4 December 2007' time '9:47:36 pm' author 'clw' ancestors ((name 'VMMaker-ar.86' message '- added primitive[Get|Set]LogDirectory' id '4ee3eaf1-2700-fe40-b2f5-f66886baba3e' date '12 October 2007' time '5:05:29 pm' author 'ar' ancestors ((name 'VMMaker-jdm.85' message 'part of Matrix changes in package 3DTransform-jdm.34' id '2303b376-6e93-4d20-a224-787aad19a2f2' date '10 October 2007' time '4:28:47 pm' author 'jdm' ancestors ((name 'VMMaker-ar.84' message '- some fixes for making BitBltSim work again' id '914b25b2-82fb-c54a-86c3-3477b662dcae' date '2 August 2007' time '6:07:52 pm' author 'ar' ancestors ((name 'VMMaker-ar.83' message '- add a logging entry point to the FFI plugin that can be used by C code to enable/disable logging' id 'a0111fc2-1e58-3746-acb7-40fa9fb949cd' date '27 July 2007' time '11:19:06 am' author 'ar' ancestors ((name 'VMMaker-ar.82' message '- add logging for FFI calls' id '2b5f9b99-264b-8143-b8c1-88ca142f8168' date '25 July 2007' time '12:05:46 pm' author 'ar' ancestors ((name 'VMMaker-ar.81' message '- add macroBenchmark to class Interpreter (from Smalltalk)' id '005bc54a-d999-7e4c-9dfa-8aada8e076e6' date '7 July 2007' time '4:11:30 pm' author 'ar' ancestors ((name 'VMMaker-ar.80' message '- add primHighResClock to read out the real time perf counter- add primProfilePrimitive to read out the primitive sampled- fix duplicated versions of primitiveResponse and sample with high accuracy when the profiler is active' id '7b9b9c1f-a26f-394e-bbc3-01b2c40e19aa' date '22 June 2007' time '2:55:27 pm' author 'ar' ancestors ((name 'VMMaker-ar.79' message '- don''t print too many CRs in printAllStacks()' id 'b790ea4c-1c25-4f8e-aa08-49f4e9ee269d' date '15 June 2007' time '3:59:40 pm' author 'ar' ancestors ((name 'VMMaker-ar.78' message '- include John''s latest fix for IGC lockup' id '3adf70a2-8dcb-0748-9eb6-f39b69bf4436' date '13 June 2007' time '5:14:59 pm' author 'ar' ancestors ((name 'VMMaker-ar.77' message '- don''t delete plugin directories to avoid upsetting SVN and friends (the windows VM already avoided this; so this is just promoting it to all platforms)' id 'bd447669-3ab5-4d63-8121-53f1b94ebe3a' date '13 June 2007' time '4:01:35 pm' author 'ar' ancestors ((name 'VMMaker-bgf.76' message 'FilePlugin primitiveDirectoryEntryLike directory lookup but by name rather than index,to create support for direct stat checks,without having to enumerate the parent directory.Requires	dir_EntryLookup(.....) in the platform-specific VM.' id '9c4b73e1-5baa-4fde-a2b8-b1ed4700c454' date '13 June 2007' time '2:20:50 pm' author 'bgf' ancestors ((name 'VMMaker-ar.75' message 'VM-level profiling support:- use the interrupt check to take samples every n activations instead of triggering it off the timer since other processes trigger off the same timer- this will allow us to even take samples of processes with higher priority (like the timer interrupt watcher)- beware of Heisenbugs: taking samples takes time, too' id '3a6003fc-95d0-a64a-8a71-7b85b2fad679' date '12 June 2007' time '11:50:03 am' author 'ar' ancestors ((name 'VMMaker-ar.74' message '- integrate DTL''s 64bit pointer fixes' id '3123e970-f52c-9744-aa91-e4c5d1222239' date '8 June 2007' time '3:25:11 pm' author 'ar' ancestors ((name 'VMMaker-ar.73' message '- add quick identity test to primitiveCompareBytes' id '484a1904-a939-1e4e-bde3-76c823a1a60a' date '3 June 2007' time '8:26:45 pm' author 'ar' ancestors ((name 'VMMaker-ar.72' message '- off-by-one fix for primitiveCompareBytes' id '474c5598-7217-9940-8612-6c53f0be7b78' date '26 May 2007' time '5:44:12 pm' author 'ar' ancestors ((name 'VMMaker-ar.71' message '- add primitiveCompareBytes for comparing byte arrays' id '521ec345-7cee-6947-a67a-d73fa96f19ee' date '26 May 2007' time '5:42:37 pm' author 'ar' ancestors ((name 'VMMaker-ar.70' message '- fix the typo biasToGrow which John pointed out' id 'beba2cae-c22c-f041-9152-5c9f0d724455' date '18 May 2007' time '8:28:23 am' author 'ar' ancestors ((name 'VMMaker-jcg.69' message 'Add John McIntosh''s QuickTime plugin (JMMMacQuicktimePlugin.3.cs).' id '2a866ab6-3018-49e3-962b-a23ab4cac36b' date '22 April 2007' time '10:31:55 am' author 'jcg' ancestors ((name 'VMMaker-abc.68' message '- fix or remove non-working tests' id '64c171df-60f1-804b-8cf2-3a0efc634016' date '16 April 2007' time '12:38:58 am' author 'abc' ancestors ((name 'VMMaker-ar.67' message '- fix FloatMathPluginTests>>runTest:' id '560e3104-9bed-fb4a-876e-136d12b31e38' date '15 April 2007' time '10:14:11 pm' author 'ar' ancestors ((name 'VMMaker-ar.66' message '- use min/max corner in tri-box test to match TBox format' id '4f45dcef-ff53-5d4f-a2fd-c2d3a0ae19cd' date '18 March 2007' time '2:28:17 am' author 'ar' ancestors ((name 'VMMaker-ar.65' message '- add tri-box intersection primitive to CroquetPlugin' id 'b6ddfa81-3c8e-0f49-afe7-4822415653e5' date '18 March 2007' time '1:12:34 am' author 'ar' ancestors ((name 'VMMaker-ar.64' message '- after merge-hell submit the actual versions of primitive get/set window label' id 'b4c5dbd3-498b-1d43-b9a2-78241c62210a' date '8 March 2007' time '2:23:07 pm' author 'ar' ancestors ((name 'VMMaker-ar.63' message '- callback support- additional GC roots' id 'd8f82f53-7bc5-524f-8ca9-9fe9a113ad77' date '8 March 2007' time '1:40:52 pm' author 'ar' ancestors ((name 'VMMaker-ar.62' message '- primitive[Get|Set]WindowLabel' id '86bc5f0d-2620-2d4f-8199-909bc9b46d55' date '8 March 2007' time '1:33:43 pm' author 'ar' ancestors ((name 'VMMaker-ar.61' message '- update Win32VMMaker' id '2975bc85-fb17-4742-bc53-3111d98d892e' date '1 February 2007' time '9:17:11 pm' author 'ar' ancestors ((name 'VMMaker-ar.60' message '- fix a missing declaration in primFractionalPart' id 'b33185db-8461-da45-a93b-0a308aa925b2' date '17 April 2006' time '10:54:34 pm' author 'ar' ancestors ((name 'VMMaker-ar.59' message '- fail all primitives if the return value is NaN to avoid creation of different nan patterns on different platforms.' id '80f28f6b-7a68-5848-8702-e10a3b37a382' date '17 April 2006' time '9:35:17 pm' author 'ar' ancestors ((name 'VMMaker-ar.58' message '- remove primSetReusable as it is now done via setOption:value:' id 'cf0a8dac-a9bf-9f4a-b30a-c33a1c396380' date '14 April 2006' time '5:15:28 pm' author 'ar' ancestors ((name 'VMMaker-ar.57' message '- when requesting a forced interrupt check also reset the next poll tick to check for extra input events' id '7f60aa41-decb-454c-9047-5fd06e9e3f9a' date '14 April 2006' time '5:06:45 pm' author 'ar' ancestors ((name 'VMMaker-ar.56' message '- remove OpenALPlugin' id '66cef58a-aca3-f34b-8105-1464c331718b' date '10 April 2006' time '6:21:16 pm' author 'ar' ancestors ((name 'VMMaker-ar.55' message '- manual replacements of underscore assignments' id 'f63035f0-e0b2-8649-b053-3312b863264b' date '4 April 2006' time '9:51:26 pm' author 'ar' ancestors ((name 'VMMaker-ar.54' message '- replace underscore assignment with colon-equals' id 'eceebcfa-5483-3e4c-873b-acacb740fbd5' date '4 April 2006' time '8:12:57 pm' author 'ar' ancestors ((name 'VMMaker-ar.53' message '- fix a missing "self export: true" in CroquetPlugin.' id '5327699a-7b2d-ce4e-ad2a-f366752b4091' date '29 March 2006' time '12:13:32 pm' author 'ar' ancestors ((name 'VMMaker-ar.52' message '- add stub declaration for OpenALPlugin (external only)- add missing declaration in CroquetPlugin.' id '4f0bed06-c057-bd43-befa-dfa126ecb502' date '28 March 2006' time '6:51:20 pm' author 'ar' ancestors ((name 'VMMaker-ar.51' message '- add CroquetPlugin>>primitiveGatherEntropy' id 'e90b4f4a-6dd4-6240-9cad-ecd321d771eb' date '28 March 2006' time '4:12:21 pm' author 'ar' ancestors ((name 'VMMaker-ar.50' message '- fix ARC4 transform bug in CroquetPlugin' id '105d8268-892a-114e-aa3a-ad8609c85102' date '28 March 2006' time '12:09:12 pm' author 'ar' ancestors ((name 'VMMaker-ar.49' message '- add B3DAcceleratorPlugin- add matrix/vector primitives in CroquetPlugin' id '0547cb6f-f8be-8f4d-b94e-92621bfe1461' date '26 March 2006' time '11:00:12 pm' author 'ar' ancestors ((name 'VMMaker-ar.48' message '- add David''s socket primitives' id '09634ea8-1491-0341-bbe7-5652b78fd9c5' date '26 March 2006' time '9:55:50 pm' author 'ar' ancestors ((name 'VMMaker-ar.47' message '- add initial version of CroquetPlugin' id 'fd36bc93-e422-c44d-9e6d-e24b1bf22708' date '26 March 2006' time '8:24:04 pm' author 'ar' ancestors ((name 'VMMaker-ar.46' message '- add float math plugin and tests- fix file copying to use binary mode' id 'b3f5b14e-218b-1b4e-a54b-59c5dfa096bf' date '26 March 2006' time '6:50:59 pm' author 'ar' ancestors ((name 'VMMaker-ar.45' message '- integrate John''s latest MPEG changes' id '35288c74-8661-7147-bc49-63d00dad2dc1' date '25 March 2006' time '11:13:12 pm' author 'ar' ancestors ((name 'VMMaker-ar.44' message '- This is VMMaker3.8b5-64B (the latest from SM)' id '6dc57d49-2e8e-6f40-b858-7584b7b5a11b' date '25 March 2006' time '6:45:50 pm' author 'ar' ancestors ((name 'VMMaker-tpr.43' message 'more changes relating to getting the arg types right for a bunch of plugin code' id '17f39176-eafa-420e-b938-38e7ab5a6577' date '30 December 2005' time '4:45:34 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.42' message 'correct bugs found by compiling:-no interpreterProxy pop:thenPushInteger:lost ''anInt'' in isBigEnder due to optimisationsmessed up RePlugin>primPCREExecfromto vars' id 'f2b9ae97-d4ff-47b0-963d-65caa1363ed8' date '29 December 2005' time '10:33:22 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.41' message 'convert all dumb uses of #var:declareC: to var:type: for a little added neatness.rescind three arg version of ioFilenamefromString... since OSX has to have a fourth arg for alias resolving. Add the four-arg version instead.' id '709e3ea3-78d7-11da-a4ca-000d934a31f0' date '29 December 2005' time '5:56:06 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.40' message 'use dave lewis'' runtimediscovery of vm endianness instead of ugly macro' id 'd58632a4-6ae7-4880-9cc9-a52fcd0d98fa' date '29 December 2005' time '1:36:18 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.39' message 'Add plugin access to sqFilenameFromString and vm endianness.change #placeInstructure to allow arrays in global structure.couple of small changes to TestOSAPlugin for John' id '02af6c3b-0447-469f-a872-a78ce1e11a01' date '23 December 2005' time '5:18:40 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.38' message 'Dec 05 cleanups and checks for a newer release.clean up bytearray ffi extensions - image work to do at some point.' id '0df78f45-9bbd-41be-b46f-e16786f65899' date '21 December 2005' time '7:29:02 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.37' message 'Add #getThisSessionID to provide a global and plugin-usable session ID. Inspired by Dave Lewis''s suggestion from november 2001.A concommitent change is required in the platforms/Cross/vm/sqVirtualMachine.[ch] files for this to work.' id '989fc93f-919e-49e1-8643-14cdcc540371' date '17 June 2005' time '6:48:37 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.36' message 'Couple of changes to make life easier for Macs - take the #flag: out of LargeIntegersPluginchange a #cCode: call in MacMenubarPlugin' id 'a95ca422-a582-4251-bde7-9f471eb83464' date '7 June 2005' time '3:45:13 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.35' message 'Make obsoleteDontUseThisFetchWord:ofObjet: actually return a value. This comes in handy for users.' id '30b47c31-6bc6-45e1-ad5d-cf1c575c00d1' date '7 June 2005' time '11:57:35 am' author 'tpr' ancestors ((name 'VMMaker-tpr.34' message 'remove rescinded fetchWord:ofObject: from InterpreterProxy, add obsoleteDontUseThisFetchWord:ofObject: and fetchLong32:ofObject: so that all the right functions get into the generate interp.c' id '76dfb03f-49ee-4652-9f73-3a892e4e6c3d' date '6 June 2005' time '7:46:22 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.33' message 'Add obsoleteDontUseThisFetchWord: fieldIndex ofObject: oop for use as a temporary proxy for the very deprecated fetchWordofObject. See also sqVrtualMachine.[ch] for the change to the VM struct that rescinds fetchWordofObject and redirects older plugins to this ''new'' method.Part of making theVM 64 bit clean' id '935c18e0-b5c9-4d2b-a6a4-c364ac0552c5' date '6 June 2005' time '4:57:18 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.32' message 'Correct misc primitives plugin to handle String rewrite.Fix variable C decl in ASynchFilePlugin' id 'fe03418f-871e-4734-be54-fcf989eb9fe4' date '6 June 2005' time '12:20:53 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.31' message 'Correct the archive post-String rework by removing the MultiString methods' id '7068cad6-40cc-4372-8340-bbe9d1fd10db' date '6 June 2005' time '11:06:07 am' author 'tpr' ancestors ((name 'VMMaker-tpr.30' message 'Fix Mantis bug 1078 - MessageNode>asTranslatorNode used isMemberOf: Symbol which fails after the i18n String changes' id '3fad305d-8b61-4f15-9e5e-a7306df6b34f' date '3 June 2005' time '10:29:47 am' author 'tpr' ancestors ((name 'VMMaker-tpr.28' message 'Add LocalePlugin to support the Locale class in 3.8' id 'f58829bf-1ba3-40f9-8ae9-b7c280439192' date '2 June 2005' time '1:33:14 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.27' message 'add small class instantiation without spending time filling the slots for makePoint etc.fix some uses of storePointer where the value is a known SmallInt (use storePointerUnchecked isntead)add pop:thenPushInteger:' id '753467c0-12fb-4247-9ca4-fe7bec524097' date '13 May 2005' time '3:30:05 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.26' message 'revert #isIntegerValue: to use EOR trick -works for 32 & 64 bit machine. I think.fix storeInteger:ofObject:withValue: to skip root oop check' id 'dd3aef61-67c3-4659-be2b-432de30298de' date '12 May 2005' time '6:42:37 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.25' message 'fix mistaken use of storeWord:ofObject:withValue: in primitiveVMParameter.clean up a few comments' id '8f3d71f2-b477-4d5c-901f-4098b9d2e99b' date '9 May 2005' time '7:16:10 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.24' message 'Fix FloatArrayPlugin>primitiveDivFloatArray to use inAtPointer for thetest-for-0 loop. Add #intAtPointer: to the CCodeGen list of builtin operators' id '9ae7585c-03a6-4736-a8e7-93dcef59e782' date '3 May 2005' time '12:30:47 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.23' message 'Correct a dumb mistake in Interpreter>sufficientSpacetoInstantiate:indexableSize:' id '4d4b06ba-7c46-49e7-af7d-34644273f82a' date '27 April 2005' time '12:33:25 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.22' message 'Merge in johnmci & ar''s GC instrumentation and weak pointer changes' id '1cf76689-49f5-46fa-ba92-66e444c23a93' date '27 April 2005' time '11:36:52 am' author 'tpr' ancestors ((name 'VMMaker-tpr.21' message 'change primitiveClone and primitiveClipboard to reduce the chances of them causing a fatal out of memory error.' id 'a63669ec-9bc4-4f85-9b1b-cbd78e52ee13' date '26 April 2005' time '12:53:22 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.20' message 'Merge dtl''s changes to support VM reporting of the guilty lowSpace causing process into the 64bit stream.' id 'a0f6e9f2-3752-41b9-8b89-f5da12539592' date '25 April 2005' time '7:20:15 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.19' message 'Adopt Ned''s UI fix and deprecated method changes.Change UI around a bit to try to gather buttons in more logical groups.Extend config files to understand 64bit vm flag' id '00a8f874-395b-43e9-b60d-da19cda7aa9d' date '7 April 2005' time '11:26:29 am' author 'tpr' ancestors ((name 'VMMaker-nk.18' message 'Improved UI by adding checkbox, simplifying construction code.Took care of some deprecated methods.' id '4281490e-229f-45be-8508-d2cd678e0de2' date '5 April 2005' time '11:51 pm' author 'nk' ancestors ((name 'VMMaker-tpr.17' message 'Change VMMaker/Tool to add some support for 64bit building (a dumb switch that ought to be a checkbox or similar).One change to bitbltsimulation to change a C type from ''unsigned char *'' to ''char *'' in primitiveDisplayString' id '9bce93ee-de47-43df-b8b8-00a7c20aa6df' date '4 April 2005' time '7:46:06 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.16' message 'Second version of VMMaker 3.8 b4 with 64bit enhancementsAdd slightly cleaner reading SmartSyntaxPluginCodeGenerator >generateCPtrAsOop:on: indent: without assumed size of base header.' id '251b916a-b9ad-4922-af69-1c570be09ef8' date '1 April 2005' time '2:35:56 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.15' message 'First mc version of VMMaker3.8 plus 64 bit enhancments.Also suck in assorted ''plugin generation'' protocol methods that had been lurking around the main image.' id '2371367b-cc78-49dc-9506-2ccd04793329' date '1 April 2005' time '1:20:09 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.14' message 'To VMMaker3-8b2 add:-DumpTouch - remove need for taking care about filing in #touch first but de-factoring noteCompilationOf: a bit. Means no need for complex .sar filestructure.VMMakerFixForSVN - stop the copying of svn files & dirs now we are using it.VMMaker38b2NewRemovals - get rid of some redundant #newsVMMaker-3.7b5-unsignedFixes3 - some type tweaks for slang code that seem to stop >2Gb being a problem oop.' id 'e51966ce-3464-4713-8467-588396b9f765' date '21 March 2005' time '8:19:40 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.13' message 'Add MacMenubarPlugin for Areithfa Ffenestri support' id 'bb4cb0ef-13bc-4c5b-a272-9a7d2dd132cc' date '8 December 2004' time '6:01:38 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.12' message 'Add Areithfa Ffenestri release 1 to repository' id 'e2fc76dd-813e-4cf0-89d9-254f479952b3' date '7 December 2004' time '5:16:28 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.11' message 'Rework of fix that allows the (rather surprising) use of oop becomeForward: oop in ImageSegment loading whilst still protecting against VM blowups for oop become oop etc. See comments in prepareForwardingTableForBecoming:with:twoWay: for some details.This patch WILL NOT prevent problems with other plausible multiple-reference-of-one-opp become operations. That is quite a bit more complicated and ought to be dealt with in image code ' id 'f4b66ece-d892-40ad-a0b9-3b374446f244' date '29 November 2004' time '3:19:59 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.10' message 'add small cleanups for (ab)use of imageName in writeImage: etc and for some increased safety in imageNamePutLength (note the return value, fail prim if 0)' id '8ce64dd8-e84f-4fcf-a08d-36d0242b1adc' date '24 November 2004' time '12:00:22 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.9' message 'First version for 3.8aInclude:- performwithargs fixes. new closures stuff from hannan some misc bad-char fixes LargeIntplugin fixes some more simulator fixes the call-external-prim from cache stuff' id '589faa58-68d3-41cf-9a84-09d22ab14d5c' date '23 November 2004' time '7:19:32 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.8' message 'protect error messages in new LargeInteger plugin method with debugCode: clause as with al the other uses' id 'a024640f-14c0-439c-a4de-350c9d44c4a5' date '3 June 2004' time '2:16:11 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.7' message 'bug fixes for primitiveYield & LargeIntegers plugin problems with non-normalized LPIs.' id 'b8029f71-ca7a-4588-b79d-15b0fff29390' date '3 June 2004' time '12:22:29 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.6' message 'Change primitive dispatching to use the address found in the method cache.Assorted simulator fixes.' id '8782e4c6-2e5b-495d-b00d-5071a367ab50' date '22 May 2004' time '5:40:18 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.5' message 'Add a prerequisite package to handle the Object>touch method.Correct a snafu in CCodeGenerator>emitCHeader:You WILL need to make sure you have the latest sq.h ' id '5324beb0-80ce-d249-9f75-8bb2f03f4daf' date '30 March 2004' time '9:56:47 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.4' message 'Try saving again' id '5b674d71-e085-f347-8493-a0be9b332844' date '30 March 2004' time '3:03:06 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.3' message 'Remove the primitive timing code from primitiveResponse and move it to primitiveExternalCall on the premise that only named prims take along time. Clearly this is a simplistic assumption and some numbered prims cause garbage collects which likely take more than a tick. We will clean this up in a while.Further, build a table of the function addresses of all numbered prims and branch to them instead of using a case statement. This requires a number of changes to the CCodeGenerator.' id '0a44200a-1e8d-8244-b365-970b9663df70' date '30 March 2004' time '2:37:43 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.2' message 'Loaded VMMaker 3.7beta 1 for the first time. Appears to be all installed ok.' id '414a0c3e-60de-11d8-86f4-000a95e1d7a2' date '16 February 2004' time '4:14:30 pm' author 'tpr' ancestors ((name 'VMMaker-tpr.1' message 'empty log message' id '04a8d1a3-60dc-11d8-86f4-000a95e1d7a2' date '16 February 2004' time '3:58:29 pm' author 'tpr' ancestors () stepChildren ())) stepChildren ())) stepChildren ())(id '414a0c3e-60de-11d8-86f4-000a95e1d7a2')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id '989fc93f-919e-49e1-8643-14cdcc540371')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-jcg.103' message 'Add #primitiveSoundSetRecordBufferFrameCount: to SoundPlugin... sets the size of the record buffer used by the plugin.' id '15f4ed26-7b7a-334f-9842-58d8075df280' date '6 June 2008' time '10:34:42 am' author 'jcg' ancestors ((id '4965957f-92c3-324b-866e-9042ba943616')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.161' message 'Removed GeniePlugin which now lives in VMPluginsExtra' id '2df6db89-f8bd-41b6-b6dc-6e04e4e5895e' date '10 October 2008' time '5:00:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.160' message 'Added a label for thye bytecode dispatch.Removed an optimizer-duplicated label for the non-stack VM.' id 'f5d14b96-2877-418a-b8ec-093370519640' date '10 October 2008' time '4:16:37 pm' author 'eem' ancestors ((name 'VMMaker-eem.159' message 'Put numStackPages initialization in the right place and right order.  Sigh.' id '00b903a0-aa38-44ef-98f1-cb5b57daa6f7' date '9 October 2008' time '4:40:34 pm' author 'eem' ancestors ((name 'VMMaker-eem.158' message 'assertWellFormedPageList now invoked only through assert.This should speed up the benchSwitch: benchmark by about 10%.number of stack pages now a parameter stored in the image file header.Get number of stack pages in use via	Smalltalk vmParameterAt: 42Get/set desired number of stack pages via	Smalltalk vmParameterAt: 43' id '643ce812-aa10-4230-8a08-8347973fbb28' date '9 October 2008' time '4:07:27 pm' author 'eem' ancestors ((name 'VMMaker-eem.157' message 'Change StackInterpreter and Interpreter over to new BlockClosure rep (copied values in indexed inst vars).  Added SchizophrenicClosureFormatStackInterpreter to bootstrap old-format images to new.Add no-context-switch value primitives.Ripped out interrupt check counter & feedback from StackInterpreter.Fixed forwarding (one-way_ becom so that objects can become-forward into SmallIntegers.Add new VM Profiler support.Add support for labels (asmLabel:) which now labels the VM for the VM profiler.Order exported primitive table for stability.Add #isSymbol null translator.Use isFoo instead of isKindOf: Foo for cleanliness.Cleaned-up directive extraction in TMethod.  Now all extraxctions use a common engine method.Added ''refresh plugin'' list to VM Maker Tool that allows one to include a newly added plugin to an open VM Maker.' id 'e6e4a715-e0e9-4626-9f1c-90af645854df' date '30 September 2008' time '12:18:03 pm' author 'eem' ancestors ((id 'ed89353b-eeeb-482b-a040-996e45ed8b6a')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.214' message 'Fixing snafu for WIndows so it once again eschews the global struct.' id 'c5fe6cd1-6406-4886-a9b5-99ce1c368f42' date '6 January 2009' time '6:59:58 pm' author 'eem' ancestors ((name 'VMMaker-eem.213' message 'Fixing snafu for WIndows so it once again eschews the global struct.' id '8b306cad-5acb-4be3-9df1-d76d0fbe0cc2' date '6 January 2009' time '6:58:50 pm' author 'eem' ancestors ((name 'VMMaker-ar.212' message 'primitiveIsWindowObscured for Brad.' id 'deb0a432-58bc-49a4-aa83-064fdc5ce742' date '6 January 2009' time '4:49:59 pm' author 'ar' ancestors ((name 'VMMaker-ar.211' message 'Remove extra period in primitive; it causes grief for the slang translation.' id '7dbad5b3-9d29-4a48-90dd-152e41667f6d' date '6 January 2009' time '3:55:40 pm' author 'ar' ancestors ((name 'VMMaker-eem.210' message 'Integrated Nicholas Cellier''s M7260 NaN comparison fixes.Fixed order dependency for Cogit class initialization.' id '95008e61-36c1-475f-93e4-3d503cf1200b' date '6 January 2009' time '10:42:32 am' author 'eem' ancestors ((name 'VMMaker-ar.209' message 'Add support for raw socket creation primitive.' id 'f0c63509-8915-5d44-bb0f-6738300537d7' date '5 January 2009' time '7:54:38 pm' author 'ar' ancestors ((name 'VMMaker-bgf.208' message 'Eliot''s fix for the compactClassError message routine,allows fresh generated interp.c to compile.(Checking in since he''s got Monticello/network issues.)' id '3b4b4bb4-8449-47ca-ba1c-ea15500327ae' date '30 December 2008' time '5:11:26 pm' author 'bgf' ancestors ((id 'fdcfe7f9-4256-420e-b9e2-9779d24e4dd7')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-ar.308' message 'Provide guarded access for plugins to stackXXXXValue: so that we can trap problems with stack alignment properly.' id 'd08dfcbb-5636-e942-af92-8584d820c5da' date '6 March 2009' time '2:43:44 pm' author 'ar' ancestors ((name 'VMMaker-ar.307' message 'Safer stack manipulation for plugins. push/pop are no longer actually pushing and popping, instead remember the intent. Only the VM pops after primitive return. Also provides some interpreter proxy methods:* methodArg: indexWorks like stackValue: just accessing method arguments in left-to-right order. Argument zero is the receiver, argument 1..N the actual method args. Will fail if you attempt to access args out of range.* integerArg: indexA variant of methodArg: that extracts the integer value and fails if the arg isn''t an integer.* floatArg: indexA variant of methodArg: that extracts the float value and fails if the arg isn''t a float.* objectArg: indexA variant of methodArg: that will fail if the argument is a small integer and otherwise return an oop.* methodReturnValue: oopSets the return value from a primitive. Use this instead of the classic interpreterProxy push: interpreterProxy methodArgumentCount+1 thenPush: resultOop.* topRemappableOopReturns the top of the remap buffer. Useful in loops to avoid having to write push/pop pairs all the time.' id '8294f6a5-033d-2644-ac0c-72294e42fc5e' date '6 March 2009' time '11:59:16 am' author 'ar' ancestors ((id '183a1e93-7b7d-42f2-b3bb-553c1cabbfbd')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.426' message 'CogVM:	repeatedly recompiling a method for block activation that can''t	be compiled (e.g. because it contains a new reference) is a bad	idea; it hurts.  Don''t do that.' id '72f041d9-da37-4299-83ec-63d2301c1173' date '5 June 2009' time '2:42:46 pm' author 'eem' ancestors ((name 'VMMaker-eem.425' message 'BalloonEngine	loadBitBltFrom: & loadFormsFrom: return booleans.  Fix clients	appropriately.  Needs Balloon-eem.17.' id 'b4ef7fd0-86bc-4edc-a22f-2bfe12b8d945' date '4 June 2009' time '6:28:13 pm' author 'eem' ancestors ((name 'VMMaker-eem.424' message 'BalloonPlugin rewritten with error codes.  Needs Balloon-eem.16 or later (see Oinq).' id '5b3b847c-ee59-413e-8345-86dc7e3986df' date '4 June 2009' time '5:15:16 pm' author 'eem' ancestors ((id 'cf07f786-e964-44b2-9d57-07282128ddb4')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.452' message 'CogVM:	restored buildability by nuking rump multi-threading code.' id 'c34c5ae8-f778-4092-bf31-fcc2948c912d' date '23 July 2009' time '5:22:23 pm' author 'eem' ancestors ((name 'VMMaker-eem.451' message 'CogVM:	Fixed startup memory setup bug where old code set	memoryLimit too high by the size of the cogCodeZone.	Accounts for Andreas'' crash opening a traffic simulator and	Craig''s bug starting up on 64-bit linux.' id '35658486-5128-4b43-b28f-e484317a6d3e' date '23 July 2009' time '4:46:37 pm' author 'eem' ancestors ((name 'VMMaker-eem.450' message 'CogVM:	Fixed startup memory setup bug where old code set	memoryLimit too high by the size of the cogCodeZone.	Accounts for Andreas'' crash opening a traffic simulator and	Craig''s bug starting up on 64-bit linux.' id '3b32b464-a7a4-4731-8e26-ebf7fc9bc9ac' date '23 July 2009' time '4:45:02 pm' author 'eem' ancestors ((id '1c4b43cf-9e70-4d5c-8a12-2a45d601f9bb')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.467' message 'BalloonEnginePlugin:		make sure pool vars are initialized before generatingSlang:	hack CCodeGenerator logging to the VMMaker logger' id 'b478e3ae-1fd6-47ea-8ad2-d2c9a1257496' date '27 August 2009' time '5:20:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.466' message 'CogVM:	conditionalize threaded support trampolines so the non-threaded	Cog VM still builds.Slang:	Parameterise comment writing with BitstreamVersSans so that	method comments are not refrmatted when using a different	system text style.' id '18f8154a-7a61-4ebb-bfa9-bb1ddaae8ae3' date '27 August 2009' time '12:00:34 pm' author 'eem' ancestors ((name 'VMMaker-ar.465' message '32 bit alpha cursor support.' id '804327cd-9831-5542-b764-9adedc06bcc2' date '26 August 2009' time '8:16:29 pm' author 'ar' ancestors ((name 'VMMaker-eem.464' message 'CogVM:	initialize flagInterpretedMethods correctly in the simulator' id '5b8d324c-46ee-4896-ada9-21f3e92bcc7f' date '26 August 2009' time '5:23:13 pm' author 'eem' ancestors ((name 'VMMaker-eem.463' message 'Merge with Oinq VMMaker-eem.462 to pull in fixes/known good changes, excluding threaded work.CogVM:	Fix bug in clearCogCompiledCode; must void youngReferrers.	Fixed assert in activateInterpreterMethodFromMachineCode	that would complain if a methods primitive is not implemented	by the VM (e.g. next & nextPut:).	implement missing storeAndPopTemporaryVariableBytecode	to use itemporary:in:put: instead of temporary:in:put:.	provided a parameter to control sizse of methods compiled to	machine code.  Changed default size to 60 literals or less.	Added flagging of interpreted methods via bit 2 (4) of	vmParameterAt: 48.  VM sets flag bit of a method''s header if	flagging in effect.	Fixed bug in setImageHeaderFlagsFrom: to avoid setting	processHasThreadId incorrectly.Stack & Cog VM:	Print process oop when printing all stacks.	Add a primitive to void VM state (#214)StackVM:	inline temporary:in: for faster marryFrame:SP:	Refactored transferTo: extracting code to make new active	context executable to externalSetStackPageAndPointersForSuspendedContextOfProcess:	Fixed a couple of bugs in the simulator.  On the Cog VM the	StackVM simulates faster than at a crawl.All VMs:	Store nil in myList of new active process in transferTo:[from:]Slang:	Don''t complain about <doNotGenerate> methods being already	defined; they''re going to be filtered out anyway.VMMaker:	restored GeniePlugin with DTL''s fix to eliminate extra temps' id '735121f7-f7d1-418e-839c-26ab7979c7f9' date '26 August 2009' time '5:11:54 pm' author 'eem' ancestors ((id '3cdf2d4b-1b4d-4db2-abdb-6f1190431f0f')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.472' message 'CogVM:	machine code store check must use unsigned comparisons for	dest old & value young!' id '4e584c4c-5e5f-41ed-b8bc-80707f2939bb' date '2 September 2009' time '6:10:02 pm' author 'eem' ancestors ((name 'VMMaker-eem.470' message 'CogVM:	machine-code primitiveIdentityHashStack & Cog VMs:	provide printProcessStack: for debugging.' id 'a4b2f642-ae84-4a82-b70a-dde41301f05e' date '1 September 2009' time '12:30:18 pm' author 'eem' ancestors ((id 'b478e3ae-1fd6-47ea-8ad2-d2c9a1257496')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.490' message 'Cog & Stack VMs:	64-bit microsecond clock basis.	thread-safe signalSemaphoreWithIndex:' id 'cd3ed4c0-129c-4d4d-81c2-22a50a5ba618' date '25 September 2009' time '4:48:06 pm' author 'eem' ancestors ((name 'VMMaker-eem.489' message 'Stack & Cog VMs:	add long-running primitive detector.Cog VM:	fix VM support for QSystemProfiler.  a) only compile profiling	code if profiling is turned on.  b) collect samples before and after	a primtiive has run (whether or not the primtiive fails).' id '7172f55f-4d88-467c-a792-4cedf8c6f959' date '25 September 2009' time '3:44:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.488' message 'Slang:	Allow cCode:inSmalltalk: to take two blocks as well as a string and	a block.' id '8d03949d-99a1-4156-aec5-7fe65cb3710b' date '25 September 2009' time '3:18:02 pm' author 'eem' ancestors ((name 'VMMaker-eem.487' message 'Cog & Stack VMs:	use = instead pf == for comparing oops and especially stack	pages. In the Cog simulator stack pages are surrogate objects so	== will give incorrect results.  Oops may conceivably exceed	SmallInteger range.	make sure smashed stackLimit (char *)-1 is actually unsigned in	simulation and hence causes stack check failure (rather than -1	which won''t).	Fix symbolic method printing.	Bounds check stack access in Cog stack page srrogates	Comment typoes/misdescriptionsBalloonEngineSimulation	speed up overall simulation by 5% via cacheing the bbObj.' id 'c869aeb8-7bce-4fef-b413-c36b5de968c8' date '25 September 2009' time '3:14:42 pm' author 'eem' ancestors ((name 'VMMaker-eem.486' message 'CogVM:	add machine-code SmallInteger multiplicative primitives *, /, //, \\ & quo:.	Add tests for the opcodes.	refactor voidVMStateForSnapshot to reduce couplingStackVM:	faster signed64BitValueOf: that also simulates correctly.All VMs:	nuke unused ioLowResMSecsObjectMemory:	add forwardingPointerOf: to abstract bit twiddling' id '573990c9-437f-4306-bd61-95adde90080d' date '25 September 2009' time '2:40:58 pm' author 'eem' ancestors ((id '4e584c4c-5e5f-41ed-b8bc-80707f2939bb')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.480' message 'CogVM:	fix machine code SmallInteger>>bitShift: primitive for -1 bitShift: 31	case.' id '06199483-2069-4638-a104-891d4e5bcd1d' date '17 September 2009' time '2:36:34 pm' author 'eem' ancestors ((id '4e584c4c-5e5f-41ed-b8bc-80707f2939bb')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.600' message 'CogVM:	Nuke old separate hand-refactored CoInterpreterSE.  The	automatically refactored one actually works...' id 'ae5e127b-8a56-4685-a320-16e8e66574d6' date '22 June 2010' time '5:39:04 pm' author 'eem' ancestors ((name 'VMMaker-eem.599' message 'CogVM:  Fix coroutining (e.g. Generator).  Base frame return must not  widow frames above the returned-to frame when the returned-to  frame is not the top frame since the frames above may still be  in use.  Add an optional exit code argument to quitPrimitive/primitiveQuit.  Fix Stack VM simulator for primitiveFileStdioHandles, and use  hex for stack addresses in frame printing.' id '2eedfb4b-4be7-4ca3-adc9-c09b49ad9f9e' date '22 June 2010' time '5:35:39 pm' author 'eem' ancestors ((name 'VMMaker-eem.598' message 'CogVM:	Fix baseFrameReturn''s cannot return code (a la ceBaseFrameReturn:).	Fix StackInterpreterS simulation.	Use push:thenPop: in primitiveDirectoryDelimitor' id '5277cef4-2573-4b06-81af-58d3a16ffe18' date '22 June 2010' time '12:07:31 pm' author 'eem' ancestors ((name 'VMMaker-eem.596' message 'CogVM: fix translation of the extended CogBytecodeDescriptor' id '44094619-ec96-4335-8ec7-59c33fb60d66' date '21 June 2010' time '4:02:41 pm' author 'eem' ancestors ((name 'VMMaker-eem.595' message 'CogVM: fix typo in CogBytecodeDescriptor instVarNamesAndTypesForTranslationDo:' id 'd25f4119-d9ea-4c02-b3b3-4203f87b80f8' date '21 June 2010' time '3:57:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.594' message 'CogVM: fix JIT crash for temps in frameless blocks, e.g. [|b|5]value' id '4d21fa6c-b8b1-4cd3-8317-856b7cb8dfac' date '21 June 2010' time '3:53:09 pm' author 'eem' ancestors ((name 'VMMaker-eem.593' message 'Fix access to youngStart and memory in the separate VM (theaccessors must be macrs to avoid C complaining aboutredefinitoon as another kind of symbol).Ad CogMemoryManager as a place-holder for design of the newobj rep/GC (in the class comment).' id '471532c8-6ea9-4bcf-960d-28260261282f' date '17 June 2010' time '1:38:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.589' message 'Nuke StackInterpreterS''s traggling storePointerUnchecked:' id '6522fb99-5a86-46f6-9ec2-660c90565fd1' date '14 June 2010' time '2:27:59 pm' author 'eem' ancestors ((name 'VMMaker-eem.588' message 'CogMTVM: fix simulation in the separate VM.Move storePointerUnchecked:... firstIndexableField: ceStoreCheck: classFloatCompactIndex  into ObjectMemory.Fix translation of the separate VM.' id 'ca5b7ef9-0305-4595-9b5b-e6dcaea095c3' date '14 June 2010' time '2:06:18 pm' author 'eem' ancestors ((name 'VMMaker-eem.587' message 'Separate ObjectMemory refactoring in StackInterpreterS hierarchy.Simulates correctly in single-threaded mode.  Craps out aftercollecting user input in the multi-threaded test image.' id '63786711-1e32-430a-9f3f-d30a4d5a2f1c' date '10 June 2010' time '5:31:05 pm' author 'eem' ancestors ((name 'VMMaker-eem.585' message 'Merge with VMMaker-eem.584.CogVM:	Fix bug with machine code references to objects in become ops.Make sure the youngReferrers list is pruned in mapObjectReferencesInMachineCodeForXXXGCotherwise youngReferrers can get duplicate entries which screws upremapping of obj refs in machine code during GC.	Mo'' betta asserts around the youngReferrers list and more leak	checking of generated code.	Extend the leak check to the traceLog.	Make some bounds types in the method zone unsigned and cleanup some comparisons.' id 'ca2252d6-bd04-4364-9273-c265e71cabac' date '31 May 2010' time '2:32:07 pm' author 'eem' ancestors ((name 'VMMaker-eem.581' message 'CogVM: move methods to do with ObjectMemory from StackInterpreter up to ObjectMemory.  e.g. Split assertClassIs:instanceOf: into an is:instanceOf: in ObjectMemory and the assertClassIs:instanceOf: in StackInterpreter.' id '5deb6d21-3b13-4aa2-a701-779a6e624561' date '28 May 2010' time '3:40:16 pm' author 'eem' ancestors ((name 'VMMaker-eem.579' message 'Merge with VMMaker-eem.578.  Move some SmartSyntaxPlugin VMMaker extensions from Collections and Kernel into the VMMaker package' id '22629e96-08a7-4638-a2e5-4300871e0392' date '26 May 2010' time '5:29:26 pm' author 'eem' ancestors ((name 'VMMaker-eem.577' message 'Merge CogMT code with VMMaker-eem.576.CogVMs:	Implement the unimplemented case in primitiveTerminateTo ofterminating from other than the top frame to a context in the middleof the current stack page.Slang:	fix source comparison of surrogate accessor classes (''foo'' asText ~= ''foo'' asString).	Use fixed pitch in formatting comments.Comments & typos.' id '20b16982-fb38-4d9d-b7ae-79a4409deb70' date '24 May 2010' time '2:34:34 pm' author 'eem' ancestors ((name 'VMMaker-eem.574' message 'Merge CogMT code with VMMaker-eem.573, the changes for Squeak 4.1 compatibility.' id '98cc2c6a-e3b2-40b1-8847-30479ad9141e' date '21 May 2010' time '4:59:35 pm' author 'eem' ancestors ((name 'VMMaker-eem.570' message 'revert mistaken Interpreter>>signed64BitValueOf:' id '0fdb36e2-30f2-49e0-9556-6e44146794e0' date '11 May 2010' time '12:18:02 pm' author 'eem' ancestors ((name 'VMMaker-eem.568' message 'StackVM: fix typo in signed64BitValueOf: (self sizeof: #sqLong)must be self sizeof: #sqLong asSymbol).Fix primTraceLogIndexAddress.Adopt the Alien plugins.' id 'c1f0b0f7-c491-441c-9054-a9fdb9c9eab8' date '10 May 2010' time '6:40:15 pm' author 'eem' ancestors ((name 'VMMaker-eem.567' message 'Merge with VMMaker-eem.566 for the clock log.' id 'd5ad1166-3af4-4f61-8927-83e37ad49e1d' date '10 May 2010' time '4:41:21 pm' author 'eem' ancestors ((name 'VMMaker-eem.562' message 'CogVM: use cCode: [self addressOf: foo] in place of cCode: ''&foo''so refs to vars are not hidden in the string.' id 'd7f26d76-aa51-452f-8101-4ea1ecb92ca3' date '7 May 2010' time '12:40:45 pm' author 'eem' ancestors ((name 'VMMaker-eem.561' message 'CogMTVM:	use the new putToSleep:yieldingIf: facilities in thread preemption.' id '23cdcbf1-588e-44cc-9bf4-34ea7837a071' date '6 May 2010' time '1:25:33 pm' author 'eem' ancestors ((name 'VMMaker-eem.560' message 'ThreadedFFIPlugin: tweak an asm define to placate the intel compiler' id '8fc4d4b1-7ee3-4582-9462-b7710dadf835' date '6 May 2010' time '1:16:06 pm' author 'eem' ancestors ((name 'VMMaker-eem.559' message 'Cogit: add a cast to nuke a compiler warning' id '532c57e7-d21b-4a64-9aa9-92e610afeb3f' date '6 May 2010' time '11:01:47 am' author 'eem' ancestors ((name 'VMMaker-eem.558' message 'Merge with VMMaker-ar.557.Coercing float to doubles. Real men do cast!' id 'bc1ba4ee-9379-44f6-87de-3f7d989a494d' date '5 May 2010' time '6:13:13 pm' author 'eem' ancestors ((name 'VMMaker-eem.547' message 'Merge with VMMaker-ar.556:FloatArrayPlugin:Bit-identitcality tweaks. In loops iterating over (pairs of) 32bit floats, always cast the float explicitly to ''double'' to give the C compiler no false idea of ''oh, you''re operating on vectors of single precision floats I don''t need to expand to double precision''. You do, stupid compiler, you do.WebAuthPlugin:	Update to include Kerberos service principal name.	Rename NativeAuthPlugin to WebAuthPlugin for more clarity about what it applies to.CogVM:	fast (inlined) tracing of primitives.	Provide a persistent flag controlling whether preemption causes a	process to be put to the back of its run queue, forcing an implicit yield.	If set, flag prevents preempting from causing an implicit yield, off by	default, preserving current VMs semantics (preemption does force an	implicit yield).   But note that a resumed process (be it via primitiveResume	or by signalling a semaphore or exiting a critical section) must go to the	back of its run queue.	Flag is bit 2/value 4 of Smalltalk vmParameterAt: 48.	fix snafu in printOnTrace	add tracing of interpreter primitives.Stack VM:	safer activation printing' id 'd0246086-d95d-4275-a19f-c7c9cc4e0b92' date '5 May 2010' time '6:06:22 pm' author 'eem' ancestors ((name 'VMMaker-eem.545' message 'CogVM: fix snafus with the added interpreter prim tracing code' id '754c8469-4de7-4614-a271-c0afb8144885' date '26 March 2010' time '1:14:19 pm' author 'eem' ancestors ((name 'VMMaker-eem.542' message 'Merge with VMMaker-jcg.541 (echo cancellation, non-ui sourcegeneration, error => plat support, fix for primitiveContextSize).CogVM: add tracing of interpreter primitives.  Nuke commentarythat says use trace flag for suppressing the heartbeat.validInstructionPointer:inMethod:framePointer: => validInstructionPointer:inFrame:Some fixes in return for coroutine crashes.BitBlt: fail warpBlt if lockSurfaces fails.ThreadedFFIPlugin align stack to 128-bit boundary for linux x86.' id '67164dad-0eb1-4dfe-bfa8-dd215b440e3b' date '25 March 2010' time '7:44:07 pm' author 'eem' ancestors ((name 'VMMaker-eem.523' message 'Merge with 522.	Fix to primitiveProfileSemaphore.	Remove obsolete trampoline{name}For:	Add backtrace support' id 'e8575c78-c6bd-4b49-a829-e4d6a284fe4f' date '11 January 2010' time '2:39:28 pm' author 'eem' ancestors ((name 'VMMaker-eem.519' message 'Threaded FFI Plugin:	get specOnStack right for both callout prims.  SImplify, using	argArrayOrNil as the flag.  Now this code will make calls in	images that don''t have the stackSize slot in ExternalFunction.Slang:	support expansion of cCode: [a block] inSmalltalk: invocations	in expression contexts.Stack VM:	add heartbeat freq prim.CogVM:	add inline directive to pageIndexFor: to get better performance	in context-to-stack mapping.	Use #''void *'' et al instead of ''void *'' in a few pragmas for	consistency.' id '151cad6d-ee56-4458-a45d-a5c53502b5be' date '16 December 2009' time '1:49:07 pm' author 'eem' ancestors ((name 'VMMaker-eem.517' message 'ThreadedFFIPlugin	don''t write the stack size back to an ExternalFunction unless it	has a stackSize slot.' id 'a9ac180b-696a-4b3a-98e1-363ebcf56c2d' date '11 December 2009' time '1:14:36 pm' author 'eem' ancestors ((name 'VMMaker-eem.515' message 'Stack & Cog VMs	compute long-running prim GC milliseconds more carefully.	remember start and end time and if this matches the long-	running primitive start and end times then gc time can be	ascribed to the primitive.	comment typoe' id 'c13b4f0a-8e55-4f2b-b1fd-204964fbb5da' date '10 December 2009' time '2:54:12 pm' author 'eem' ancestors ((name 'VMMaker-eem.514' message 'Stack & Cog VMs	Add GC milliseconds to long-running primitive resultCog VMs	add a method enumeration utility for the simulator' id 'e573adfd-fe08-4349-beb9-c6990f07b5d1' date '10 December 2009' time '11:01:18 am' author 'eem' ancestors ((name 'VMMaker-eem.513' message 'CogMTVM:	figure out instructionPointer management over disownVM:/	ownVM:.CogVM:	merge with VMMaker-eem.512; avoid crashes due to	 arbitrary bytes appended to CompiledMethods	Fix debug opcode printing.Stack & Cog VMs:	add breakpoints to perform sends.' id '19122e15-e8b5-4727-a01b-37fe327b32e9' date '30 November 2009' time '3:03:05 pm' author 'eem' ancestors ((name 'VMMaker-eem.511' message 'ThreadedFFIPlugin/FilePlugin	added implicit tenuringIncrementalGC calls when a threaded	call encounters a young object.CogMTVM:	added argumentCount to vm state saved and restored across	thread switches.  With this and the above simple ODBC calls	appear to be working.	Added assert to spot when a thread switch lands back in the	wrong kind of frame.  Will need to address this properly soon.Cog VMs:	Made Debug depend on a compile-time define.	Removed bogus asserts in main enlopmarts.	Fixed shortPrintFrame:Stack & Cog VMs:	Added support for tenuringIncrementalGC etc for InterpreterProxy.	Documemnted that primitiveFailFor: PrimNoErr clears failure.	Moved isYoung: up into ObjectMemory.	Beefed up printActivationNameFor:... and made callers pass	nil instead of nilObj when uninterested in the first temp.' id 'b1852c3b-ff0e-4a41-b7a3-109f71b65f49' date '25 November 2009' time '2:56:52 pm' author 'eem' ancestors ((name 'VMMaker-eem.509' message 'Stack & Cog VMs	fix bounds check of errorCode in primitive error table.Threaded FFI Plugin	answer correct error when a module can''t be found in an	external spec.' id '4ccb4ac0-a876-4f37-ac70-a9ff2e8a0f4a' date '23 November 2009' time '9:27:17 pm' author 'eem' ancestors ((name 'VMMaker-eem.508' message '(Threaded)FFIPlugin	add an externalFunctionInstSize var to cope with the addition	of the stackSize slot to ExternalFunction.  Add instanceSizeOf:	to sqVirtualMachine to obtain same.	change the offset for FFIErrors so that FFINoCalloutAvailable	(-1) maps to last prim err code + 1ThreadedFFIPlugin	remember to push the pointer for a copied string argument	only fetch/store an ExternalFunction''s stackSize if the slot	exists	make callFlags a slot of calloutState for checking young args	against threaded callouts.	mild refactoring to reduce arg counts and eliminate	doPrimitiveCallout.Stack & Cog VMs	eliminate checkSignalRequests.  It should be private to	sqExternalSemaphores.c' id 'c581935b-7273-42b7-bc04-8eeee119b56a' date '19 November 2009' time '12:34:35 pm' author 'eem' ancestors ((name 'VMMaker-eem.507' message 'CogMTVM	initialization is a little too delicate' id '2346a5d4-45a4-437a-8b71-98d86b1f48c4' date '17 November 2009' time '2:30:54 pm' author 'eem' ancestors ((name 'VMMaker-eem.506' message 'CogMTVM:	let the VM call ioInitThreads (as per the non-threaded VM) and	so drop the over-specific ioInitThreadLocalThreadIndicesFFI:	now its ready for testing rename it back to SqueakFFIPrims' id '0685fa8a-0597-4d1e-a02b-fd6e6eceeda0' date '17 November 2009' time '12:02:18 pm' author 'eem' ancestors ((name 'VMMaker-eem.505' message 'Merge with VMMaker-eem.504.Plus:CogMTVM:	ThreadedFFIPlugin complete to the extent that it compiles on x86.FFIPlugin:	also answer error code throgh primitive error code.Slang:	plugin generator supports ancilliaryStructClasses (for ThreadedFFIPlugin).	Abstract collection of ancilliaryStructClasses.	allow plugins to provde preambleCCode.	right shift generator tries hard not to cast a 64-bit value to 32-bits.	case statements can have their value returned (as per switch statements).' id '05fb5703-a1cc-412d-bc39-e8d8bb93f209' date '16 November 2009' time '11:56:58 am' author 'eem' ancestors ((name 'VMMaker-eem.501' message 'CogVM:	check-in of needed fixes plus refactoring work in progress.Fixes area) bad bug in inline cacheing.  Old code forgot to reload ClassReg in reentry into PIC after miss.  Using the intel 11.x compiler causes the problem to surface.  isPoint PIC in Point>>+ incorrectly identifies a SmallInteger as a Point and VM crashes in Point>>x trying to acess x from a SmallInteger.b) long-running primitive check.  Screwed up primitive property flags, breaking callbacks when in effect.  Sampling code was subject to false positives.' id '9456e99d-8f02-4bda-b852-e13b12b41d55' date '23 October 2009' time '12:14:28 pm' author 'eem' ancestors ((id 'c802278f-071f-432a-aefa-303c757a365b')) stepChildren ())(id '05baf7a1-04cc-4263-8aa6-c207243b441f')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id '42a80b86-f8fd-482d-bab9-3aa8ced89b28')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id 'e0ff2219-db76-4ad6-9225-0e87a7e1c96e')) stepChildren ())(id '1ad887ce-ed9d-e645-aafd-abfdfcfc6b2f')) stepChildren ())) stepChildren ())(id '4bc8b32e-de23-9f43-864b-28c1b44e092e')) stepChildren ())(id '67b26c02-8015-1f45-b488-772156f79414')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id '00138af5-7bf9-402a-be33-b4868ef6140a')) stepChildren ())(id 'b9916283-87c7-44c2-99b7-eeffc2ff0f34')) stepChildren ())(id '82b3a5dd-0f8e-4a99-9e8d-80d25ff8f947')) stepChildren ())(id '4ea3046f-772a-413e-a27c-ecc7b75e9d6e')) stepChildren ())) stepChildren ())(id '1dab8071-9095-4f58-9c3f-1ec690d455bb')) stepChildren ())(id 'dcb08fe3-8833-473a-945f-6c9070bd0b30')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.605' message 'CogVM:	Fix horrible bug in trace logs.  In Smalltalk the following isguaranteed to be +ve:	traceLogIndex - 3 \\ TraceBufferSizebut when translated to C:	traceLogIndex - 3 % TraceBufferSizeit can be negative and in the following cause an uncheckedout-of-bounds array access. So	(traceLog at: traceLogIndex - 3 \\ TraceBufferSize) = 0 ifTrue: [^nil].can incorrectly assume the trace log is empty if traceLogIndex haswrapped back to zero.	Remove use of debugging trace log for interpreter primitivessince the fast prim trace log suffices.	Extend leak checking to become.Slang:	Fix expansion of expressions in at: and at:put:.	Refactor generateInterpreterFile and generateCogitFile to	provide buildCodeGeneratorFoInterpreter/Cogit for testing	translations.	Nuke unused class VMMakerWithFileCopying and some	unused methods.' id '5af847cc-868a-4207-91db-f12456f5bf54' date '24 June 2010' time '11:13:30 am' author 'eem' ancestors ((name 'VMMaker-eem.603' message 'CogVM:	Fix saving frames above interior frame for co-routining in	non-local return.	Add ioExitWithErrorCode: for simulating.	Fix blow up on updating of byteCount from background thread.	Remove unnecessary check in B3DAccelleratorPlugin>>stackMatrix:	Eliminate allocateChunk: from required method names (JITTER holdover?)' id 'd2a98b56-4d7a-4489-bc43-6ccb4f6d861e' date '23 June 2010' time '12:27:12 pm' author 'eem' ancestors ((id 'ed668fd9-7f90-4413-8adb-fa9cd1c9edee')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.615' message 'CogVM:	Add a check for new objects being overwritten by filling eden witha marker value and checking that the value is present on every allocation.This will cause the VM to exit with an error on the next allocation aftera new object has been written into and beyond.Slang:	Write out constants that look like hex in hex.Simulator:	Squeak4.x-ify.	Fix simulation of primitiveFileDelete' id '48546291-2540-42ca-b7cf-54604b400773' date '6 July 2010' time '4:55:36 pm' author 'eem' ancestors ((name 'VMMaker-eem.614' message 'BitBltSImulation: Juan Vuletich''s fixes for combination rules that needto be handled as RGBA, not RGB.  Fixes font rendering in 4.1 images.CogVM: Simulator fixes.' id '2a1c8546-9805-4af5-bf7b-2fa94b021722' date '3 July 2010' time '7:02:57 pm' author 'eem' ancestors ((name 'VMMaker-eem.608' message 'CogVM:	Fix off-by-one error in assigning inst vars of contexts viaprimitiveInstVarAtPut (!!).	Add printCallStackOfContext:.	Add missing markAndTracePrimTraceLog for stack simulation.	Add evaluation of atEachStepBlock to stack simulator run methods.' id '4910b470-dcc3-42cc-9caa-20d07fcc3611' date '26 June 2010' time '3:22:43 pm' author 'eem' ancestors ((name 'VMMaker-eem.606' message 'CogVM: Fix bogus def of pointerForOop: turning up in cogit.c' id '9b749eaa-be7d-4a66-8f6d-8c3c93fae9c1' date '24 June 2010' time '1:13:03 pm' author 'eem' ancestors ((id '5af847cc-868a-4207-91db-f12456f5bf54')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.652' message 'CogVM:	Work-around compiler bugs for the most negative 64-bit value	in signed64BitIntegerFor: & signed64BitValueOf:' id '8bc3946e-1594-45c3-813a-dcb99c7b953d' date '9 August 2010' time '9:08:02 pm' author 'eem' ancestors ((name 'VMMaker-eem.646' message 'Fix profiler crash (I added an element to primitiveVMParameters butforgot to allocate space for it).Fix primitiveDoNamedPrimitiveWithArgs for unimplemented prims sodebugger correctly steps over & into unimplemented named prims.' id 'a232757a-b648-48e5-92a4-9809e2faedef' date '30 July 2010' time '1:58:18 pm' author 'eem' ancestors ((name 'VMMaker-eem.637' message 'CogVM:	primitiveSetIdentityHash plus Squeak V3 versions of	primitiveBehaviorHash and primitiveMaxIdentityHash.	Improved PIC disassembly.	Num gitted methods vm parameter.' id 'b21d3235-1bd0-44ca-99ea-1ae1153383c3' date '21 July 2010' time '5:35:37 pm' author 'eem' ancestors ((name 'VMMaker-eem.629' message 'ThreadedFFIPlugin:	Fix struct return, indexing return type spec corrrectly and not	being confised between the struct return size and whether return	is via registers or not.Matrix2x3Plugin:	Use pop:thenPush: in a few places.' id '8092d0ee-17da-4636-929e-97602a931e18' date '13 July 2010' time '4:27:19 pm' author 'eem' ancestors ((name 'VMMaker-eem.627' message 'FFIPlugin:	restore access to the error, needed for backwards compatibility.	Use pop:thenPush: in a few places.' id 'fe8857a9-8932-456e-b17f-4093d9c3a74f' date '13 July 2010' time '2:41:31 pm' author 'eem' ancestors ((name 'VMMaker-eem.623' message 'CogVM:	Fix primitiveObjectPointsTo for multiple of 4 length CompiledMethods' id 'a953b521-df31-4a53-978b-69c3f2626138' date '9 July 2010' time '3:21:38 pm' author 'eem' ancestors ((id '817f8b68-cfaf-49ae-a73a-49a96e2ebefe')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-eem.679' message 'Fix bug in pc mapping in blocks.  An ^-return in a block has both a pc map entry and a CallRT map entry because of the call toceNonLocalReturn.  Hence the bytecode descriptors need toreflect this.  The old code didn''t know this and hence pc mappingwas wrong for pcs following an ^-return in a block.  You cansee this in the debugger, e.g. in the RDP client, where pc selectionis wrong on errors in the blocks containing ^nil.' id '85144ac7-9aa4-4c72-8b5e-eedc0effcf0d' date '14 December 2010' time '7:14:02.42216352 pm' author 'eem' ancestors ((name 'VMMaker-eem.678' message 'Back out of the addition of a signalExternalSemaphores to callbackEnter.This needs more thought and a test case.  Looks like instructionPointermight be being mismanaged.' id 'b2f62c71-a97c-4197-a207-96d485efeff2' date '5 November 2010' time '11:59:02.287261632 am' author 'eem' ancestors ((id '7dbc088d-e5f0-4979-ae98-d767ad553776')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-dtl.67' message 'Synchronize with VMMaker-dtl.234 and VMMaker-dtl.233Mantis 7109:Change Set:		LargeIntegersPlugin-SpeedUp-BitShift-Patch-M7109-niceDate:			4 July 2008Author:			niceThese are small improvment to speed up LargeIntegersPlugin bitShift:See http://bugs.squeak.org/view.php?id=7109Mantis 7120:Change Set:		Integer-raisedTo-modulo-COGplugin-M7120-niceDate:			12 July 2008Author:			niceThis is a LargeInteger plugin extension to compute Montgomery modular multiplication((a * b ) / (d^n)) \\ mDigit d is set to 256 (LargeIntegers are Byte arrays)n is set to m digitLength.The negated inverse of m modulo 256 has to be provided on input' id '08000000-1508-4e03-1508-4e0314000000' date '16 May 2011' time '9:31:00.25 pm' author 'dtl' ancestors ((name 'VMMaker-oscog-MarianoMartinezPeck.66' message 'Adapt VMMakerTool so that it doesnt try to register in the menu if TheWorldMenu is not present, like the case of Pharo. This change was already integrated in the main trunk of VMMaker but since Eliot forked VMMaker-oscog before that, it was not there. It doesn''t affect Squeak' id '97bab5b0-51d6-4deb-8b58-5bcedd4747dc' date '23 April 2011' time '2:17:26 pm' author 'MarianoMartinezPeck' ancestors ((name 'VMMaker-oscog-MarianoMartinezPeck.65' message 'blah' id '944f5c54-f2f5-4cc7-b693-b4db9320cff8' date '23 April 2011' time '1:50:19 pm' author 'MarianoMartinezPeck' ancestors ((name 'VMMaker-oscog-dtl.64' message 'Re-save from VMMaker-oscog-EstebanLorenzano.62 because VMMaker-oscog-dtl.61 and VMMaker-oscog-dtl.60 were saved without correct ancestry. This version incorporates the changes from VMMaker-oscog-EstebanLorenzano.62, VMMaker-oscog-dtl.61, and VMMaker-oscog-dtl.60.Name: VMMaker-oscog-EstebanLorenzano.62-added ClipboardExtendedPlugin as a regular plugin (taken from the InterpreterVM branch) I don''t know if it works right now, but at least it compiles :)Name: VMMaker-oscog-dtl.61A second batch of updates from VMM trunk, primarily cosmetic but also a class comment update and a couple of methods that had not previously been pragmatized in oscog.Name: VMMaker-oscog-dtl.60These changes are methods from the main VMM branch for which <#var:#type:> declarations have been formatted with proper spacing. By updating these in the oscog branch, all of these methods are identical in both branches. All changes are cosmetic (no functional changes to the methods).' id 'c1d30608-30ec-50b7-208a-31f7a46c1508' date '21 April 2011' time '8:24:02.395228928 pm' author 'dtl' ancestors ((name 'VMMaker-oscog-dtl.59' message 'Merge VMMaker-oscog.dtl.58, and add #primitiveImageFormatVersionAdd primitiveMillisecondClockMask, an optional named primitive used in conjunction with primitiveMillisecondClock for duration calculations. The image assumes a value for this constant that is assumed to correspond to the actual value used in the VM. This primitive permits the VM to report the actual value being used.Add primitiveImageFormatVersion, an optional named primitive answering the image format number of the current image. This is the value stored in the first word of an image file header when the image is saved, and possibly modified on image load if the VM adds or removes capabilities for the running image. This primitive was added to VMMaker trunk in VMMaker-dtl.169. Rationale: supports float word order handing for image segments, reference http://lists.squeakfoundation.org/pipermail/vm-dev/2011-April/007712.html' id 'c1d30608-042d-4bb7-20ca-2bf7a46c1508' date '17 April 2011' time '10:32:03.478392448 pm' author 'dtl' ancestors ((name 'VMMaker-oscog-dtl.58' message 'Merge VMMaker-oscog.dtl.57Generate C code for #repeat.Implementation by Igor Stasenko and Nicolas Cellier.' id 'c1d30608-04b3-a5b7-20ca-2bf7a46c1508' date '17 April 2011' time '10:22:03.584065408 pm' author 'dtl' ancestors ((name 'VMMaker-oscog-dtl.57' message 'Merge VMMaker-oscog.dtl.56Add tests from VMMaker trunk to document various issues and verify presence of primitives.' id 'c1d30608-042d-4bb7-20ca-2bf7a46c1508' date '17 April 2011' time '10:18:00.258196224 pm' author 'dtl' ancestors ((name 'VMMaker-oscog-IgorStasenko.56' message '- another attempt to make MC to upload correct merge...' id 'afdffb53-fcd5-4daa-b7a2-2a812cb0b112' date '4 April 2011' time '3:49:59 pm' author 'IgorStasenko' ancestors ((name 'VMMaker-oscog.54' message 'Fix FFI via fixing includesBehavior:ThatOf: so that classes nolonger are considered to inherit from nil.Merge with VMMaker-oscog-IgorStasenko.53.' id '73c095bd-7fa5-4ef9-b9fc-60378cae64c7' date '1 April 2011' time '12:19:04.094261632 pm' author 'eem' ancestors ((name 'VMMaker-oscog-IgorStasenko.53' message '- republish overridden package + merge oscog.52' id 'fb4c7e81-ea2e-1b45-a461-e382537797a0' date '20 March 2011' time '11:40:20 pm' author 'IgorStasenko' ancestors ((name 'VMMaker-oscog.52' message 'Merge with oscog-49-51 &  Esteban-50' id 'a2810aac-4423-6740-b70e-7e821b979cb4' date '18 March 2011' time '12:45:14 am' author 'IgorStasenko' ancestors ((name 'VMMaker-oscog-IgorStasenko.50' message '- minor fixes to make Win32 StackVM compile' id 'f8306ed6-5876-614f-9753-88de476ecd8f' date '17 March 2011' time '6:42:52 am' author 'IgorStasenko' ancestors ((name 'VMMaker-oscog-IgorStasenko.Stasenko.49' message '- merge with oscog.47' id '279087d0-4ec6-421d-950c-cfed0cabf5ea' date '10 February 2011' time '2:32:56 pm' author 'IgorStasenko' ancestors ((name 'VMMaker-oscog-Igor.Stasenko.48' message '- removed #fixtemps to avoid patching when loading in Pharo images' id 'f7e6dcaf-4550-4c45-9a5d-4882abbbc294' date '3 February 2011' time '3:57:02.314228928 pm' author 'Igor.Stasenko' ancestors ((name 'VMMaker-oscog-Igor.Stasenko.47' message '- merge with oscog.46- fixed the Interpreter''s classvars- removed duplicated sharedpools' id '0695e608-2043-419a-b5b8-d4b6a5cbaea5' date '20 January 2011' time '8:21:00.118032704 pm' author 'Igor.Stasenko' ancestors ((name 'VMMaker-oscog-Igor.Stasenko.43' message '- merge with oscog.42' id '4e82870b-d4c2-4083-8cff-e35ae022c87d' date '2 January 2011' time '5:43:00.526 pm' author 'Igor.Stasenko' ancestors ((name 'VMMaker-oscog-Igor.Stasenko.38' message '- added a type definition for readImageFromFile....' id '6cd6eeee-5691-40d3-9dca-46aaed01d49a' date '6 December 2010' time '2:46:00.877392448 pm' author 'Igor.Stasenko' ancestors ((name 'VMMaker-Igor.Stasenko.37' message 'integration of finalization enhancements for Cog VM(ignore the Interpreter changes, when merging)' id '6fcf9560-ff1b-fc47-9e20-044051722a5b' date '6 October 2010' time '8:36:01.047228928 pm' author 'Igor.Stasenko' ancestors ((name 'VMMaker-oscog.36' message 'LargeIntegersPlugin	minor simplification to digitSubLarge:with:Simulator:	Fix SmartSyntaxPluginSimulator; the receiver: spec	applies to the receiver, not the result, bozo!!	Fix simulation of 64-bit integer arithmetic which didn''t	truncate the result to 64 bits, hence failing to fail for	results that overflow 64 bits.	Allow simulator to avoid booleanCheat: for comparing	bytecode traces obtained by runSimulated:contextAtEachStep:' id '79f2435a-ad54-4d89-be04-cd4efaad1ede' date '4 October 2010' time '7:15:02.743098112 pm' author 'eem' ancestors ((name 'VMMaker-oscog.35' message 'Simulation support for SmartSyntaxPlugins, and hencesimulation of LargeIntegersPlugin.Stream-line firstIndexableField: and use it to implementLargeIntegersPlugin>>unsafeByteOf:at:.Utilities menu for StackInterpreterSimulator.Nuke obsolete & partial smart syntax simulation support.Revert CroquetPlugin (no support for vertex optimization yet).' id 'cf41affd-7225-42c5-8fa7-257721d041aa' date '3 October 2010' time '8:06:02.196294336 pm' author 'eem' ancestors ((name 'VMMaker-oscog.34' message 'Warning: this may have difficulty loading into an image withVMMaker already loaded and you''ll almost certainly need torecompile the package if you try this.Refactor to move ObjectMemory into objectMemory inst varin StackInterpreter and subclass CoInterpreter.Move the bulk of the core primitives to InterpreterPrimitives,to allow eventual sharing of primitives between Cog and theInterpreter..Fix typo in method arg check in primitiveObject:perform:withArguments:lookedUpIn:for objects-as-methods.Correct the sendTrace bit flags defs.Various minor cleanups/polish.Simulator:	provide a menu on the bytecode count pane with useful	expressions.  It''s now a tool :)' id 'ec174a95-5f42-4fe0-88f0-4baff13dd3ce' date '1 October 2010' time '7:28:02.134 am' author 'eem' ancestors ((name 'VMMaker-oscog.33' message 'OSCogVM:  Support object-as-method:	Eagerly evaluate the interpreter version of a primitive	to ease the object-as-method implementation and to	improve interpreter performance.	Refuse to enter anything that isn''t a CompiledMethod	into the method-lookup cache to avoid open PICs having	to check for valid compiled methods.	Have various places check for isOopCOmpiledMethod:	rather than isCompiledMethod: to allow SmallIntegers to	be used as methods.Interpreter:	Have various places check for isOopCOmpiledMethod:	rather than isCompiledMethod: to allow SmallIntegers to	be used as methods.Slang:	support super sends by expanding them at translation	time.  This allows CoInterpreter>>addMethodToCache	to avoid cacheing non-compiled methods via a super	send, avoiding duplicating SrackInterpreter''s method.' id '733b7c50-b973-4ca0-9831-5c84d09032bf' date '25 September 2010' time '7:13:04.075359744 pm' author 'eem' ancestors ((name 'VMMaker-oscog.32' message 'OSCogVM:	Fix Float < & <=; the NaN inversions for < & <= were mixed up.	(symptom was that 0 asFloat printed as -0.0, since 0.0 < 0 was true).' id '610266ce-1a35-4d42-8ff9-b30ed3736b19' date '21 September 2010' time '8:12:02.568065408 pm' author 'eem' ancestors ((name 'VMMaker-oscog.31' message 'Refactor the booleanCheat to remove code duplication.Saves 1.3k in the deployment Cog build (and > 3k in debug).Avoid annoying (and bogus) "removed booleanCheatTruebecause it refers to local variabls of interpret" messageby expanding cCode: [] inSmalltalk: [] forms during translation,and using this form in the relevant senders of booleanCheat:.' id 'd80799cf-0dd2-40dd-b3a6-f8bca14bdc3d' date '19 September 2010' time '11:41:02.799228928 am' author 'eem' ancestors ((name 'VMMaker-oscog.29' message 'CogVM:	Fix machine-code floating point comparisons for nan cases (< & <=).	Provide tests for CmpCqR CmpRdRd et al.	Nuke primitiveIdentityDictionaryLookup; it is unused and ties	down the system too much (putting e.g. a hash algorithm in the VM).' id 'c043454b-2bd2-4f79-8308-9c6c82ecf645' date '18 September 2010' time '9:48:03.731065408 pm' author 'eem' ancestors ((name 'VMMaker-oscog.28' message 'CogVM:	Fix machine-code float divide to fail for / 0.0.	Revert mistaken bytecodePrim >= & <= NaN change.Slang:	Improve TSendNode printing (parenthesize)' id 'abd2e918-6a30-45ec-b5ed-11a563fb8c04' date '18 September 2010' time '11:48:03.08032704 am' author 'eem' ancestors ((name 'VMMaker-oscog.27' message 'CogVM:Fix bad bug in CompiledMethod>>flushCache/primitiveFlushCacheByMethod.Original code failed to flush the primitive embedded in the machine codemethod, causing it to run the previous primitive.Fix bad bug in the Cogit''s primitiveDoPrimitiveWithArgs.  Because of theway the process primitives "return" (they don''t, they longjmp) thepopRemappableOop wasn''t always executed, causing the remamp bufferto overflow.With these two fixes things like the following now work:	thisContext runSimulated:		[(1 to: 10)			do:[:aClass| (Delay forMilliseconds: 100) wait]			displayingProgress: ''Processing...'']Nuke the unused checking primitive stack interface (shouldPopArgs et al).Nuke unused inst vars.' id '7bc4e8e8-b779-4140-8698-5cde0d003c0f' date '12 September 2010' time '8:47:00.376065408 am' author 'eem' ancestors ((name 'VMMaker-oscog.26' message 'CogVM:	Work-around compiler bugs for the most negative 64-bit value	in signed64BitIntegerFor: & signed64BitValueOf:		Fix primitiveDoNamedPrimitiveWithArgs for unimplemented	prims.' id '8f0241dd-f8f9-4ae4-a736-bb81484acebf' date '9 August 2010' time '9:37:01.16016352 pm' author 'eem' ancestors ((name 'VMMaker-oscog.25' message 'CogVM:	simulator labels for PIC disassembly and transcript setters.' id '42e63e35-9e32-452c-8b69-325a901fa3ac' date '18 July 2010' time '6:33:00.853294336 pm' author 'eem' ancestors ((name 'VMMaker-oscog.24' message 'Reclaim Integer>>hex8 as a VMMaker extension.  NowOSCog tracks trunk hex is base but hex8 is an extension.' id '0d90e593-b232-45e1-bb88-a35f2908fa77' date '17 July 2010' time '6:09:03.693065408 pm' author 'eem' ancestors ((name 'VMMaker-oscog.23' message 'CogVM: Take alloca from stddef.h.  malloc.h is an anachronism.' id '1a50a139-43f0-421d-bc43-590dd9343bc4' date '15 July 2010' time '8:04:00.212359744 pm' author 'eem' ancestors ((name 'VMMaker-oscog.22' message 'CogVM:	Safer long-running primitive monitoring (i.e. avoid races	when remapping the longRunningPrimitiveCheckMethod)	Make the interpreter''s include of malloc.h specific to WIN32.' id '3720c759-295d-4183-b86d-651155593f83' date '15 July 2010' time '6:36:02.56016352 pm' author 'eem' ancestors ((name 'VMMaker-oscog.21' message 'ReentrantFFIPlugin:	Fix struct return, indexing return type spec corrrectly and not	being confused between the struct return size and whether return	is via registers or not.  Backwards-compatibility access	to the ffi error code.Various: use pop:thenPush: in a few places.' id 'f46d3ba4-c310-454b-9be7-30c6341f4486' date '13 July 2010' time '5:41:03.004032704 pm' author 'eem' ancestors ((name 'VMMaker-oscog.20' message 'CogVM:	New plugin primitive support used by the ReentrantFFIPlugin.	Slang:	Support for generating ancilliaryStructClasses and	outputting preambleCCode in generated pugins	used by the ReentrantFFIPlugin.' id '528a9b5e-293c-4fac-9430-1eabdb0d278d' date '11 July 2010' time '9:01:02.190098112 am' author 'eem' ancestors ((name 'VMMaker-oscog.19' message 'CogVM:	Fix primitiveObjectPointsTo for multiple of 4 length methods.FFI Plugin:	Add ReentrantFFIPlugin that can replace the existing FFI	(currently only x86) and doesn''t need any assembler	support.  Skeletons for PPC and ARM provided for brave	souls looking for fun work.' id 'e2e1dd83-f427-4df3-a971-aababe804331' date '9 July 2010' time '3:53:01.379065408 pm' author 'eem' ancestors ((name 'VMMaker-oscog.18' message 'BitBltSImulation:	Juan Vuletich''s fixes for combination rules that need to be	handled as RGBA, not RGB.  Fixes font rendering in 4.1 images.CogVM:	FIx symbolicMethod:''s initial latest continuation (simulator)	CogMethodSurrogate>>isZero for simulation	set-up the quitBlock to close simulation window' id '66fabf9e-52f4-43aa-a0fc-023e1c0e686e' date '3 July 2010' time '7:15:02.406032704 pm' author 'eem' ancestors ((name 'VMMaker-oscog.17' message 'CogVM:	Fix off-by-one error in assigning inst vars of contexts	via primitiveInstVarAtPut (!!).  Fixes Seaside continuation	tests.	Add printCallStackOfContext:.	Add missing markAndTracePrimTraceLog for stack simulation.	Add evaluation of atEachStepBlock to stack simulator run methods' id 'b0ce2f1b-0e18-48d8-a490-4b8ca8476ec7' date '26 June 2010' time '4:01:01.254065408 pm' author 'eem' ancestors ((name 'VMMaker-oscog.16' message 'Fix bogus definition of pointerForOop turning up in cogit.c' id 'f8b8c00f-be77-4358-a537-ac5dd4e27747' date '24 June 2010' time '1:18:00.757425152 pm' author 'eem' ancestors ((name 'VMMaker-oscog.15' message 'CogVM:	Fix horrible bug in trace logs.  In Smalltalk the following isguaranteed to be +ve:	traceLogIndex - 3 \\ TraceBufferSizebut when translated to C:	traceLogIndex - 3 % TraceBufferSizeit can be negative and in the following cause an uncheckedout-of-bounds array access. So	(traceLog at: traceLogIndex - 3 \\ TraceBufferSize) = 0 ifTrue: [^nil].can incorrectly assume the trace log is empty if traceLogIndex haswrapped back to zero.	Remove use of debugging trace log for interpreter primitivessince the fast prim trace log suffices.	Extend leak checking to become.Slang:	Fix expansion of expressions in at: and at:put:.	Refactor generateInterpreterFile and generateCogitFile to	provide buildCodeGeneratorFoInterpreter/Cogit for testing	translations.	Nuke unused class VMMakerWithFileCopying and some	unused methods.' id 'b249221a-e45b-43cd-b2c9-2d27d301d54f' date '24 June 2010' time '11:50:03.477228928 am' author 'eem' ancestors ((name 'VMMaker-oscog.14' message 'CogVM:  Fix saving frames above interior frame for co-routining in  non-local return.  Remove unnecessary check in B3DAccelleratorPlugin>>stackMatrix:' id 'd50a4520-06c6-490c-8d24-900eff2ef35e' date '23 June 2010' time '12:11:03.602130816 pm' author 'eem' ancestors ((name 'VMMaker-eem.13' message 'Fix integration snafu, def of CogBytecodeDescriptor is missing stackDelta.' id '0c877df2-55ee-4df4-af59-182dc4ef54b5' date '22 June 2010' time '10:01:01.480098112 pm' author 'eem' ancestors ((name 'VMMaker-oscog.12' message 'Fix co-routining and cannotReturn: crashes.  Key is to arrangethat when baseFrameReturn returns to a frame in the middleof a stack page the frames above it (which may be in use incoroutining) are preserved, i.e. by movign them to anotherpage.Fix simple blocks with temps.  JIT compiles simple blockswithout a stack frame and so the stack must balance.  TheJTI must strip any leading pushNils that initialize tempsotherwise these will be interpreted as return addressescausing a jump into la la land.Various typos and niceties from mainline Cog.' id 'a34fa6af-c3a0-453e-8450-8525342057ac' date '22 June 2010' time '9:51:02.666392448 pm' author 'eem' ancestors ((name 'VMMaker-oscog.11' message 'Merge with VMMsaker-eem.586.  Safe printing for theprimitive trace log during GC.' id 'be4a73de-01d1-40ad-b3ff-77d8021a563d' date '5 June 2010' time '4:33:00.539228928 pm' author 'anon' ancestors ((name 'VMMaker-oscog.10' message 'Fix the simulator GUI.  Use hideScrollBarsIndefinitely vs theolder hideScrollBarIndefinitely.Fix simulator instance creation.' id 'a08ffe0a-7187-4abc-8708-7ee13ea51993' date '5 June 2010' time '4:09:02.782392448 pm' author 'anon' ancestors ((name 'VMMaker-oscog.9' message 'Merge with VMMaker-eem.584.CogVM:	Fix bug with machine code references to objects in become ops.Make sure the youngReferrers list is pruned in mapObjectReferencesInMachineCodeForXXXGCotherwise youngReferrers can get duplicate entries which screws upremapping of obj refs in machine code during GC.	Mo'' betta asserts around the youngReferrers list and more leak	checking of generated code.	Extend the leak check to the traceLog and fix a bounds	bug there-in.	Make some bounds types in the method zone unsigned and cleanup some comparisons.' id '81fee503-8623-4423-a33b-03d641642608' date '31 May 2010' time '2:48:01.871 pm' author 'eem' ancestors ((name 'VMMaker-oscog.8' message 'Check-in the package under the correct name.' id 'b336429e-652e-4551-8d38-a00ef67eaa61' date '26 May 2010' time '5:52:00.151359744 pm' author 'eem' ancestors ((name 'VMMaker-eem.580' message 'Merge with VMMaker-eem.576.  Move some SmartSyntaxPlugin VMMaker extensions from Collections and Kernel into the VMMaker package' id '3a4059dc-7b56-4d59-b329-2b6b93cb6a22' date '26 May 2010' time '5:42:03.739425152 pm' author 'eem' ancestors ((name 'VMMaker-oscog.7' message 'Merge with VMMaker-eem.576.CogVMs:	Implement the unimplemented case in primitiveTerminateTo ofterminating from other than the top frame to a context in the middleof the current stack page.Slang:	Use fixed pitch in formatting comments.' id 'a29b614d-a5a3-4be2-aba0-cf25c0849573' date '24 May 2010' time '3:30:02.486294336 pm' author 'eem' ancestors ((name 'VMMaker-oscog.6' message 'Slang: fix source comparison of surrogate accessor classes (''foo'' asText ~= ''foo'' asString).' id '56f401ef-95e6-49db-86e2-a16440351b83' date '23 May 2010' time '6:49:01.929261632 pm' author 'eem' ancestors ((name 'VMMaker-oscog.5' message 'Nuke the threaded VM classes' id '1de0683f-d6c9-431e-8f99-d51bc2f6bbb9' date '23 May 2010' time '3:49:02.154196224 pm' author 'eem' ancestors ((name 'VMMaker-oscog.4' message 'Bow to the inevitable and make the order of UnsafeAlien and invokeCallback:stack:registers:jmpbuf: in the specialObjectsArray match those in the outside world.' id '11c542bf-9412-4f54-b18f-c02bdd16e7c3' date '22 May 2010' time '3:14:02.56716352 pm' author 'eem' ancestors ((name 'VMMaker-oscog.3' message 'Delete GIF & PNG reader plugins' id 'b3041ea3-bd92-483d-b2fc-c8935e262205' date '21 May 2010' time '3:38:04.18716352 pm' author 'eem' ancestors ((name 'VMMaker-oscog.2' message 'Delete GIF & PNG reader plugins' id '95bfcf73-0971-4dae-acf3-ffb7ed39098c' date '21 May 2010' time '3:35:00.570196224 pm' author 'eem' ancestors ((name 'VMMaker-oscog.1' message 'Initial cut at an open-source Cog VMMaker containing the StackInterpreter and Cogit VMs.' id '223219a8-cb66-4dcd-862d-d647a8c9dad5' date '21 May 2010' time '3:04:02.707130816 pm' author 'eem' ancestors ((id 'b9916283-87c7-44c2-99b7-eeffc2ff0f34')(name 'VMMaker-ossi.3' message 'StackVM:	Store nil in myList of the activeProcess (bug fix).	Added activeProcess, used throughout process prims.	Refactored new frame set-up in transferTo:	Fixed some a couple of simulation bugs in	checkIsStillMarriedContext:currentFP: and	primitiveObject:perform:withArguments:lookedUpIn:.	Fixed speeling of receiver in some comments	Removed duplicated defs of the HeaderType bytes.Plugins:	Restored GeniePlugin thanks to DTL''s fix.	Nuked unused ffiArgClass in FFIPlugin' id '0ea9ee11-3137-4be2-b502-1b515bef6409' date '18 August 2009' time '2:10:59 pm' author 'eem' ancestors ((name 'VMMaker-ossi.2' message 'Nuked GIF & PNG plugins.  Merged erroneous prim fail pop fixesfor File, Security & Socket plugins.' id '6af1c4c7-c0db-4d92-a828-326810e9173e' date '3 August 2009' time '10:48:27 am' author 'eem' ancestors ((name 'VMMaker-ossi.1' message 'First candidate for the OpenSource StackInterpreter, CogVM #2.This is derived from VMMaker-eem.446 and stripping it of all JITclasses.' id 'bb0ec681-c856-4316-97fe-659e157fbf7a' date '2 July 2009' time '2:41:03 pm' author 'eem' ancestors ((id 'fa2057d1-8681-40eb-9eec-d61abb25a868')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id '4ea3046f-772a-413e-a27c-ecc7b75e9d6e')) stepChildren ())) stepChildren ())(id '1dab8071-9095-4f58-9c3f-1ec690d455bb')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-oscog.42' message 'Fix rounding bug causing underestimate of openPICSize andresultant hard crashes.' id 'd3b303c1-306e-4343-b078-655fc2bfc436' date '1 January 2011' time '2:28:00.221294336 pm' author 'eem' ancestors ((name 'VMMaker-oscog.41' message 'Fix a bug with bytecode to pc mapping being confused by framelessblocks which caused a crash when converting an interpreteractivation of Cogit class>>generatorTableFrom: to machine code.In the SRMCogit mark the conditional jump following #== as deadcode and elide it.Fix SimpleStackBasedCogit compilation by ifdeffing out the body ofenterRegisterArgCogMethod:at:receiver: and addding dummyregisterMaskFor:... defs.Fix an assert for objects-as-methods in activateInterpreterMethod...Fix gnuification for the change that moved a funciton''s opening { toa newline.' id '096b8a29-e7e8-4cbf-b29c-0f096abbdd5c' date '1 January 2011' time '11:58:03.811294336 am' author 'eem' ancestors ((name 'VMMaker-oscog.40' message 'New StackToRegisterMappingCogit that produces significantly more efficient and more compact code.Benefits vary widely based on work-load.e.g on 2.66 GHz Core i7 MacBook ProSimpleStackBasedCogit: [1 to: 100000000 do: [:i|]] timeToRun 691StackToRegisterMappingCogit: [1 to: 100000000 do: [:i|]] timeToRun 192192 - 691 / 6.91 -72%SimpleStackBasedCogit: 0 tinyBenchmarks ''753495217 bytecodes/sec; 64769127 sends/sec''StackToRegisterMappingCogit: 0 tinyBenchmarks ''931756141 bytecodes/sec; 128157989 sends/sec''931756141 - 753495217 / 7534952.17 -24%128157989 - 64769127 / 647691.27 -98%SimpleStackBasedCogit: [Compiler recompileAll] timeToRun 47013 (no transcriptStackToRegisterMappingCogit: [Compiler recompileAll] timeToRun 43406 (no transcript)43406 - 47013 / 470.13 -7.67234594686576Fix bug in pc mapping in blocks.  An ^-return in a block has both a pc map entry and a CallRT map entry because of the call toceNonLocalReturn.  Hence the bytecode descriptors need toreflect this.  The old code didn''t know this and hence pc mappingwas wrong for pcs following an ^-return in a block. Non-threaded callbacks.Implement legacy sendInvokeCallback:Stack:Registers:Jmpbuf: style.Provide a more general new style that avoids 64-bit limitations.VMCallbackContext includes all the necessary state for acallback, so the new arg count can be 1 (and is in interp.h).New sendInvokeCallbackContext will work with either oldAlien class>invokeCallback:stack:registers:jmpbuf: entry-pointor new Alien class>invokeCallbackContext:.Other fixes described in the history.' id '637db40c-33c6-4263-816e-1b8cc19e3c99' date '30 December 2010' time '12:37:03.090294336 pm' author 'eem' ancestors ((id 'e0abb3a5-0df6-406c-b879-fb50de794965')(name 'VMMaker-oscog.37' message 'Fix simulator (which mistakenly inherited from CoInterpreterinstead of CoInterpreterPrimitives).Fix bug in SmartSyntaxPluginSimulator>>computeSignatureMap.Merge Andreas'' patch for TMethod>>argConversionExprFor:stackIndex:.Recategorise simulatorClass consistently.Nuke empty TestInterpreterPlugin.' id '4d5bd1b4-5e2d-40c2-932e-6cebc83349c0' date '13 November 2010' time '6:52:00.639130816 am' author 'eem' ancestors ((id '79f2435a-ad54-4d89-be04-cd4efaad1ede')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-oscog.46' message 'Fix for & and | usage in genSpecialSelectorArithmetic thatcaused e.g. 16r80 bitOr:16r40 to evaluate to 1.Safer frame printing via sprinkling of couldBeFramePointer: pixie dust.Update the CogMemoryManager class comment newGC/obj rep design with the results of recent vm-dev discussion on lazy become and pinning.Remove the unused register-saving stack page classes.Rename retained classes (CogSimpleStackPage => CogStackPage etc).' id '78f6932a-9375-4f02-8804-bf4218877f36' date '15 January 2011' time '10:45:02.594999999 am' author 'eem' ancestors ((id '34744a1f-ebd7-4f47-a77a-c3c5d19df068')(name 'VMMaker-oscog.45' message 'Change the representation of CogBlockMethods to solve issuesmatching blocks in bytecoded methods to their correspondingCogBlockMethods.  Replace the CogBlockMethod objectHeader fieldwith a 16-bit offset to the home method and a 16-bit startbcpc field.Add comprehensive testing of bytecode to machine-code pcmapping, including matching blocks.Fix liveness of ResultReceiverReg over calls to ceContext:instVar:value:.Fixes an mnu in privRefresh.Fix leaking of objects into the atCache due to ceSend:super:to:numArgs:''suse of executeNewMethod without always setting messageSelector.Fixes "BooleanArrayUser new loop" bug.Fix simulation stack off-by-one in genStorePop:MaybeContextReceiverVariable:.More agressive store-check elision (elide for nil, true & false, not just immediates).' id 'a8e97960-e5be-4a86-8501-f5829394461c' date '9 January 2011' time '3:48:00.41816352 pm' author 'eem' ancestors ((id 'ba89663d-05f7-4f28-bc61-bb33014e6767')(name 'VMMaker-oscog.44' message 'Fix liveness of ResultReceiverReg over calls to ceContext:instVar:value:.Fixes an mnu in privRefresh.Fix leaking of objects into the atCache due to ceSend:super:to:numArgs:''suse of executeNewMethod without always setting messageSelector.Fixes "BooleanArrayUser new loop" bug.Fix simulation stack off-by-one in genStorePop:MaybeContextReceiverVariable:.More agressive store-check elision (elide for nil, true & false, not just immediates).Support for more aggressive frameless optimization, but not deploted (cuz it''s broken of course).Simulator tweak (setBreakSelector menu entry) & fixes (get decoration testright, add a storeInteger: forwarder).' id 'f6701f5f-5c7e-476c-a461-415683c4ff40' date '7 January 2011' time '5:41:03.594130816 pm' author 'eem' ancestors ((name 'VMMaker-oscog.43' message 'Eliminate some warnings in the CoInterpreter.Stop attemptToSwitchToMachineCode: being inlined to fix apparentoptimization bug at -O2 on linux gcc 4.1.2.' id '9afbc6fa-2adb-4ffe-b0b3-84833ead222d' date '2 January 2011' time '2:33:01.570425152 pm' author 'eem' ancestors ((id 'd3b303c1-306e-4343-b078-655fc2bfc436')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-oscog.47' message 'Move the genExternalizePointersForPrimitiveCall andgenLoadCStackPointersForPrimCall to the front ofcompileInterpreterPrimitive so thata) reg args are pushed before any calls, andb) ceCheckProfileTick is run on the C stack.The first fixes the StackToRegisterBasedCogit''s crash when profiling.The second is safer than running it on a Smalltalk stack page.Fix simulation of the profling machinery (to debug the above).Fix mapping for backward branches which must of course map tothemselves, otherwise the VM can break out of loops prematurely.Bring StackInterpreter generation up to date (less labelling, vmCallback).zero instuctions on recompiling block after numInitialNils mis-estimation.More methods for the in-image facade for compiling quick prims.Both Cogits	Fix pc mapping once and for all.  Tests allow compiling all	methods in current image and testing all mapped bcpcs and	mcpcs map and map ack correctly.	Fix bad bug with jump fixups that caused some fixups to be	missed (error in the index used to define the range of valid	fixup adresses).StackToRegisterMappingCogit	Fix bug in addBlockStartAt:numArgs:numCopied:span: that	caused one block entry to be omitted when some block was	recompiled due to initialNil misestimation.	As part of pc mapping fixing add an annotateUse flag to	sim stack entries so that the eliminated send in a folded	constant still gets a pc map entry.CoInterpreter	Fix bug in checkLogIntegrity for an empty log.	Safety in activation printing (for backtraces etc).	SImulator	Run quitBlock on closing simulator window.StackToRegisterMappingCogit:	Fix bug in repeated block compilation for initial nil handling.	Repeated attempts to insert the same block start are filtered out	instead of repeating all block inserts (which doesn''t work).	Fix bad bug in frameless block entry.  Don''t use	initSimStackForFramelessMethod:!	Add a target fixup for a conditional jump even if it is a jump on	true or false since the simStack must still be valid for merges.	Nuke as-yet-unused merge state in CogSSBytecodeFixup.	Add a subclass using image facilities to compute numnitialNils	correctly to compare against repeated block compilation.CoInterpreter:	comment an apparently unsent method to stop me from deleting it.Fix StackToRegisterMappingCogit being confused by initial pushNilsin blocks that provide parameters rather than initialize temps bytracking stack depth and recompiling if the depth is wrong at the endof the block.  Do this by refactoring compileMethodBody intocompileEntireMethod et al.Fix atCache leakage for super sends in machine code by assigningto lkupClass (since commonAt:[put:] use lkupClass to filter-outsuper sends).Simulator fixes and tidyups.' id 'a4053f20-cb87-415d-aad3-3bb29b03724c' date '6 February 2011' time '9:43:01.885065408 am' author 'eem' ancestors ((id 'c3e429ed-65e8-4a61-b9fa-942d17f47702')(id '78f6932a-9375-4f02-8804-bf4218877f36')) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-oscog-EstebanLorenzano.50' message 'fixes to work on Cocoa Cog. It compiles, but doesn''t run :(' id '706e521e-44a0-46e5-beb1-6d25bd6aecc2' date '4 March 2011' time '1:24:27 pm' author 'EstebanLorenzano' ancestors ((id '279087d0-4ec6-421d-950c-cfed0cabf5ea')) stepChildren ())(name 'VMMaker-oscog.51' message 'Threading subsystem.  CoInterpreterMT adds ability toshare VM amongst native threads under the constraint thatonly one thread "owns" (is running) the VM at any one point.See CogThreadManager''s class comment for design documentation.' id 'd213bf61-5898-475b-8a5c-e4a9bdad2415' date '16 March 2011' time '11:39:00.639196224 am' author 'eem' ancestors ((id 'a0182697-3785-4395-92bd-0c21bca0ca13')(name 'VMMaker-oscog.50' message 'Sista: Speculative-inlining Smalltalk architectureSistaStackToRegisterMappingCogit code generator countsconditional jumps (taken & untaken counts) calling back oncounter trip and provides a primitive to access inline cacheand counter state from methods.Sista code generator now compiles and runs for a short time (seemsfine in the simulator).cogit: macro allows excluding Sista-specific code from the CoInterpreter.Support for shortening objects (for shortening the Array result ofprimitiveSistaMethodPICAndCounterData).CogMTVM source.  Minor refactor/rename for SistaStackToRegisterMappingCogit.Sista = Speculative inlining Smalltalk architecture.IsMethodReference/annotateMethodRef: => IsAbsPCReference/annotateAbsolutePCRef:CogMethodSurrogate hierarchy now holds cogit and clients defer to cogit to createthe CogMethodSurrogate determined by the Cogit, so that SistaStackToRegisterMappingCogitcan add a numCounters field to its CogMethod variant.Slang:Add a cogit: pragma to eliminate Sista-specific methods whengenerating a non-Sista VM. (but what about prim table?)' id 'cc1d11ad-11f4-41d6-abfe-48f03fd9a405' date '16 March 2011' time '10:56:01.724032704 am' author 'eem' ancestors ((id 'a0182697-3785-4395-92bd-0c21bca0ca13')(name 'VMMaker-oscog.49' message 'Implement cannotInterpret: hook in the JIT.  Refactor JIT MNU handlingso that lookupMethodNoMNUEtcInClass: can answer the splObj: indexfor the selector to use to lookup failure (doesNotUnderstand: orcannotInterpret:).StackToRegisterMappingCogit:	Fix bug with storeRemoteTemp (e.g. StarMorph initialize in Cuis	3.x) which causes a stack off-by-one.	Rename merge:afterReturn: to merge:afterContinuation: and	revamp merge code to treat byte ode following an unconditional	branch the same as after a return.	Add spill tracing.Minor cleanups for recent blog posts:	Refactor ceSend:super:to:numArgs: pulling abort support out to		ceSendAbort:to:numArgs:	Rename activateInterpreterMethodFromMachineCode to		interpretMethodFromMachineCode	Remove unused linkSends: flag.Move the genExternalizePointersForPrimitiveCall andgenLoadCStackPointersForPrimCall to the front ofcompileInterpreterPrimitive so thata) reg args are pushed before any calls, andb) ceCheckProfileTick is run on the C stack.The first fixes the StackToRegisterBasedCogit''s crash when profiling.The second is safer than running it on a Smalltalk stack page.Fix simulation of the profling machinery (to debug the above).Make printProcsOnList: & printProcessStack: part of the VM api fordebug printing.Typos, use of splObj: instead of direct specialObjectsOop accessFix simulation of primitiveScanCharacters (send slotSizeOf: to objectMemory).Simulator cleanups (make simulated objectBefore: answer 0 on failure).print oop... & print frame... on the utilities menu.printop: prints fields of word objects.Fix primitiveExternalCall''s simulation version; specifically disablingMatrix2x3Plugin, because it broke bezier subdivision.Fix compileOpenPICPrototype openPICSize bug.  Need to use a realselector to compute the right map size.Typo and redundant code in genSpecialSelectorComparison.Make genAndDis: take a doit string or a method.Define CogSimStackEntry''s inst vars in house styleSlang:Eliminate final explicit returns in super expansions since thesecan cause premature exit, failing to execute code in the subclassmethod.Fix super expansion when super expression is returned.  i.e.final return should only be elided if subclass method doesnot return the result of the super send.' id '24fe55e7-63be-4845-b137-2f9714906c99' date '16 March 2011' time '10:45:00.577359744 am' author 'eem' ancestors ((id '9763a367-cfc4-4ef6-9ef5-64c77255c398')(id 'a4053f20-cb87-415d-aad3-3bb29b03724c')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id 'a2810aac-4423-6740-b70e-7e821b979cb4')) stepChildren ())) stepChildren ())(name 'VMMaker-oscog-IgorStasenko.54' message '- added disabling module loading support' id 'c98a0b6c-7f68-4af7-9012-85d3dfdf29ae' date '23 March 2011' time '5:30:42 pm' author 'IgorStasenko' ancestors ((id 'fb4c7e81-ea2e-1b45-a461-e382537797a0')) stepChildren ())) stepChildren ())(name 'VMMaker-oscog.dtl.56' message 'Add tests from VMMaker trunk to document various issues and verify presence of primitives.' id 'c1d30608-00e8-53b7-209a-34f7a46c1508' date '4 April 2011' time '10:06:00.292 pm' author 'dtl' ancestors ((name 'VMMaker-IgorStasenko.55' message '- merge with oscog.54' id '8d1251c2-47d7-4c19-8797-29ad9f8b47bd' date '4 April 2011' time '2:47:42 pm' author 'IgorStasenko' ancestors ((id '73c095bd-7fa5-4ef9-b9fc-60378cae64c7')(id 'c98a0b6c-7f68-4af7-9012-85d3dfdf29ae')) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker-oscog.dtl.57' message 'Generate C code for #repeat.Implementation by Igor Stasenko and Nicolas Cellier.' id 'c1d30608-04dd-53b7-209a-34f7a46c1508' date '11 April 2011' time '10:13:00.128392448 pm' author 'dtl' ancestors ((id 'c1d30608-00e8-53b7-209a-34f7a46c1508')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.56' message 'Fix snafu in cloneContext:.' id 'fbf17bd2-ddbc-488f-b70d-3b9ba8906430' date '26 April 2011' time '5:49:01.869261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.55' message 'Implement shallowCopy (primitiveClone) and copyFrom:(primitiveCopyObject) correctly for contexts.Change package nameto correct Monticello branch  convention.' id '315353fc-7f75-4b5b-8a43-3a636cb1aa0b' date '26 April 2011' time '11:47:04.167196224 am' author 'eem' ancestors ((id '73c095bd-7fa5-4ef9-b9fc-60378cae64c7')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-dtl.572' message 'Nicolas Cellier bitblt speedupsReference Mantis issues 7802 and 7803Mantis 7802: Fast-up BitBlt rgbAdd ruleCurrent implementation is naive:- adds component by component after shifting and masking- test each component for overflow- recompose the result by shifting/bit-oringIt is possible to process the components all at once instead of looping and it is possible to avoid the test, making a branch free algorithm:- in order to prevent overflowing over the next component, the highest bit of each component is cleared- the last bit of each component is then obtained by overflow free operation (bitXor: instead of +)- overflow condition is tested by some bitops, leaving a 1 on each highest which would overflow, 0 otherwise, which appropriately shifted and multiplied by component mask provide a mask to bitOr: for saturating without testing. Each component has nBits.The componentMask is 1<<nBits-1.The carryOverflowMask is a mask with high bit of each component set to 1.For example with 4 components of 3 bits,noting that 2r1001001001 * 2r111 -> 2r111111111111, we see that we can obtain such carryOverflowMask by a division 2r111111111111 / 2r111 -> 2r1001001001 and a shift << (nBits -1) -> 2r100100100100 Mantis 7803: Fast-up BitBlt alpha blending rulesThe alpha blending rules do apply on each ARGB component:- shift and mask to isolate the component- blend: ((1-alpha)*dst+(alpha*src))/255 (replace src by 16rFF for alpha channel)- or (1-alpha)*dst>>8+src in case of pre-multiplied source- saturate component at 16rFF in case of overflow for pre-multiplied source  (this normally does not happen if source is correctly pre-multiplied)- shift and bitOr: to recomposeEach component is on a byte.Since multiplication spans over 2 bytes, it''s possible to multiply 2 non adjacent components at once without overflowing on the other.Thus, algorithm is applied on _R_B and A_G_>>8.Division by 255 can be obtained by (x+1+(x>>8))>>8 for 0<=x<=16rFFFF.This can easily be extended on two non adjacent bytes.A reduction of about -25% of run time has been measured on an interpreter VM.Note that very same kind of bit trick has been applied on accelerated ARM BitBlt.See also VM-dev thread [Vm-dev] Little speed up of BitBlt alpha-blendinghttp://lists.squeakfoundation.org/pipermail/vm-dev/2013-December/014342.html' id '5131e418-62ae-4a1c-b6a2-d6a4989574f1' date '30 December 2013' time '1:22:00.617098112 pm' author 'dtl' ancestors ((name 'VMMaker.oscog-tpr.571' message 'Merged changes to add assorted Scratch pluguns and skiped from 566 to 570 - alwatys some possibility of a screwup when merging, so take care' id '3bc0517d-14b9-481c-b6ad-fd6f9752d8c1' date '26 December 2013' time '12:17:02.224032704 pm' author 'tpr' ancestors ((name 'VMMaker.oscog-eem.566' message 'Check-in experiment with different entry code based on method''smethodClass.  Idea is to eliminate extra jump if methodClass infersmethod can''t have immediate instances.  Experiment looks like itdoesn''t make enough difference to justify the complexity but thecode is worth recordingeven if it''ll be discarded later.Changes are:refactor entryCode into CogObjectRepresentation>>entryCodeForMethodClass:sendMissCall:Add AlignmentNopsTo opcode to allow filling with nops up to theno-check entry-point.' id 'd9776d75-8481-4378-92ff-c099be4b4e97' date '20 December 2013' time '3:28:00.846425152 pm' author 'eem' ancestors ((id 'aa89a317-26e5-404d-aaff-e2433a344379')) stepChildren ())(id '193cb05d-73a5-4efa-833f-126ca02695d8')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-tty.614' message 'Event Tests' id '3a992127-7256-4781-aa20-2294e5f686bb' date '15 February 2014' time '11:54:02.980392448 am' author 'tty' ancestors ((name 'VMMaker.oscog-tty.613' message 'Removed primitiveEvent infrastructure from HandMorph.Added  StackInterpreterSimulatorMorphicModel as a normal HandMorph eventListener.Added helper class StackInterpreterSimulatorEventTransformer to transform MorphicEvents back to format Simulator expects.TODO: KeyboardEvents.' id '4344ae57-e1c0-474d-904d-d9c649551292' date '13 February 2014' time '5:45:02.571425152 pm' author 'tty' ancestors ((id '54335642-7834-48fb-936d-b567fb9857b3')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.717' message 'Refactor the code around pushing register arguments andswitching between the Smalltalk and C stacks, moving theactual generators into backEnd (the special instance ofthe relevant CogAbstractInstruction subclass) .  This allowsCogARMInstruction to handle pushing the register args andhence handle the difference of having a link reg.Combine genSaveStackPointers & genLoadCStackPointersinto Cogit>>genSmalltalkToCStackSwitch.' id '357b0629-ccf0-45a8-92d9-a2c9a881f172' date '15 May 2014' time '10:55:01.25516352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.716' message 'Spur:Nuke old fit compact code.Nuke unused inst vars (lastSubdividedFreeChunk, highestObjects).Update SpurMemoryManager class comment.Make compact update statCompactPassCount.Check free space after rebuildFreeListsForPigCompact.A Spur CogTrunkVMMaker image got trashed on snapshot.The system needs more checking before it is safe to use.' id 'c2b5105c-9b6f-48b2-9208-b5520d3b6a02' date '13 May 2014' time '12:47:01.484 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.715' message 'And fix the hurried fix in VMMaker.oscog-eem.713.' id '113af7b7-74d5-4593-b954-b54dd3ee4850' date '10 May 2014' time '8:46:01.10916352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.714' message 'Get rid of the stupid validate macro hack.' id 'dd2b59a7-26ea-4c52-b953-8ca494015df5' date '10 May 2014' time '8:43:01.735 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.713' message 'Fix the regression introduced by VMMaker.oscog-eem.709.When "adding" a method marked <doNotImplement> makesure that any inherited version of the method is removed.The old code also removed methods that weren''t inherited.' id '5b3f6116-8cfd-4972-b9db-35af8de02111' date '10 May 2014' time '8:36:02.571425152 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.712' message 'Fix receiver of heapMapAtWord: and hence simulation of leakchecking.  Nuke the now unnecessary simulator redirect.In Spur32BitMMLECoSimulator>>heapMapAtWord: sendasInteger to coerce cog methods.' id '2f12e8dd-7da6-4358-9eb4-ba4782b7206d' date '9 May 2014' time '8:36:01.621130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.711' message 'Revise pigCompact to maintain the doubly-linked free listafter sweepToCoallesceFreeSpaceForPigCompactFrom:.This means pigCompact can now be repeated.Repeat pigCompact 3 times, which appears to compact well.This needs lots of profiling!!' id 'a8207038-3c80-4bb7-919a-7018c5ac3528' date '9 May 2014' time '4:11:03.884130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.710' message 'Spur:Move running of leak checker (which computes the leak map)to markObjects from clients and hence cure assert failuresduring GC in the Cogit.Revise unmarking and mapping duringeliminateAndFreeForwardersForPigCompact.  Instead ofa scavenge merely mapInterpreterOops and explicitly(via added) unmarkSurvivingObjectsForPigCompact.Fix slip in fUOASACFSFPC.Fix remapObj: to not copyAndForward: unless a scavengeis in progress.With these changes the Newspeak bootstrap runs tocompletion on the NS Spur Cog VM.' id '4941dccb-3db2-4b61-ab4e-55a912e9093b' date '9 May 2014' time '1:48:00.297032704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.709' message 'Slang:Fix (i.e. prevent) inlining of api methods in the Cogit used inthe CoInterpreter and vice verce.When "adding" a method marked <doNotImplement> makesure that any inherited version of the method is removed.Remove an obsolete def of CoInterpreter>>freeStart.' id 'c02c4c66-6d97-4c82-8c28-12766fc8b13d' date '9 May 2014' time '11:19:03.164032704 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.708' message 'Rename checkValidObjectReference: et al tocheckValidOopReference: et al (since that''s what they check)and add checkValidObjectReference: to check just that.Fix a translation-time return type clash indoubleExtendedDoAnythingBytecode' id '6258685a-cf1e-40dc-923a-e4027e4cf169' date '9 May 2014' time '11:14:01.479065408 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.707' message 'Fix the assert fail on pigCompact.  Since pastSpace is notvoided, pastSpace must be swept to follow forwarders.Refactor mapMachineCode to mapMachineCode: theGCModeand hence call mapMachineCode: GCModeFull ineliminateAndFreeForwardersFor[Fit|Pig]Compact.' id '47db026e-b2fc-49b3-9937-d35b926a9522' date '7 May 2014' time '10:28:01.023294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.706' message 'Spur:Fix the coallescing sweep in pig compact to start from thelowest of the first forwarder or the first free chunk.Do a tenuring scavenge to void eden in freeUnmarked-ObjectsAndSortAndCoalesceFreeSpaceForPigCompactto avoid any tenuring due to futureSpace overflow in theunmarking scavenge in eliminateAndFreeForwarders-ForPigCompact.  Do this by adding the MarkOnTenuretenuring criterion.  Change the use of shouldBeTenured:to allow it to be inlined into copyAndForward:.Add an assert to freeChunkWithBytes:at: to catchaccidental freeing of non-oldSpace.  RefactorSpurSegmentManager>>postSnapshot to not fall foul ofthis new assert.  Add a check to totalFreeListBytes to catchdouble freeing (double freeing was caused by tenuring inthe eAFFFPC scavenge growing memory to make room fortenuring, given free lists are not rebuilt at this point, andlater in eAFFFPC this memory being freed again).Don''t inline doScavenge: or scavengingGCTenuringIf:.Refactor eliminateAndFreeForwardersForFitCompact toextract the large loops.Add printForwarders for debugging.With these changes the StackInterpreter runs the Newspeakbootstrap to completion, albeit with one presumably bogusassert fail to do with a DependentsArray referring toforwarder contents (this to be fixed tomorrow).Cogit:Fix a double free bug in unlinkSendsOf:isMNUSelector:.Harmless cuz the result is only a bogus count of how manymethods freed.  Beef up the cog method integrity checkto verify a its methodObject is a CompiledMethod.Simulator:Fix breakpointing on plugin and plugin function load whenbreakSelector is nil.' id '6eba60e7-a131-4353-870a-b34e8230b701' date '6 May 2014' time '9:11:03.537130816 pm' author 'eem' ancestors ((name 'VMMaker.oscog-djm.705' message 'ARM FFI: Fix bug in passing structure argument in the case where a struct would normally be split between registers and stack, but because of prior coprocessor register candidiate args having been pushed on the stack, the structure should not be split but pushed entirely on the stack.' id '32b4b7b5-41ce-48aa-a789-93efbbd31f5f' date '6 May 2014' time '1:02:00.828032704 pm' author 'djm' ancestors ((name 'VMMaker.oscog-eem.704' message 'Slang: fix return types of float accessors (void).Spur: cast args to mem:cp:y: in compaction to aovid warning.' id '5a1a2624-b349-4d95-aeb3-097087219b4e' date '4 May 2014' time '5:45:00.210261632 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.703' message 'Fix stack printing when frameCallerContext ref is forwarded.Simulator:Fix breakpointing in ioLoadFunction:From:AccessorDepthInto:Allow breakpointing on plugin load.Fix str:n:cmp:' id '72bcfdab-bf50-4e10-a4d7-81c9cd88eccd' date '4 May 2014' time '5:22:00.591098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.702' message 'Oops!  Correct the collapsed generateWhile:loop:on:indent:which was missing the not operation.  IIABDFI :-(' id '2f753471-9a18-4f13-aaef-58ffb0702465' date '4 May 2014' time '9:16:03.626 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.701' message 'Spur:Fix bug in generated C for pigCompact.  If "free" is unsignedthen "free - self allocationUnit" is large when free is zero, somove subtraction to addition on other side of the comparison.Make sure all pointer comparisons in pigCompact are unsigned.Add forwardUnchecked:to: and use it to avoid the unnecessarystore check in forwarding during compaction.Correct the return type of bytesInObject: to sqInt.Looking good.  Snapshots are small at last.Slang:Fix indenting in while loops and sequential and and or exprs.Use aStream tab: level instead of level timesRepeat:.Collapse generateWhile[True|False]Loop:on:indent: onto a singlegenerateWhile:loop:on:indent:' id '92f5171c-4e3e-4113-bb82-05f92e8b7c82' date '3 May 2014' time '11:25:00.297065408 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.700' message 'Spur:Fix a mis-write bug in moveARunOfObjectsStartingAt:upTo:.comment out the high-frequency calls tocheckTraversableSortedFreeList and delete a bogus call of same.Simulator: toggle the breakpoint on fullDisplayUpdateSlang: Add a non-spur configurations generator' id 'c41a767a-567a-4812-8b38-572c84e18390' date '2 May 2014' time '11:24:01.40532704 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.699' message 'VM:Fix instantiation of large non-byet objects.  The old codefor sufficientSpaceToInstantiate:indexableSize: stupidlysubtracted BytesPerWord instead of ShiftForWord fromLongSizeNumBits in determining the max size (mea culpa).Slang: fix indent of expressions in do whiles.Spur:Add more asserts to pigCompact to help debug theedge case of compacting into the firstFreeChunk.Make nextInSortedFreeListLink:given: available as a C funcfor debugging.' id 'd19fe4fd-f2b0-4779-9ed6-7b9ea20c5255' date '2 May 2014' time '4:16:02.823359744 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.698' message 'And side-step Slang''s limitations with recursive method inlining.' id '11596eff-4a16-483c-a68b-5cddaf78a612' date '2 May 2014' time '1:40:01.03316352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.697' message 'Spur pig compact:Fix a bug in free list enumeration in pigCompact.sortedFreeListPairwiseReverseDo: must cope with the casewhere moving s run of objects alters the free list.Fix a bug in moveARunOfObjectsStartingAt:upTo: whichwould not move the first object if it was the only objectin a run.Fix a bug in freeUnmarkedObjectsAndSortAndCoalesceFreeSpaceForPigCompactwhich could leave a free object with a 0 slot count, whichfalls foul of the object enumeration invariant that a headerword must be all zeros (for catching wild missteps).Fix a bug in sweepToCoallesceFreeSpaceAndRebuildFreeListsForPigCompactwhich would cause it to miss lots of forwarders.VMMaker:Update generateAllSpurConfigurations to include Spur Cog Sista.' id 'af7829f5-a388-4a1e-8c9b-5b78abd46b67' date '2 May 2014' time '1:30:01.856196224 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.696' message 'Slang:Fix generation of expressions in while forever with breakand do while loops.  Hence rescue compilability of Spur VMs.Spur:Remove redundant test frommoveARunOfObjectsStartingAt:upTo:' id '5f0bc2e6-b921-48c2-8a95-86858a10bcac' date '1 May 2014' time '11:30:02.302392448 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.695' message 'Make sure the object representation class hierarchy is in theright order, superclass to subclass.' id 'b7ee76ce-807e-4f95-8065-b850143a0ced' date '1 May 2014' time '9:47:02.759 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.694' message 'Fix the CoInterpreterMT generation regression caused bymoving to the VMMaker image.Better comment NewObjectMemory class>>prepareToBeAddedToCodeGenerator:' id '5341b4ba-e0ba-4cd8-a041-4716689d8810' date '1 May 2014' time '9:16:02.070294336 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.693' message 'Eliminate the abuse of prepareToBeAddedToCodeGenerator:to remove superclass methods.  Make method conflictchecking use shouldIncludeMethodFor:selector: asnd allowoption: pragma methods to override methods in otherhierarchies, albeit with a warning.Either delete or simplify a whole lot of uglyprepareToBeAddedToCodeGenerator: hacks.Use the option: approach to organize the numRegArgsimplementations, which allows inlining and the necessarydead code elimination in CoInterpreter to avoid implementingthe register enilopmarts in SimpleStackBasedCogit.Fix slip bug in ObjectMemory>>isContextHeader:externalSetStackPageAndPointersForSuspendedContextOfProcess:must be marked <inline> to be reliably inlined in transferTo:/transfer:to: et al.' id 'b7928132-78c6-4cdb-b4f3-e47dd7336fa7' date '1 May 2014' time '8:33:00.05316352 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.692' message 'Fix the return type of convertToMachineCodeFrame:bcpc: tomatch the change to answer the absolute pc, not the relativepc of the backward jump done in VMMaker.oscog-eem.674.' id '16a360de-d597-4a2a-8d16-f6fa6af61760' date '30 April 2014' time '8:46:03.381098112 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.691' message 'Get the hack in VMMaker.oscog-eem.690 to work.  Need touse the right selector and need to merge properties cuznumregArgs should be an api method.' id 'b0b20002-0154-49db-938c-4e251f419472' date '30 April 2014' time '8:39:00.11616352 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.690' message 'Horrible hack to fix regression in inlining of numRegArgs dueto necessary refactoring of numRegArgs on adding the Spurobject representation.' id '1f1c7329-a51b-4b95-b7c1-dc6adc9c10dc' date '30 April 2014' time '8:00:00.813425152 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.689' message 'Spur:Implement "pig compact", a much more functional compactionalgorithm that works by doubly-linking free chunks in addressorder, therefore allowing e.g. easy enumeration of the objectsbetween the penultimate and ultimate free chunks.  Hence thealgorithm moves all the objects it can at the end of memoryto free chunks at lower addresses.  It is piggish for severalreasons:1. it is greedy, using parts of a free chunk, not looking for abest or perfect fit.2. it is greedy trying to move a run of objects at a time3. it deals with large objects ("pigs") by searching the free listfor a free chunk large enough to hold the pig.  (and whatconstitutes a pig remains to be tuned; currently it is 8 * theaverage object size.Write the totalFreeOldSpace to the image header immediatelyfollowing the size of the first segment.  This to allow betterdetermination of how much free space to allocate on startup.Use cCode:inSmalltalk: to encapsulate the printing of the gcstages, and delete the overrides in the simulator subclasses.Make sure the last bridge is marked to simplifycoallesceFreeChunk:Rename averageObjectSize to averageObjectSizeInBytes.Add printOopsFrom:to:General VM:Nuke unused writeImageFile:Fix a slip and a bug in printObjectsFrom:to:Add a convenience to open a multi-window browser on theSpur classes, and relevant allies.Cogit:Add inline pragmas to the concretize methods that were lacking them.' id '5cdb2e07-b8ad-48ca-9dc9-aa3b6ab22693' date '30 April 2014' time '5:57:03.298294336 pm' author 'eem' ancestors ((name 'VMMaker.oscog-djm.688' message 'Change dummyFloatFunction to loadFloatRegs since it is a better name. Define this function in a different C file (platforms/Cross/plugins/SqueakFFIPrims/sqFFIPlugin.c) so that C optimizer cannot optimize it away. This fixes a problem when calling out to functions taking float or double parameters when compiling with optimization level >0.' id '39f5e8fc-f8f0-43cc-89f4-eb61de29c7fb' date '29 April 2014' time '8:17:01.226065408 am' author 'djm' ancestors ((name 'VMMaker.oscog-eem.687' message 'Fix source paths in the Squeak VM config.  Exclude theFT2Plugin; it''s not robust enough to load and generate yet.' id '501501b0-dad7-4305-b25e-96ed74c92fd2' date '28 April 2014' time '2:56:03.445 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.686' message 'Fix the module name in ThreadedFFIPlugin.  It needs to answerthe generic name (SqueakFFIPrims), not the specific platformname (e.g. IA32FFIPlugin) under which each plugin is generated.' id 'ac4e60d6-a8f2-4bf4-bb5d-e21f243310fa' date '28 April 2014' time '10:18:01.942098112 am' author 'eem' ancestors ((id '07bc1e83-6566-4de0-af79-d6c7874ffcdd')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.1089' message 'Implement genRestoreRegs and improve comments.Use = instead of == in genRestoreRegsExcept:' id '6d131d84-5bb4-469d-984b-8750f8432147' date '12 March 2015' time '1:49:08.029 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1088' message 'Cogit:Fix asserts around missOffset for ARM (a LinkRegissue).  Implement callInstructionByteSize for ARM.Fix LinkReg pushing in method abort calls; since abortsequences always push it, tramspolines don''t need to.(hence may be able to remove pushLinkReg: arg fromtrampoline generation routines soon).Fix LinkReg management in genUpArrowReturn; LinkReg is/not/ pushed in leaf routines (hence will have to save andrestore it around calls such as store checks in framelessmethods).' id '8298a649-68d4-4bac-ace3-46649a076245' date '11 March 2015' time '8:17:26.624 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1087' message 'Speed up normalize methods in LargeIntegersPluginby cacheing result of firstIndexableField.Simplify integer conversion routines by addingbyteSizeOfBytes: which assumes argument isbyte indexable (as LargeIntegers are).  Fix somesimulation regressions in the conversion routines.Make sure they consistently answer 0 on failure.Use 4-byte access where possible.Remove use of popI nteger in AsFloat andinteger comparison primitives (popStack idiom isinefficient since multiplke writes as opposed to thesingle write in the pop:thenPush: idiom).Fix simulation regression in new primitiveMakePoint.Revise SpurMemoryManager>>isClassOfNonImm:equalTo:compactClassIndex: forbetter dead code elimination.' id 'ec6b2e65-73ca-4827-8af7-7b2dc7b0d581' date '11 March 2015' time '8:09:01.528 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1086' message 'Simulation:Fix regression in simulator''s isScreenSize.Implement simulation of translated primitives thatdon''t access inst vars (the bitmap (de)compressionand string primitives).  So that the machinery canmatch actual selectors with primitive selectorshave a TMethod remember the original selector ofa translated primitive TMethod in properties.Add an assert to InterpreterStackPages>>longAt:put:to prevent storing garbage there-in when there''sa bug.' id '799f97ec-7ee7-4b82-adf2-43302136c3f8' date '11 March 2015' time '7:58:35.196 pm' author 'eem' ancestors ((id 'bd028125-317e-40fe-ac8c-461e7f59dbb6')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-rmacnak.1160' message 'Implement outer sends as clean sends just like implicit receiver sends. Add ObjectRepresentation>>illegalClassTag and use it for initializing and unlinking implicit and outer sends.' id '26e10c05-71b4-46ee-b067-f15df51e39dd' date '4 April 2015' time '4:42:13.581 pm' author 'rmacnak' ancestors ((id '14bcce0c-7b30-4b18-8d60-ed5a3a27b18a')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id 'f6eaf06e-ed76-43ab-a517-891ecb31f637')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-cb.1209' message '- Added convenience method to move constants to register to avoid having to write: (objectRepresentation shouldAnnotateObjectReference: constant)		ifTrue: [ (self annotate: (self MoveCw: constant R: register) objRef: constant) ]		ifFalse: [ self MoveCq: constant R: register ]in basically 30 places in the JIT.- Rewrote the logic of #==. It now dispatches to the ObjectRepresentation 	In V3, changed so that the comparison uses CmpCqR, CmpCwR or CmpRR depending on the operands.	In Spur, changed so that the comparison is done before following the forwarders, hence following the forwarders only if the objects were not equals, theoretically only in 50% of the cases.	The V3 VM works fine. The Spur VM is buggy because of the new #== implementation. Eliot and I will fix it right now.' id '5f147adb-3eca-40ab-9da3-445de7c79182' date '17 April 2015' time '3:45:03.628 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1208' message 'empty log messageFixed a bug where the JIT would resolve == between two literals that could be becomed.' id '9111283d-f29a-4d77-8c95-f8150f9358ca' date '17 April 2015' time '9:22:27.991 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1207' message 'Fixed the dead code elimination so that now it eliminates an unconditionnal branch over a nop in case of inlined branches such as #== then branch or inlined comparison then branch.Added a method for in-image compilation.' id '67297437-fcdb-41f7-a9cd-949fff51f29b' date '16 April 2015' time '6:12:21.174 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1206' message 'first attempt to fix the sista trap trampoline.Now expect the context trapping to have the object which traps on stack. Does not require anymore arguments passed by registers.' id '69c4d035-4901-4062-ab70-9e204bc53c7c' date '16 April 2015' time '4:22:03.426 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1205' message 'Fix interpreter code for jumpIfNotInstanceOfOrPop' id '259ea5ad-fd36-4970-b219-7715a0516627' date '16 April 2015' time '4:02:57.654 pm' author 'cb' ancestors ((id '45d34c98-fee8-4874-95b4-842de9ba8cbc')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.1317' message 'Cogit:Fix the performance regression on x86 in r3308VMMaker.oscog-eem.1178 through the use of the XCHGinstruction in CogIA32Compiler>>genPushRegisterArgsForNumArgs:.Since SendNumArgsReg is not live with small arity sendsit can be used instead of TempReg.Replace uses of the magic constant 2 withNumSendTrampolines - 2 (actually <= 2 =>< (NumSendTrampolines - 1)) where appropriate. HenceNumSendTrampolines moved to CogCompilationConstants.Fix bug on ARM with pc-relative addressing. pc-relativeaddressing can only be used within a method because of relocation.The old code would use pc-relative addressing to accesstrampolines for methods close to the trampolines and thennot for methods further away, causing changes in the codegenerated by compileInterpreterPrimitive:.To support this, rationalize the PIC compilation code, being sureto initialize and concretize methodLabel at the start of each PIC.Don''t bother to pass PIC size as a parameter given we havePIC-specific header-filling routines now.Spur:Firm up the checkTraversableSortedFreeList assert routine tocheck that the list is traversable from lastFreeChunk, not just firstFreeChunk.Slang:Make promoteArithmeticTypes:and: obey C99''s promotion rulesmore closely in an effort to generate more stable sources.Types were flipping between sqInt & usqInt for variables thatwere assigned both types, so that one generation would produceone type and a subsequent one another (Set/Dictionary hashing?).Simulation/In-image Compilation:Fix varBaseAddress calculations for in-image compilation so thatit jives with real compilation.Allow setting of recordPrimTrace through initializationOptions.' id 'a7e082b5-1ad8-42ef-84cc-0079605c8440' date '20 May 2015' time '9:56:04.05 pm' author 'eem' ancestors ((id 'ac16258c-3444-49a0-957a-7b02871f8682')) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.1318' message 'Spur:Fix bad C bug in nextInSortedFreeListLink:given:.  The resulttype must be usqInt, otherwise the list can be wronglyterminated and the second compaction pass can segfault.Change printFreeChunk:isNextChunk: toprintFreeChunk:printAsTreeNode:, and use it to implementprintSortedFreeList.Make checkTraversableSortedFreeList robust in presence ofempty sorted free list.' id 'dc8819e1-ef78-459c-9ee5-7f67a285f5d2' date '21 May 2015' time '12:23:05.452 pm' author 'eem' ancestors ((id 'a7e082b5-1ad8-42ef-84cc-0079605c8440')) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.1319' message 'Fix generation of the closed PIC prototype whenusing pc-relative addressing (on ARMv5).' id '797f904f-0e7c-42b8-bf53-aa40ee592b13' date '21 May 2015' time '6:00:53.388 pm' author 'eem' ancestors ((id 'dc8819e1-ef78-459c-9ee5-7f67a285f5d2')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.1412' message 'P{rovide hook for ARM compiler to declare the divmod functions.' id '9ad800be-824a-428d-a1ce-e71b7619aa00' date '13 July 2015' time '12:11:15.513 pm' author 'eem' ancestors ((id 'f10b2335-024d-4641-8c0f-fb88f7dccafc')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-tpr.1544' message 'A few changes to make building the Balloon3D plugin work ok for both cog and trunk vmmaker.Since the pluginClassesUptO: & buildCodegeneratorUpTo: were simply ignoringthe argument, stop bothering to send it. Left a stub version in case other plugin code uses it, with a depracation warning.Builds a vm that compiles and runs on Pi' id '22ab52d9-be46-4ff2-b6d8-c0fe0b7a3032' date '3 December 2015' time '11:43:44.105 am' author 'tpr' ancestors ((id '7ab33230-086d-4b21-a335-26f16100a3b4')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-cb.1579' message 'Added the option so it is not included in the compilation as this method can''t compile to C.' id '3e053d5a-393a-4f63-ba6e-2322be747aa9' date '11 December 2015' time '3:22:35.575 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1578' message 'Initial commit where I added immutability in the VW''s sense to the Cog VM.Most code is under the IMMUTABILITY compilation flag and does not modify the regular VM. We note the exception of some machine code store generation that were simplified to support immutability. I checked the Spur and non Spur Cog VM should work fine.The immutability callback is expected to return without pushing any value after the store (the callback needs to manually do the failed store if needed). This was more convenient in the case of popInto as execution resumes after the popInto instruction.TODO:- make all the needed store instructions mapped (isMapped) in Cogit. Maybe a better way than what I started using isMappedIfImmutable as Eliot suggested.' id '71e41199-b2b9-4714-84d9-60c473e7a154' date '11 December 2015' time '3:04:40.445 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1536' message 'Made explicit the immutability check' id '1b6a7606-f895-46b8-bf9a-3a77ba672d3a' date '30 November 2015' time '5:02:31.25 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1535' message 'empty log message' id '9b452bbf-85dc-4e62-98d6-88de36844e49' date '30 November 2015' time '4:06:05.881 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1534' message 'fixed things' id '447454d4-fa7f-4fe3-90be-9f49e45e4ff4' date '30 November 2015' time '4:02:43.894 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1533' message 'Added immutability' id '9c8e50e7-338a-487a-b2bc-b53097615c29' date '26 November 2015' time '6:04:00.345 pm' author 'cb' ancestors ((id '20303656-4854-4e5b-8bcd-eeff8cf5d262')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id '89d1673b-bb42-4cc1-a5c7-57d047cc4520')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.1679' message 'And revert the sort order regression in the last commit to not disturb the generated source unnecessarily.' id 'dac7e09c-8ee4-4fee-bd93-9cdcb7acb992' date '13 February 2016' time '1:08:25.162285 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1678' message 'The plugin export table also needs to use conditional inclusion of conditionally compiled functions.Use cFunctionNameFor: in computing the function names for the export table.' id '34356cdc-f0b4-47bc-a22d-60f6030890f9' date '13 February 2016' time '1:01:06.083634 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1677' message 'Slang:Don''t waste effort changing from symbols to strings when constructing TDefineNodes.Change the interpreter proxy function dereference code to use carriage-return-last necessitated by the new optional declaration of functions prototype generation introduced in VMMaker.oscog-eem.1675.' id '7056bb77-6aa0-4cb6-aa6c-cd921c231d37' date '13 February 2016' time '6:04:44.780067 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1676' message 'NewspeakVM: Don''t use cppIf: #NewspeakVM in VM code.  It is appropriate only in plugin code.  VM code should use the NewspeakVM variable from VMBasicConstants.Slang:Fix nilOrBooleanConditionFor: to also work for symbol arguments (such as #Newspeak).  Emit a warning if a symbol is used in VM code when a variable also exists and the symbol/variable is not one that is defined at compile time.Provide an abstraction for namesDefinedAtCompileTime to avoid the #includes: call that existed in all clients.' id '21db194f-99da-4bb8-b89e-3101d8f6f498' date '13 February 2016' time '4:36:28.183629 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1675' message 'IMMUTABILITY:Fix the declaration/definition of ceCannotAssignTo:withIndex:valueToAssign: which needs to be included, but only if -DIMMUTABILITY=1.  So modify Slang to output #if FOO && !BAR code around functions that include option: pragmas whose arguments are in namesDefinedAtCompileTime.Tim, Esteban, I''m committing this so I can build new VMs now.  I can''t figure out if Esteban''s changes for the IA32ABI plugin are correct yet (not enough brain power), but I can build with the source I generate, so I''m going to commit, generate source, build new VMs and then merge with your changes.  Apologies.' id '93ae77a3-3832-4364-83f3-531823c9bd31' date '12 February 2016' time '11:59:28.202137 am' author 'eem' ancestors ((id '36dea99c-e7f7-4ff4-a430-99a8ad340d36')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.1680' message 'Spur.Fix https://pharo.fogbugz.com/f/cases/17536/VM-Crash-when-adding-an-iVar-to-a-subclass-of-SystemAnnouncement.When weaklings (and when ephemerons) are scan-marked forwarders must be coped with.' id '6fe34e1e-a5e0-4966-a2cd-3f21ccb0bde9' date '16 February 2016' time '4:05:15.580798 pm' author 'eem' ancestors ((id 'dac7e09c-8ee4-4fee-bd93-9cdcb7acb992')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-nice.1823' message 'Merge the LargeIntegersPlugin acceleration for type checking (VMMaker.oscog-nice.1813).Add the missing simulation hooks for Spur.These changes require svn sources for platforms/Cross/vm/sqVirtualMemory.[ch] rev 3673' id 'e93f8c0f-a7f9-409d-ac57-f8ae88bb4342' date '20 April 2016' time '2:07:36.545 am' author 'nice' ancestors ((id 'f18408b3-d8bb-4ac7-9d7d-b37ace026619')(name 'VMMaker.oscog-nice.1813' message 'Revert elimination of type specifications for LargeIntegersPlugin.Instead, provide a bunch of Integer type checking.- isIntegerObject: <=> isMemberOf: SmallInteger (already existing)- isKindOfInteger: <=> isKindOf: Integer- isLargeIntegerObject= <=> isKindOf: LargePositiveInteger (Squeak) or LargeInteger (Pharo)- isLargePositiveIntegerObject: <=> isMemberOf: LargePositiveInteger- isLargeNegativeIntegerObject: <=> isMemberOf: LargeNegativeIntegerNote that this will require a change of svn source for platforms/Cross/vm/sqVirtalMachine.[ch]' id '9ce7e2b2-2956-4228-9744-345c61a693ed' date '20 April 2016' time '1:02:48.617 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1812' message 'Revisit LargeIntegersPlugin and suppress the is:KindOf: way of testing if oops are kind of Integer.The is for the benefit of primitive speed.' id '7e94561e-6dca-48d9-99e6-206c528b632c' date '17 April 2016' time '12:34:58.361 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.1811' message 'Demonstrate how faster could a LargeIntegersPlugin primitive be if only it would not resort to naive (interpreterProxy is: oop KindOf: #Integer).Up to twice faster.' id '71c9a6ca-9f1c-4def-90c8-37f8954f87d7' date '16 April 2016' time '11:56:26.526 pm' author 'nice' ancestors ((id '2e5fb6e7-e3a1-44ce-86ed-3a699b5bfc8f')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-nice.1911' message 'Use same FileDirectory tricks as Cog* for Stack* generationThis way we can generate sources on windows (with recent trunk corrections for pathFromURI:).Don''t put a trailing / to ''../''. in VMMaker initialization.Indeed, some FileDirectory hacks work only for ''..''For example, (FileDirectory on: ''..'') is ok, (FileDirectory on: ''../'') is not.Correct the prototype of genDoubleFailIfZeroArgRcvr:arg:It''s used as a function taking int, not #sqIntSee #genDoubleArithmetic:preOpCheck: and #genDoubleArithmetic:preOpCheck:boxed: for 64bits' id '76ca83f3-8f11-fd4a-a9c4-5dd8b907d737' date '26 July 2016' time '12:34:16.863784 am' author 'nice' ancestors ((id 'd582738f-7126-49ca-9679-36e6995e6f2d')) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-RonieSalgado.1759' message 'I added the separate namespaces for different instructions.' id '73162cf1-9968-4866-88f4-8cc73071a2f5' date '8 August 2016' time '8:33:06.330753 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1758' message 'I fixed a stupid error that I made with the Spur object model.' id 'ee2d5e98-0f5e-45eb-842c-e717307dd7e4' date '13 June 2016' time '5:19:34.599903 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1757' message 'I added some missing instructions for Lowcode.' id '027460c5-f1a3-4b8b-8bad-cf620042f014' date '6 June 2016' time '12:10:07.581924 am' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1756' message 'I fixed problems related to managing the native stack.I added two slots for special objects for Lowcode. - A context marking object, because I was not able to find a single bit available in the stack. - A native context class.I fixed a bug in the code generation for getting the first field pointer of an object when using Spur.' id 'a90382e8-fa3b-47c7-b77c-f3bea46ea824' date '31 May 2016' time '10:06:14.083478 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1755' message 'I fixed a stupid bug.' id '4ca8de0d-5baa-407d-a392-29c8a4fe7552' date '26 May 2016' time '4:42:33.277094 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1754' message 'I added more Lowcode instructions for floating point arithmetics.' id '18eb44a4-b278-49cc-94fb-486ca6265d1b' date '9 May 2016' time '12:09:36.913039 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1753' message 'I implemented the support for floating point constants. I added trampolines for floating point arguments.' id '5f8f65a7-856a-494d-b0b7-5fa57dd3625f' date '2 May 2016' time '4:31:08.151948 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1752' message 'I added the implementations of the lowcode instructions.' id 'b5f7d168-6f19-417d-86fc-8013fdd8393a' date '1 May 2016' time '9:03:10.881383 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1751' message 'I added the secondary native stack to the jit.' id 'bb3f0f33-fd6b-45a8-947c-97e41f7a11d7' date '30 April 2016' time '6:37:59.932611 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1750' message 'I fixed some instructions that I added.' id '2b9b3b4e-4de0-4cf0-82d4-08b9f4618004' date '30 April 2016' time '5:18:28.047995 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1749' message 'I am starting to add the lowcode support to the JIT.' id 'ccf6e454-6bd4-455a-b86e-ce9611c0d6b0' date '30 April 2016' time '5:07:14.215425 pm' author 'RonieSalgado' ancestors ((name 'VMMaker.oscog-RonieSalgado.1748' message 'I the lowcode implementation to the StackInterpreter.' id '127a82f7-c7ff-4aba-9107-ba91b8d124f1' date '29 April 2016' time '12:42:58.06898 pm' author 'RonieSalgado' ancestors ((id '1b765c2a-8d50-4187-8dc2-216c4556a755')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-eem.1950' message 'Fix Roni''s callback fix for the Cogit.Add MoveRA32 and MoveA32R support for Sista on x64.' id 'b4089b49-1494-49d2-8966-57cba5c92194' date '7 September 2016' time '3:31:10.027268 pm' author 'eem' ancestors ((name 'VMMaker.oscog-rsf.1949' message 'Fix a callback bug that was triggered when using multiples bytecode sets.' id '535f71f9-3f14-4e9f-9c50-73ac9fa568ef' date '7 September 2016' time '3:10:29.660502 pm' author 'rsf' ancestors ((name 'VMMaker.oscog-eem.1948' message 'Fix off-by-one error in an assert' id '7725d8e2-28a4-4f42-9231-1df18e655857' date '7 September 2016' time '2:25:30.049917 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1947' message 'Fix marryFrame:SP:copyTemps: for full blocks; the closureOrNil field must still be set.  Add an assert to primitiveFindNextUnwindContext that caught a side-effect of the bug.Eliminate some warnings in genPrimitiveShallowCopy.Move the abort for loading SqueakFFIPrims later in the method.' id '602f26ce-e176-44a7-be01-ae589e1de1c4' date '7 September 2016' time '1:44:31.485496 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1946' message 'Fix Slang bug that misgenerated the macros for the full block entry offsets.Add some facade machinery for the new full block check asserts.' id '5d49f2e2-77f3-4f4d-877b-b3fecceda04e' date '6 September 2016' time '7:25:45.714008 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1945' message 'Revise the two asserts in the previous commit to use isOopCompiledMethod: to be more robust.Add print cog methods with method and move simulator window menu single step command to be with the other breakpoint operations.' id 'f7150c35-fa20-4559-8baa-90948c71df43' date '6 September 2016' time '6:22:08.72066 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1944' message 'Added assertion ensuring that when a method is jitted, the compiled code jitted is a compiled method and when a block is jitted, the compiled code jitted is a compiled block.' id '8a25f110-e70d-4ba3-b7b5-c36af4934c16' date '6 September 2016' time '5:25:54.75903 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1943' message 'testBcToBc is improved to to test instructions only mapped in blocks.StackDepthFinder is improved to support nlr in well aligned compiledBlock compiled to machine code (in this case the mcpc to bcpc mapping maps the las bcpc+1 and last mcpc + 1)Remvoe two type annotations that were not used any more.' id '3b8e2d0c-b41c-4f15-833d-a56b8d6256bf' date '6 September 2016' time '5:10:02.198185 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1942' message 'Fix disassembly of non-local returns, including the map entries.  These are associated with the address following a non-local return call and so may actually be associated with the address of the following block method (rare cuz embedded block method headers are aligned on an 8 byte boundary).' id '85b22cc1-24ba-43e0-9f93-2ba18fe8554e' date '6 September 2016' time '12:17:18.340784 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1941' message 'Improve stack backtrace printing for full blocks.' id 'ccc9d9be-c2f0-437a-bdfe-13dfc9c7225c' date '6 September 2016' time '10:06:17.574 am' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1940' message 'disabled 2 paths compiltion on full blocks.Improved an assertion.' id '2c5c4513-a2d7-4f93-ab3a-168bb35b52c9' date '5 September 2016' time '4:30:12.516872 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1939' message 'Now have frame building for frameless fullblock working.It''s not clear what happens for frameless block with only a copied, temp or arg.' id '219cd49b-a063-4099-90ef-596b3419bfb6' date '5 September 2016' time '3:58:55.398749 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1938' message 'Fix Slang bug that mistranslated genGetActiveContextNumArgs:large:inBlock:.Pass address of block start created in StackToRegisterMappingCogit>>compileFullBlockMethodFrameBuild:' id '6a812714-7058-45ab-8429-2adf42078387' date '5 September 2016' time '3:32:52.115785 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1937' message 'More full block support.Find the home of a full block for context printing. Fix opc mapping for full block closures (mustMapMachineCodePC:context:).In the Cogit change inBlock to be an integer value, 0 for methods, 1 for vannilla blocks and 2 for full blocks (to reuce the amount of refactoring now and when removing vanilla block support some time in the future).Add trampolines for creating small and large full block contexts in the Spur object representation.Get frameless full block prolog generation more correct than it was ;-)' id '008acbc6-1023-4f2c-a97a-5449ff1acfbb' date '5 September 2016' time '3:02:50.857506 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1936' message 'Added a deny to ensure the block can be frameless. Works both for blocks and full blocks.' id 'a0fcd00d-b0e0-4a17-841c-f90144c91fe4' date '5 September 2016' time '2:51:19.995237 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1935' message 'Fixes related to Immutability / read-only objects:- weak structures can''t be mmutable- primitiveStringReplace fails if the receier is immutable only if it attempts to mutate something.' id '9bf8b308-8e98-44bf-a054-abcd22177339' date '5 September 2016' time '2:20:00.894774 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1934' message 'Re-enabled full block compilation to machine code.Fixes related to bc to mc pc mapping in full blockMade stack check assert more robust.Added convenience to simulate Pharo images.' id 'efe94566-a80f-410f-9032-ca403fc2ce05' date '5 September 2016' time '10:45:14.790485 am' author 'cb' ancestors ((name 'VMMaker.oscog-nice.1933' message 'Fix incorrect type inferencing for asUnsignedLongLong which causes a bug in the v3 format image (in fetchLong64:ofObject:).In this case, type inferencing is used for correct unsigned casting before left shifting.TODO: verify that all selectors translated via initializeCTranslationDictionary have correct type inferencing in returnTypeForSend:in:ifNil:' id '18f1dc32-84e8-43aa-baba-937ea911b845' date '3 September 2016' time '3:34:34.796713 pm' author 'nice' ancestors ((name 'VMMaker.oscog-cb.1932' message 'The jumpIfNotInstanceOfOrPop bytecode was interesting but hard to tackle in many places, leading to hard to write assertion in the JIT.I''ve changed it so that it now always consumes the top of the stack, jumping if the top of the stack is not an instance of one of the class specified in the literal.This way that bytecode can also be used easily to optimize PICs.' id '9d80a630-31aa-40dc-9b38-917293281995' date '2 September 2016' time '11:24:18.041558 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1931' message 'Fixed machine code generation of UByteNumBytes' id '48d66455-0094-45bf-9cc9-a55015674de7' date '1 September 2016' time '6:27:59.493903 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1930' message 'Implement compacting CPICs on method zone reclamation rather than freeing CPICs that have one or more freed entries.  This for more stable analysis in the Sista VM.Make MaxCPICCases a constant (class var) rather thnan a variable.' id 'e01f4bfc-2f0a-40e1-9491-d744cde15034' date '1 September 2016' time '5:40:11.487941 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1929' message 'When a loop is taken enough time to trigger jit compilation, it needs in the SistaV1 bytecode set to check if the activation is a full block and call the correct JIT compiler method if this is the case.' id '201ac61a-7b23-4bb6-a0bc-840ee3e8e89a' date '1 September 2016' time '5:24:44.893576 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1928' message 'SistaV1 bytecode set needs to define its primitive error code bytecode (long temporary store bytecode)' id 'f7ed563d-1f16-4370-9771-7a22949f676f' date '31 August 2016' time '4:18:24.91135 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1927' message 'Now that the trampoline for context inst var store can be called on single contexts, we need to update the trampoline to work with single contexts' id 'd00bfc22-488e-430c-a9f6-90cbaeabdb23' date '31 August 2016' time '1:48:20.563669 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1926' message 'Comment the register saving convention for  the context inst var access trampolines in the JIT.' id 'e25b6c8f-9742-4011-a948-d27ae483a098' date '31 August 2016' time '12:34:22.439536 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1925' message 'assertion improvement to make the simulator more robust.Added immutability check in maybe context object store in jitted code.Added an annotation for inst var store in the SistaV1 bytecode set to tip the JIT if the mutated object may be a context or not.StackSpur VM are now generated with dual bytecode set support.' id 'b77be8d3-8f56-4e47-a88f-960dc3050d55' date '31 August 2016' time '1:27:47.355435 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1924' message 'quick fix on the push nil functions for the sista bytecode set.' id 'da9f563b-03b1-4925-9834-11f3d0dcb5cc' date '30 August 2016' time '2:08:20.49763 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1923' message 'Revert accidental commit.' id '7f3c5884-2c3f-440a-a84d-d83aaf74bf0c' date '30 August 2016' time '12:55:39.968766 pm' author 'eem' ancestors ((name 'VMMaker.oscog-cb.1922' message 'Added support from error code while scanning block bodies.' id '7c2ac8b2-b5ad-49ec-a845-9044ff84b144' date '30 August 2016' time '1:48:41.283379 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1921' message 'Improving assert used during debugging bytecode sets.' id '2ecc27e4-cf4e-455e-941a-6993d9470dfe' date '30 August 2016' time '11:05:36.920661 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1920' message 'This commit makes a difference between the usage of the sistaV1 bytecode set and the Sista VM. It is now possible to compile the VM with the SistaV1 bytecode set but without the SistaVM option. This way, one can use and stabilize:- directed super sends- full block closures without using unsafe operations and traps. I believe we''ll migrate to the sista runtime in multiple steps, and the first step is to use those features and have images compatible with those features without runtime optimizations.The SistaV1 bytecode set allows to use directed super send and full block closures. Enabling the bytecode set enables those features. (SistaV1BytecodeSet option)The SistaVM option, combined with SistaCogit, enables the profiling counters, the unsafe operations and traps. If disabled, the bytecodes from the SistaV1 bytecode set corresponding to traps or unsafe operations are considered unknown bytecodes.All unsafe operations and traps related JIT code is now in SistaCogit. Those bytecodes are considered as unknown bytecodes in superclasses.I''ve also changed some flag logic, as the flag marking optimized method is bit 16 (previously upper literal bit) and not the flag bit.' id '060760b1-6719-4e5b-b44d-55922703feda' date '29 August 2016' time '11:17:00.977074 am' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1919' message 'fixed bug in scanner related to twoPath methods' id '00a8dd2a-bc8d-4552-b400-be781c8aabec' date '17 August 2016' time '4:10:53.445475 pm' author 'cb' ancestors ((name 'VMMaker.oscog-cb.1918' message 'fixed a store check minor detail in sista vMsfixed branches from C runtime to cppIf' id 'd3b3d964-2664-4ebb-b2e7-0a21cb23ddfe' date '17 August 2016' time '3:26:11.629947 pm' author 'cb' ancestors ((name 'VMMaker.oscog-eem.1917' message 'Make an assert more robust (for Spur32BitPreen, soon to appear in Cog).' id '4c462e7a-55b3-428e-bb94-1fb78563ac85' date '15 August 2016' time '7:43:55.821635 pm' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1916' message 'Fix Spur machine-code shallowCopy for 64-bits.  Enable it for 32-bits.Improve printContext: to include the Cog method if it exists.Spur:Add a facility to record where scavenged objects originated so that one can track back to find a previous location of a scavenged object.Improve the CoInterpreter simulator''s utilitiesMenu.  Fix printHexnp: to accept a CogMethod proxy.' id 'd6becd10-57b4-4448-9af1-ed75251fa141' date '15 August 2016' time '11:34:30.068659 am' author 'eem' ancestors ((name 'VMMaker.oscog-eem.1915' message 'Spur:Implement machine-code shallowCopy for Spur, excepting 0 slot objects, contexts, methods and objects with overflow size.Fix the commentary for Xbr, X16r & X32r addressing modes.Make sure that markAndTrace: is never inlined.N.B. The 64-bit Cogit appears to be broken (an MNU early on, followed by a 0 arg to value: later in trying to report the MNU).  No time to fix it now.  When did it break I wonder?' id 'fca185a9-541b-461c-9dd2-3c4dca0127d1' date '11 August 2016' time '1:49:36.374918 pm' author 'eem' ancestors ((id 'aebe2acd-39a2-49da-a2b8-c1ba08392137')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-nice.1977' message 'Improve portability to LLP64 by using usqInt rather than unsigned long where it makes sense.It''s not the case of integer containing target machine pointer that should use usqIntptr_t for the eventual future case when image wordSize differs from machine word size (32bits image on 64bits VM).Currently, on Spur, LLP64 apart, usqInt and ''unsigned long'' do match, and longAt: longAtPointer: in fact do return a sqInt (see platforms/cross/vm/sqMemory.h).So for now:- a single sista counter should fit into a usqInt.- an immediate character fits into a usqInt.- maxOldSpaceSize is not going to exeeed addressable space in the image, so it should allways fit into a usqInt too.' id '3612c2e9-55ee-401d-bef6-7a62d7ab5dc9' date '4 November 2016' time '8:45:40.263858 pm' author 'nice' ancestors ((id '21cb3e48-ac24-420a-9d0d-75f4b84ce1c9')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'VMMaker.oscog-nice.2003' message 'Retract the choice of cppIf: #WIN64 for x64 ABI testing ''cause it''s not simulator friendly.Instead use a boolean SysV which is OK both in generated code and simulator (a bit less explicit than ABI = #SysV, but it works better).' id 'f05dde07-c324-452a-a507-7795ad594dca' date '29 November 2016' time '2:22:55.009541 am' author 'nice' ancestors ((name 'VMMaker.oscog-nice.2002' message 'Assign a different register usage for Win64 ABI.TODO:By now, there is no mean to support concurrent code generation for SysV and Win64 x64 ABI.To generate a cogitx64.c compatible with Win64 ABI, one must hack (overwrite) the ABI class variable in CogX64Compiler with anything but #SysV, then regenerate cog spur 64 sources.We will have to generate the header for both ABI with appropriate compiler directives.' id 'ffc96e99-198e-482a-93f5-51d242f4713f' date '27 November 2016' time '7:56:34.217522 pm' author 'nice' ancestors ((name 'VMMaker.oscog-nice.2001' message 'Correctly marshal the trampoline arguments for Win64 x64 ABI.The registers for passing first 4 integer/pointer parameters are RCX, RDX, R8, R9.More over, it''s necessary to reserve shadow space on the stack so that the callee can save those 4 registers even when there is less than 4.Consequently, it''s mandatory for cogit to invoke genRemoveNArgsFromStack: even when numArgs = 0, and let the backEnd decide what to do.Correct a typo in cResultRegister comment.' id 'ec391a53-4fcd-4591-a8e7-18058ef51295' date '27 November 2016' time '7:17:07.355232 pm' author 'nice' ancestors ((id '7fa7f632-9ec2-4121-a764-e6ca3280a679')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())